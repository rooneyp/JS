package {
    import org.osmf.media.*;
    import rte.osmf.*;
    import org.osmf.traits.*;
    import rte.osmf.ad.*;
    import org.osmf.elements.*;
    import org.osmf.net.*;
    import __AS3__.vec.*;

    public class C {

        public static function recurseForProxies(element:MediaElement):MediaElement{
            try {
                if ((((element is ProxyElement)) && ((element as ProxyElement).proxiedElement))){
                    var _local3 = recurseForProxies((element as ProxyElement).proxiedElement);
                    return (_local3);
                };
                if ((((element is SerialElement)) && ((element as SerialElement).currentChild))){
                    var _local4 = recurseForProxies((element as SerialElement).currentChild);
                    return (_local4);
                };
            } catch(e:Error) {
                var _local5 = element;
                return (_local5);
            };
            return (element);
        }
        public static function recurseForDurationElement(element:MediaElement):DurationElement{
            if ((element is DurationElement)){
                return ((element as DurationElement));
            };
            if ((element is ProxyElement)){
                return (recurseForDurationElement((element as ProxyElement).proxiedElement));
            };
            if ((element is SerialElement)){
                return (recurseForDurationElement((element as SerialElement).currentChild));
            };
            return (null);
        }
        public static function recurseForVideoElement(element:MediaElement):LightweightVideoElement{
            if ((element is LightweightVideoElement)){
                return ((element as LightweightVideoElement));
            };
            if ((element is ProxyElement)){
                return (recurseForVideoElement((element as ProxyElement).proxiedElement));
            };
            if ((element is SerialElement)){
                return (recurseForVideoElement((element as SerialElement).currentChild));
            };
            return (null);
        }
        public static function recurseForCandidates(element:MediaElement, ve:Vector.<MediaElement>):void{
            var _local3 = null;
            var _local5:int;
            var _local4 = null;
            try {
                if ((((element is ProxyElement)) && ((element as ProxyElement).proxiedElement))){
                    ve.push(recurseForProxies((element as ProxyElement).proxiedElement));
                };
                if ((((element is SerialElement)) && ((element as SerialElement).currentChild))){
                    ve.push(recurseForProxies((element as SerialElement).currentChild));
                };
                if ((((element is ParallelElement)) && ((element as ParallelElement).numChildren))){
                    _local3 = (element as ParallelElement);
                    _local5 = 0;
                    while (_local5 < _local3.numChildren) {
                        _local4 = recurseForProxies(_local3.getChildAt(_local5));
                        ve.push(recurseForProxies(_local4));
                        _local5++;
                    };
                };
            } catch(e:Error) {
                trace("ERROR RECURSING FOR CANDIDATES");
            };
        }
        public static function findNetStreams(me:MediaElement):Vector.<NetStreamLoadTrait>{
            var _local5:int;
            var _local3 = null;
            var _local4:Vector.<NetStreamLoadTrait> = new Vector.<NetStreamLoadTrait>();
            var _local2:Vector.<MediaElement> = new Vector.<MediaElement>();
            C.recurseForCandidates(me, _local2);
            _local5 = 0;
            while (_local5 < _local2.length) {
                _local3 = findNetStreamLoadTrait(_local2[_local5]);
                if (_local3){
                    _local4.push(_local3);
                };
                _local5++;
            };
            return (_local4);
        }
        public static function findNetStreamLoadTrait(me:MediaElement):NetStreamLoadTrait{
            var _local3 = null;
            var _local2:LightweightVideoElement = C.recurseForVideoElement(me);
            if (_local2){
                _local3 = (_local2.getTrait("load") as LoadTrait);
                return ((_local3 as NetStreamLoadTrait));
            };
            return (null);
        }
        public static function recurseForAdvert(element:MediaElement):IAdvertisingMediaElement{
            if (!element){
                return (null);
            };
            if ((element is IAdvertisingMediaElement)){
                return ((element as IAdvertisingMediaElement));
            };
            if ((element is ProxyElement)){
                return (recurseForAdvert((element as ProxyElement).proxiedElement));
            };
            if ((element is SerialElement)){
                return (recurseForAdvert((element as SerialElement).currentChild));
            };
            return (null);
        }
        public static function recurseForSeekable(element:MediaElement):IMultiElementSeekable{
            if ((element is IMultiElementSeekable)){
                return ((element as IMultiElementSeekable));
            };
            if ((element is ProxyElement)){
                return (recurseForSeekable((element as ProxyElement).proxiedElement));
            };
            if ((element is SerialElement)){
                return (recurseForSeekable((element as SerialElement).currentChild));
            };
            return (null);
        }

    }
}//package 
﻿package {
    import org.osmf.media.*;
    import org.osmf.containers.*;
    import org.osmf.events.*;
    import flash.events.*;
    import rte.osmf.player.*;
    import rte.osmf.*;
    import rte.osmf.playlist.*;
    import flash.external.*;
    import org.osmf.utils.*;
    import rte.osmf.element.*;
    import rte.domainChecking.*;
    import rte.osmf.captionDecoder.*;
    import rte.osmf.thirdPartyTracking.conviva.*;
    import rte.osmf.freewheel.*;
    import rte.osmf.thirdPartyTracking.comScore.*;
    import rte.accessControl.*;

    public class PlayerSprite extends RTE_OSMF_Player {

        private var defaultCheckDomainsList:Array;
        private var defaultBlockedDomainMessage:String = "It seems that your computer is running ad blocking software.\n\nIn order to watch content on RTÉ Player, please disable your ad blocker for www.rte.ie.\n\nFor more information, please [see our FAQs.]";
        protected var updateAdvertHandlerFn:Function;
        protected var ccDecoder:RTE_CCDecoder;
        protected var conviva:ConvivaTracker;
        private var _freewheelSectionLoggedIn:String = "RTE Player_Desktop_Web_Registered";
        private var _freewheelSectionLoggedOut:String = "RTE Player_Desktop_Web_NotRegistered";

        public function PlayerSprite(mediaPlayerVal:MediaPlayer=null, mediaContainerVal:MediaContainer=null, mediaFactoryVal:MediaFactory=null, alternateParametersVal:Object=null){
            defaultCheckDomainsList = ["https://gwa.lphbs.com", "b.scorecardresearch.com", "pubads.g.doubleclick.net", "livepassdl.conviva.com", "s0.2mdn.net", "s1.2mdn.net", "s.ytimg.com"];
            trace(("PLAYER: " + this.version));
            OSMFSettings.hdsPureLiveOffset = 10;
            PlaylistFactoryLoader.deviceType = "iptv";
            if (!mediaFactoryVal){
                mediaFactoryVal = new AutoSmoothDefaultMediaFactory();
            };
            addCustomTypesToFactory(mediaFactoryVal);
            super(mediaPlayerVal, mediaContainerVal, mediaFactoryVal, alternateParametersVal);
            setPlayerInsightListeners();
            pinService = new JavaScriptPinService();
            ComScoreTracking.instance.initApp(this, "(FW) RTÉ 2015 November 12", false, loaderInfo.parameters, alternateParametersVal);
            ComScoreTracking.instance.initPlayer(this);
        }
        override protected function handleDomainCheckerResult(event:Event):void{
            var _local4 = null;
            var _local3 = null;
            var _local5 = null;
            var _local2 = null;
            if (BlockedDomainChecker.domainsAreBlocked){
                playIsBlocked = true;
                _local4 = ConfigurationManager.singleton;
                _local3 = ((_local4.receivedConfigs) ? _local4.receivedConfigs["requiredDomainsMessage"] : null);
                if (!_local3){
                    _local3 = defaultBlockedDomainMessage;
                };
                _local5 = ("- " + BlockedDomainChecker.blockedDomains.join("\n- "));
                _local2 = _local3.split("[domains]").join(_local5);
                handleError(new Error(_local2, -1112));
            } else {
                playIsBlocked = false;
            };
        }
        override protected function checkBlockedDomains():void{
            var _local3 = null;
            var _local2:ConfigurationManager = ConfigurationManager.singleton;
            var _local1:String = ((_local2.receivedConfigs) ? _local2.receivedConfigs["requiredDomains"] : null);
            if (((_local1) && (_local1.length))){
                _local3 = _local1.split("|");
            } else {
                _local3 = defaultCheckDomainsList;
            };
            BlockedDomainChecker.checkDomains(_local3);
        }
        override public function setSize(w:Number, h:Number):void{
            super.setSize(w, h);
            var _local3:Number = (w * h);
            if (((isNaN(_local3)) || ((_local3 <= 0)))){
                return;
            };
        }
        override protected function processReceivedParameters(o:Object):void{
            var _local2 = null;
            if (o){
                if (o["requiredDomains"]){
                    _local2 = o["requiredDomains"];
                    if (((_local2) && (_local2.length))){
                        defaultCheckDomainsList = _local2.split("|");
                    };
                };
                if (o["requiredDomainsMessage"]){
                    defaultBlockedDomainMessage = o["requiredDomainsMessage"];
                };
            };
            getJavascriptID();
            processReceivedParametersForFreewheel(o);
            processReceivedParametersForGoogle(o);
            processReceivedParametersForConviva(o);
            super.processReceivedParameters(o);
        }
        override public function get version():String{
            var _local1:String = super.version;
            return (_local1);
        }
        protected function addCustomTypesToFactory(mediaFactory:MediaFactory):void{
            updateFreewheelSectionId();
            if (!FreewheelLoader.profileString){
                FreewheelLoader.profileString = "391515:RTE_AS3_Video_Live";
            };
            FreewheelLoader.setDefaultMetadata(this, mediaFactory);
            mediaFactory.addItem(FreewheelLoader.factoryItem);
        }
        protected function processReceivedParametersForFreewheel(o:Object=null):void{
            if (!o){
                return;
            };
            if (o["freewheelServerUrl"]){
                FreewheelLoader.serverUrl = o["freewheelServerUrl"];
            };
            if (o["freewheelAdManagerUrl"]){
                FreewheelLoader.adManagerUrl = o["freewheelAdManagerUrl"];
            };
            if (o["freewheelNetworkId"] > 0){
                FreewheelLoader.networkId = o["freewheelNetworkId"];
            };
            if (o["freewheelProfile"]){
                FreewheelLoader.profileString = o["freewheelProfile"];
            };
            if (o["freewheelSectionLoggedIn"]){
                freewheelSectionLoggedIn = o["freewheelSectionLoggedIn"];
            };
            if (o["freewheelSectionLoggedOut"]){
                freewheelSectionLoggedOut = o["freewheelSectionLoggedOut"];
            };
        }
        override protected function updateAdvertTimes(pos:Number, dur:Number):void{
            if (updateAdvertHandlerFn != null){
                updateAdvertHandlerFn(pos, dur);
            };
        }
        protected function processReceivedParametersForGoogle(o:Object):void{
            var _local7:Number;
            var _local12 = null;
            var _local5 = null;
            var _local10 = null;
            var _local11:Number;
            var _local2:Boolean;
            var _local8:int;
            var _local4:String = "unset";
            var _local13 = -1;
            var _local6:Boolean;
            var _local3:String = "flash";
            for (var _local9:String in o) {
                _local10 = o[_local9];
                _local11 = o[_local9];
                _local2 = deboolise(o[_local9]);
                _local8 = parseInt(o[_local9]);
                _local9.toLowerCase();
            };
        }
        override protected function completeTrackSetup(event:Event):void{
            super.completeTrackSetup(event);
            trace(("ADDING TRACKER " + ComScoreTracking.instance));
            tracker.addTracker(ComScoreTracking.instance);
            if (conviva){
                tracker.addTracker(conviva);
            };
            setupClosedCaptions();
        }
        protected function setupClosedCaptions():void{
            ccDecoder = new RTE_CCDecoder();
            ccDecoder.addEventListener("captionsFound", enableCaptions);
            ccDecoder.addEventListener("captionVisibilityChange", trace);
            mediaContainer.layoutRenderer.addTarget(ccDecoder);
            hasCaptions = ccDecoder.captionsFound;
            captionsEnabled = ccDecoder.enabled;
            synchDecoder();
        }
        protected function enableCaptions(event:RTE_CCDecoderCaptionChangeEvent):void{
            hasCaptions = ccDecoder.captionsFound;
        }
        override protected function onAdToContentChange():void{
            if (ccDecoder){
                ccDecoder.checkPlayStateEvenIfNoMediaChange();
                ccDecoder.forceHideCaptions(isAdvert);
            };
        }
        override protected function updateCaptions():void{
            if (ccDecoder){
                if (hasCaptions){
                    ccDecoder.enabled = captionsEnabled;
                } else {
                    ccDecoder.enabled = false;
                };
            };
            super.updateCaptions();
        }
        override protected function mediaElementChangeHandler(event:MediaElementChangeEvent):void{
            super.mediaElementChangeHandler(event);
            if (ccDecoder){
                synchDecoder();
            };
        }
        protected function synchDecoder():void{
            ccDecoder.media = currentMedia;
            var _local1 = ccDecoder.captionsFound;
            ccDecoder.enabled = _local1;
            hasCaptions = _local1;
        }
        protected function processReceivedParametersForConviva(o:Object):void{
            var _local2 = null;
            if (o.hasOwnProperty("enableConviva")){
                ConvivaConstants.isEnabled = true;
                conviva = new ConvivaTracker();
                _local2 = (this.mediaFactory as AutoSmoothDefaultMediaFactory);
                if (!_local2){
                    throw (new Error("MUST HAVE AUTO SMOOTHABLE FACTORY FOR CONVIVA SO AS TO SUPPORT METADATA UPDATES"));
                };
                FreewheelLoader.cloneMediaMetadataFunction = conviva.checkConvivaMetadata;
            };
        }
        override protected function loadPlugins():void{
            if (ConvivaConstants.isEnabled){
                conviva.loadConvivaPlugin(this);
            };
            super.loadPlugins();
        }
        protected function getJavascriptID():void{
            var _local2 = null;
            var _local1 = null;
            try {
                if (ExternalInterface.available){
                    _local2 = ExternalInterface.call("getID");
                    if (_local2){
                        for (var _local3:String in _local2) {
                            RTE_OSMF_Player.addCustomAdTagParameter(_local3, _local2[_local3]);
                        };
                        ComScoreTracking.instance.userID = ((_local2["user_id"]) ? _local2["user_id"] : "");
                        updateFreewheelSectionId();
                    };
                };
            } catch(e:Error) {
                trace("COULDN'T READ PARAMS");
            };
        }
        public function get freewheelSectionLoggedIn():String{
            return (_freewheelSectionLoggedIn);
        }
        public function set freewheelSectionLoggedIn(value:String):void{
            _freewheelSectionLoggedIn = value;
            updateFreewheelSectionId();
        }
        public function get freewheelSectionLoggedOut():String{
            return (_freewheelSectionLoggedOut);
        }
        public function set freewheelSectionLoggedOut(value:String):void{
            _freewheelSectionLoggedOut = value;
            updateFreewheelSectionId();
        }
        override protected function set lastGoodBandwidth(i:int):void{
            super.lastGoodBandwidth = i;
            FreewheelLoader.playerDetectedUserBandwidthInKbps = i;
        }
        protected function updateFreewheelSectionId():void{
            var _local1:Object = RTE_OSMF_Player.getAdditionalCustomAdTagParameters();
            if (((((_local1) && (_local1["user_id"]))) && (!((_local1["user_id"] == ""))))){
                FreewheelLoader.sectionId = freewheelSectionLoggedIn;
            } else {
                FreewheelLoader.sectionId = freewheelSectionLoggedOut;
            };
        }

    }
}//package 
﻿package mx.formatters {
    import flash.system.*;
    import mx.core.*;
    import mx.resources.*;

    public class DateBase {

        mx_internal static const VERSION:String = "2.0.1.0";

        private static var resourceDayNames:Array;
        public static var monthNamesShort:Array;
        private static var resourceMonthNamesShort:Array;
        private static var sharedResources:ResourceBundle = ResourceBundle.getResourceBundle("SharedResources", ApplicationDomain.currentDomain);
        private static var resourceMonthSymbol:String;
        private static var resourcePM:String;
        public static var dayNamesShort:Array;
        public static var monthNamesLong:Array;
        private static var resourceMonthNames:Array;
        public static var dayNamesLong:Array;
        private static var resourceDayNamesShort:Array;
        private static var _timeOfDay:Array;
        private static var resourceAM:String;
        private static var packageResources:ResourceBundle = ResourceBundle.getResourceBundle("formatters", ApplicationDomain.currentDomain);

        mx_internal static function get defaultStringKey():Array{
            return (monthNamesLong.concat(timeOfDay));
        }
        private static function bundleChanged():void{
            var _local1:uint;
            monthNamesLong = resourceMonthNames;
            dayNamesLong = resourceDayNames;
            monthNamesShort = resourceMonthNamesShort;
            dayNamesShort = resourceDayNamesShort;
            if (resourceMonthSymbol != " "){
                _local1 = 0;
                while (_local1 < resourceMonthNames.length) {
                    monthNamesLong[_local1] = (monthNamesLong[_local1] + resourceMonthSymbol);
                    monthNamesShort[_local1] = (monthNamesShort[_local1] + resourceMonthSymbol);
                    _local1++;
                };
            };
        }
        mx_internal static function extractTokenDate(date:Date, tokenInfo:Object):String{
            var _local3:String;
            var _local4:int;
            var _local5:int;
            var _local6:int;
            var _local7:String;
            var _local8:int;
            var _local9:int;
            var _local10:int;
            _local3 = "";
            _local4 = (int(tokenInfo.end) - int(tokenInfo.begin));
            switch (tokenInfo.token){
                case "Y":
                    _local7 = date.getFullYear().toString();
                    if (_local4 < 3){
                        return (_local7.substr(2));
                    };
                    if (_local4 > 4){
                        return (setValue(Number(_local7), _local4));
                    };
                    return (_local7);
                case "M":
                    _local8 = int(date.getMonth());
                    if (_local4 < 3){
                        _local8++;
                        _local3 = (_local3 + setValue(_local8, _local4));
                        return (_local3);
                    };
                    if (_local4 == 3){
                        return (monthNamesShort[_local8]);
                    };
                    return (monthNamesLong[_local8]);
                case "D":
                    _local5 = int(date.getDate());
                    _local3 = (_local3 + setValue(_local5, _local4));
                    return (_local3);
                case "E":
                    _local5 = int(date.getDay());
                    if (_local4 < 3){
                        _local3 = (_local3 + setValue(_local5, _local4));
                        return (_local3);
                    };
                    if (_local4 == 3){
                        return (dayNamesShort[_local5]);
                    };
                    return (dayNamesLong[_local5]);
                case "A":
                    _local6 = int(date.getHours());
                    if (_local6 < 12){
                        return (timeOfDay[0]);
                    };
                    return (timeOfDay[1]);
                case "H":
                    _local6 = (int(date.getHours()) + 1);
                    _local3 = (_local3 + setValue(_local6, _local4));
                    return (_local3);
                case "J":
                    _local6 = int(date.getHours());
                    _local3 = (_local3 + setValue(_local6, _local4));
                    return (_local3);
                case "K":
                    _local6 = int(date.getHours());
                    if (_local6 >= 12){
                        _local6 = (_local6 - 12);
                    };
                    _local3 = (_local3 + setValue(_local6, _local4));
                    return (_local3);
                case "L":
                    _local6 = int(date.getHours());
                    if (_local6 == 0){
                        _local6 = 12;
                    } else {
                        if (_local6 > 12){
                            _local6 = (_local6 - 12);
                        };
                    };
                    _local3 = (_local3 + setValue(_local6, _local4));
                    return (_local3);
                case "N":
                    _local9 = int(date.getMinutes());
                    _local3 = (_local3 + setValue(_local9, _local4));
                    return (_local3);
                case "S":
                    _local10 = int(date.getSeconds());
                    _local3 = (_local3 + setValue(_local10, _local4));
                    return (_local3);
            };
            return (_local3);
        }
        public static function get timeOfDay():Array{
            if (_timeOfDay){
                return (_timeOfDay);
            };
            return ([resourceAM, resourcePM]);
        }
        private static function loadResources():void{
            resourceMonthNames = sharedResources.getStringArray("monthNames");
            resourceDayNames = sharedResources.getStringArray("dayNames");
            resourceMonthSymbol = sharedResources.getString("monthSymbol");
            resourceMonthNamesShort = packageResources.getStringArray("monthNamesShort");
            resourceDayNamesShort = packageResources.getStringArray("dayNamesShort");
            resourceAM = packageResources.getString("am");
            resourcePM = packageResources.getString("pm");
            bundleChanged();
        }
        private static function setValue(value:Object, key:int):String{
            var _local3:String;
            var _local4:int;
            var _local5:int;
            var _local6:int;
            _local3 = "";
            _local4 = value.toString().length;
            if (_local4 < key){
                _local5 = (key - _local4);
                _local6 = 0;
                while (_local6 < _local5) {
                    _local3 = (_local3 + "0");
                    _local6++;
                };
            };
            _local3 = (_local3 + value.toString());
            return (_local3);
        }
        public static function set timeOfDay(value:Array):void{
            _timeOfDay = value;
        }

        loadResources();
    }
}//package mx.formatters 
﻿package mx.resources {

    public interface IResourceBundle {

        function get bundleName():String;
        function get content():Object;
        function get locale():String;

    }
}//package mx.resources 
﻿package mx.resources {
    import flash.system.*;
    import mx.core.*;

    public class ResourceBundle implements IResourceBundle {

        mx_internal static const VERSION:String = "4.6.0.23201";

        mx_internal static var locale:String;
        mx_internal static var backupApplicationDomain:ApplicationDomain;

        mx_internal var _bundleName:String;
        private var _content:Object;
        mx_internal var _locale:String;

        public function ResourceBundle(locale:String=null, bundleName:String=null){
            this._content = {};
            super();
            this._locale = locale;
            this._bundleName = bundleName;
            this._content = this.getContent();
        }
        private static function getClassByName(name:String, domain:ApplicationDomain):Class{
            var _local3:Class;
            if (domain.hasDefinition(name)){
                _local3 = (domain.getDefinition(name) as Class);
            };
            return (_local3);
        }

        public function get bundleName():String{
            return (this._bundleName);
        }
        public function get content():Object{
            return (this._content);
        }
        public function get locale():String{
            return (this._locale);
        }
        protected function getContent():Object{
            return ({});
        }
        private function _getObject(key:String):Object{
            var _local2:Object = this.content[key];
            if (!_local2){
                throw (new Error(((("Key " + key) + " was not found in resource bundle ") + this.bundleName)));
            };
            return (_local2);
        }

    }
}//package mx.resources 
﻿package mx.core {

    public namespace mx_internal = "http://www.adobe.com/2006/flex/mx/internal";
}//package mx.core 
﻿package mx.utils {
    import mx.core.*;

    public class StringUtil {

        mx_internal static const VERSION:String = "4.6.0.23201";

        public static function trim(str:String):String{
            if (str == null){
                return ("");
            };
            var _local2:int;
            while (isWhitespace(str.charAt(_local2))) {
                _local2++;
            };
            var _local3:int = (str.length - 1);
            while (isWhitespace(str.charAt(_local3))) {
                _local3--;
            };
            if (_local3 >= _local2){
                return (str.slice(_local2, (_local3 + 1)));
            };
            return ("");
        }
        public static function trimArrayElements(value:String, delimiter:String):String{
            var _local3:Array;
            var _local4:int;
            var _local5:int;
            if (((!((value == ""))) && (!((value == null))))){
                _local3 = value.split(delimiter);
                _local4 = _local3.length;
                _local5 = 0;
                while (_local5 < _local4) {
                    _local3[_local5] = StringUtil.trim(_local3[_local5]);
                    _local5++;
                };
                if (_local4 > 0){
                    value = _local3.join(delimiter);
                };
            };
            return (value);
        }
        public static function isWhitespace(character:String):Boolean{
            switch (character){
                case " ":
                case "\t":
                case "\r":
                case "\n":
                case "\f":
                    return (true);
                    return (false);
            };
        }
        public static function substitute(str:String, ... _args):String{
            var _local4:Array;
            if (str == null){
                return ("");
            };
            var _local3:uint = _args.length;
            if ((((_local3 == 1)) && ((_args[0] is Array)))){
                _local4 = (_args[0] as Array);
                _local3 = _local4.length;
            } else {
                _local4 = _args;
            };
            var _local5:int;
            while (_local5 < _local3) {
                str = str.replace(new RegExp((("\\{" + _local5) + "\\}"), "g"), _local4[_local5]);
                _local5++;
            };
            return (str);
        }
        public static function repeat(str:String, n:int):String{
            if (n == 0){
                return ("");
            };
            var _local3:String = str;
            var _local4 = 1;
            while (_local4 < n) {
                _local3 = (_local3 + str);
                _local4++;
            };
            return (_local3);
        }
        public static function restrict(str:String, restrict:String):String{
            var _local6:uint;
            if (restrict == null){
                return (str);
            };
            if (restrict == ""){
                return ("");
            };
            var _local3:Array = [];
            var _local4:int = str.length;
            var _local5:int;
            while (_local5 < _local4) {
                _local6 = str.charCodeAt(_local5);
                if (testCharacter(_local6, restrict)){
                    _local3.push(_local6);
                };
                _local5++;
            };
            return (String.fromCharCode.apply(null, _local3));
        }
        private static function testCharacter(charCode:uint, restrict:String):Boolean{
            var _local9:uint;
            var _local11:Boolean;
            var _local3:Boolean;
            var _local4:Boolean;
            var _local5:Boolean;
            var _local6:Boolean;
            var _local7:uint;
            var _local8:int = restrict.length;
            if (_local8 > 0){
                _local9 = restrict.charCodeAt(0);
                if (_local9 == 94){
                    _local3 = true;
                };
            };
            var _local10:int;
            while (_local10 < _local8) {
                _local9 = restrict.charCodeAt(_local10);
                _local11 = false;
                if (!_local4){
                    if (_local9 == 45){
                        _local5 = true;
                    } else {
                        if (_local9 == 94){
                            _local6 = !(_local6);
                        } else {
                            if (_local9 == 92){
                                _local4 = true;
                            } else {
                                _local11 = true;
                            };
                        };
                    };
                } else {
                    _local11 = true;
                    _local4 = false;
                };
                if (_local11){
                    if (_local5){
                        if ((((_local7 <= charCode)) && ((charCode <= _local9)))){
                            _local3 = _local6;
                        };
                        _local5 = false;
                        _local7 = 0;
                    } else {
                        if (charCode == _local9){
                            _local3 = _local6;
                        };
                        _local7 = _local9;
                    };
                };
                _local10++;
            };
            return (_local3);
        }

    }
}//package mx.utils 
﻿package mx.utils {
    import flash.utils.*;

    public class Base64Encoder {

        private static const ALPHABET:Array = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "+", "/"];

        private var _output:String = "";
        private var _work:Array;
        private var _line:uint = 0;
        private var _count:uint = 0;

        public function Base64Encoder(){
            _output = "";
            _work = [0, 0, 0];
            _count = 0;
            _line = 0;
            super();
        }
        public function flush():String{
            var _local1:String;
            if (_count > 0){
                encodeBlock();
            };
            _local1 = drain();
            _count = 0;
            _line = 0;
            _work[0] = 0;
            _work[1] = 0;
            _work[2] = 0;
            return (_local1);
        }
        public function encodeBytes(data:ByteArray, offset:uint=0, length:uint=0):void{
            var _local4:uint;
            var _local5:uint;
            if (length == 0){
                length = data.length;
            };
            _local4 = data.position;
            data.position = offset;
            _local5 = offset;
            while (_local5 < length) {
                _work[_count] = data[_local5];
                _count++;
                if ((((_count == _work.length)) || ((((offset + length) - _local5) == 1)))){
                    encodeBlock();
                    _count = 0;
                    _work[0] = 0;
                    _work[1] = 0;
                    _work[2] = 0;
                };
                _local5++;
            };
            data.position = _local4;
        }
        public function encode(data:String, offset:uint=0, length:uint=0):void{
            var _local4:uint;
            if (length == 0){
                length = data.length;
            };
            _local4 = offset;
            while (_local4 < (offset + length)) {
                _work[_count] = data.charCodeAt(_local4);
                _count++;
                if ((((_count == _work.length)) || ((((offset + length) - _local4) == 1)))){
                    encodeBlock();
                    _count = 0;
                    _work[0] = 0;
                    _work[1] = 0;
                    _work[2] = 0;
                };
                _local4++;
            };
        }
        private function encodeBlock():void{
            _output = (_output + ALPHABET[((_work[0] & 0xFF) >> 2)]);
            _output = (_output + ALPHABET[(((_work[0] & 3) << 4) | ((_work[1] & 240) >> 4))]);
            if (_count > 1){
                _output = (_output + ALPHABET[(((_work[1] & 15) << 2) | ((_work[2] & 192) >> 6))]);
            } else {
                _output = (_output + "=");
            };
            if (_count > 2){
                _output = (_output + ALPHABET[(_work[2] & 63)]);
            } else {
                _output = (_output + "=");
            };
            if ((_line = (_line + 4)) == 76){
                _output = (_output + "\n");
                _line = 0;
            };
        }
        public function drain():String{
            var _local1:String;
            _local1 = _output.toString();
            _output = "";
            return (_local1);
        }

    }
}//package mx.utils 
﻿package src {

    public class RTEAPIStates {

        public static const MEDIA_LOADED:int = 0x0100;
        public static const ERROR:int = 128;
        public static const PLAYLIST_LOADED:int = 2;
        public static const PLAYLIST_ENDED:int = 4;
        public static const PLAYLIST_FAILED:int = 8;
        public static const PLAY_STATE:int = 16;
        public static const PAUSE_STATE:int = 32;
        public static const INITIALIZED:int = 64;
        public static const NOT_READY:int = 0;

        public static function explain(i:int):String{
            switch (i){
                case RTEAPIStates.MEDIA_LOADED:
                    return ("MEDIA_LOADED");
                case RTEAPIStates.INITIALIZED:
                    return ("INITIALIZED");
                case RTEAPIStates.PLAYLIST_LOADED:
                    return ("PLAYLIST_LOADED");
                case RTEAPIStates.PLAYLIST_ENDED:
                    return ("PLAYLIST_ENDED");
                case RTEAPIStates.PLAYLIST_FAILED:
                    return ("PLAYLIST_FAILED");
                case RTEAPIStates.PLAY_STATE:
                    return ("PLAY_STATE");
                case RTEAPIStates.PAUSE_STATE:
                    return ("PAUSE_STATE");
                case RTEAPIStates.ERROR:
                    return ("ERROR");
                case RTEAPIStates.NOT_READY:
                    return ("NOT_READY");
            };
            return ((("Unrecognised(" + i) + ")"));
        }

    }
}//package src 
﻿package src {
    import flash.events.*;

    public class RTEAPIEvent extends Event {

        public static const ON_STATE_CHANGE:String = "onStateChange";
        public static const ON_ERROR:String = "onError";
        public static const ON_EVENT_HANDLER_FOUND:String = "onEventHandlerFound";
        public static const ON_PLAYBACK_STARTED:String = "onPlaybackStarted";
        public static const ON_PLAYER_INITED:String = "onPlayerInited";
        public static const ON_ROADBLOCK_READY:String = "onRoadblockReady";
        public static const ON_PLAYER_NOT_FOUND:String = "onPlayerNotFound";
        public static const LOG:String = "log";

        private var _state:int;
        private var _message:String;

        public function RTEAPIEvent(type:String, state:int, message:String="", bubbles:Boolean=false, cancelable:Boolean=false){
            super(type, bubbles, cancelable);
            this._message = message;
            this._state = state;
        }
        public function get state():int{
            return (this._state);
        }
        public function get message():String{
            return (this._message);
        }
        override public function clone():Event{
            return (new RTEAPIEvent(type, this.state, this.message, bubbles, cancelable));
        }

    }
}//package src 
﻿package org.osmf.traits {
    import org.osmf.events.*;

    public class SeekTrait extends MediaTraitBase {

        private var _timeTrait:TimeTrait;
        private var _seeking:Boolean;

        public function SeekTrait(timeTrait:TimeTrait){
            super(MediaTraitType.SEEK);
            this._timeTrait = timeTrait;
        }
        final public function get seeking():Boolean{
            return (this._seeking);
        }
        final public function seek(time:Number):void{
            if (this.canSeekTo(time)){
                this.setSeeking(true, time);
            };
        }
        public function canSeekTo(time:Number):Boolean{
            return (((this._timeTrait) ? (((((isNaN(time) == false)) && ((time >= 0)))) && ((((time <= this._timeTrait.duration)) || ((time <= this._timeTrait.currentTime))))) : false));
        }
        final protected function get timeTrait():TimeTrait{
            return (this._timeTrait);
        }
        final protected function set timeTrait(value:TimeTrait):void{
            this._timeTrait = value;
        }
        final protected function setSeeking(value:Boolean, time:Number):void{
            this.seekingChangeStart(value, time);
            this._seeking = value;
            this.seekingChangeEnd(time);
        }
        protected function seekingChangeStart(newSeeking:Boolean, time:Number):void{
        }
        protected function seekingChangeEnd(time:Number):void{
            dispatchEvent(new SeekEvent(SeekEvent.SEEKING_CHANGE, false, false, this.seeking, time));
        }

    }
}//package org.osmf.traits 
﻿package org.osmf.traits {
    import org.osmf.events.*;
    import org.osmf.utils.*;
    import flash.errors.*;

    public class PlayTrait extends MediaTraitBase {

        private var _playState:String;
        private var _canPause:Boolean;

        public function PlayTrait(){
            super(MediaTraitType.PLAY);
            this._canPause = true;
            this._playState = PlayState.STOPPED;
        }
        final public function play():void{
            this.attemptPlayStateChange(PlayState.PLAYING);
        }
        public function get canPause():Boolean{
            return (this._canPause);
        }
        final public function pause():void{
            if (this.canPause){
                this.attemptPlayStateChange(PlayState.PAUSED);
            } else {
                throw (new IllegalOperationError(OSMFStrings.getString(OSMFStrings.PAUSE_NOT_SUPPORTED)));
            };
        }
        final public function stop():void{
            this.attemptPlayStateChange(PlayState.STOPPED);
        }
        public function get playState():String{
            return (this._playState);
        }
        final protected function setCanPause(value:Boolean):void{
            if (value != this._canPause){
                this._canPause = value;
                dispatchEvent(new PlayEvent(PlayEvent.CAN_PAUSE_CHANGE, false, false, this.playState, this._canPause));
            };
        }
        protected function playStateChangeStart(newPlayState:String):void{
        }
        protected function playStateChangeEnd():void{
            dispatchEvent(new PlayEvent(PlayEvent.PLAY_STATE_CHANGE, false, false, this.playState));
        }
        private function attemptPlayStateChange(newPlayState:String):void{
            if (this._playState != newPlayState){
                this.playStateChangeStart(newPlayState);
                this._playState = newPlayState;
                this.playStateChangeEnd();
            };
        }

    }
}//package org.osmf.traits 
﻿package org.osmf.traits {
    import org.osmf.events.*;
    import org.osmf.utils.*;
    import org.osmf.net.*;

    public class AlternativeAudioTrait extends MediaTraitBase {

        protected static const INVALID_TRANSITION_INDEX:int = -2;
        protected static const DEFAULT_TRANSITION_INDEX:int = -1;

        private var _currentIndex:int = -1;
        private var _numAlternativeAudioStreams:int;
        private var _switching:Boolean;
        protected var _indexToSwitchTo:int = -2;

        public function AlternativeAudioTrait(numAlternativeAudioStreams:int){
            super(MediaTraitType.ALTERNATIVE_AUDIO);
            this._numAlternativeAudioStreams = numAlternativeAudioStreams;
            this._switching = false;
        }
        public function get numAlternativeAudioStreams():int{
            return (this._numAlternativeAudioStreams);
        }
        public function get currentIndex():int{
            return (this._currentIndex);
        }
        public function getItemForIndex(index:int):StreamingItem{
            if ((((index <= INVALID_TRANSITION_INDEX)) || ((index >= this.numAlternativeAudioStreams)))){
                throw (new RangeError(OSMFStrings.getString(OSMFStrings.ALTERNATIVEAUDIO_INVALID_INDEX)));
            };
            return (null);
        }
        public function get switching():Boolean{
            return (this._switching);
        }
        public function switchTo(index:int):void{
            if (index != this._indexToSwitchTo){
                if ((((index < INVALID_TRANSITION_INDEX)) || ((index >= this.numAlternativeAudioStreams)))){
                    throw (new RangeError(OSMFStrings.getString(OSMFStrings.ALTERNATIVEAUDIO_INVALID_INDEX)));
                };
                this.setSwitching(true, index);
            };
        }
        final protected function setCurrentIndex(value:int):void{
            this._currentIndex = value;
        }
        final protected function setSwitching(newSwitching:Boolean, index:int):void{
            if (((!((newSwitching == this._switching))) || (!((index == this._indexToSwitchTo))))){
                this.beginSwitching(newSwitching, index);
                this._switching = newSwitching;
                if (this._switching == false){
                    this.setCurrentIndex(index);
                };
                this.endSwitching(index);
            };
        }
        protected function beginSwitching(newSwitching:Boolean, index:int):void{
            if (newSwitching){
                this._indexToSwitchTo = index;
            };
        }
        protected function endSwitching(index:int):void{
            if (!this._switching){
                this._indexToSwitchTo = INVALID_TRANSITION_INDEX;
            };
            dispatchEvent(new AlternativeAudioEvent(AlternativeAudioEvent.AUDIO_SWITCHING_CHANGE, false, false, this.switching));
        }

    }
}//package org.osmf.traits 
﻿package org.osmf.traits {
    import org.osmf.events.*;

    public class AudioTrait extends MediaTraitBase {

        private var _volume:Number = 1;
        private var _muted:Boolean = false;
        private var _pan:Number = 0;

        public function AudioTrait(){
            super(MediaTraitType.AUDIO);
        }
        public function get volume():Number{
            return (this._volume);
        }
        final public function set volume(value:Number):void{
            if (isNaN(value)){
                value = 0;
            } else {
                if (value > 1){
                    value = 1;
                } else {
                    if (value < 0){
                        value = 0;
                    };
                };
            };
            if (value != this._volume){
                this.volumeChangeStart(value);
                this._volume = value;
                this.volumeChangeEnd();
            };
        }
        public function get muted():Boolean{
            return (this._muted);
        }
        final public function set muted(value:Boolean):void{
            if (value != this._muted){
                this.mutedChangeStart(value);
                this._muted = value;
                this.mutedChangeEnd();
            };
        }
        public function get pan():Number{
            return (this._pan);
        }
        final public function set pan(value:Number):void{
            if (isNaN(value)){
                value = 0;
            } else {
                if (value > 1){
                    value = 1;
                } else {
                    if (value < -1){
                        value = -1;
                    };
                };
            };
            if (value != this._pan){
                this.panChangeStart(value);
                this._pan = value;
                this.panChangeEnd();
            };
        }
        protected function volumeChangeStart(newVolume:Number):void{
        }
        protected function volumeChangeEnd():void{
            dispatchEvent(new AudioEvent(AudioEvent.VOLUME_CHANGE, false, false, false, this._volume));
        }
        protected function mutedChangeStart(newMuted:Boolean):void{
        }
        protected function mutedChangeEnd():void{
            dispatchEvent(new AudioEvent(AudioEvent.MUTED_CHANGE, false, false, this._muted));
        }
        protected function panChangeStart(newPan:Number):void{
        }
        protected function panChangeEnd():void{
            dispatchEvent(new AudioEvent(AudioEvent.PAN_CHANGE, false, false, false, NaN, this._pan));
        }

    }
}//package org.osmf.traits 
﻿package org.osmf.traits {
    import flash.events.*;

    public class MediaTraitBase extends EventDispatcher {

        private var _traitType:String;

        public function MediaTraitBase(traitType:String){
            this._traitType = traitType;
        }
        public function get traitType():String{
            return (this._traitType);
        }
        public function dispose():void{
        }

    }
}//package org.osmf.traits 
﻿package org.osmf.traits {
    import __AS3__.vec.*;

    public final class MediaTraitType {

        public static const AUDIO:String = "audio";
        public static const BUFFER:String = "buffer";
        public static const DRM:String = "drm";
        public static const DYNAMIC_STREAM:String = "dynamicStream";
        public static const ALTERNATIVE_AUDIO:String = "alternativeAudio";
        public static const LOAD:String = "load";
        public static const PLAY:String = "play";
        public static const SEEK:String = "seek";
        public static const TIME:String = "time";
        public static const DISPLAY_OBJECT:String = "displayObject";
        public static const DVR:String = "dvr";
        public static const ALL_TYPES:Vector.<String> = Vector.<String>([AUDIO, BUFFER, DRM, DYNAMIC_STREAM, LOAD, PLAY, SEEK, TIME, DISPLAY_OBJECT, DVR, ALTERNATIVE_AUDIO]);

    }
}//package org.osmf.traits 
﻿package org.osmf.traits {

    public final class PlayState {

        public static const PLAYING:String = "playing";
        public static const PAUSED:String = "paused";
        public static const STOPPED:String = "stopped";

    }
}//package org.osmf.traits 
﻿package org.osmf.traits {
    import org.osmf.media.*;
    import org.osmf.events.*;
    import flash.events.*;
    import flash.utils.*;

    public class TraitEventDispatcher extends EventDispatcher {

        private static var eventMaps:Dictionary;

        private var _mediaElement:MediaElement;

        public function TraitEventDispatcher(){
            if (eventMaps == null){
                eventMaps = new Dictionary();
                eventMaps[TimeEvent.DURATION_CHANGE] = MediaTraitType.TIME;
                eventMaps[TimeEvent.COMPLETE] = MediaTraitType.TIME;
                eventMaps[PlayEvent.PLAY_STATE_CHANGE] = MediaTraitType.PLAY;
                eventMaps[PlayEvent.CAN_PAUSE_CHANGE] = MediaTraitType.PLAY;
                eventMaps[AudioEvent.VOLUME_CHANGE] = MediaTraitType.AUDIO;
                eventMaps[AudioEvent.MUTED_CHANGE] = MediaTraitType.AUDIO;
                eventMaps[AudioEvent.PAN_CHANGE] = MediaTraitType.AUDIO;
                eventMaps[SeekEvent.SEEKING_CHANGE] = MediaTraitType.SEEK;
                eventMaps[DynamicStreamEvent.SWITCHING_CHANGE] = MediaTraitType.DYNAMIC_STREAM;
                eventMaps[DynamicStreamEvent.AUTO_SWITCH_CHANGE] = MediaTraitType.DYNAMIC_STREAM;
                eventMaps[DynamicStreamEvent.NUM_DYNAMIC_STREAMS_CHANGE] = MediaTraitType.DYNAMIC_STREAM;
                eventMaps[AlternativeAudioEvent.AUDIO_SWITCHING_CHANGE] = MediaTraitType.ALTERNATIVE_AUDIO;
                eventMaps[AlternativeAudioEvent.NUM_ALTERNATIVE_AUDIO_STREAMS_CHANGE] = MediaTraitType.ALTERNATIVE_AUDIO;
                eventMaps[DisplayObjectEvent.DISPLAY_OBJECT_CHANGE] = MediaTraitType.DISPLAY_OBJECT;
                eventMaps[DisplayObjectEvent.MEDIA_SIZE_CHANGE] = MediaTraitType.DISPLAY_OBJECT;
                eventMaps[LoadEvent.LOAD_STATE_CHANGE] = MediaTraitType.LOAD;
                eventMaps[LoadEvent.BYTES_LOADED_CHANGE] = MediaTraitType.LOAD;
                eventMaps[LoadEvent.BYTES_TOTAL_CHANGE] = MediaTraitType.LOAD;
                eventMaps[BufferEvent.BUFFERING_CHANGE] = MediaTraitType.BUFFER;
                eventMaps[BufferEvent.BUFFER_TIME_CHANGE] = MediaTraitType.BUFFER;
                eventMaps[DRMEvent.DRM_STATE_CHANGE] = MediaTraitType.DRM;
                eventMaps[DVREvent.IS_RECORDING_CHANGE] = MediaTraitType.DVR;
            };
        }
        public function get media():MediaElement{
            return (this._mediaElement);
        }
        public function set media(value:MediaElement):void{
            var _local2:String;
            if (value != this._mediaElement){
                if (this._mediaElement != null){
                    this._mediaElement.removeEventListener(MediaElementEvent.TRAIT_ADD, this.onTraitAdd);
                    this._mediaElement.removeEventListener(MediaElementEvent.TRAIT_REMOVE, this.onTraitRemove);
                    for each (_local2 in this._mediaElement.traitTypes) {
                        this.onTraitChanged(_local2, false);
                    };
                };
                this._mediaElement = value;
                if (this._mediaElement != null){
                    this._mediaElement.addEventListener(MediaElementEvent.TRAIT_ADD, this.onTraitAdd);
                    this._mediaElement.addEventListener(MediaElementEvent.TRAIT_REMOVE, this.onTraitRemove);
                    for each (_local2 in this._mediaElement.traitTypes) {
                        this.onTraitChanged(_local2, true);
                    };
                };
            };
        }
        override public function addEventListener(type:String, listener:Function, useCapture:Boolean=false, priority:int=0, useWeakReference:Boolean=false):void{
            var _local6:Boolean = hasEventListener(type);
            super.addEventListener(type, listener, useCapture, priority, useWeakReference);
            if (((((this._mediaElement) && (!(_local6)))) && (!((eventMaps[type] == undefined))))){
                this.changeListeners(true, eventMaps[type], type);
            };
        }
        override public function removeEventListener(type:String, listener:Function, useCapture:Boolean=false):void{
            super.removeEventListener(type, listener, useCapture);
            if (((((this._mediaElement) && (!(hasEventListener(type))))) && (!((eventMaps[type] == undefined))))){
                this.changeListeners(false, eventMaps[type], type);
            };
        }
        private function onTraitAdd(event:MediaElementEvent):void{
            this.onTraitChanged(event.traitType, true);
        }
        private function onTraitRemove(event:MediaElementEvent):void{
            this.onTraitChanged(event.traitType, false);
        }
        private function onTraitChanged(traitType:String, add:Boolean):void{
            switch (traitType){
                case MediaTraitType.TIME:
                    this.changeListeners(add, traitType, TimeEvent.DURATION_CHANGE);
                    this.changeListeners(add, traitType, TimeEvent.COMPLETE);
                    break;
                case MediaTraitType.PLAY:
                    this.changeListeners(add, traitType, PlayEvent.PLAY_STATE_CHANGE);
                    this.changeListeners(add, traitType, PlayEvent.CAN_PAUSE_CHANGE);
                    break;
                case MediaTraitType.AUDIO:
                    this.changeListeners(add, traitType, AudioEvent.VOLUME_CHANGE);
                    this.changeListeners(add, traitType, AudioEvent.MUTED_CHANGE);
                    this.changeListeners(add, traitType, AudioEvent.PAN_CHANGE);
                    break;
                case MediaTraitType.SEEK:
                    this.changeListeners(add, traitType, SeekEvent.SEEKING_CHANGE);
                    break;
                case MediaTraitType.DYNAMIC_STREAM:
                    this.changeListeners(add, traitType, DynamicStreamEvent.SWITCHING_CHANGE);
                    this.changeListeners(add, traitType, DynamicStreamEvent.AUTO_SWITCH_CHANGE);
                    this.changeListeners(add, traitType, DynamicStreamEvent.NUM_DYNAMIC_STREAMS_CHANGE);
                    break;
                case MediaTraitType.ALTERNATIVE_AUDIO:
                    this.changeListeners(add, traitType, AlternativeAudioEvent.AUDIO_SWITCHING_CHANGE);
                    this.changeListeners(add, traitType, AlternativeAudioEvent.NUM_ALTERNATIVE_AUDIO_STREAMS_CHANGE);
                    break;
                case MediaTraitType.DISPLAY_OBJECT:
                    this.changeListeners(add, traitType, DisplayObjectEvent.DISPLAY_OBJECT_CHANGE);
                    this.changeListeners(add, traitType, DisplayObjectEvent.MEDIA_SIZE_CHANGE);
                    break;
                case MediaTraitType.LOAD:
                    this.changeListeners(add, traitType, LoadEvent.LOAD_STATE_CHANGE);
                    this.changeListeners(add, traitType, LoadEvent.BYTES_TOTAL_CHANGE);
                    this.changeListeners(add, traitType, LoadEvent.BYTES_LOADED_CHANGE);
                    break;
                case MediaTraitType.BUFFER:
                    this.changeListeners(add, traitType, BufferEvent.BUFFERING_CHANGE);
                    this.changeListeners(add, traitType, BufferEvent.BUFFER_TIME_CHANGE);
                    break;
                case MediaTraitType.DRM:
                    this.changeListeners(add, traitType, DRMEvent.DRM_STATE_CHANGE);
                    break;
                case MediaTraitType.DVR:
                    this.changeListeners(add, traitType, DVREvent.IS_RECORDING_CHANGE);
                    break;
            };
        }
        private function changeListeners(add:Boolean, traitType:String, event:String):void{
            if (this._mediaElement.getTrait(traitType) != null){
                if (((add) && (hasEventListener(event)))){
                    this._mediaElement.getTrait(traitType).addEventListener(event, this.redispatchEvent);
                } else {
                    this._mediaElement.getTrait(traitType).removeEventListener(event, this.redispatchEvent);
                };
            };
        }
        private function redispatchEvent(event:Event):void{
            dispatchEvent(event.clone());
        }

    }
}//package org.osmf.traits 
﻿package org.osmf.traits {
    import org.osmf.media.*;
    import org.osmf.events.*;
    import flash.events.*;
    import org.osmf.utils.*;
    import flash.errors.*;

    public class LoaderBase extends EventDispatcher {

        public function canHandleResource(resource:MediaResourceBase):Boolean{
            return (false);
        }
        final public function load(loadTrait:LoadTrait):void{
            this.validateLoad(loadTrait);
            this.executeLoad(loadTrait);
        }
        final public function unload(loadTrait:LoadTrait):void{
            this.validateUnload(loadTrait);
            this.executeUnload(loadTrait);
        }
        protected function executeLoad(loadTrait:LoadTrait):void{
        }
        protected function executeUnload(loadTrait:LoadTrait):void{
        }
        final protected function updateLoadTrait(loadTrait:LoadTrait, newState:String):void{
            var _local3:String;
            if (newState != loadTrait.loadState){
                _local3 = loadTrait.loadState;
                dispatchEvent(new LoaderEvent(LoaderEvent.LOAD_STATE_CHANGE, false, false, this, loadTrait, _local3, newState));
            };
        }
        private function validateLoad(loadTrait:LoadTrait):void{
            if (loadTrait == null){
                throw (new IllegalOperationError(OSMFStrings.getString(OSMFStrings.NULL_PARAM)));
            };
            if (loadTrait.loadState == LoadState.READY){
                throw (new IllegalOperationError(OSMFStrings.getString(OSMFStrings.ALREADY_READY)));
            };
            if (loadTrait.loadState == LoadState.LOADING){
                throw (new IllegalOperationError(OSMFStrings.getString(OSMFStrings.ALREADY_LOADING)));
            };
            if (this.canHandleResource(loadTrait.resource) == false){
                throw (new IllegalOperationError(OSMFStrings.getString(OSMFStrings.LOADER_CANT_HANDLE_RESOURCE)));
            };
        }
        private function validateUnload(loadTrait:LoadTrait):void{
            if (loadTrait == null){
                throw (new IllegalOperationError(OSMFStrings.getString(OSMFStrings.NULL_PARAM)));
            };
            if (loadTrait.loadState == LoadState.UNLOADING){
                throw (new IllegalOperationError(OSMFStrings.getString(OSMFStrings.ALREADY_UNLOADING)));
            };
            if (loadTrait.loadState == LoadState.UNINITIALIZED){
                throw (new IllegalOperationError(OSMFStrings.getString(OSMFStrings.ALREADY_UNLOADED)));
            };
            if (this.canHandleResource(loadTrait.resource) == false){
                throw (new IllegalOperationError(OSMFStrings.getString(OSMFStrings.LOADER_CANT_HANDLE_RESOURCE)));
            };
        }

    }
}//package org.osmf.traits 
﻿package org.osmf.traits {

    public class DRMTrait extends MediaTraitBase {

        private var _drmState:String = "uninitialized";
        private var _period:Number = 0;
        private var _endDate:Date;
        private var _startDate:Date;

        public function DRMTrait(){
            super(MediaTraitType.DRM);
        }
        public function authenticate(username:String=null, password:String=null):void{
        }
        public function authenticateWithToken(token:Object):void{
        }
        public function get drmState():String{
            return (this._drmState);
        }
        public function get startDate():Date{
            return (this._startDate);
        }
        public function get endDate():Date{
            return (this._endDate);
        }
        public function get period():Number{
            return (this._period);
        }
        final protected function setPeriod(value:Number):void{
            this._period = value;
        }
        final protected function setStartDate(value:Date):void{
            this._startDate = value;
        }
        final protected function setEndDate(value:Date):void{
            this._endDate = value;
        }
        final protected function setDrmState(value:String):void{
            this._drmState = value;
        }

    }
}//package org.osmf.traits 
﻿package org.osmf.traits {
    import org.osmf.events.*;

    public class DVRTrait extends MediaTraitBase {

        private var _isRecording:Boolean;
        private var _windowDuration:Number;

        public function DVRTrait(isRecording:Boolean=false, windowDuration:Number=-1){
            this._isRecording = isRecording;
            this._windowDuration = windowDuration;
            super(MediaTraitType.DVR);
        }
        final public function get windowDuration():Number{
            return (this._windowDuration);
        }
        final public function get isRecording():Boolean{
            return (this._isRecording);
        }
        final protected function setIsRecording(value:Boolean):void{
            if (value != this._isRecording){
                this.isRecordingChangeStart(value);
                this._isRecording = value;
                this.isRecordingChangeEnd();
            };
        }
        protected function isRecordingChangeStart(value:Boolean):void{
        }
        protected function isRecordingChangeEnd():void{
            dispatchEvent(new DVREvent(DVREvent.IS_RECORDING_CHANGE));
        }

    }
}//package org.osmf.traits 
﻿package org.osmf.traits {
    import org.osmf.events.*;
    import org.osmf.utils.*;
    import flash.errors.*;

    public class DynamicStreamTrait extends MediaTraitBase {

        private var _autoSwitch:Boolean;
        private var _currentIndex:int = 0;
        private var _maxAllowedIndex:int = 0;
        private var _numDynamicStreams:int;
        private var _switching:Boolean;

        public function DynamicStreamTrait(autoSwitch:Boolean=true, currentIndex:int=0, numDynamicStreams:int=1){
            super(MediaTraitType.DYNAMIC_STREAM);
            this._autoSwitch = autoSwitch;
            this._currentIndex = currentIndex;
            this._numDynamicStreams = numDynamicStreams;
            this._maxAllowedIndex = (numDynamicStreams - 1);
            this._switching = false;
        }
        public function get autoSwitch():Boolean{
            return (this._autoSwitch);
        }
        final public function set autoSwitch(value:Boolean):void{
            if (this.autoSwitch != value){
                this.autoSwitchChangeStart(value);
                this._autoSwitch = value;
                this.autoSwitchChangeEnd();
            };
        }
        public function get numDynamicStreams():int{
            return (this._numDynamicStreams);
        }
        public function get currentIndex():int{
            return (this._currentIndex);
        }
        public function get maxAllowedIndex():int{
            return (this._maxAllowedIndex);
        }
        final public function set maxAllowedIndex(value:int):void{
            if ((((value < 0)) || ((value > (this._numDynamicStreams - 1))))){
                throw (new RangeError(OSMFStrings.getString(OSMFStrings.STREAMSWITCH_INVALID_INDEX)));
            };
            if (this.maxAllowedIndex != value){
                this.maxAllowedIndexChangeStart(value);
                this._maxAllowedIndex = value;
                this.maxAllowedIndexChangeEnd();
            };
        }
        public function getBitrateForIndex(index:int):Number{
            if ((((index > (this._numDynamicStreams - 1))) || ((index < 0)))){
                throw (new RangeError(OSMFStrings.getString(OSMFStrings.STREAMSWITCH_INVALID_INDEX)));
            };
            return (0);
        }
        public function get switching():Boolean{
            return (this._switching);
        }
        public function switchTo(index:int):void{
            if (this.autoSwitch){
                throw (new IllegalOperationError(OSMFStrings.getString(OSMFStrings.STREAMSWITCH_STREAM_NOT_IN_MANUAL_MODE)));
            };
            if ((((index < 0)) || ((index > this.maxAllowedIndex)))){
                throw (new RangeError(OSMFStrings.getString(OSMFStrings.STREAMSWITCH_INVALID_INDEX)));
            };
            if (!this.switching){
                this.setSwitching(true, index);
            };
        }
        final protected function setNumDynamicStreams(value:int):void{
            if (value != this._numDynamicStreams){
                this._numDynamicStreams = value;
                if (this.maxAllowedIndex >= this._numDynamicStreams){
                    this.maxAllowedIndex = Math.max(0, (this._numDynamicStreams - 1));
                };
                dispatchEvent(new DynamicStreamEvent(DynamicStreamEvent.NUM_DYNAMIC_STREAMS_CHANGE));
            };
        }
        final protected function setCurrentIndex(value:int):void{
            this._currentIndex = value;
        }
        final protected function setSwitching(newSwitching:Boolean, index:int):void{
            this.switchingChangeStart(newSwitching, index);
            this._switching = newSwitching;
            if (newSwitching == false){
                this.setCurrentIndex(index);
            };
            this.switchingChangeEnd(index);
        }
        protected function autoSwitchChangeStart(value:Boolean):void{
        }
        protected function autoSwitchChangeEnd():void{
            dispatchEvent(new DynamicStreamEvent(DynamicStreamEvent.AUTO_SWITCH_CHANGE, false, false, false, this._autoSwitch));
        }
        protected function switchingChangeStart(newSwitching:Boolean, index:int):void{
        }
        protected function switchingChangeEnd(index:int):void{
            dispatchEvent(new DynamicStreamEvent(DynamicStreamEvent.SWITCHING_CHANGE, false, false, this.switching, this._autoSwitch));
        }
        protected function maxAllowedIndexChangeStart(newIndex:int):void{
        }
        protected function maxAllowedIndexChangeEnd():void{
        }

    }
}//package org.osmf.traits 
﻿package org.osmf.traits {

    public final class DRMState {

        public static const UNINITIALIZED:String = "uninitialized";
        public static const AUTHENTICATION_NEEDED:String = "authenticationNeeded";
        public static const AUTHENTICATING:String = "authenticating";
        public static const AUTHENTICATION_COMPLETE:String = "authenticationComplete";
        public static const AUTHENTICATION_ERROR:String = "authenticationError";
        public static const DRM_SYSTEM_UPDATING:String = "drmSystemUpdating";

    }
}//package org.osmf.traits 
﻿package org.osmf.traits {
    import flash.display.*;
    import org.osmf.events.*;

    public class DisplayObjectTrait extends MediaTraitBase {

        private var _displayObject:DisplayObject;
        private var _mediaWidth:Number = 0;
        private var _mediaHeight:Number = 0;

        public function DisplayObjectTrait(displayObject:DisplayObject, mediaWidth:Number=0, mediaHeight:Number=0){
            super(MediaTraitType.DISPLAY_OBJECT);
            this._displayObject = displayObject;
            this._mediaWidth = mediaWidth;
            this._mediaHeight = mediaHeight;
        }
        public function get displayObject():DisplayObject{
            return (this._displayObject);
        }
        public function get mediaWidth():Number{
            return (this._mediaWidth);
        }
        public function get mediaHeight():Number{
            return (this._mediaHeight);
        }
        final protected function setDisplayObject(value:DisplayObject):void{
            var _local2:DisplayObject;
            if (this._displayObject != value){
                this.displayObjectChangeStart(value);
                _local2 = this._displayObject;
                this._displayObject = value;
                this.displayObjectChangeEnd(_local2);
            };
        }
        final protected function setMediaSize(mediaWidth:Number, mediaHeight:Number):void{
            var _local3:Number;
            var _local4:Number;
            if (((!((mediaWidth == this._mediaWidth))) || (!((mediaHeight == this._mediaHeight))))){
                this.mediaSizeChangeStart(mediaWidth, mediaHeight);
                _local3 = this._mediaWidth;
                _local4 = this._mediaHeight;
                this._mediaWidth = mediaWidth;
                this._mediaHeight = mediaHeight;
                this.mediaSizeChangeEnd(_local3, _local4);
            };
        }
        protected function displayObjectChangeStart(newView:DisplayObject):void{
        }
        protected function displayObjectChangeEnd(oldDisplayObject:DisplayObject):void{
            dispatchEvent(new DisplayObjectEvent(DisplayObjectEvent.DISPLAY_OBJECT_CHANGE, false, false, oldDisplayObject, this._displayObject));
        }
        protected function mediaSizeChangeStart(newMediaWidth:Number, newMediaHeight:Number):void{
        }
        protected function mediaSizeChangeEnd(oldMediaWidth:Number, oldMediaHeight:Number):void{
            dispatchEvent(new DisplayObjectEvent(DisplayObjectEvent.MEDIA_SIZE_CHANGE, false, false, null, null, oldMediaWidth, oldMediaHeight, this._mediaWidth, this._mediaHeight));
        }

    }
}//package org.osmf.traits 
﻿package org.osmf.traits {
    import org.osmf.events.*;

    public class BufferTrait extends MediaTraitBase {

        private var _buffering:Boolean = false;
        private var _bufferLength:Number = 0;
        private var _bufferTime:Number = 0;

        public function BufferTrait(){
            super(MediaTraitType.BUFFER);
        }
        public function get buffering():Boolean{
            return (this._buffering);
        }
        public function get bufferLength():Number{
            return (this._bufferLength);
        }
        public function get bufferTime():Number{
            return (this._bufferTime);
        }
        public function set bufferTime(value:Number):void{
            if (((isNaN(value)) || ((value < 0)))){
                value = 0;
            };
            if (value != this._bufferTime){
                this.bufferTimeChangeStart(value);
                this._bufferTime = value;
                this.bufferTimeChangeEnd();
            };
        }
        final protected function setBufferLength(value:Number):void{
            if (value != this._bufferLength){
                this.bufferLengthChangeStart(value);
                this._bufferLength = value;
                this.bufferLengthChangeEnd();
            };
        }
        final protected function setBuffering(value:Boolean):void{
            if (value != this._buffering){
                this.bufferingChangeStart(value);
                this._buffering = value;
                this.bufferingChangeEnd();
            };
        }
        protected function bufferingChangeStart(newBuffering:Boolean):void{
        }
        protected function bufferingChangeEnd():void{
            dispatchEvent(new BufferEvent(BufferEvent.BUFFERING_CHANGE, false, false, this._buffering));
        }
        protected function bufferLengthChangeStart(newSize:Number):void{
        }
        protected function bufferLengthChangeEnd():void{
        }
        protected function bufferTimeChangeStart(newTime:Number):void{
        }
        protected function bufferTimeChangeEnd():void{
            dispatchEvent(new BufferEvent(BufferEvent.BUFFER_TIME_CHANGE, false, false, false, this._bufferTime));
        }

    }
}//package org.osmf.traits 
﻿package org.osmf.traits {

    public final class LoadState {

        public static const UNINITIALIZED:String = "uninitialized";
        public static const LOADING:String = "loading";
        public static const UNLOADING:String = "unloading";
        public static const READY:String = "ready";
        public static const LOAD_ERROR:String = "loadError";

    }
}//package org.osmf.traits 
﻿package org.osmf.traits {
    import org.osmf.events.*;

    public class TimeTrait extends MediaTraitBase {

        private var _duration:Number;
        private var _currentTime:Number;

        public function TimeTrait(duration:Number=NaN){
            super(MediaTraitType.TIME);
            this._duration = duration;
        }
        public function get duration():Number{
            return (this._duration);
        }
        public function get currentTime():Number{
            return (this._currentTime);
        }
        protected function durationChangeStart(newDuration:Number):void{
        }
        protected function durationChangeEnd(oldDuration:Number):void{
            dispatchEvent(new TimeEvent(TimeEvent.DURATION_CHANGE, false, false, this._duration));
        }
        protected function currentTimeChangeStart(newCurrentTime:Number):void{
        }
        protected function currentTimeChangeEnd(oldCurrentTime:Number):void{
        }
        protected function signalComplete():void{
            dispatchEvent(new TimeEvent(TimeEvent.COMPLETE));
        }
        final protected function setCurrentTime(value:Number):void{
            var _local2:Number;
            if (!isNaN(value)){
                if (!isNaN(this._duration)){
                    value = Math.min(value, this._duration);
                } else {
                    value = 0;
                };
            };
            if (((!((this._currentTime == value))) && (!(((isNaN(this._currentTime)) && (isNaN(value))))))){
                this.currentTimeChangeStart(value);
                _local2 = this._currentTime;
                this._currentTime = value;
                this.currentTimeChangeEnd(_local2);
                if ((((this.currentTime == this.duration)) && ((this.currentTime > 0)))){
                    this.signalComplete();
                };
            };
        }
        final protected function setDuration(value:Number):void{
            var _local2:Number;
            if (this._duration != value){
                this.durationChangeStart(value);
                _local2 = this._duration;
                this._duration = value;
                this.durationChangeEnd(_local2);
                if (((((!(isNaN(this._currentTime))) && (!(isNaN(this._duration))))) && ((this._currentTime > this._duration)))){
                    this.setCurrentTime(this.duration);
                };
            };
        }

    }
}//package org.osmf.traits 
﻿package org.osmf.traits {
    import org.osmf.media.*;
    import org.osmf.events.*;
    import org.osmf.utils.*;
    import flash.errors.*;

    public class LoadTrait extends MediaTraitBase {

        private var loader:LoaderBase;
        private var _resource:MediaResourceBase;
        private var _loadState:String;
        private var _bytesLoaded:Number;
        private var _bytesTotal:Number;

        public function LoadTrait(loader:LoaderBase, resource:MediaResourceBase){
            super(MediaTraitType.LOAD);
            this.loader = loader;
            this._resource = resource;
            this._loadState = LoadState.UNINITIALIZED;
            if (loader != null){
                loader.addEventListener(LoaderEvent.LOAD_STATE_CHANGE, this.onLoadStateChange, false, int.MAX_VALUE, true);
            };
        }
        public function get resource():MediaResourceBase{
            return (this._resource);
        }
        public function get loadState():String{
            return (this._loadState);
        }
        public function load():void{
            if (this.loader){
                if (this._loadState == LoadState.READY){
                    throw (new IllegalOperationError(OSMFStrings.getString(OSMFStrings.ALREADY_READY)));
                };
                if (this._loadState == LoadState.LOADING){
                    throw (new IllegalOperationError(OSMFStrings.getString(OSMFStrings.ALREADY_LOADING)));
                };
                this.loader.load(this);
            } else {
                throw (new IllegalOperationError(OSMFStrings.getString(OSMFStrings.MUST_SET_LOADER)));
            };
        }
        public function unload():void{
            if (this.loader){
                if (this._loadState == LoadState.UNLOADING){
                    throw (new IllegalOperationError(OSMFStrings.getString(OSMFStrings.ALREADY_UNLOADING)));
                };
                if (this._loadState == LoadState.UNINITIALIZED){
                    throw (new IllegalOperationError(OSMFStrings.getString(OSMFStrings.ALREADY_UNLOADED)));
                };
                this.loader.unload(this);
            } else {
                throw (new IllegalOperationError(OSMFStrings.getString(OSMFStrings.MUST_SET_LOADER)));
            };
        }
        public function get bytesLoaded():Number{
            return (this._bytesLoaded);
        }
        public function get bytesTotal():Number{
            return (this._bytesTotal);
        }
        final protected function setLoadState(newState:String):void{
            if (this._loadState != newState){
                this.loadStateChangeStart(newState);
                this._loadState = newState;
                this.loadStateChangeEnd();
            };
        }
        final protected function setBytesLoaded(value:Number):void{
            if (((((isNaN(value)) || ((value > this.bytesTotal)))) || ((value < 0)))){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.INVALID_PARAM)));
            };
            if (value != this._bytesLoaded){
                this.bytesLoadedChangeStart(value);
                this._bytesLoaded = value;
                this.bytesLoadedChangeEnd();
            };
        }
        final protected function setBytesTotal(value:Number):void{
            if ((((value < this._bytesLoaded)) || ((value < 0)))){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.INVALID_PARAM)));
            };
            if (value != this._bytesTotal){
                this.bytesTotalChangeStart(value);
                this._bytesTotal = value;
                this.bytesTotalChangeEnd();
            };
        }
        protected function bytesLoadedChangeStart(newValue:Number):void{
        }
        protected function bytesLoadedChangeEnd():void{
        }
        protected function bytesTotalChangeStart(newValue:Number):void{
        }
        protected function bytesTotalChangeEnd():void{
            dispatchEvent(new LoadEvent(LoadEvent.BYTES_TOTAL_CHANGE, false, false, null, this._bytesTotal));
        }
        protected function loadStateChangeStart(newState:String):void{
        }
        protected function loadStateChangeEnd():void{
            dispatchEvent(new LoadEvent(LoadEvent.LOAD_STATE_CHANGE, false, false, this._loadState));
        }
        private function onLoadStateChange(event:LoaderEvent):void{
            if (event.loadTrait == this){
                this.setLoadState(event.newState);
            };
        }

    }
}//package org.osmf.traits 
﻿package org.osmf.layout {
    import org.osmf.media.*;
    import flash.display.*;
    import org.osmf.events.*;
    import flash.events.*;
    import flash.utils.*;
    import org.osmf.traits.*;
    import org.osmf.utils.*;
    import flash.errors.*;

    public class MediaElementLayoutTarget extends EventDispatcher implements ILayoutTarget {

        private static const layoutTargets:Dictionary = new Dictionary(true);

        private var _mediaElement:MediaElement;
        private var _layoutMetadata:LayoutMetadata;
        private var displayObjectTrait:DisplayObjectTrait;
        private var _displayObject:DisplayObject;
        private var renderers:LayoutTargetRenderers;

        public function MediaElementLayoutTarget(mediaElement:MediaElement, constructorLock:Class){
            if (constructorLock != ConstructorLock){
                throw (new IllegalOperationError(OSMFStrings.getString(OSMFStrings.ILLEGAL_CONSTRUCTOR_INVOCATION)));
            };
            this._mediaElement = mediaElement;
            this._mediaElement.addEventListener(MediaElementEvent.TRAIT_ADD, this.onMediaElementTraitsChange);
            this._mediaElement.addEventListener(MediaElementEvent.TRAIT_REMOVE, this.onMediaElementTraitsChange);
            this._mediaElement.addEventListener(MediaElementEvent.METADATA_ADD, this.onMetadataAdd);
            this._mediaElement.addEventListener(MediaElementEvent.METADATA_REMOVE, this.onMetadataRemove);
            this.renderers = new LayoutTargetRenderers(this);
            this._layoutMetadata = (this._mediaElement.getMetadata(LayoutMetadata.LAYOUT_NAMESPACE) as LayoutMetadata);
            addEventListener(LayoutTargetEvent.ADD_CHILD_AT, this.onAddChildAt);
            addEventListener(LayoutTargetEvent.SET_CHILD_INDEX, this.onSetChildIndex);
            addEventListener(LayoutTargetEvent.REMOVE_CHILD, this.onRemoveChild);
            this.onMediaElementTraitsChange();
        }
        public static function getInstance(mediaElement:MediaElement):MediaElementLayoutTarget{
            var _local2:*;
            for (_local2 in layoutTargets) {
                if (_local2.mediaElement == mediaElement){
                    break;
                };
                _local2 = null;
            };
            if (_local2 == null){
                _local2 = new MediaElementLayoutTarget(mediaElement, ConstructorLock);
                layoutTargets[_local2] = true;
            };
            return (_local2);
        }

        public function get mediaElement():MediaElement{
            return (this._mediaElement);
        }
        public function get layoutMetadata():LayoutMetadata{
            if (this._layoutMetadata == null){
                this._layoutMetadata = new LayoutMetadata();
                this._mediaElement.addMetadata(LayoutMetadata.LAYOUT_NAMESPACE, this._layoutMetadata);
            };
            return (this._layoutMetadata);
        }
        public function get displayObject():DisplayObject{
            return (this._displayObject);
        }
        public function get measuredWidth():Number{
            return (((this.displayObjectTrait) ? this.displayObjectTrait.mediaWidth : NaN));
        }
        public function get measuredHeight():Number{
            return (((this.displayObjectTrait) ? this.displayObjectTrait.mediaHeight : NaN));
        }
        public function measure(deep:Boolean=true):void{
            if ((this._displayObject is ILayoutTarget)){
                ILayoutTarget(this._displayObject).measure(deep);
            };
        }
        public function layout(availableWidth:Number, availableHeight:Number, deep:Boolean=true):void{
            if ((this._displayObject is ILayoutTarget)){
                ILayoutTarget(this._displayObject).layout(availableWidth, availableHeight, deep);
            } else {
                if (((!((this._displayObject == null))) && ((this.renderers.containerRenderer == null)))){
                    this._displayObject.width = availableWidth;
                    this._displayObject.height = availableHeight;
                };
            };
        }
        private function onMediaElementTraitsChange(event:MediaElementEvent=null):void{
            var _local2:DisplayObjectTrait;
            if ((((event == null)) || (((event) && ((event.traitType == MediaTraitType.DISPLAY_OBJECT)))))){
                _local2 = ((((event) && ((event.type == MediaElementEvent.TRAIT_REMOVE)))) ? null : (this._mediaElement.getTrait(MediaTraitType.DISPLAY_OBJECT) as DisplayObjectTrait));
                if (_local2 != this.displayObjectTrait){
                    if (this.displayObjectTrait){
                        this.displayObjectTrait.removeEventListener(DisplayObjectEvent.DISPLAY_OBJECT_CHANGE, this.onDisplayObjectTraitDisplayObjecChange);
                        this.displayObjectTrait.removeEventListener(DisplayObjectEvent.MEDIA_SIZE_CHANGE, this.onDisplayObjectTraitMediaSizeChange);
                    };
                    this.displayObjectTrait = _local2;
                    if (this.displayObjectTrait){
                        this.displayObjectTrait.addEventListener(DisplayObjectEvent.DISPLAY_OBJECT_CHANGE, this.onDisplayObjectTraitDisplayObjecChange);
                        this.displayObjectTrait.addEventListener(DisplayObjectEvent.MEDIA_SIZE_CHANGE, this.onDisplayObjectTraitMediaSizeChange);
                    };
                    this.updateDisplayObject(((this.displayObjectTrait) ? this.displayObjectTrait.displayObject : null));
                };
            };
        }
        private function onMetadataAdd(event:MediaElementEvent):void{
            if (event.namespaceURL == LayoutMetadata.LAYOUT_NAMESPACE){
                this._layoutMetadata = (event.metadata as LayoutMetadata);
            };
        }
        private function onMetadataRemove(event:MediaElementEvent):void{
            if (event.namespaceURL == LayoutMetadata.LAYOUT_NAMESPACE){
                this._layoutMetadata = null;
            };
        }
        private function updateDisplayObject(newDisplayObject:DisplayObject):void{
            var _local2:DisplayObject = this._displayObject;
            if (newDisplayObject != this.displayObject){
                this._displayObject = newDisplayObject;
                dispatchEvent(new DisplayObjectEvent(DisplayObjectEvent.DISPLAY_OBJECT_CHANGE, false, false, _local2, newDisplayObject));
            };
            if ((((newDisplayObject is ILayoutTarget)) && (this.renderers.parentRenderer))){
                ILayoutTarget(newDisplayObject).dispatchEvent(new LayoutTargetEvent(LayoutTargetEvent.ADD_TO_LAYOUT_RENDERER, false, false, this.renderers.parentRenderer));
            };
        }
        private function onDisplayObjectTraitDisplayObjecChange(event:DisplayObjectEvent):void{
            this.updateDisplayObject(event.newDisplayObject);
        }
        private function onDisplayObjectTraitMediaSizeChange(event:DisplayObjectEvent):void{
            dispatchEvent(event.clone());
        }
        private function onAddChildAt(event:LayoutTargetEvent):void{
            if ((this._displayObject is ILayoutTarget)){
                ILayoutTarget(this._displayObject).dispatchEvent(event.clone());
            } else {
                if ((this._displayObject is DisplayObjectContainer)){
                    DisplayObjectContainer(this._displayObject).addChildAt(event.displayObject, event.index);
                };
            };
        }
        private function onRemoveChild(event:LayoutTargetEvent):void{
            if ((this._displayObject is ILayoutTarget)){
                ILayoutTarget(this._displayObject).dispatchEvent(event.clone());
            } else {
                if ((this._displayObject is DisplayObjectContainer)){
                    DisplayObjectContainer(this._displayObject).removeChild(event.displayObject);
                };
            };
        }
        private function onSetChildIndex(event:LayoutTargetEvent):void{
            if ((this._displayObject is ILayoutTarget)){
                ILayoutTarget(this._displayObject).dispatchEvent(event.clone());
            } else {
                if ((this._displayObject is DisplayObjectContainer)){
                    DisplayObjectContainer(this._displayObject).setChildIndex(event.displayObject, event.index);
                };
            };
        }

    }
}//package org.osmf.layout 

class ConstructorLock {

    public function ConstructorLock(){
    }
}
﻿package org.osmf.layout {

    public final class ScaleMode {

        public static const NONE:String = "none";
        public static const STRETCH:String = "stretch";
        public static const LETTERBOX:String = "letterbox";
        public static const ZOOM:String = "zoom";

    }
}//package org.osmf.layout 
﻿package org.osmf.layout {
    import flash.utils.*;
    import flash.geom.*;
    import org.osmf.metadata.*;
    import __AS3__.vec.*;

    public class LayoutRenderer extends LayoutRendererBase {

        private static const USED_METADATAS_COUNT:int = 6;
        private static const USED_METADATAS:Vector.<String> = new Vector.<String>(USED_METADATAS_COUNT, true);
;
        private static const X:int = 1;
        private static const Y:int = 2;
        private static const WIDTH:int = 4;
        private static const HEIGHT:int = 8;
        private static const POSITION:int = 3;
        private static const DIMENSIONS:int = 12;
        private static const ALL:int = 15;

        private var layoutMode:String = "none";
        private var lastCalculatedBounds:Rectangle;
        private var targetMetadataWatchers:Dictionary;
        private var containerAbsoluteWatcher:MetadataWatcher;
        private var containerAttributesWatcher:MetadataWatcher;

        public function LayoutRenderer(){
            this.targetMetadataWatchers = new Dictionary();
            super();
        }
        override protected function get usedMetadatas():Vector.<String>{
            return (USED_METADATAS);
        }
        override protected function processContainerChange(oldContainer:ILayoutTarget, newContainer:ILayoutTarget):void{
            var oldContainer:* = oldContainer;
            var newContainer:* = newContainer;
            if (oldContainer){
                this.containerAbsoluteWatcher.unwatch();
                this.containerAttributesWatcher.unwatch();
            };
            if (newContainer){
                this.containerAbsoluteWatcher = new MetadataWatcher(newContainer.layoutMetadata, MetadataNamespaces.ABSOLUTE_LAYOUT_PARAMETERS, null, function (... _args):void{
                    invalidate();
                });
                this.containerAbsoluteWatcher.watch();
                this.containerAttributesWatcher = new MetadataWatcher(newContainer.layoutMetadata, MetadataNamespaces.LAYOUT_ATTRIBUTES, null, function (facet:LayoutAttributesMetadata):void{
                    layoutMode = ((facet) ? facet.layoutMode : LayoutMode.NONE);
                    invalidate();
                });
                this.containerAttributesWatcher.watch();
            };
            invalidate();
        }
        override protected function processUpdateMediaDisplayBegin(targets:Vector.<ILayoutTarget>):void{
            this.lastCalculatedBounds = null;
        }
        override protected function processUpdateMediaDisplayEnd():void{
            this.lastCalculatedBounds = null;
        }
        override protected function processTargetAdded(target:ILayoutTarget):void{
            var target:* = target;
            var attributes:* = (target.layoutMetadata.getValue(MetadataNamespaces.LAYOUT_ATTRIBUTES) as LayoutAttributesMetadata);
            var relative:* = (target.layoutMetadata.getValue(MetadataNamespaces.RELATIVE_LAYOUT_PARAMETERS) as RelativeLayoutMetadata);
            if ((((((((((((this.layoutMode == LayoutMode.NONE)) || ((this.layoutMode == LayoutMode.OVERLAY)))) && ((relative == null)))) && ((attributes == null)))) && ((target.layoutMetadata.getValue(MetadataNamespaces.ABSOLUTE_LAYOUT_PARAMETERS) == null)))) && ((target.layoutMetadata.getValue(MetadataNamespaces.ANCHOR_LAYOUT_PARAMETERS) == null)))){
                relative = new RelativeLayoutMetadata();
                relative.width = 100;
                relative.height = 100;
                target.layoutMetadata.addValue(MetadataNamespaces.RELATIVE_LAYOUT_PARAMETERS, relative);
                attributes = new LayoutAttributesMetadata();
                attributes.scaleMode = ((attributes.scaleMode) || (ScaleMode.LETTERBOX));
                attributes.verticalAlign = ((attributes.verticalAlign) || (VerticalAlign.MIDDLE));
                attributes.horizontalAlign = ((attributes.horizontalAlign) || (HorizontalAlign.CENTER));
                target.layoutMetadata.addValue(MetadataNamespaces.LAYOUT_ATTRIBUTES, attributes);
            };
            var watcher:* = new MetadataWatcher(target.layoutMetadata, MetadataNamespaces.OVERLAY_LAYOUT_PARAMETERS, OverlayLayoutMetadata.INDEX, function (... _args):void{
                updateTargetOrder(target);
            });
            watcher.watch();
            this.targetMetadataWatchers[target] = watcher;
        }
        override protected function processTargetRemoved(target:ILayoutTarget):void{
            var _local2:MetadataWatcher = this.targetMetadataWatchers[target];
            delete this.targetMetadataWatchers[target];
            _local2.unwatch();
            _local2 = null;
        }
        override protected function compareTargets(x:ILayoutTarget, y:ILayoutTarget):Number{
            var _local3:OverlayLayoutMetadata = (x.layoutMetadata.getValue(MetadataNamespaces.OVERLAY_LAYOUT_PARAMETERS) as OverlayLayoutMetadata);
            var _local4:OverlayLayoutMetadata = (y.layoutMetadata.getValue(MetadataNamespaces.OVERLAY_LAYOUT_PARAMETERS) as OverlayLayoutMetadata);
            var _local5:Number = ((_local3) ? _local3.index : NaN);
            var _local6:Number = ((_local4) ? _local4.index : NaN);
            if (((isNaN(_local5)) && (isNaN(_local6)))){
                return (1);
            };
            _local5 = ((_local5) || (0));
            _local6 = ((_local6) || (0));
            return (((_local5)<_local6) ? -1 : ((_local5)>_local6) ? 1 : 0);
        }
        override protected function calculateTargetBounds(target:ILayoutTarget, availableWidth:Number, availableHeight:Number):Rectangle{
            var _local7:Number;
            var _local9:Number;
            var _local13:BoxAttributesMetadata;
            var _local14:RelativeLayoutMetadata;
            var _local15:AnchorLayoutMetadata;
            var _local16:Point;
            var _local4:LayoutAttributesMetadata = (((target.layoutMetadata.getValue(MetadataNamespaces.LAYOUT_ATTRIBUTES) as LayoutAttributesMetadata)) || (new LayoutAttributesMetadata()));
            if (_local4.includeInLayout == false){
                return (new Rectangle());
            };
            var _local5:Rectangle = new Rectangle(0, 0, target.measuredWidth, target.measuredHeight);
            var _local6:AbsoluteLayoutMetadata = (target.layoutMetadata.getValue(MetadataNamespaces.ABSOLUTE_LAYOUT_PARAMETERS) as AbsoluteLayoutMetadata);
            var _local8 = 0;
            var _local10 = 0;
            var _local11:int = ALL;
            if (_local6){
                if (!isNaN(_local6.x)){
                    _local5.x = _local6.x;
                    _local11 = (_local11 ^ X);
                };
                if (!isNaN(_local6.y)){
                    _local5.y = _local6.y;
                    _local11 = (_local11 ^ Y);
                };
                if (!isNaN(_local6.width)){
                    _local5.width = _local6.width;
                    _local11 = (_local11 ^ WIDTH);
                };
                if (!isNaN(_local6.height)){
                    _local5.height = _local6.height;
                    _local11 = (_local11 ^ HEIGHT);
                };
            };
            if (_local11 != 0){
                _local14 = (target.layoutMetadata.getValue(MetadataNamespaces.RELATIVE_LAYOUT_PARAMETERS) as RelativeLayoutMetadata);
                if (_local14){
                    if ((((_local11 & X)) && (!(isNaN(_local14.x))))){
                        _local5.x = ((((availableWidth * _local14.x) / 100)) || (0));
                        _local11 = (_local11 ^ X);
                    };
                    if ((((_local11 & WIDTH)) && (!(isNaN(_local14.width))))){
                        if (this.layoutMode == LayoutMode.HORIZONTAL){
                            _local13 = (((container.layoutMetadata.getValue(MetadataNamespaces.BOX_LAYOUT_ATTRIBUTES) as BoxAttributesMetadata)) || (new BoxAttributesMetadata()));
                            _local5.width = ((Math.max(0, (availableWidth - _local13.absoluteSum)) * _local14.width) / _local13.relativeSum);
                        } else {
                            _local5.width = ((availableWidth * _local14.width) / 100);
                        };
                        _local11 = (_local11 ^ WIDTH);
                    };
                    if ((((_local11 & Y)) && (!(isNaN(_local14.y))))){
                        _local5.y = ((((availableHeight * _local14.y) / 100)) || (0));
                        _local11 = (_local11 ^ Y);
                    };
                    if ((((_local11 & HEIGHT)) && (!(isNaN(_local14.height))))){
                        if (this.layoutMode == LayoutMode.VERTICAL){
                            _local13 = (((container.layoutMetadata.getValue(MetadataNamespaces.BOX_LAYOUT_ATTRIBUTES) as BoxAttributesMetadata)) || (new BoxAttributesMetadata()));
                            _local5.height = ((Math.max(0, (availableHeight - _local13.absoluteSum)) * _local14.height) / _local13.relativeSum);
                        } else {
                            _local5.height = ((availableHeight * _local14.height) / 100);
                        };
                        _local11 = (_local11 ^ HEIGHT);
                    };
                };
            };
            if (_local4.scaleMode){
                if ((((_local11 & WIDTH)) || ((_local11 & HEIGHT)))){
                    if ((((_local11 & WIDTH)) && (!(isNaN(target.measuredWidth))))){
                        _local5.width = target.measuredWidth;
                        _local11 = (_local11 ^ WIDTH);
                    };
                    if ((((_local11 & HEIGHT)) && (!(isNaN(target.measuredHeight))))){
                        _local5.height = target.measuredHeight;
                        _local11 = (_local11 ^ HEIGHT);
                    };
                };
            };
            if (_local11 != 0){
                _local15 = (target.layoutMetadata.getValue(MetadataNamespaces.ANCHOR_LAYOUT_PARAMETERS) as AnchorLayoutMetadata);
                if (_local15){
                    if ((((_local11 & X)) && (!(isNaN(_local15.left))))){
                        _local5.x = _local15.left;
                        _local11 = (_local11 ^ X);
                    };
                    if ((((_local11 & Y)) && (!(isNaN(_local15.top))))){
                        _local5.y = _local15.top;
                        _local11 = (_local11 ^ Y);
                    };
                    if (((!(isNaN(_local15.right))) && (availableWidth))){
                        if ((((_local11 & X)) && (!((_local11 & WIDTH))))){
                            _local5.x = Math.max(0, ((availableWidth - _local5.width) - _local15.right));
                            _local11 = (_local11 ^ X);
                        } else {
                            if ((((_local11 & WIDTH)) && (!((_local11 & X))))){
                                _local5.width = Math.max(0, ((availableWidth - _local15.right) - _local5.x));
                                _local11 = (_local11 ^ WIDTH);
                            } else {
                                _local5.x = Math.max(0, ((availableWidth - target.measuredWidth) - _local15.right));
                                _local11 = (_local11 ^ X);
                            };
                        };
                        _local8 = (_local8 + _local15.right);
                    };
                    if (((!(isNaN(_local15.bottom))) && (availableHeight))){
                        if ((((_local11 & Y)) && (!((_local11 & HEIGHT))))){
                            _local5.y = Math.max(0, ((availableHeight - _local5.height) - _local15.bottom));
                            _local11 = (_local11 ^ Y);
                        } else {
                            if ((((_local11 & HEIGHT)) && (!((_local11 & Y))))){
                                _local5.height = Math.max(0, ((availableHeight - _local15.bottom) - _local5.y));
                                _local11 = (_local11 ^ HEIGHT);
                            } else {
                                _local5.y = Math.max(0, ((availableHeight - target.measuredHeight) - _local15.bottom));
                                _local11 = (_local11 ^ Y);
                            };
                        };
                        _local10 = (_local10 + _local15.bottom);
                    };
                };
            };
            var _local12:PaddingLayoutMetadata = (target.layoutMetadata.getValue(MetadataNamespaces.PADDING_LAYOUT_PARAMETERS) as PaddingLayoutMetadata);
            if (_local12){
                if (!isNaN(_local12.left)){
                    _local5.x = (_local5.x + _local12.left);
                };
                if (!isNaN(_local12.top)){
                    _local5.y = (_local5.y + _local12.top);
                };
                if (((!(isNaN(_local12.right))) && (!((_local11 & WIDTH))))){
                    _local5.width = (_local5.width - (_local12.right + ((_local12.left) || (0))));
                };
                if (((!(isNaN(_local12.bottom))) && (!((_local11 & HEIGHT))))){
                    _local5.height = (_local5.height - (_local12.bottom + ((_local12.top) || (0))));
                };
            };
            if (_local4.scaleMode){
                if (((((((!(isNaN(target.measuredWidth))) && (!((_local11 & WIDTH))))) && (!(isNaN(target.measuredHeight))))) && (!((_local11 & HEIGHT))))){
                    _local16 = ScaleModeUtils.getScaledSize(_local4.scaleMode, _local5.width, _local5.height, target.measuredWidth, target.measuredHeight);
                    _local7 = (_local5.width - _local16.x);
                    _local9 = (_local5.height - _local16.y);
                    _local5.width = _local16.x;
                    _local5.height = _local16.y;
                };
            };
            if (this.layoutMode != LayoutMode.HORIZONTAL){
                _local7 = ((_local7) || ((((availableWidth - ((_local5.x) || (0))) - ((_local5.width) || (0))) - _local8)));
            };
            if (this.layoutMode != LayoutMode.VERTICAL){
                _local9 = ((_local9) || ((((availableHeight - ((_local5.y) || (0))) - ((_local5.height) || (0))) - _local10)));
            };
            if (_local9){
                switch (_local4.verticalAlign){
                    case null:
                    case VerticalAlign.TOP:
                        break;
                    case VerticalAlign.MIDDLE:
                        _local5.y = (_local5.y + (_local9 / 2));
                        break;
                    case VerticalAlign.BOTTOM:
                        _local5.y = (_local5.y + _local9);
                        break;
                };
            };
            if (_local7){
                switch (_local4.horizontalAlign){
                    case null:
                    case HorizontalAlign.LEFT:
                        break;
                    case HorizontalAlign.CENTER:
                        _local5.x = (_local5.x + (_local7 / 2));
                        break;
                    case HorizontalAlign.RIGHT:
                        _local5.x = (_local5.x + _local7);
                        break;
                };
            };
            if (_local4.snapToPixel){
                _local5.x = Math.round(_local5.x);
                _local5.y = Math.round(_local5.y);
                _local5.width = Math.round(_local5.width);
                _local5.height = Math.round(_local5.height);
            };
            if ((((this.layoutMode == LayoutMode.HORIZONTAL)) || ((this.layoutMode == LayoutMode.VERTICAL)))){
                if (this.lastCalculatedBounds != null){
                    if (this.layoutMode == LayoutMode.HORIZONTAL){
                        _local5.x = (this.lastCalculatedBounds.x + this.lastCalculatedBounds.width);
                    } else {
                        _local5.y = (this.lastCalculatedBounds.y + this.lastCalculatedBounds.height);
                    };
                };
                this.lastCalculatedBounds = _local5;
            };
            return (_local5);
        }
        override protected function calculateContainerSize(targets:Vector.<ILayoutTarget>):Point{
            var _local4:BoxAttributesMetadata;
            var _local5:Rectangle;
            var _local6:Rectangle;
            var _local7:Rectangle;
            var _local8:ILayoutTarget;
            var _local2:Point = new Point(NaN, NaN);
            var _local3:AbsoluteLayoutMetadata = (container.layoutMetadata.getValue(MetadataNamespaces.ABSOLUTE_LAYOUT_PARAMETERS) as AbsoluteLayoutMetadata);
            if (_local3){
                _local2.x = _local3.width;
                _local2.y = _local3.height;
            };
            if (((!((this.layoutMode == LayoutMode.NONE))) && (!((this.layoutMode == LayoutMode.OVERLAY))))){
                _local4 = new BoxAttributesMetadata();
                container.layoutMetadata.addValue(MetadataNamespaces.BOX_LAYOUT_ATTRIBUTES, _local4);
            };
            if (((((isNaN(_local2.x)) || (isNaN(_local2.y)))) || (((!((this.layoutMode == LayoutMode.NONE))) && (!((this.layoutMode == LayoutMode.OVERLAY))))))){
                _local5 = new Rectangle();
                for each (_local8 in targets) {
                    if (_local8.layoutMetadata.includeInLayout){
                        _local6 = this.calculateTargetBounds(_local8, _local2.x, _local2.y);
                        this.calculateTargetBounds(_local8, _local2.x, _local2.y).x = ((_local6.x) || (0));
                        _local6.y = ((_local6.y) || (0));
                        _local6.width = ((_local6.width) || (((_local8.measuredWidth) || (0))));
                        _local6.height = ((_local6.height) || (((_local8.measuredHeight) || (0))));
                        if (this.layoutMode == LayoutMode.HORIZONTAL){
                            if (!isNaN(_local8.layoutMetadata.percentWidth)){
                                _local4.relativeSum = (_local4.relativeSum + _local8.layoutMetadata.percentWidth);
                            } else {
                                _local4.absoluteSum = (_local4.absoluteSum + _local6.width);
                            };
                            if (_local7){
                                _local6.x = (_local7.x + _local7.width);
                            };
                            _local7 = _local6;
                        } else {
                            if (this.layoutMode == LayoutMode.VERTICAL){
                                if (!isNaN(_local8.layoutMetadata.percentHeight)){
                                    _local4.relativeSum = (_local4.relativeSum + _local8.layoutMetadata.percentHeight);
                                } else {
                                    _local4.absoluteSum = (_local4.absoluteSum + _local6.height);
                                };
                                if (_local7){
                                    _local6.y = (_local7.y + _local7.height);
                                };
                                _local7 = _local6;
                            };
                        };
                        _local5 = _local5.union(_local6);
                    };
                };
                _local2.x = ((_local2.x) || ((((((_local3 == null)) || (isNaN(_local3.width)))) ? _local5.width : _local3.width)));
                _local2.y = ((_local2.y) || ((((((_local3 == null)) || (isNaN(_local3.height)))) ? _local5.height : _local3.height)));
            };
            return (_local2);
        }

        USED_METADATAS[0] = MetadataNamespaces.ABSOLUTE_LAYOUT_PARAMETERS;
        USED_METADATAS[1] = MetadataNamespaces.RELATIVE_LAYOUT_PARAMETERS;
        USED_METADATAS[2] = MetadataNamespaces.ANCHOR_LAYOUT_PARAMETERS;
        USED_METADATAS[3] = MetadataNamespaces.PADDING_LAYOUT_PARAMETERS;
        USED_METADATAS[4] = MetadataNamespaces.LAYOUT_ATTRIBUTES;
        USED_METADATAS[5] = MetadataNamespaces.OVERLAY_LAYOUT_PARAMETERS;
    }
}//package org.osmf.layout 
﻿package org.osmf.layout {
    import org.osmf.events.*;
    import org.osmf.metadata.*;

    class BoxAttributesMetadata extends NonSynthesizingMetadata {

        public static const RELATIVE_SUM:String = "relativeSum";
        public static const ABSOLUTE_SUM:String = "absoluteSum";

        private var _relativeSum:Number;
        private var _absoluteSum:Number;

        public function BoxAttributesMetadata(){
            this._relativeSum = 0;
            this._absoluteSum = 0;
        }
        override public function getValue(key:String){
            if (key == null){
                return (undefined);
            };
            if (key == RELATIVE_SUM){
                return (this.relativeSum);
            };
            if (key == ABSOLUTE_SUM){
                return (this.absoluteSum);
            };
            return (undefined);
        }
        public function get relativeSum():Number{
            return (this._relativeSum);
        }
        public function set relativeSum(value:Number):void{
            var _local2:MetadataEvent;
            if (this._relativeSum != value){
                _local2 = new MetadataEvent(MetadataEvent.VALUE_CHANGE, false, false, RELATIVE_SUM, value, this._relativeSum);
                this._relativeSum = value;
                dispatchEvent(_local2);
            };
        }
        public function get absoluteSum():Number{
            return (this._absoluteSum);
        }
        public function set absoluteSum(value:Number):void{
            var _local2:MetadataEvent;
            if (this._absoluteSum != value){
                _local2 = new MetadataEvent(MetadataEvent.VALUE_CHANGE, false, false, ABSOLUTE_SUM, value, this._absoluteSum);
                this._absoluteSum = value;
                dispatchEvent(_local2);
            };
        }

    }
}//package org.osmf.layout 
﻿package org.osmf.layout {
    import org.osmf.events.*;
    import org.osmf.metadata.*;

    class AnchorLayoutMetadata extends NonSynthesizingMetadata {

        public static const LEFT:String = "left";
        public static const TOP:String = "top";
        public static const RIGHT:String = "right";
        public static const BOTTOM:String = "bottom";

        private var _left:Number;
        private var _top:Number;
        private var _right:Number;
        private var _bottom:Number;

        override public function getValue(key:String){
            if (key == null){
                return (undefined);
            };
            if (key == LEFT){
                return (this.left);
            };
            if (key == TOP){
                return (this.top);
            };
            if (key == RIGHT){
                return (this.right);
            };
            if (key == BOTTOM){
                return (this.bottom);
            };
            return (undefined);
        }
        public function get left():Number{
            return (this._left);
        }
        public function set left(value:Number):void{
            var _local2:MetadataEvent;
            if (this._left != value){
                _local2 = new MetadataEvent(MetadataEvent.VALUE_CHANGE, false, false, LEFT, value, this._left);
                this._left = value;
                dispatchEvent(_local2);
            };
        }
        public function get top():Number{
            return (this._top);
        }
        public function set top(value:Number):void{
            var _local2:MetadataEvent;
            if (this._top != value){
                _local2 = new MetadataEvent(MetadataEvent.VALUE_CHANGE, false, false, TOP, value, this._top);
                this._top = value;
                dispatchEvent(_local2);
            };
        }
        public function get right():Number{
            return (this._right);
        }
        public function set right(value:Number):void{
            var _local2:MetadataEvent;
            if (this._right != value){
                _local2 = new MetadataEvent(MetadataEvent.VALUE_CHANGE, false, false, RIGHT, value, this._right);
                this._right = value;
                dispatchEvent(_local2);
            };
        }
        public function get bottom():Number{
            return (this._bottom);
        }
        public function set bottom(value:Number):void{
            var _local2:MetadataEvent;
            if (this._bottom != value){
                _local2 = new MetadataEvent(MetadataEvent.VALUE_CHANGE, false, false, BOTTOM, value, this._bottom);
                this._bottom = value;
                dispatchEvent(_local2);
            };
        }

    }
}//package org.osmf.layout 
﻿package org.osmf.layout {
    import flash.display.*;
    import flash.events.*;

    public interface ILayoutTarget extends IEventDispatcher {

        function get displayObject():DisplayObject;
        function get layoutMetadata():LayoutMetadata;
        function get measuredWidth():Number;
        function get measuredHeight():Number;
        function measure(_arg1:Boolean=true):void;
        function layout(_arg1:Number, _arg2:Number, _arg3:Boolean=true):void;

    }
}//package org.osmf.layout 
﻿package org.osmf.layout {
    import org.osmf.events.*;
    import org.osmf.metadata.*;

    class RelativeLayoutMetadata extends NonSynthesizingMetadata {

        public static const X:String = "x";
        public static const Y:String = "y";
        public static const WIDTH:String = "width";
        public static const HEIGHT:String = "height";

        private var _x:Number;
        private var _y:Number;
        private var _width:Number;
        private var _height:Number;

        override public function getValue(key:String){
            if (key == null){
                return (undefined);
            };
            if (key == X){
                return (this.x);
            };
            if (key == Y){
                return (this.y);
            };
            if (key == WIDTH){
                return (this.width);
            };
            if (key == HEIGHT){
                return (this.height);
            };
            return (undefined);
        }
        public function get x():Number{
            return (this._x);
        }
        public function set x(value:Number):void{
            var _local2:MetadataEvent;
            if (this._x != value){
                _local2 = new MetadataEvent(MetadataEvent.VALUE_CHANGE, false, false, X, value, this._x);
                this._x = value;
                dispatchEvent(_local2);
            };
        }
        public function get y():Number{
            return (this._y);
        }
        public function set y(value:Number):void{
            var _local2:MetadataEvent;
            if (this._y != value){
                _local2 = new MetadataEvent(MetadataEvent.VALUE_CHANGE, false, false, Y, value, this._y);
                this._y = value;
                dispatchEvent(_local2);
            };
        }
        public function get width():Number{
            return (this._width);
        }
        public function set width(value:Number):void{
            var _local2:MetadataEvent;
            if (this._width != value){
                _local2 = new MetadataEvent(MetadataEvent.VALUE_CHANGE, false, false, WIDTH, value, this._width);
                this._width = value;
                dispatchEvent(_local2);
            };
        }
        public function get height():Number{
            return (this._height);
        }
        public function set height(value:Number):void{
            var _local2:MetadataEvent;
            if (this._height != value){
                _local2 = new MetadataEvent(MetadataEvent.VALUE_CHANGE, false, false, HEIGHT, value, this._height);
                this._height = value;
                dispatchEvent(_local2);
            };
        }

    }
}//package org.osmf.layout 
﻿package org.osmf.layout {
    import org.osmf.events.*;
    import org.osmf.metadata.*;

    class AbsoluteLayoutMetadata extends NonSynthesizingMetadata {

        public static const X:String = "x";
        public static const Y:String = "y";
        public static const WIDTH:String = "width";
        public static const HEIGHT:String = "height";

        private var _x:Number;
        private var _y:Number;
        private var _width:Number;
        private var _height:Number;

        override public function getValue(key:String){
            if (key == null){
                return (undefined);
            };
            if (key == X){
                return (this.x);
            };
            if (key == Y){
                return (this.y);
            };
            if (key == WIDTH){
                return (this.width);
            };
            if (key == HEIGHT){
                return (this.height);
            };
            return (undefined);
        }
        public function get x():Number{
            return (this._x);
        }
        public function set x(value:Number):void{
            var _local2:MetadataEvent;
            if (this._x != value){
                _local2 = new MetadataEvent(MetadataEvent.VALUE_CHANGE, false, false, X, value, this._x);
                this._x = value;
                dispatchEvent(_local2);
            };
        }
        public function get y():Number{
            return (this._y);
        }
        public function set y(value:Number):void{
            var _local2:MetadataEvent;
            if (this._y != value){
                _local2 = new MetadataEvent(MetadataEvent.VALUE_CHANGE, false, false, Y, value, this._y);
                this._y = value;
                dispatchEvent(_local2);
            };
        }
        public function get width():Number{
            return (this._width);
        }
        public function set width(value:Number):void{
            var _local2:MetadataEvent;
            if (this._width != value){
                _local2 = new MetadataEvent(MetadataEvent.VALUE_CHANGE, false, false, WIDTH, value, this._width);
                this._width = value;
                dispatchEvent(_local2);
            };
        }
        public function get height():Number{
            return (this._height);
        }
        public function set height(value:Number):void{
            var _local2:MetadataEvent;
            if (this._height != value){
                _local2 = new MetadataEvent(MetadataEvent.VALUE_CHANGE, false, false, HEIGHT, value, this._height);
                this._height = value;
                dispatchEvent(_local2);
            };
        }

    }
}//package org.osmf.layout 
﻿package org.osmf.layout {
    import org.osmf.events.*;
    import org.osmf.layout.*;
    import org.osmf.metadata.*;

    class LayoutAttributesMetadata extends NonSynthesizingMetadata {

        public static const SCALE_MODE:String = "scaleMode";
        public static const VERTICAL_ALIGN:String = "verticalAlign";
        public static const HORIZONTAL_ALIGN:String = "horizontalAlign";
        public static const SNAP_TO_PIXEL:String = "snapToPixel";
        public static const MODE:String = "layoutMode";
        public static const INCLUDE_IN_LAYOUT:String = "includeInLayout";

        private var _scaleMode:String;
        private var _verticalAlign:String;
        private var _horizontalAlign:String;
        private var _snapToPixel:Boolean;
        private var _layoutMode:String;
        private var _includeInLayout:Boolean;

        public function LayoutAttributesMetadata(){
            this._verticalAlign = null;
            this._horizontalAlign = null;
            this._scaleMode = null;
            this._snapToPixel = true;
            this._layoutMode = LayoutMode.NONE;
            this._includeInLayout = true;
        }
        override public function getValue(key:String){
            if (key == null){
                return (undefined);
            };
            if (key == SCALE_MODE){
                return (this.scaleMode);
            };
            if (key == VERTICAL_ALIGN){
                return (this.verticalAlign);
            };
            if (key == HORIZONTAL_ALIGN){
                return (this.horizontalAlign);
            };
            if (key == SNAP_TO_PIXEL){
                return (this.snapToPixel);
            };
            if (key == INCLUDE_IN_LAYOUT){
                return (this.snapToPixel);
            };
            return (undefined);
        }
        public function get scaleMode():String{
            return (this._scaleMode);
        }
        public function set scaleMode(value:String):void{
            var _local2:MetadataEvent;
            if (this._scaleMode != value){
                _local2 = new MetadataEvent(MetadataEvent.VALUE_CHANGE, false, false, SCALE_MODE, value, this._scaleMode);
                this._scaleMode = value;
                dispatchEvent(_local2);
            };
        }
        public function get verticalAlign():String{
            return (this._verticalAlign);
        }
        public function set verticalAlign(value:String):void{
            var _local2:MetadataEvent;
            if (this._verticalAlign != value){
                _local2 = new MetadataEvent(MetadataEvent.VALUE_CHANGE, false, false, VERTICAL_ALIGN, value, this._verticalAlign);
                this._verticalAlign = value;
                dispatchEvent(_local2);
            };
        }
        public function get horizontalAlign():String{
            return (this._horizontalAlign);
        }
        public function set horizontalAlign(value:String):void{
            var _local2:MetadataEvent;
            if (this._horizontalAlign != value){
                _local2 = new MetadataEvent(MetadataEvent.VALUE_CHANGE, false, false, HORIZONTAL_ALIGN, value, this._horizontalAlign);
                this._horizontalAlign = value;
                dispatchEvent(_local2);
            };
        }
        public function get snapToPixel():Boolean{
            return (this._snapToPixel);
        }
        public function set snapToPixel(value:Boolean):void{
            var _local2:MetadataEvent;
            if (this._snapToPixel != value){
                _local2 = new MetadataEvent(MetadataEvent.VALUE_CHANGE, false, false, SNAP_TO_PIXEL, value, this._snapToPixel);
                this._snapToPixel = value;
                dispatchEvent(_local2);
            };
        }
        public function get layoutMode():String{
            return (this._layoutMode);
        }
        public function set layoutMode(value:String):void{
            var _local2:MetadataEvent;
            if (this._layoutMode != value){
                _local2 = new MetadataEvent(MetadataEvent.VALUE_CHANGE, false, false, MODE, value, this._layoutMode);
                this._layoutMode = value;
                dispatchEvent(_local2);
            };
        }
        public function get includeInLayout():Boolean{
            return (this._includeInLayout);
        }
        public function set includeInLayout(value:Boolean):void{
            var _local2:MetadataEvent;
            if (this._includeInLayout != value){
                _local2 = new MetadataEvent(MetadataEvent.VALUE_CHANGE, false, false, INCLUDE_IN_LAYOUT, value, this._layoutMode);
                this._includeInLayout = value;
                dispatchEvent(_local2);
            };
        }

    }
}//package org.osmf.layout 
﻿package org.osmf.layout {
    import flash.display.*;
    import flash.events.*;

    public class LayoutTargetEvent extends Event {

        public static const SET_AS_LAYOUT_RENDERER_CONTAINER:String = "setAsLayoutRendererContainer";
        public static const UNSET_AS_LAYOUT_RENDERER_CONTAINER:String = "unsetAsLayoutRendererContainer";
        public static const ADD_TO_LAYOUT_RENDERER:String = "addToLayoutRenderer";
        public static const REMOVE_FROM_LAYOUT_RENDERER:String = "removeFromLayoutRenderer";
        public static const ADD_CHILD_AT:String = "addChildAt";
        public static const REMOVE_CHILD:String = "removeChild";
        public static const SET_CHILD_INDEX:String = "setChildIndex";

        private var _layoutRenderer:LayoutRendererBase;
        private var _layoutTarget:ILayoutTarget;
        private var _displayObject:DisplayObject;
        private var _index:int;

        public function LayoutTargetEvent(type:String, bubbles:Boolean=false, cancelable:Boolean=false, layoutRenderer:LayoutRendererBase=null, layoutTarget:ILayoutTarget=null, displayObject:DisplayObject=null, index:int=-1){
            this._layoutRenderer = layoutRenderer;
            this._layoutTarget = layoutTarget;
            this._displayObject = displayObject;
            this._index = index;
            super(type, bubbles, cancelable);
        }
        public function get layoutRenderer():LayoutRendererBase{
            return (this._layoutRenderer);
        }
        public function get layoutTarget():ILayoutTarget{
            return (this._layoutTarget);
        }
        public function get displayObject():DisplayObject{
            return (this._displayObject);
        }
        public function get index():int{
            return (this._index);
        }
        override public function clone():Event{
            return (new LayoutTargetEvent(type, bubbles, cancelable, this._layoutRenderer, this._layoutTarget, this._displayObject, this._index));
        }

    }
}//package org.osmf.layout 
﻿package org.osmf.layout {
    import org.osmf.layout.*;
    import org.osmf.utils.*;

    class BinarySearch {

        public static function search(list:Object, compare:Function, item, firstIndex:int=0, lastIndex:int=-2147483648):int{
            var _local7:int;
            var _local8:*;
            if ((((list == null)) || ((compare == null)))){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.NULL_PARAM)));
            };
            var _local6:int = -(firstIndex);
            lastIndex = ((lastIndex)==int.MIN_VALUE) ? (list.length - 1) : lastIndex;
            if ((((list.length > 0)) && ((firstIndex <= lastIndex)))){
                _local7 = ((firstIndex + lastIndex) / 2);
                _local8 = list[_local7];
                switch (compare(item, _local8)){
                    case -1:
                        _local6 = search(list, compare, item, firstIndex, (_local7 - 1));
                        break;
                    case 0:
                        _local6 = _local7;
                        break;
                    case 1:
                        _local6 = search(list, compare, item, (_local7 + 1), lastIndex);
                        break;
                };
            };
            return (_local6);
        }

    }
}//package org.osmf.layout 
﻿package org.osmf.layout {
    import org.osmf.layout.*;

    class LayoutTargetRenderers {

        public var containerRenderer:LayoutRendererBase;
        public var parentRenderer:LayoutRendererBase;

        public function LayoutTargetRenderers(target:ILayoutTarget){
            target.addEventListener(LayoutTargetEvent.ADD_TO_LAYOUT_RENDERER, this.onAddedToLayoutRenderer);
            target.addEventListener(LayoutTargetEvent.REMOVE_FROM_LAYOUT_RENDERER, this.onRemovedFromLayoutRenderer);
            target.addEventListener(LayoutTargetEvent.SET_AS_LAYOUT_RENDERER_CONTAINER, this.onSetAsLayoutRendererContainer);
            target.addEventListener(LayoutTargetEvent.UNSET_AS_LAYOUT_RENDERER_CONTAINER, this.onUnsetAsLayoutRendererContainer);
        }
        private function onSetAsLayoutRendererContainer(event:LayoutTargetEvent):void{
            if (this.containerRenderer != event.layoutRenderer){
                this.containerRenderer = event.layoutRenderer;
                this.containerRenderer.setParent(this.parentRenderer);
            };
        }
        private function onUnsetAsLayoutRendererContainer(event:LayoutTargetEvent):void{
            if (((!((this.containerRenderer == null))) && ((this.containerRenderer == event.layoutRenderer)))){
                this.containerRenderer.setParent(null);
                this.containerRenderer = null;
            };
        }
        private function onAddedToLayoutRenderer(event:LayoutTargetEvent):void{
            if (this.parentRenderer != event.layoutRenderer){
                this.parentRenderer = event.layoutRenderer;
                if (this.containerRenderer){
                    this.containerRenderer.setParent(this.parentRenderer);
                };
            };
        }
        private function onRemovedFromLayoutRenderer(event:LayoutTargetEvent):void{
            if (this.parentRenderer == event.layoutRenderer){
                this.parentRenderer = null;
                if (this.containerRenderer){
                    this.containerRenderer.setParent(null);
                };
            };
        }

    }
}//package org.osmf.layout 
﻿package org.osmf.layout {
    import flash.display.*;
    import org.osmf.events.*;
    import flash.events.*;
    import flash.utils.*;
    import flash.geom.*;
    import org.osmf.utils.*;
    import org.osmf.metadata.*;
    import __AS3__.vec.*;
    import flash.errors.*;

    public class LayoutRendererBase extends EventDispatcher {

        private static var dispatcher:DisplayObject = new Sprite();
        private static var cleaningRenderers:Boolean;
        private static var dirtyRenderers:Vector.<LayoutRendererBase> = new Vector.<LayoutRendererBase>();
;

        private var _parent:LayoutRendererBase;
        private var _container:ILayoutTarget;
        private var layoutMetadata:LayoutMetadata;
        private var layoutTargets:Vector.<ILayoutTarget>;
        private var stagedDisplayObjects:Dictionary;
        private var _measuredWidth:Number;
        private var _measuredHeight:Number;
        private var dirty:Boolean;
        private var cleaning:Boolean;
        private var metaDataWatchers:Dictionary;

        public function LayoutRendererBase(){
            this.layoutTargets = new Vector.<ILayoutTarget>();
            this.stagedDisplayObjects = new Dictionary(true);
            this.metaDataWatchers = new Dictionary();
            super();
        }
        private static function flagDirty(renderer:LayoutRendererBase):void{
            if ((((renderer == null)) || (!((dirtyRenderers.indexOf(renderer) == -1))))){
                return;
            };
            dirtyRenderers.push(renderer);
            if (cleaningRenderers == false){
                dispatcher.addEventListener(Event.EXIT_FRAME, onExitFrame);
            };
        }
        private static function flagClean(renderer:LayoutRendererBase):void{
            var _local2:Number = dirtyRenderers.indexOf(renderer);
            if (_local2 != -1){
                dirtyRenderers.splice(_local2, 1);
            };
        }
        private static function onExitFrame(event:Event):void{
            var _local2:LayoutRendererBase;
            dispatcher.removeEventListener(Event.EXIT_FRAME, onExitFrame);
            cleaningRenderers = true;
            while (dirtyRenderers.length != 0) {
                _local2 = dirtyRenderers.shift();
                if (_local2.parent == null){
                    _local2.validateNow();
                } else {
                    _local2.dirty = false;
                };
            };
            cleaningRenderers = false;
        }

        final public function get parent():LayoutRendererBase{
            return (this._parent);
        }
        final function setParent(value:LayoutRendererBase):void{
            this._parent = value;
            this.processParentChange(this._parent);
        }
        final public function get container():ILayoutTarget{
            return (this._container);
        }
        final public function set container(value:ILayoutTarget):void{
            var _local2:ILayoutTarget;
            if (value != this._container){
                _local2 = this._container;
                if (_local2 != null){
                    this.reset();
                    _local2.dispatchEvent(new LayoutTargetEvent(LayoutTargetEvent.UNSET_AS_LAYOUT_RENDERER_CONTAINER, false, false, this));
                    _local2.removeEventListener(DisplayObjectEvent.MEDIA_SIZE_CHANGE, this.invalidatingEventHandler);
                };
                this._container = value;
                if (this._container){
                    this.layoutMetadata = this._container.layoutMetadata;
                    this._container.addEventListener(DisplayObjectEvent.MEDIA_SIZE_CHANGE, this.invalidatingEventHandler, false, 0, true);
                    this._container.dispatchEvent(new LayoutTargetEvent(LayoutTargetEvent.SET_AS_LAYOUT_RENDERER_CONTAINER, false, false, this));
                    this.invalidate();
                };
                this.processContainerChange(_local2, value);
            };
        }
        final public function addTarget(target:ILayoutTarget):ILayoutTarget{
            var _local4:String;
            var _local5:MetadataWatcher;
            if (target == null){
                throw (new IllegalOperationError(OSMFStrings.getString(OSMFStrings.NULL_PARAM)));
            };
            if (this.layoutTargets.indexOf(target) != -1){
                throw (new IllegalOperationError(OSMFStrings.getString(OSMFStrings.INVALID_PARAM)));
            };
            target.dispatchEvent(new LayoutTargetEvent(LayoutTargetEvent.ADD_TO_LAYOUT_RENDERER, false, false, this));
            var _local2:int = Math.abs(BinarySearch.search(this.layoutTargets, this.compareTargets, target));
            this.layoutTargets.splice(_local2, 0, target);
            var _local3:Array = (this.metaDataWatchers[target] = new Array());
            for each (_local4 in this.usedMetadatas) {
                _local5 = new MetadataWatcher(target.layoutMetadata, _local4, null, this.targetMetadataChangeCallback);
                _local5.watch();
                _local3.push(_local5);
            };
            target.addEventListener(DisplayObjectEvent.DISPLAY_OBJECT_CHANGE, this.invalidatingEventHandler);
            target.addEventListener(DisplayObjectEvent.MEDIA_SIZE_CHANGE, this.invalidatingEventHandler);
            target.addEventListener(LayoutTargetEvent.ADD_TO_LAYOUT_RENDERER, this.onTargetAddedToRenderer);
            target.addEventListener(LayoutTargetEvent.SET_AS_LAYOUT_RENDERER_CONTAINER, this.onTargetSetAsContainer);
            this.invalidate();
            this.processTargetAdded(target);
            return (target);
        }
        final public function removeTarget(target:ILayoutTarget):ILayoutTarget{
            var _local2:ILayoutTarget;
            var _local4:MetadataWatcher;
            if (target == null){
                throw (new IllegalOperationError(OSMFStrings.getString(OSMFStrings.NULL_PARAM)));
            };
            var _local3:Number = this.layoutTargets.indexOf(target);
            if (_local3 != -1){
                this.removeFromStage(target);
                _local2 = this.layoutTargets.splice(_local3, 1)[0];
                target.removeEventListener(DisplayObjectEvent.DISPLAY_OBJECT_CHANGE, this.invalidatingEventHandler);
                target.removeEventListener(DisplayObjectEvent.MEDIA_SIZE_CHANGE, this.invalidatingEventHandler);
                target.removeEventListener(LayoutTargetEvent.ADD_TO_LAYOUT_RENDERER, this.onTargetAddedToRenderer);
                target.removeEventListener(LayoutTargetEvent.SET_AS_LAYOUT_RENDERER_CONTAINER, this.onTargetSetAsContainer);
                for each (_local4 in this.metaDataWatchers[target]) {
                    _local4.unwatch();
                };
                delete this.metaDataWatchers[target];
                this.processTargetRemoved(target);
                target.dispatchEvent(new LayoutTargetEvent(LayoutTargetEvent.REMOVE_FROM_LAYOUT_RENDERER, false, false, this));
                this.invalidate();
            } else {
                throw (new IllegalOperationError(OSMFStrings.getString(OSMFStrings.INVALID_PARAM)));
            };
            return (_local2);
        }
        final public function hasTarget(target:ILayoutTarget):Boolean{
            return (!((this.layoutTargets.indexOf(target) == -1)));
        }
        final public function get measuredWidth():Number{
            return (this._measuredWidth);
        }
        final public function get measuredHeight():Number{
            return (this._measuredHeight);
        }
        final public function invalidate():void{
            if ((((this.cleaning == false)) && ((this.dirty == false)))){
                this.dirty = true;
                if (this._parent != null){
                    this._parent.invalidate();
                } else {
                    flagDirty(this);
                };
            };
        }
        final public function validateNow():void{
            if ((((this._container == null)) || ((this.cleaning == true)))){
                return;
            };
            if (this._parent){
                this._parent.validateNow();
                return;
            };
            this.cleaning = true;
            this.measure();
            this.layout(this._measuredWidth, this._measuredHeight);
            this.cleaning = false;
        }
        function measure():void{
            var _local1:ILayoutTarget;
            var _local2:Point;
            this.prepareTargets();
            for each (_local1 in this.layoutTargets) {
                _local1.measure(true);
            };
            _local2 = this.calculateContainerSize(this.layoutTargets);
            this._measuredWidth = _local2.x;
            this._measuredHeight = _local2.y;
            this._container.measure(false);
        }
        function layout(availableWidth:Number, availableHeight:Number):void{
            var _local3:ILayoutTarget;
            var _local4:Rectangle;
            var _local5:DisplayObject;
            this.processUpdateMediaDisplayBegin(this.layoutTargets);
            this._container.layout(availableWidth, availableHeight, false);
            for each (_local3 in this.layoutTargets) {
                _local4 = this.calculateTargetBounds(_local3, availableWidth, availableHeight);
                _local3.layout(_local4.width, _local4.height, true);
                _local5 = _local3.displayObject;
                if (_local5){
                    _local5.x = _local4.x;
                    _local5.y = _local4.y;
                };
            };
            this.dirty = false;
            this.processUpdateMediaDisplayEnd();
        }
        protected function get usedMetadatas():Vector.<String>{
            return (new Vector.<String>());
        }
        protected function compareTargets(x:ILayoutTarget, y:ILayoutTarget):Number{
            return (0);
        }
        protected function processContainerChange(oldContainer:ILayoutTarget, newContainer:ILayoutTarget):void{
        }
        protected function processTargetAdded(target:ILayoutTarget):void{
        }
        protected function processTargetRemoved(target:ILayoutTarget):void{
        }
        protected function processStagedTarget(target:ILayoutTarget):void{
        }
        protected function processUnstagedTarget(target:ILayoutTarget):void{
        }
        protected function processUpdateMediaDisplayBegin(targets:Vector.<ILayoutTarget>):void{
        }
        protected function processUpdateMediaDisplayEnd():void{
        }
        protected function updateTargetOrder(target:ILayoutTarget):void{
            var _local2:int = this.layoutTargets.indexOf(target);
            if (_local2 != -1){
                this.layoutTargets.splice(_local2, 1);
                _local2 = Math.abs(BinarySearch.search(this.layoutTargets, this.compareTargets, target));
                this.layoutTargets.splice(_local2, 0, target);
            };
        }
        protected function calculateTargetBounds(target:ILayoutTarget, availableWidth:Number, availableHeight:Number):Rectangle{
            return (new Rectangle());
        }
        protected function calculateContainerSize(targets:Vector.<ILayoutTarget>):Point{
            return (new Point());
        }
        protected function processParentChange(value:LayoutRendererBase):void{
        }
        private function reset():void{
            var _local1:ILayoutTarget;
            for each (_local1 in this.layoutTargets) {
                this.removeTarget(_local1);
            };
            if (this._container){
                this._container.removeEventListener(DisplayObjectEvent.MEDIA_SIZE_CHANGE, this.invalidatingEventHandler);
                this.validateNow();
            };
            this._container = null;
            this.layoutMetadata = null;
        }
        private function targetMetadataChangeCallback(metadata:Metadata):void{
            this.invalidate();
        }
        private function invalidatingEventHandler(event:Event):void{
            this.invalidate();
        }
        private function onTargetAddedToRenderer(event:LayoutTargetEvent):void{
            var _local2:ILayoutTarget;
            if (event.layoutRenderer != this){
                _local2 = (event.target as ILayoutTarget);
                if (this.hasTarget(_local2)){
                    this.removeTarget(_local2);
                };
            };
        }
        private function onTargetSetAsContainer(event:LayoutTargetEvent):void{
            var _local2:ILayoutTarget;
            if (event.layoutRenderer != this){
                _local2 = (event.target as ILayoutTarget);
                if (this.container == _local2){
                    this.container = null;
                };
            };
        }
        private function prepareTargets():void{
            var _local2:ILayoutTarget;
            var _local3:DisplayObject;
            var _local1:int;
            for each (_local2 in this.layoutTargets) {
                _local3 = _local2.displayObject;
                if (_local3){
                    this.addToStage(_local2, _local2.displayObject, _local1);
                    _local1++;
                } else {
                    this.removeFromStage(_local2);
                };
            };
        }
        private function addToStage(target:ILayoutTarget, object:DisplayObject, index:Number):void{
            var _local4:DisplayObject = this.stagedDisplayObjects[target];
            if (_local4 == object){
                this._container.dispatchEvent(new LayoutTargetEvent(LayoutTargetEvent.SET_CHILD_INDEX, false, false, this, target, _local4, index));
            } else {
                if (_local4 != null){
                    this._container.dispatchEvent(new LayoutTargetEvent(LayoutTargetEvent.REMOVE_CHILD, false, false, this, target, _local4));
                };
                this.stagedDisplayObjects[target] = object;
                this._container.dispatchEvent(new LayoutTargetEvent(LayoutTargetEvent.ADD_CHILD_AT, false, false, this, target, object, index));
                if (_local4 == null){
                    this.processStagedTarget(target);
                };
            };
        }
        private function removeFromStage(target:ILayoutTarget):void{
            var _local2:DisplayObject = this.stagedDisplayObjects[target];
            if (_local2 != null){
                delete this.stagedDisplayObjects[target];
                this._container.dispatchEvent(new LayoutTargetEvent(LayoutTargetEvent.REMOVE_CHILD, false, false, this, target, _local2));
            };
        }

    }
}//package org.osmf.layout 
﻿package org.osmf.layout {
    import flash.display.*;
    import org.osmf.events.*;

    public class LayoutTargetSprite extends Sprite implements ILayoutTarget {

        private var _layoutMetadata:LayoutMetadata;
        private var _measuredWidth:Number = NaN;
        private var _measuredHeight:Number = NaN;
        private var renderers:LayoutTargetRenderers;

        public function LayoutTargetSprite(layoutMetadata:LayoutMetadata=null){
            this._layoutMetadata = ((layoutMetadata) || (new LayoutMetadata()));
            this.renderers = new LayoutTargetRenderers(this);
            addEventListener(LayoutTargetEvent.ADD_CHILD_AT, this.onAddChildAt);
            addEventListener(LayoutTargetEvent.SET_CHILD_INDEX, this.onSetChildIndex);
            addEventListener(LayoutTargetEvent.REMOVE_CHILD, this.onRemoveChild);
            mouseEnabled = true;
            mouseChildren = true;
            super();
        }
        public function get displayObject():DisplayObject{
            return (this);
        }
        public function get layoutMetadata():LayoutMetadata{
            return (this._layoutMetadata);
        }
        public function get measuredWidth():Number{
            return (this._measuredWidth);
        }
        public function get measuredHeight():Number{
            return (this._measuredHeight);
        }
        public function measure(deep:Boolean=true):void{
            var _local2:Number;
            var _local3:Number;
            var _local4:DisplayObjectEvent;
            if (((deep) && (this.renderers.containerRenderer))){
                this.renderers.containerRenderer.measure();
            };
            if (this.renderers.containerRenderer){
                _local2 = this.renderers.containerRenderer.measuredWidth;
                _local3 = this.renderers.containerRenderer.measuredHeight;
            } else {
                _local2 = (super.width / scaleX);
                _local3 = (super.height / scaleY);
            };
            if (((!((_local2 == this._measuredWidth))) || (!((_local3 == this._measuredHeight))))){
                _local4 = new DisplayObjectEvent(DisplayObjectEvent.MEDIA_SIZE_CHANGE, false, false, null, null, this._measuredWidth, this._measuredHeight, _local2, _local3);
                this._measuredWidth = _local2;
                this._measuredHeight = _local3;
                dispatchEvent(_local4);
            };
        }
        public function layout(availableWidth:Number, availableHeight:Number, deep:Boolean=true):void{
            if (this.renderers.containerRenderer == null){
                super.width = availableWidth;
                super.height = availableHeight;
            } else {
                if (deep){
                    this.renderers.containerRenderer.layout(availableWidth, availableHeight);
                };
            };
        }
        public function validateNow():void{
            if (this.renderers.containerRenderer){
                this.renderers.containerRenderer.validateNow();
            };
        }
        protected function onAddChildAt(event:LayoutTargetEvent):void{
            addChildAt(event.displayObject, event.index);
        }
        protected function onRemoveChild(event:LayoutTargetEvent):void{
            removeChild(event.displayObject);
        }
        protected function onSetChildIndex(event:LayoutTargetEvent):void{
            setChildIndex(event.displayObject, event.index);
        }
        override public function set x(value:Number):void{
            var _local2:int;
            super.x = value;
            if (this.numChildren){
                _local2 = 0;
                while (_local2 < this.numChildren) {
                    if (this.getChildAt(_local2)){
                        this.getChildAt(_local2).x = this.getChildAt(_local2).x;
                    };
                    _local2++;
                };
            };
        }
        override public function set y(value:Number):void{
            var _local2:int;
            super.y = value;
            if (this.numChildren){
                _local2 = 0;
                while (_local2 < this.numChildren) {
                    if (this.getChildAt(_local2)){
                        this.getChildAt(_local2).y = this.getChildAt(_local2).y;
                    };
                    _local2++;
                };
            };
        }
        override public function set width(value:Number):void{
            this._layoutMetadata.width = value;
        }
        override public function get width():Number{
            return (this._measuredWidth);
        }
        override public function set height(value:Number):void{
            this._layoutMetadata.height = value;
        }
        override public function get height():Number{
            return (this._measuredHeight);
        }

    }
}//package org.osmf.layout 
﻿package org.osmf.layout {

    public final class HorizontalAlign {

        public static const LEFT:String = "left";
        public static const CENTER:String = "center";
        public static const RIGHT:String = "right";

    }
}//package org.osmf.layout 
﻿package org.osmf.layout {

    public final class LayoutMode {

        public static const NONE:String = "none";
        public static const VERTICAL:String = "vertical";
        public static const HORIZONTAL:String = "horizontal";
        public static const OVERLAY:String = "overlay";

    }
}//package org.osmf.layout 
﻿package org.osmf.layout {
    import org.osmf.events.*;
    import org.osmf.metadata.*;

    class PaddingLayoutMetadata extends NonSynthesizingMetadata {

        public static const LEFT:String = "left";
        public static const TOP:String = "top";
        public static const RIGHT:String = "right";
        public static const BOTTOM:String = "bottom";

        private var _left:Number;
        private var _top:Number;
        private var _right:Number;
        private var _bottom:Number;

        override public function getValue(key:String){
            if (key == null){
                return (undefined);
            };
            if (key == LEFT){
                return (this.left);
            };
            if (key == TOP){
                return (this.top);
            };
            if (key == RIGHT){
                return (this.right);
            };
            if (key == BOTTOM){
                return (this.bottom);
            };
            return (undefined);
        }
        public function get left():Number{
            return (this._left);
        }
        public function set left(value:Number):void{
            var _local2:MetadataEvent;
            if (this._left != value){
                _local2 = new MetadataEvent(MetadataEvent.VALUE_CHANGE, false, false, LEFT, value, this._left);
                this._left = value;
                dispatchEvent(_local2);
            };
        }
        public function get top():Number{
            return (this._top);
        }
        public function set top(value:Number):void{
            var _local2:MetadataEvent;
            if (this._top != value){
                _local2 = new MetadataEvent(MetadataEvent.VALUE_CHANGE, false, false, TOP, value, this._top);
                this._top = value;
                dispatchEvent(_local2);
            };
        }
        public function get right():Number{
            return (this._right);
        }
        public function set right(value:Number):void{
            var _local2:MetadataEvent;
            if (this._right != value){
                _local2 = new MetadataEvent(MetadataEvent.VALUE_CHANGE, false, false, RIGHT, value, this._right);
                this._right = value;
                dispatchEvent(_local2);
            };
        }
        public function get bottom():Number{
            return (this._bottom);
        }
        public function set bottom(value:Number):void{
            var _local2:MetadataEvent;
            if (this._bottom != value){
                _local2 = new MetadataEvent(MetadataEvent.VALUE_CHANGE, false, false, BOTTOM, value, this._bottom);
                this._bottom = value;
                dispatchEvent(_local2);
            };
        }

    }
}//package org.osmf.layout 
﻿package org.osmf.layout {
    import org.osmf.layout.*;
    import flash.geom.*;

    class ScaleModeUtils {

        public static function getScaledSize(scaleMode:String, availableWidth:Number, availableHeight:Number, intrinsicWidth:Number, intrinsicHeight:Number):Point{
            var _local6:Point;
            var _local7:Number;
            var _local8:Number;
            switch (scaleMode){
                case ScaleMode.ZOOM:
                case ScaleMode.LETTERBOX:
                    _local7 = (availableWidth / availableHeight);
                    _local8 = (((intrinsicWidth) || (availableWidth)) / ((intrinsicHeight) || (availableHeight)));
                    if ((((((scaleMode == ScaleMode.ZOOM)) && ((_local8 < _local7)))) || ((((scaleMode == ScaleMode.LETTERBOX)) && ((_local8 > _local7)))))){
                        _local6 = new Point(availableWidth, (availableWidth / _local8));
                    } else {
                        _local6 = new Point((availableHeight * _local8), availableHeight);
                    };
                    break;
                case ScaleMode.STRETCH:
                    _local6 = new Point(availableWidth, availableHeight);
                    break;
                case ScaleMode.NONE:
                    _local6 = new Point(((intrinsicWidth) || (availableWidth)), ((intrinsicHeight) || (availableHeight)));
                    break;
            };
            return (_local6);
        }

    }
}//package org.osmf.layout 
﻿package org.osmf.layout {
    import org.osmf.events.*;
    import org.osmf.metadata.*;

    class OverlayLayoutMetadata extends NonSynthesizingMetadata {

        public static const INDEX:String = "index";

        private var _index:Number = NaN;

        override public function getValue(key:String){
            if (key == INDEX){
                return (this.index);
            };
            return (undefined);
        }
        public function get index():Number{
            return (this._index);
        }
        public function set index(value:Number):void{
            var _local2:MetadataEvent;
            if (this._index != value){
                _local2 = new MetadataEvent(MetadataEvent.VALUE_CHANGE, false, false, INDEX, value, this._index);
                this._index = value;
                dispatchEvent(_local2);
            };
        }

    }
}//package org.osmf.layout 
﻿package org.osmf.layout {
    import org.osmf.metadata.*;

    public class LayoutMetadata extends Metadata {

        public static const LAYOUT_NAMESPACE:String = "http://www.osmf.org/layout/1.0";

        private const SYNTHESIZER:NullMetadataSynthesizer;

        public function LayoutMetadata(){
            this.SYNTHESIZER = new NullMetadataSynthesizer();
            super();
        }
        public function get index():Number{
            return (((this.lazyOverlay) ? this.lazyOverlay.index : NaN));
        }
        public function set index(value:Number):void{
            this.eagerOverlay.index = value;
        }
        public function get scaleMode():String{
            return (((this.lazyAttributes) ? this.lazyAttributes.scaleMode : null));
        }
        public function set scaleMode(value:String):void{
            this.eagerAttributes.scaleMode = value;
        }
        public function get horizontalAlign():String{
            return (((this.lazyAttributes) ? this.lazyAttributes.horizontalAlign : null));
        }
        public function set horizontalAlign(value:String):void{
            this.eagerAttributes.horizontalAlign = value;
        }
        public function get verticalAlign():String{
            return (((this.lazyAttributes) ? this.lazyAttributes.verticalAlign : null));
        }
        public function set verticalAlign(value:String):void{
            this.eagerAttributes.verticalAlign = value;
        }
        public function get snapToPixel():Boolean{
            return (((this.lazyAttributes) ? this.lazyAttributes.snapToPixel : true));
        }
        public function set snapToPixel(value:Boolean):void{
            this.eagerAttributes.snapToPixel = value;
        }
        public function get layoutMode():String{
            return (((this.lazyAttributes) ? this.lazyAttributes.layoutMode : LayoutMode.NONE));
        }
        public function set layoutMode(value:String):void{
            this.eagerAttributes.layoutMode = value;
        }
        public function get includeInLayout():Boolean{
            return (((this.lazyAttributes) ? this.lazyAttributes.includeInLayout : true));
        }
        public function set includeInLayout(value:Boolean):void{
            this.eagerAttributes.includeInLayout = value;
        }
        public function get x():Number{
            return (((this.lazyAbsolute) ? this.lazyAbsolute.x : NaN));
        }
        public function set x(value:Number):void{
            this.eagerAbsolute.x = value;
        }
        public function get y():Number{
            return (((this.lazyAbsolute) ? this.lazyAbsolute.y : NaN));
        }
        public function set y(value:Number):void{
            this.eagerAbsolute.y = value;
        }
        public function get width():Number{
            return (((this.lazyAbsolute) ? this.lazyAbsolute.width : NaN));
        }
        public function set width(value:Number):void{
            this.eagerAbsolute.width = value;
        }
        public function get height():Number{
            return (((this.lazyAbsolute) ? this.lazyAbsolute.height : NaN));
        }
        public function set height(value:Number):void{
            this.eagerAbsolute.height = value;
        }
        public function get percentX():Number{
            return (((this.lazyRelative) ? this.lazyRelative.x : NaN));
        }
        public function set percentX(value:Number):void{
            this.eagerRelative.x = value;
        }
        public function get percentY():Number{
            return (((this.lazyRelative) ? this.lazyRelative.y : NaN));
        }
        public function set percentY(value:Number):void{
            this.eagerRelative.y = value;
        }
        public function get percentWidth():Number{
            return (((this.lazyRelative) ? this.lazyRelative.width : NaN));
        }
        public function set percentWidth(value:Number):void{
            this.eagerRelative.width = value;
        }
        public function get percentHeight():Number{
            return (((this.lazyRelative) ? this.lazyRelative.height : NaN));
        }
        public function set percentHeight(value:Number):void{
            this.eagerRelative.height = value;
        }
        public function get left():Number{
            return (((this.lazyAnchor) ? this.lazyAnchor.left : NaN));
        }
        public function set left(value:Number):void{
            this.eagerAnchor.left = value;
        }
        public function get top():Number{
            return (((this.lazyAnchor) ? this.lazyAnchor.top : NaN));
        }
        public function set top(value:Number):void{
            this.eagerAnchor.top = value;
        }
        public function get right():Number{
            return (((this.lazyAnchor) ? this.lazyAnchor.right : NaN));
        }
        public function set right(value:Number):void{
            this.eagerAnchor.right = value;
        }
        public function get bottom():Number{
            return (((this.lazyAnchor) ? this.lazyAnchor.bottom : NaN));
        }
        public function set bottom(value:Number):void{
            this.eagerAnchor.bottom = value;
        }
        public function get paddingLeft():Number{
            return (((this.lazyPadding) ? this.lazyPadding.left : NaN));
        }
        public function set paddingLeft(value:Number):void{
            this.eagerPadding.left = value;
        }
        public function get paddingTop():Number{
            return (((this.lazyPadding) ? this.lazyPadding.top : NaN));
        }
        public function set paddingTop(value:Number):void{
            this.eagerPadding.top = value;
        }
        public function get paddingRight():Number{
            return (((this.lazyPadding) ? this.lazyPadding.right : NaN));
        }
        public function set paddingRight(value:Number):void{
            this.eagerPadding.right = value;
        }
        public function get paddingBottom():Number{
            return (((this.lazyPadding) ? this.lazyPadding.bottom : NaN));
        }
        public function set paddingBottom(value:Number):void{
            this.eagerPadding.bottom = value;
        }
        override public function toString():String{
            return ((((((((((((((((((((((((((((((((((((((((((((((((((((("abs [" + this.x) + ", ") + this.y) + ", ") + this.width) + ", ") + this.height) + "] ") + "rel [") + this.percentX) + ", ") + this.percentY) + ", ") + this.percentWidth) + ", ") + this.percentHeight) + "] ") + "anch (") + this.left) + ", ") + this.top) + ")(") + this.right) + ", ") + this.bottom) + ") ") + "pad [") + this.paddingLeft) + ", ") + this.paddingTop) + ", ") + this.paddingRight) + ", ") + this.paddingBottom) + "] ") + "layoutMode: ") + this.layoutMode) + " ") + "index: ") + this.index) + " ") + "scale: ") + this.scaleMode) + " ") + "valign: ") + this.verticalAlign) + " ") + "halign: ") + this.horizontalAlign) + " ") + "snap: ") + this.snapToPixel));
        }
        override public function get synthesizer():MetadataSynthesizer{
            return (this.SYNTHESIZER);
        }
        private function get lazyAttributes():LayoutAttributesMetadata{
            return ((getValue(MetadataNamespaces.LAYOUT_ATTRIBUTES) as LayoutAttributesMetadata));
        }
        private function get eagerAttributes():LayoutAttributesMetadata{
            var _local1:LayoutAttributesMetadata = this.lazyAttributes;
            if (_local1 == null){
                _local1 = new LayoutAttributesMetadata();
                addValue(MetadataNamespaces.LAYOUT_ATTRIBUTES, _local1);
            };
            return (_local1);
        }
        private function get lazyOverlay():OverlayLayoutMetadata{
            return ((getValue(MetadataNamespaces.OVERLAY_LAYOUT_PARAMETERS) as OverlayLayoutMetadata));
        }
        private function get eagerOverlay():OverlayLayoutMetadata{
            var _local1:OverlayLayoutMetadata = this.lazyOverlay;
            if (_local1 == null){
                _local1 = new OverlayLayoutMetadata();
                addValue(MetadataNamespaces.OVERLAY_LAYOUT_PARAMETERS, _local1);
            };
            return (_local1);
        }
        private function get lazyAbsolute():AbsoluteLayoutMetadata{
            return ((getValue(MetadataNamespaces.ABSOLUTE_LAYOUT_PARAMETERS) as AbsoluteLayoutMetadata));
        }
        private function get eagerAbsolute():AbsoluteLayoutMetadata{
            var _local1:AbsoluteLayoutMetadata = this.lazyAbsolute;
            if (_local1 == null){
                _local1 = new AbsoluteLayoutMetadata();
                addValue(MetadataNamespaces.ABSOLUTE_LAYOUT_PARAMETERS, _local1);
            };
            return (_local1);
        }
        private function get lazyRelative():RelativeLayoutMetadata{
            return ((getValue(MetadataNamespaces.RELATIVE_LAYOUT_PARAMETERS) as RelativeLayoutMetadata));
        }
        private function get eagerRelative():RelativeLayoutMetadata{
            var _local1:RelativeLayoutMetadata = this.lazyRelative;
            if (_local1 == null){
                _local1 = new RelativeLayoutMetadata();
                addValue(MetadataNamespaces.RELATIVE_LAYOUT_PARAMETERS, _local1);
            };
            return (_local1);
        }
        private function get lazyAnchor():AnchorLayoutMetadata{
            return ((getValue(MetadataNamespaces.ANCHOR_LAYOUT_PARAMETERS) as AnchorLayoutMetadata));
        }
        private function get eagerAnchor():AnchorLayoutMetadata{
            var _local1:AnchorLayoutMetadata = this.lazyAnchor;
            if (_local1 == null){
                _local1 = new AnchorLayoutMetadata();
                addValue(MetadataNamespaces.ANCHOR_LAYOUT_PARAMETERS, _local1);
            };
            return (_local1);
        }
        private function get lazyPadding():PaddingLayoutMetadata{
            return ((getValue(MetadataNamespaces.PADDING_LAYOUT_PARAMETERS) as PaddingLayoutMetadata));
        }
        private function get eagerPadding():PaddingLayoutMetadata{
            var _local1:PaddingLayoutMetadata = this.lazyPadding;
            if (_local1 == null){
                _local1 = new PaddingLayoutMetadata();
                addValue(MetadataNamespaces.PADDING_LAYOUT_PARAMETERS, _local1);
            };
            return (_local1);
        }

    }
}//package org.osmf.layout 
﻿package org.osmf.layout {

    public final class VerticalAlign {

        public static const TOP:String = "top";
        public static const MIDDLE:String = "middle";
        public static const BOTTOM:String = "bottom";

    }
}//package org.osmf.layout 
﻿package org.osmf.elements {
    import org.osmf.media.*;
    import org.osmf.events.*;
    import flash.utils.*;
    import org.osmf.traits.*;
    import org.osmf.metadata.*;
    import org.osmf.elements.compositeClasses.*;

    public class SerialElement extends CompositeElement {

        private var listenedChildIndex:int = -1;
        private var reusableTraits:Dictionary;

        public function SerialElement(){
            traitAggregator.addEventListener(TraitAggregatorEvent.LISTENED_CHILD_CHANGE, this.onListenedChildChanged);
            this.reusableTraits = new Dictionary();
        }
        public function get currentChild():MediaElement{
            return (traitAggregator.listenedChild);
        }
        override public function get resource():MediaResourceBase{
            return (((traitAggregator.listenedChild)!=null) ? traitAggregator.listenedChild.resource : null);
        }
        protected function currentChildChange():void{
        }
        override protected function createMetadata():Metadata{
            var _local1:Metadata = super.createMetadata();
            CompositeMetadata(_local1).mode = CompositionMode.SERIAL;
            return (_local1);
        }
        override protected function processAddedChild(child:MediaElement, index:int):void{
            super.processAddedChild(child, index);
            if (traitAggregator.listenedChild == null){
                traitAggregator.listenedChild = child;
            };
            this.updateListenedChildIndex();
        }
        override protected function processRemovedChild(child:MediaElement):void{
            var _local2:MediaElement;
            super.processRemovedChild(child);
            if (traitAggregator.listenedChild == child){
                _local2 = getChildAt(this.listenedChildIndex);
                if (_local2 == null){
                    this.listenedChildIndex = ((numChildren)>0) ? 0 : -1;
                    _local2 = getChildAt(this.listenedChildIndex);
                };
                traitAggregator.listenedChild = _local2;
            };
        }
        override protected function processAggregatedTrait(traitType:String, trait:MediaTraitBase):void{
            super.processAggregatedTrait(traitType, trait);
            var _local3:MediaTraitBase = getTrait(traitType);
            if ((((((_local3 == null)) && (!((traitAggregator.listenedChild == null))))) && ((traitAggregator.listenedChild.getTrait(traitType) == trait)))){
                _local3 = (this.reusableTraits[traitType] as MediaTraitBase);
                if (_local3 == null){
                    _local3 = traitFactory.createTrait(traitType, traitAggregator, CompositionMode.SERIAL, this);
                } else {
                    (_local3 as IReusable).attach();
                    this.reusableTraits[traitType] = null;
                };
                if (_local3 != null){
                    addTrait(traitType, _local3);
                };
            };
        }
        override protected function processUnaggregatedTrait(traitType:String, trait:MediaTraitBase):void{
            super.processUnaggregatedTrait(traitType, trait);
            if (((!((traitAggregator.listenedChild == null))) && ((traitAggregator.listenedChild.getTrait(traitType) == trait)))){
                trait = removeTrait(traitType);
                if (((!((trait == null))) && ((trait is IReusable)))){
                    (trait as IReusable).detach();
                    this.reusableTraits[traitType] = trait;
                };
            };
        }
        private function onListenedChildChanged(event:TraitAggregatorEvent):void{
            compositeMetadata.activeChild = ((event.newListenedChild) ? event.newListenedChild.metadata : null);
            this.updateListenedChildIndex();
            this.currentChildChange();
            dispatchEvent(new SerialElementEvent(SerialElementEvent.CURRENT_CHILD_CHANGE, false, false, this.currentChild));
        }
        private function updateListenedChildIndex():void{
            this.listenedChildIndex = traitAggregator.getChildIndex(traitAggregator.listenedChild);
        }

    }
}//package org.osmf.elements 
﻿package org.osmf.elements {
    import org.osmf.media.*;
    import org.osmf.events.*;
    import flash.events.*;
    import flash.net.*;
    import org.osmf.traits.*;
    import org.osmf.utils.*;
    import org.osmf.net.*;
    import __AS3__.vec.*;
    import org.osmf.elements.audioClasses.*;

    public class AudioElement extends LoadableElementBase {

        private var soundAdapter:SoundAdapter;
        private var stream:NetStream;
        private var defaultTimeTrait:ModifiableTimeTrait;
        private var _alternateLoaders:Vector.<LoaderBase>;

        public function AudioElement(resource:URLResource=null, loader:LoaderBase=null){
            super(resource, loader);
            if (!(((((loader == null)) || ((loader is NetLoader)))) || ((loader is SoundLoader)))){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.INVALID_PARAM)));
            };
        }
        public function get defaultDuration():Number{
            return (((this.defaultTimeTrait) ? this.defaultTimeTrait.duration : NaN));
        }
        public function set defaultDuration(value:Number):void{
            if (((isNaN(value)) || ((value < 0)))){
                if (this.defaultTimeTrait != null){
                    removeTraitResolver(MediaTraitType.TIME);
                    this.defaultTimeTrait = null;
                };
            } else {
                if (this.defaultTimeTrait == null){
                    this.defaultTimeTrait = new ModifiableTimeTrait();
                    addTraitResolver(MediaTraitType.TIME, new DefaultTraitResolver(MediaTraitType.TIME, this.defaultTimeTrait));
                };
                this.defaultTimeTrait.duration = value;
            };
        }
        override public function set resource(value:MediaResourceBase):void{
            loader = getLoaderForResource(value, this.alternateLoaders);
            super.resource = value;
        }
        override protected function createLoadTrait(resource:MediaResourceBase, loader:LoaderBase):LoadTrait{
            return ((((loader is NetLoader)) ? new NetStreamLoadTrait(loader, resource) : new SoundLoadTrait(loader, resource)));
        }
        override protected function processReadyState():void{
            var _local2:TimeTrait;
            var _local4:Boolean;
            var _local5:SoundLoadTrait;
            var _local1:LoadTrait = (getTrait(MediaTraitType.LOAD) as LoadTrait);
            this.soundAdapter = null;
            this.stream = null;
            var _local3:NetStreamLoadTrait = (_local1 as NetStreamLoadTrait);
            if (_local3){
                this.stream = _local3.netStream;
                this.stream.addEventListener(NetStatusEvent.NET_STATUS, this.onNetStatusEvent);
                _local3.connection.addEventListener(NetStatusEvent.NET_STATUS, this.onNetStatusEvent, false, 0, true);
                _local4 = false;
                if ((loader is NetLoader)){
                    _local4 = (loader as NetLoader).reconnectStreams;
                };
                addTrait(MediaTraitType.PLAY, new NetStreamPlayTrait(this.stream, resource, _local4, _local3.connection));
                _local2 = new NetStreamTimeTrait(this.stream, resource, this.defaultDuration);
                addTrait(MediaTraitType.TIME, _local2);
                addTrait(MediaTraitType.SEEK, new NetStreamSeekTrait(_local2, _local1, this.stream));
                addTrait(MediaTraitType.AUDIO, new NetStreamAudioTrait(this.stream));
                addTrait(MediaTraitType.BUFFER, new NetStreamBufferTrait(this.stream));
            } else {
                _local5 = (_local1 as SoundLoadTrait);
                this.soundAdapter = new SoundAdapter(this, _local5.sound);
                addTrait(MediaTraitType.PLAY, new AudioPlayTrait(this.soundAdapter));
                _local2 = new AudioTimeTrait(this.soundAdapter);
                addTrait(MediaTraitType.TIME, _local2);
                addTrait(MediaTraitType.SEEK, new AudioSeekTrait(_local2, this.soundAdapter));
                addTrait(MediaTraitType.AUDIO, new AudioAudioTrait(this.soundAdapter));
            };
        }
        override protected function processUnloadingState():void{
            if (this.stream != null){
                this.stream.removeEventListener(NetStatusEvent.NET_STATUS, this.onNetStatusEvent);
            };
            var _local1:NetStreamLoadTrait = (getTrait(MediaTraitType.LOAD) as NetStreamLoadTrait);
            if (_local1 != null){
                _local1.connection.removeEventListener(NetStatusEvent.NET_STATUS, this.onNetStatusEvent);
            };
            removeTrait(MediaTraitType.PLAY);
            removeTrait(MediaTraitType.SEEK);
            removeTrait(MediaTraitType.TIME);
            removeTrait(MediaTraitType.AUDIO);
            removeTrait(MediaTraitType.BUFFER);
            if (this.soundAdapter != null){
                this.soundAdapter.pause();
            };
            this.soundAdapter = null;
            this.stream = null;
        }
        private function onNetStatusEvent(event:NetStatusEvent):void{
            var _local2:MediaError;
            switch (event.info.code){
                case NetStreamCodes.NETSTREAM_PLAY_FAILED:
                case NetStreamCodes.NETSTREAM_FAILED:
                    _local2 = new MediaError(MediaErrorCodes.NETSTREAM_PLAY_FAILED, event.info.description);
                    break;
                case NetStreamCodes.NETSTREAM_PLAY_STREAMNOTFOUND:
                    _local2 = new MediaError(MediaErrorCodes.NETSTREAM_STREAM_NOT_FOUND, event.info.description);
                    break;
                case NetStreamCodes.NETSTREAM_PLAY_FILESTRUCTUREINVALID:
                    _local2 = new MediaError(MediaErrorCodes.NETSTREAM_FILE_STRUCTURE_INVALID, event.info.description);
                    break;
                case NetStreamCodes.NETSTREAM_PLAY_NOSUPPORTEDTRACKFOUND:
                    _local2 = new MediaError(MediaErrorCodes.NETSTREAM_NO_SUPPORTED_TRACK_FOUND, event.info.description);
                    break;
                case NetConnectionCodes.CONNECT_IDLE_TIME_OUT:
                    _local2 = new MediaError(MediaErrorCodes.NETCONNECTION_TIMEOUT, event.info.description);
                    break;
            };
            if (_local2 != null){
                dispatchEvent(new MediaErrorEvent(MediaErrorEvent.MEDIA_ERROR, false, false, _local2));
            };
        }
        private function get alternateLoaders():Vector.<LoaderBase>{
            if (this._alternateLoaders == null){
                this._alternateLoaders = new Vector.<LoaderBase>();
                this._alternateLoaders.push(new SoundLoader());
                this._alternateLoaders.push(new NetLoader());
            };
            return (this._alternateLoaders);
        }

    }
}//package org.osmf.elements 
﻿package org.osmf.elements.loaderClasses {
    import org.osmf.media.*;
    import flash.display.*;
    import org.osmf.events.*;
    import flash.events.*;
    import flash.utils.*;
    import flash.geom.*;
    import flash.net.*;
    import flash.system.*;
    import org.osmf.traits.*;
    import flash.errors.*;

    public class LoaderUtils {

        private static const SWF_MIME_TYPE:String = "application/x-shockwave-flash";

        public static function createDisplayObjectTrait(loader:Loader, mediaElement:MediaElement):DisplayObjectTrait{
            var _local3:DisplayObject;
            var _local4 = 0;
            var _local5 = 0;
            var _local6:LoaderInfo = loader.contentLoaderInfo;
            _local3 = loader;
            _local3.scrollRect = new Rectangle(0, 0, _local6.width, _local6.height);
            _local4 = _local6.width;
            _local5 = _local6.height;
            return (new DisplayObjectTrait(_local3, _local4, _local5));
        }
        public static function loadLoadTrait(loadTrait:LoadTrait, updateLoadTraitFunction:Function, useCurrentSecurityDomain:Boolean, checkPolicyFile:Boolean, validateLoadedContentFunction:Function=null):void{
            var loader:* = null;
            var onLoadComplete:* = null;
            var onIOError:* = null;
            var onSecurityError:* = null;
            var loadTrait:* = loadTrait;
            var updateLoadTraitFunction:* = updateLoadTraitFunction;
            var useCurrentSecurityDomain:* = useCurrentSecurityDomain;
            var checkPolicyFile:* = checkPolicyFile;
            var validateLoadedContentFunction = validateLoadedContentFunction;
            var toggleLoaderListeners:* = function (loader:Loader, on:Boolean):void{
                if (on){
                    loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onLoadComplete);
                    loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, onIOError);
                    loader.contentLoaderInfo.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecurityError);
                } else {
                    loader.contentLoaderInfo.removeEventListener(Event.COMPLETE, onLoadComplete);
                    loader.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, onIOError);
                    loader.contentLoaderInfo.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecurityError);
                };
            };
            onLoadComplete = function (event:Event):void{
                var validated:* = false;
                var timer:* = null;
                var onTimer:* = null;
                var event:* = event;
                toggleLoaderListeners(loader, false);
                if (loadTrait.loadState == LoadState.LOADING){
                    if (validateLoadedContentFunction != null){
                        validated = validateLoadedContentFunction(loader.content);
                        if (validated){
                            onTimer = function (event:TimerEvent):void{
                                timer.removeEventListener(TimerEvent.TIMER_COMPLETE, onTimer);
                                timer = null;
                                loader.unloadAndStop();
                                loader = null;
                                loadLoadTrait(loadTrait, updateLoadTraitFunction, useCurrentSecurityDomain, false, null);
                            };
                            timer = new Timer(250, 1);
                            timer.addEventListener(TimerEvent.TIMER_COMPLETE, onTimer);
                            timer.start();
                        } else {
                            loader.unloadAndStop();
                            loader = null;
                            updateLoadTraitFunction(loadTrait, LoadState.LOAD_ERROR);
                            loadTrait.dispatchEvent(new MediaErrorEvent(MediaErrorEvent.MEDIA_ERROR, false, false, new MediaError(MediaErrorCodes.IO_ERROR)));
                        };
                    } else {
                        updateLoadTraitFunction(loadTrait, LoadState.READY);
                    };
                };
            };
            onIOError = function (ioEvent:IOErrorEvent, ioEventDetail:String=null):void{
                toggleLoaderListeners(loader, false);
                loader = null;
                updateLoadTraitFunction(loadTrait, LoadState.LOAD_ERROR);
                loadTrait.dispatchEvent(new MediaErrorEvent(MediaErrorEvent.MEDIA_ERROR, false, false, new MediaError(MediaErrorCodes.IO_ERROR, ((ioEvent) ? ioEvent.text : ioEventDetail))));
            };
            onSecurityError = function (securityEvent:SecurityErrorEvent, securityEventDetail:String=null):void{
                toggleLoaderListeners(loader, false);
                loader = null;
                updateLoadTraitFunction(loadTrait, LoadState.LOAD_ERROR);
                loadTrait.dispatchEvent(new MediaErrorEvent(MediaErrorEvent.MEDIA_ERROR, false, false, new MediaError(MediaErrorCodes.SECURITY_ERROR, ((securityEvent) ? securityEvent.text : securityEventDetail))));
            };
            var loaderLoadTrait:* = (loadTrait as LoaderLoadTrait);
            loader = new Loader();
            loaderLoadTrait.loader = loader;
            updateLoadTraitFunction(loadTrait, LoadState.LOADING);
            var context:* = new LoaderContext();
            var urlReq:* = new URLRequest((loadTrait.resource as URLResource).url.toString());
            context.checkPolicyFile = checkPolicyFile;
            if (((useCurrentSecurityDomain) && ((urlReq.url.search(/^file:\//i) == -1)))){
                context.securityDomain = SecurityDomain.currentDomain;
            };
            if (validateLoadedContentFunction != null){
                context.applicationDomain = new ApplicationDomain();
            };
            toggleLoaderListeners(loader, true);
            try {
                loader.load(urlReq, context);
            } catch(ioError:IOError) {
                onIOError(null, ioError.message);
            } catch(securityError:SecurityError) {
                onSecurityError(null, securityError.message);
            };
        }
        public static function unloadLoadTrait(loadTrait:LoadTrait, updateLoadTraitFunction:Function):void{
            var _local3:LoaderLoadTrait = (loadTrait as LoaderLoadTrait);
            updateLoadTraitFunction(loadTrait, LoadState.UNLOADING);
            _local3.loader.unloadAndStop();
            return;
            /*not popped
            updateLoadTraitFunction(loadTrait, LoadState.UNINITIALIZED)
            */
        }

    }
}//package org.osmf.elements.loaderClasses 
﻿package org.osmf.elements.loaderClasses {
    import org.osmf.media.*;
    import flash.display.*;
    import flash.events.*;
    import org.osmf.traits.*;

    public class LoaderLoadTrait extends LoadTrait {

        private var _loader:Loader;

        public function LoaderLoadTrait(loader:LoaderBase, resource:MediaResourceBase){
            super(loader, resource);
        }
        public function get loader():Loader{
            return (this._loader);
        }
        public function set loader(value:Loader):void{
            this._loader = value;
        }
        override protected function loadStateChangeStart(newState:String):void{
            if (newState == LoadState.LOADING){
                this.loader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, this.onContentLoadProgress, false, 0, true);
            } else {
                if (newState == LoadState.READY){
                    setBytesTotal(this.loader.contentLoaderInfo.bytesTotal);
                    setBytesLoaded(this.loader.contentLoaderInfo.bytesLoaded);
                    this.loader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, this.onContentLoadProgress, false, 0, true);
                } else {
                    if (newState == LoadState.UNINITIALIZED){
                        setBytesLoaded(0);
                    };
                };
            };
        }
        private function onContentLoadProgress(event:ProgressEvent):void{
            setBytesTotal(event.bytesTotal);
            setBytesLoaded(event.bytesLoaded);
        }

    }
}//package org.osmf.elements.loaderClasses 
﻿package org.osmf.elements.f4mClasses {
    import org.osmf.events.*;
    import org.osmf.utils.*;
    import org.osmf.net.httpstreaming.dvr.*;
    import org.osmf.elements.f4mClasses.utils.*;

    public class DVRInfoParser extends BaseParser {

        override public function parse(value:String, baseURL:String=null, idPrefix:String=""):void{
            var _local7:Number;
            var _local8:String;
            var _local9:String;
            var _local4:XML = new XML(value);
            if (!_local4){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.F4M_PARSE_VALUE_MISSING)));
            };
            var _local5:Number = (F4MUtils.getVersion(value).major as Number);
            var _local6:DVRInfo = new DVRInfo();
            if (_local4.attribute("id").length() > 0){
                _local6.id = _local4.@id;
            } else {
                _local6.id = F4MUtils.GLOBAL_ELEMENT_ID;
            };
            if (_local4.attribute("url").length() > 0){
                _local8 = _local4.@url;
                if (!URL.isAbsoluteURL(_local8)){
                    _local8 = (URL.normalizeRootURL(baseURL) + URL.normalizeRelativeURL(_local8));
                };
                _local6.url = _local8;
            };
            if (_local5 <= 1){
                if (_local4.attribute("beginOffset").length() > 0){
                    _local6.beginOffset = Math.max(0, parseInt(_local4.@beginOffset));
                };
                if (_local4.attribute("endOffset").length() > 0){
                    _local7 = new Number(_local4.@endOffset);
                    if ((((_local7 > 0)) && ((_local7 < 1)))){
                        _local6.endOffset = 1;
                    } else {
                        _local6.endOffset = Math.max(0, _local7);
                    };
                };
                _local6.windowDuration = -1;
            } else {
                if (_local4.attribute("windowDuration").length() > 0){
                    _local7 = parseInt(_local4.@windowDuration);
                    if (((isNaN(_local7)) || ((_local7 < 0)))){
                        _local6.windowDuration = -1;
                    } else {
                        _local6.windowDuration = _local7;
                    };
                } else {
                    _local6.windowDuration = -1;
                };
            };
            if (_local4.attribute("offline").length() > 0){
                _local9 = _local4.@offline;
                _local6.offline = (_local9.toLowerCase() == "true");
            };
            this.finishLoad(_local6);
        }
        protected function finishLoad(info:DVRInfo):void{
            if (!info){
                return;
            };
            dispatchEvent(new ParseEvent(ParseEvent.PARSE_COMPLETE, false, false, info));
        }

    }
}//package org.osmf.elements.f4mClasses 
﻿package org.osmf.elements.f4mClasses {
    import org.osmf.events.*;
    import flash.events.*;
    import flash.utils.*;
    import flash.net.*;
    import org.osmf.utils.*;
    import org.osmf.net.httpstreaming.*;
    import org.osmf.elements.f4mClasses.utils.*;

    public class DRMAdditionalHeaderParser extends BaseParser {

        private var loadingInfo:Dictionary;

        override public function parse(value:String, baseURL:String=null, idPrefix:String=""):void{
            var _local7:String;
            var _local8:Base64Decoder;
            var _local9:URLLoader;
            var _local4:XML = new XML(value);
            if (!_local4){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.F4M_PARSE_VALUE_MISSING)));
            };
            var _local5:DRMAdditionalHeader = new DRMAdditionalHeader();
            var _local6:String;
            if (_local4.attribute("id").length() > 0){
                _local5.id = (idPrefix + _local4.@id);
            } else {
                _local5.id = (idPrefix + F4MUtils.GLOBAL_ELEMENT_ID);
            };
            if (_local4.attribute("url").length() > 0){
                _local6 = _local4.@url;
                if (!URL.isAbsoluteURL(_local6)){
                    _local6 = (URL.normalizeRootURL(baseURL) + URL.normalizeRelativeURL(_local6));
                };
                _local5.url = _local6;
            } else {
                _local7 = _local4.text();
                _local8 = new Base64Decoder();
                _local8.decode(_local7);
                _local5.data = _local8.drain();
            };
            if (_local6 != null){
                if (!this.loadingInfo){
                    this.loadingInfo = new Dictionary(true);
                };
                _local9 = new URLLoader();
                _local9.dataFormat = URLLoaderDataFormat.BINARY;
                _local9.addEventListener(Event.COMPLETE, this.onLoadComplete);
                _local9.addEventListener(IOErrorEvent.IO_ERROR, this.onLoadError);
                _local9.addEventListener(SecurityErrorEvent.SECURITY_ERROR, this.onLoadError);
                this.loadingInfo[_local9] = _local5;
                _local9.load(new URLRequest(HTTPStreamingUtils.normalizeURL(_local6)));
            } else {
                this.finishLoad(_local5);
            };
        }
        protected function finishLoad(header:DRMAdditionalHeader):void{
            if (!header){
                return;
            };
            dispatchEvent(new ParseEvent(ParseEvent.PARSE_COMPLETE, false, false, header));
        }
        private function onLoadComplete(event:Event):void{
            var _local2:URLLoader = (event.target as URLLoader);
            _local2.removeEventListener(Event.COMPLETE, this.onLoadComplete);
            _local2.removeEventListener(IOErrorEvent.IO_ERROR, this.onLoadError);
            _local2.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, this.onLoadError);
            var _local3:DRMAdditionalHeader = this.loadingInfo[_local2];
            _local3.data = _local2.data;
            delete this.loadingInfo[_local2];
            this.finishLoad(_local3);
        }
        private function onLoadError(event:Event):void{
            dispatchEvent(new ParseEvent(ParseEvent.PARSE_ERROR));
        }

    }
}//package org.osmf.elements.f4mClasses 
﻿package org.osmf.elements.f4mClasses {
    import flash.utils.*;

    public class BootstrapInfo {

        public var data:ByteArray;
        public var url:String;
        public var profile:String;
        public var id:String;

    }
}//package org.osmf.elements.f4mClasses 
﻿package org.osmf.elements.f4mClasses {
    import org.osmf.events.*;
    import org.osmf.utils.*;
    import org.osmf.elements.f4mClasses.utils.*;

    public class BestEffortFetchInfoParser extends BaseParser {

        override public function parse(value:String, baseURL:String=null, idPrefix:String=""):void{
            var _local7:Number;
            var _local4:XML = new XML(value);
            if (!_local4){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.F4M_PARSE_VALUE_MISSING)));
            };
            var _local5:Number = (F4MUtils.getVersion(value).major as Number);
            var _local6:BestEffortFetchInfo = new BestEffortFetchInfo();
            if (_local4.attribute("segmentDuration").length() > 0){
                _local7 = Math.round((parseFloat(_local4.@segmentDuration) * 1000));
                if (((isNaN(_local7)) || ((_local7 <= 0)))){
                    throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.F4M_PARSE_ERROR)));
                };
                _local6.segmentDuration = uint(_local7);
            } else {
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.F4M_PARSE_VALUE_MISSING)));
            };
            if (_local4.attribute("fragmentDuration").length() > 0){
                _local7 = Math.round((parseFloat(_local4.@fragmentDuration) * 1000));
                if (((isNaN(_local7)) || ((_local7 <= 0)))){
                    throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.F4M_PARSE_ERROR)));
                };
                _local6.fragmentDuration = uint(_local7);
            } else {
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.F4M_PARSE_VALUE_MISSING)));
            };
            if (_local4.attribute("maxForwardFetches").length() > 0){
                _local7 = parseInt(_local4.@maxForwardFetches);
                if (((!(isNaN(_local7))) && ((_local7 > 0)))){
                    _local6.maxForwardFetches = uint(_local7);
                };
            };
            if (_local4.attribute("maxBackwardFetches").length() > 0){
                _local7 = parseInt(_local4.@maxBackwardFetches);
                if (((!(isNaN(_local7))) && ((_local7 >= 0)))){
                    _local6.maxBackwardFetches = uint(_local7);
                };
            };
            this.finishLoad(_local6);
        }
        protected function finishLoad(info:BestEffortFetchInfo):void{
            dispatchEvent(new ParseEvent(ParseEvent.PARSE_COMPLETE, false, false, info));
        }

    }
}//package org.osmf.elements.f4mClasses 
﻿package org.osmf.elements.f4mClasses {
    import org.osmf.events.*;
    import org.osmf.utils.*;

    public class ExternalMediaParser extends MediaParser {

        override public function parse(value:String, baseURL:String=null, idPrefix:String=""):void{
            var _local4:XML = new XML(value);
            if (!_local4){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.F4M_PARSE_VALUE_MISSING)));
            };
            if (_local4.attribute("href").length() > 0){
                dispatchEvent(new ParseEvent(ParseEvent.PARSE_COMPLETE, false, false, null));
            } else {
                super.parse(value, baseURL, idPrefix);
            };
        }

    }
}//package org.osmf.elements.f4mClasses 
﻿package org.osmf.elements.f4mClasses {
    import __AS3__.vec.*;
    import org.osmf.net.httpstreaming.dvr.*;

    public class Manifest {

        public var id:String;
        public var label:String;
        public var lang:String;
        public var baseURL:String;
        public var urlIncludesFMSApplicationInstance:Boolean = false;
        public var duration:Number;
        public var mimeType:String;
        public var streamType:String;
        public var deliveryType:String;
        public var startTime:Date;
        public var bootstrapInfos:Vector.<BootstrapInfo>;
        public var drmAdditionalHeaders:Vector.<DRMAdditionalHeader>;
        public var media:Vector.<Media>;
        public var alternativeMedia:Vector.<Media>;
        public var dvrInfo:DVRInfo = null;
        public var bestEffortFetchInfo:BestEffortFetchInfo = null;

        public function Manifest(){
            this.bootstrapInfos = new Vector.<BootstrapInfo>();
            this.drmAdditionalHeaders = new Vector.<DRMAdditionalHeader>();
            this.media = new Vector.<Media>();
            this.alternativeMedia = new Vector.<Media>();
            super();
        }
    }
}//package org.osmf.elements.f4mClasses 
﻿package org.osmf.elements.f4mClasses {
    import org.osmf.media.*;
    import org.osmf.events.*;
    import flash.events.*;
    import flash.utils.*;
    import org.osmf.utils.*;
    import org.osmf.net.*;
    import org.osmf.metadata.*;
    import __AS3__.vec.*;
    import org.osmf.net.httpstreaming.*;
    import org.osmf.net.httpstreaming.dvr.*;

    public class ManifestParser extends EventDispatcher {

        private var parsing:Boolean = false;
        private var unfinishedLoads:Number = 0;
        private var isMulticast:Boolean;
        private var bitrateMissing:Boolean;
        private var mediaParser:BaseParser;
        private var dvrInfoParser:BaseParser;
        private var drmAdditionalHeaderParser:BaseParser;
        private var bootstrapInfoParser:BaseParser;
        private var bootstraps:Vector.<BootstrapInfo>;
        private var bestEffortFetchInfoParser:BaseParser;
        private var manifest:Manifest;

        public function ManifestParser(){
            this.mediaParser = this.buildMediaParser();
            this.mediaParser.addEventListener(ParseEvent.PARSE_COMPLETE, this.onMediaLoadComplete, false, 0, true);
            this.mediaParser.addEventListener(ParseEvent.PARSE_ERROR, this.onAdditionalLoadError, false, 0, true);
            this.dvrInfoParser = this.buildDVRInfoParser();
            this.dvrInfoParser.addEventListener(ParseEvent.PARSE_COMPLETE, this.onDVRInfoLoadComplete, false, 0, true);
            this.dvrInfoParser.addEventListener(ParseEvent.PARSE_ERROR, this.onAdditionalLoadError, false, 0, true);
            this.drmAdditionalHeaderParser = this.buildDRMAdditionalHeaderParser();
            this.drmAdditionalHeaderParser.addEventListener(ParseEvent.PARSE_COMPLETE, this.onDRMAdditionalHeaderLoadComplete, false, 0, true);
            this.drmAdditionalHeaderParser.addEventListener(ParseEvent.PARSE_ERROR, this.onAdditionalLoadError, false, 0, true);
            this.bootstrapInfoParser = this.buildBootstrapInfoParser();
            this.bootstrapInfoParser.addEventListener(ParseEvent.PARSE_COMPLETE, this.onBootstrapInfoLoadComplete, false, 0, true);
            this.bootstrapInfoParser.addEventListener(ParseEvent.PARSE_ERROR, this.onAdditionalLoadError, false, 0, true);
            this.bestEffortFetchInfoParser = this.buildBestEffortFetchInfoParser();
            this.bestEffortFetchInfoParser.addEventListener(ParseEvent.PARSE_COMPLETE, this.onBestEffortFetchLoadComplete, false, 0, true);
            this.bestEffortFetchInfoParser.addEventListener(ParseEvent.PARSE_ERROR, this.onAdditionalLoadError, false, 0, true);
        }
        public function parse(value:String, rootURL:String=null, manifest:Manifest=null, idPrefix:String=""):void{
            var _local8:XML;
            var _local9:XML;
            var _local10:XML;
            var _local11:XML;
            var _local12:XML;
            if (!value){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.F4M_PARSE_VALUE_MISSING)));
            };
            this.parsing = true;
            if (!manifest){
                manifest = new Manifest();
            };
            this.manifest = manifest;
            this.isMulticast = false;
            this.bitrateMissing = false;
            var _local5:XML = new XML(value);
            var _local6:Namespace = _local5.namespace();
            if (_local5._local6::id.length() > 0){
                manifest.id = _local5._local6::id.text();
            };
            if (_local5._local6::label.length() > 0){
                manifest.label = _local5._local6::label.text();
            };
            if (_local5._local6::lang.length() > 0){
                manifest.lang = _local5._local6::lang.text();
            };
            if (_local5._local6::duration.length() > 0){
                manifest.duration = _local5._local6::duration.text();
            };
            if (_local5._local6::startTime.length() > 0){
                manifest.startTime = DateUtil.parseW3CDTF(_local5._local6::startTime.text());
            };
            if (_local5._local6::mimeType.length() > 0){
                manifest.mimeType = _local5._local6::mimeType.text();
            };
            if (_local5._local6::streamType.length() > 0){
                manifest.streamType = _local5._local6::streamType.text();
            };
            if (_local5._local6::deliveryType.length() > 0){
                manifest.deliveryType = _local5._local6::deliveryType.text();
            };
            if (_local5._local6::baseURL.length() > 0){
                manifest.baseURL = _local5._local6::baseURL.text();
            };
            if (_local5._local6::urlIncludesFMSApplicationInstance.length() > 0){
                manifest.urlIncludesFMSApplicationInstance = (_local5._local6::urlIncludesFMSApplicationInstance.text() == "true");
            };
            var _local7:String = rootURL;
            if (manifest.baseURL != null){
                _local7 = manifest.baseURL;
            };
            _local7 = URL.normalizePathForURL(_local7, false);
            for each (_local8 in _local5._local6::dvrInfo) {
                this.unfinishedLoads++;
                this.parseDVRInfo(_local8, _local7);
                break;
            };
            for each (_local9 in _local5._local6::media) {
                this.unfinishedLoads++;
                this.parseMedia(_local9, _local7, idPrefix);
            };
            for each (_local10 in _local5._local6::drmAdditionalHeader) {
                this.unfinishedLoads++;
                this.parseDRMAdditionalHeader(_local10, _local7, idPrefix);
            };
            this.bootstraps = new Vector.<BootstrapInfo>();
            for each (_local11 in _local5._local6::bootstrapInfo) {
                this.unfinishedLoads++;
                this.parseBootstrapInfo(_local11, _local7, idPrefix);
            };
            for each (_local12 in _local5._local6::bestEffortFetchInfo) {
                this.unfinishedLoads++;
                this.parseBestEffortFetchInfo(_local12, _local7);
                break;
            };
            this.generateRTMPBaseURL(manifest);
            this.parsing = false;
            this.finishLoad(manifest);
        }
        public function createResource(value:Manifest, manifestResource:MediaResourceBase):MediaResourceBase{
            var _local5:StreamingURLResource;
            var _local6:Media;
            var _local7:Vector.<String>;
            var _local8:String;
            var _local9:String;
            var _local10:URL;
            var _local13:String;
            var _local14:String;
            var _local15:DynamicStreamingResource;
            var _local16:Vector.<DynamicStreamingItem>;
            var _local17:String;
            var _local18:DynamicStreamingItem;
            var _local19:int;
            var _local20:StreamingURLResource;
            var _local21:StreamingXMLResource;
            var _local3:Metadata;
            var _local4:Metadata;
            if ((manifestResource is URLResource)){
                _local10 = new URL((manifestResource as URLResource).url);
            } else {
                if ((manifestResource is StreamingXMLResource)){
                    _local10 = new URL((manifestResource as StreamingXMLResource).url);
                };
            };
            var _local11:String = ("/" + _local10.path);
            _local11 = _local11.substr(0, _local11.lastIndexOf("/"));
            var _local12:String = ((((_local10.protocol + "://") + _local10.host) + ((_local10.port)!="") ? (":" + _local10.port) : "") + _local11);
            if (value.media.length == 1){
                _local6 = (value.media[0] as Media);
                _local8 = _local6.url;
                _local13 = null;
                if (URL.isAbsoluteURL(_local8)){
                    _local13 = _local6.url.substr(0, _local6.url.lastIndexOf("/"));
                } else {
                    if (value.baseURL != null){
                        _local13 = value.baseURL;
                    } else {
                        _local13 = _local12;
                    };
                };
                _local13 = URL.normalizeRootURL(_local13);
                if (((((((!((_local6.multicastGroupspec == null))) && ((_local6.multicastGroupspec.length > 0)))) && (!((_local6.multicastStreamName == null))))) && ((_local6.multicastStreamName.length > 0)))){
                    if (URL.isAbsoluteURL(_local8)){
                        _local5 = new MulticastResource(_local8, this.streamType(value));
                    } else {
                        if (value.baseURL != null){
                            _local5 = new MulticastResource((URL.normalizeRootURL(value.baseURL) + URL.normalizeRelativeURL(_local8)), this.streamType(value));
                        } else {
                            _local5 = new MulticastResource((URL.normalizeRootURL(_local12) + URL.normalizeRelativeURL(_local8)), this.streamType(value));
                        };
                    };
                    MulticastResource(_local5).groupspec = _local6.multicastGroupspec;
                    MulticastResource(_local5).streamName = _local6.multicastStreamName;
                } else {
                    if (URL.isAbsoluteURL(_local8)){
                        _local5 = new StreamingURLResource(_local8, this.streamType(value));
                    } else {
                        if (value.baseURL != null){
                            _local5 = new StreamingURLResource((URL.normalizeRootURL(value.baseURL) + URL.normalizeRelativeURL(_local8)), this.streamType(value));
                        } else {
                            _local5 = new StreamingURLResource((URL.normalizeRootURL(_local12) + URL.normalizeRelativeURL(_local8)), this.streamType(value));
                        };
                    };
                };
                _local5.urlIncludesFMSApplicationInstance = value.urlIncludesFMSApplicationInstance;
                if (((!((_local6.bootstrapInfo == null))) && (((!((_local6.bootstrapInfo.data == null))) || (!((_local6.bootstrapInfo.url == null))))))){
                    _local7 = new Vector.<String>();
                    _local7.push(_local13);
                    _local9 = _local6.bootstrapInfo.url;
                    if (((!((_local6.bootstrapInfo.url == null))) && ((URL.isAbsoluteURL(_local6.bootstrapInfo.url) == false)))){
                        _local9 = (URL.normalizeRootURL(_local12) + URL.normalizeRelativeURL(_local9));
                        _local6.bootstrapInfo.url = _local9;
                    };
                    _local4 = new Metadata();
                    _local4.addValue(MetadataNamespaces.HTTP_STREAMING_BOOTSTRAP_KEY, _local6.bootstrapInfo);
                    if (_local7.length > 0){
                        _local4.addValue(MetadataNamespaces.HTTP_STREAMING_SERVER_BASE_URLS_KEY, _local7);
                    };
                };
                if (_local6.metadata != null){
                    if (_local4 == null){
                        _local4 = new Metadata();
                    };
                    _local4.addValue(MetadataNamespaces.HTTP_STREAMING_STREAM_METADATA_KEY, _local6.metadata);
                };
                if (_local6.xmp != null){
                    if (_local4 == null){
                        _local4 = new Metadata();
                    };
                    _local4.addValue(MetadataNamespaces.HTTP_STREAMING_XMP_METADATA_KEY, _local6.xmp);
                };
                if (_local6.drmAdditionalHeader != null){
                    _local3 = new Metadata();
                    if (((!((Media(value.media[0]).drmAdditionalHeader == null))) && (!((Media(value.media[0]).drmAdditionalHeader.data == null))))){
                        _local3.addValue(MetadataNamespaces.DRM_ADDITIONAL_HEADER_KEY, Media(value.media[0]).drmAdditionalHeader.data);
                        _local5.drmContentData = this.extractDRMMetadata(Media(value.media[0]).drmAdditionalHeader.data);
                    };
                };
                if (_local4 != null){
                    _local5.addMetadataValue(MetadataNamespaces.HTTP_STREAMING_METADATA, _local4);
                };
                if (_local3 != null){
                    _local5.addMetadataValue(MetadataNamespaces.DRM_METADATA, _local3);
                };
            } else {
                if (value.media.length > 1){
                    _local14 = ((value.baseURL)!=null) ? value.baseURL : _local12;
                    _local14 = URL.normalizeRootURL(_local14);
                    _local7 = new Vector.<String>();
                    _local7.push(_local14);
                    _local15 = new DynamicStreamingResource(_local14, this.streamType(value));
                    _local15.urlIncludesFMSApplicationInstance = value.urlIncludesFMSApplicationInstance;
                    _local16 = new Vector.<DynamicStreamingItem>();
                    if (NetStreamUtils.isRTMPStream(_local14) == false){
                        _local4 = new Metadata();
                        _local15.addMetadataValue(MetadataNamespaces.HTTP_STREAMING_METADATA, _local4);
                        _local4.addValue(MetadataNamespaces.HTTP_STREAMING_SERVER_BASE_URLS_KEY, _local7);
                    };
                    for each (_local6 in value.media) {
                        if (URL.isAbsoluteURL(_local6.url)){
                            _local17 = NetStreamUtils.getStreamNameFromURL(_local6.url, _local15.urlIncludesFMSApplicationInstance);
                        } else {
                            _local17 = _local6.url;
                        };
                        _local18 = new DynamicStreamingItem(_local17, _local6.bitrate, _local6.width, _local6.height);
                        _local16.push(_local18);
                        if (_local6.drmAdditionalHeader != null){
                            if (_local15.getMetadataValue(MetadataNamespaces.DRM_METADATA) == null){
                                _local3 = new Metadata();
                                _local15.addMetadataValue(MetadataNamespaces.DRM_METADATA, _local3);
                            };
                            if (((!((_local6.drmAdditionalHeader == null))) && (!((_local6.drmAdditionalHeader.data == null))))){
                                _local3.addValue(_local18.streamName, this.extractDRMMetadata(_local6.drmAdditionalHeader.data));
                                _local3.addValue((MetadataNamespaces.DRM_ADDITIONAL_HEADER_KEY + _local18.streamName), _local6.drmAdditionalHeader.data);
                            };
                        };
                        if (((!((_local6.bootstrapInfo == null))) && (((!((_local6.bootstrapInfo.url == null))) || (!((_local6.bootstrapInfo.data == null))))))){
                            _local9 = ((_local6.bootstrapInfo.url) ? _local6.bootstrapInfo.url : null);
                            if (((!((_local6.bootstrapInfo.url == null))) && ((URL.isAbsoluteURL(_local6.bootstrapInfo.url) == false)))){
                                _local9 = (URL.normalizeRootURL(_local12) + URL.normalizeRelativeURL(_local9));
                                _local6.bootstrapInfo.url = _local9;
                            };
                            if (_local4 != null){
                                _local4.addValue((MetadataNamespaces.HTTP_STREAMING_BOOTSTRAP_KEY + _local18.streamName), _local6.bootstrapInfo);
                            };
                        };
                        if (_local6.metadata != null){
                            if (_local4 != null){
                                _local4.addValue((MetadataNamespaces.HTTP_STREAMING_STREAM_METADATA_KEY + _local18.streamName), _local6.metadata);
                            };
                        };
                        if (_local6.xmp != null){
                            if (_local4 != null){
                                _local4.addValue((MetadataNamespaces.HTTP_STREAMING_XMP_METADATA_KEY + _local18.streamName), _local6.xmp);
                            };
                        };
                    };
                    _local15.streamItems = _local16;
                    if (manifestResource.getMetadataValue(MetadataNamespaces.RESOURCE_INITIAL_INDEX) != null){
                        _local19 = (manifestResource.getMetadataValue(MetadataNamespaces.RESOURCE_INITIAL_INDEX) as int);
                        if (_local19 < 0){
                            _local15.initialIndex = 0;
                        } else {
                            if (_local19 >= _local15.streamItems.length){
                                _local15.initialIndex = (_local15.streamItems.length - 1);
                            } else {
                                _local15.initialIndex = _local19;
                            };
                        };
                    };
                    _local5 = _local15;
                } else {
                    if (value.baseURL == null){
                        throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.F4M_PARSE_MEDIA_URL_MISSING)));
                    };
                    if (value.media.length == 0){
                        throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.F4M_MEDIA_MISSING)));
                    };
                };
            };
            if (value.mimeType != null){
                _local5.mediaType = MediaType.VIDEO;
                _local5.mimeType = value.mimeType;
            };
            if ((manifestResource is URLResource)){
                _local20 = (manifestResource as StreamingURLResource);
                if (_local20 != null){
                    _local5.clipStartTime = _local20.clipStartTime;
                    _local5.clipEndTime = _local20.clipEndTime;
                };
            } else {
                if ((manifestResource is StreamingXMLResource)){
                    _local21 = (manifestResource as StreamingXMLResource);
                    _local5.clipStartTime = _local21.clipStartTime;
                    _local5.clipEndTime = _local21.clipEndTime;
                };
            };
            _local5.addMetadataValue(MetadataNamespaces.DERIVED_RESOURCE_METADATA, manifestResource);
            HTTPStreamingUtils.addDVRInfoMetadataToResource(value.dvrInfo, _local5);
            HTTPStreamingUtils.addBestEffortFetchInfoMetadataToResource(value.bestEffortFetchInfo, _local5);
            if (NetStreamUtils.isRTMPStream(_local14) == false){
                this.addAlternativeMedia(value, _local5, _local12);
            };
            this.bootstraps = null;
            return (_local5);
        }
        protected function buildMediaParser():BaseParser{
            return (new MediaParser());
        }
        protected function buildDVRInfoParser():BaseParser{
            return (new DVRInfoParser());
        }
        protected function buildDRMAdditionalHeaderParser():BaseParser{
            return (new DRMAdditionalHeaderParser());
        }
        protected function buildBootstrapInfoParser():BaseParser{
            return (new BootstrapInfoParser());
        }
        protected function buildBestEffortFetchInfoParser():BaseParser{
            return (new BestEffortFetchInfoParser());
        }
        protected function validateManifest(manifest:Manifest, isMulticast:Boolean, bitrateMissing:Boolean):void{
            if ((((manifest.media.length > 1)) && (isMulticast))){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.MULTICAST_NOT_SUPPORT_MBR)));
            };
            if (((((manifest.media.length + manifest.alternativeMedia.length) > 1)) && (bitrateMissing))){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.F4M_PARSE_BITRATE_MISSING)));
            };
            if (isMulticast){
                manifest.streamType = StreamType.LIVE;
            };
        }
        protected function finishLoad(manifest:Manifest):void{
            if (this.parsing){
                return;
            };
            if (this.unfinishedLoads > 0){
                return;
            };
            if (!manifest){
                return;
            };
            this.validateManifest(manifest, this.isMulticast, this.bitrateMissing);
            dispatchEvent(new ParseEvent(ParseEvent.PARSE_COMPLETE, false, false, manifest));
        }
        private function parseMedia(value:XML, baseURL:String, idPrefix:String=""):void{
            this.mediaParser.parse(value.toXMLString(), baseURL, idPrefix);
        }
        private function parseDVRInfo(value:XML, baseURL:String):void{
            this.dvrInfoParser.parse(value.toXMLString(), baseURL);
        }
        private function parseDRMAdditionalHeader(value:XML, baseURL:String, idPrefix:String=""):void{
            this.drmAdditionalHeaderParser.parse(value.toXMLString(), baseURL, idPrefix);
        }
        private function parseBootstrapInfo(value:XML, baseURL:String, idPrefix:String=""):void{
            this.bootstrapInfoParser.parse(value.toXMLString(), baseURL, idPrefix);
        }
        private function parseBestEffortFetchInfo(value:XML, baseURL:String, idPrefix:String=""):void{
            this.bestEffortFetchInfoParser.parse(value.toXMLString(), baseURL, idPrefix);
        }
        private function generateRTMPBaseURL(manifest:Manifest):void{
            var _local2:Media;
            if (manifest.baseURL == null){
                for each (_local2 in manifest.media) {
                    if (NetStreamUtils.isRTMPStream(_local2.url)){
                        manifest.baseURL = _local2.url;
                        break;
                    };
                };
            };
        }
        private function isSupportedType(type:String):Boolean{
            return ((((type == StreamingItemType.VIDEO)) || ((type == StreamingItemType.AUDIO))));
        }
        private function extractDRMMetadata(data:ByteArray):ByteArray{
            var header:* = null;
            var encryption:* = null;
            var enc:* = null;
            var params:* = null;
            var version:* = null;
            var keyInfo:* = null;
            var keyInfoData:* = null;
            var drmMetadata:* = null;
            var decoder:* = null;
            var data:* = data;
            var metadata:* = null;
            data.position = 0;
            data.objectEncoding = 0;
            try {
                header = data.readObject();
                encryption = data.readObject();
                enc = encryption["Encryption"];
                params = enc["Params"];
                version = enc["Version"].toString();
                keyInfo = params["KeyInfo"];
                keyInfoData = null;
                switch (version){
                    case "2":
                        keyInfoData = keyInfo["FMRMS_METADATA"];
                        break;
                    case "3":
                        keyInfoData = keyInfo["Data"];
                        break;
                };
                if (keyInfoData != null){
                    drmMetadata = (keyInfoData["Metadata"] as String);
                    decoder = new Base64Decoder();
                    decoder.decode(drmMetadata);
                    metadata = decoder.drain();
                };
            } catch(e:Error) {
                metadata = null;
            };
            return (metadata);
        }
        private function addAlternativeMedia(manifest:Manifest, resource:StreamingURLResource, manifestFolder:String):void{
            var _local5:Metadata;
            var _local7:Media;
            var _local8:String;
            var _local9:Object;
            var _local10:StreamingItem;
            var _local11:String;
            if (manifest.alternativeMedia.length == 0){
                return;
            };
            var _local4:Metadata = (resource.getMetadataValue(MetadataNamespaces.HTTP_STREAMING_METADATA) as Metadata);
            if (_local4 == null){
                _local4 = new Metadata();
                resource.addMetadataValue(MetadataNamespaces.HTTP_STREAMING_METADATA, _local4);
            };
            var _local6:Vector.<StreamingItem> = new Vector.<StreamingItem>();
            for each (_local7 in manifest.alternativeMedia) {
                if (URL.isAbsoluteURL(_local7.url)){
                    _local8 = NetStreamUtils.getStreamNameFromURL(_local7.url, resource.urlIncludesFMSApplicationInstance);
                } else {
                    _local8 = _local7.url;
                };
                _local9 = new Object();
                _local9.label = _local7.label;
                _local9.language = _local7.language;
                _local10 = new StreamingItem(_local7.type, _local8, _local7.bitrate, _local9);
                _local6.push(_local10);
                if (_local7.drmAdditionalHeader != null){
                    if (resource.getMetadataValue(MetadataNamespaces.DRM_METADATA) == null){
                        _local5 = new Metadata();
                        resource.addMetadataValue(MetadataNamespaces.DRM_METADATA, _local5);
                    } else {
                        _local5 = (resource.getMetadataValue(MetadataNamespaces.DRM_METADATA) as Metadata);
                    };
                    if (((!((_local7.drmAdditionalHeader == null))) && (!((_local7.drmAdditionalHeader.data == null))))){
                        _local5.addValue(_local10.streamName, this.extractDRMMetadata(_local7.drmAdditionalHeader.data));
                        _local5.addValue((MetadataNamespaces.DRM_ADDITIONAL_HEADER_KEY + _local10.streamName), _local7.drmAdditionalHeader.data);
                    };
                };
                if (((!((_local7.bootstrapInfo == null))) && (((!((_local7.bootstrapInfo.url == null))) || (!((_local7.bootstrapInfo.data == null))))))){
                    _local11 = ((_local7.bootstrapInfo.url) ? _local7.bootstrapInfo.url : null);
                    if (((!((_local7.bootstrapInfo.url == null))) && ((URL.isAbsoluteURL(_local7.bootstrapInfo.url) == false)))){
                        _local11 = (URL.normalizeRootURL(manifestFolder) + URL.normalizeRelativeURL(_local11));
                        _local7.bootstrapInfo.url = _local11;
                    };
                    _local4.addValue((MetadataNamespaces.HTTP_STREAMING_BOOTSTRAP_KEY + _local10.streamName), _local7.bootstrapInfo);
                };
                if (_local7.metadata != null){
                    _local4.addValue((MetadataNamespaces.HTTP_STREAMING_STREAM_METADATA_KEY + _local10.streamName), _local7.metadata);
                };
                if (_local7.xmp != null){
                    _local4.addValue((MetadataNamespaces.HTTP_STREAMING_XMP_METADATA_KEY + _local10.streamName), _local7.xmp);
                };
            };
            resource.alternativeAudioStreamItems = _local6;
        }
        private function streamType(value:Manifest):String{
            return ((((((value.streamType == StreamType.LIVE)) && (!((value.dvrInfo == null))))) ? StreamType.DVR : value.streamType));
        }
        private function onMediaLoadComplete(event:ParseEvent):void{
            var _local3:BootstrapInfo;
            var _local2:Media = (event.data as Media);
            if (_local2){
                if (((!((_local2.multicastGroupspec == null))) && ((_local2.multicastGroupspec.length > 0)))){
                    this.isMulticast = true;
                };
                if (this.isSupportedType(_local2.type)){
                    if (_local2.label == null){
                        _local2.label = this.manifest.label;
                    };
                    if (_local2.language == null){
                        _local2.language = this.manifest.lang;
                    };
                    if (_local2.alternate){
                        if (_local2.type == StreamingItemType.AUDIO){
                            this.manifest.alternativeMedia.push(_local2);
                        };
                    } else {
                        this.manifest.media.push(_local2);
                    };
                };
                if (((this.bootstraps) && ((this.bootstraps.length > 0)))){
                    for each (_local3 in this.bootstraps) {
                        if (_local2.bootstrapInfo == null){
                            _local2.bootstrapInfo = _local3;
                            break;
                        };
                        if (_local2.bootstrapInfo.id == _local3.id){
                            _local2.bootstrapInfo = _local3;
                            break;
                        };
                    };
                };
                this.bitrateMissing = ((this.bitrateMissing) || (isNaN(_local2.bitrate)));
            };
            this.onAdditionalLoadComplete(event);
        }
        private function onDVRInfoLoadComplete(event:ParseEvent):void{
            this.manifest.dvrInfo = (event.data as DVRInfo);
            this.onAdditionalLoadComplete(event);
        }
        private function onDRMAdditionalHeaderLoadComplete(event:ParseEvent):void{
            var _local4:Media;
            var _local2:DRMAdditionalHeader = (event.data as DRMAdditionalHeader);
            this.manifest.drmAdditionalHeaders.push(_local2);
            var _local3:Vector.<Media> = this.manifest.media.concat(this.manifest.alternativeMedia);
            for each (_local4 in _local3) {
                if (((!((_local4.drmAdditionalHeader == null))) && ((_local4.drmAdditionalHeader.id == _local2.id)))){
                    _local4.drmAdditionalHeader = _local2;
                };
            };
            this.onAdditionalLoadComplete(event);
        }
        private function onBootstrapInfoLoadComplete(event:ParseEvent):void{
            var _local4:Media;
            var _local2:BootstrapInfo = (event.data as BootstrapInfo);
            this.bootstraps.push(_local2);
            var _local3:Vector.<Media> = this.manifest.media.concat(this.manifest.alternativeMedia);
            for each (_local4 in _local3) {
                if (_local4.bootstrapInfo == null){
                    _local4.bootstrapInfo = _local2;
                } else {
                    if (_local4.bootstrapInfo.id == _local2.id){
                        _local4.bootstrapInfo = _local2;
                    };
                };
            };
            this.onAdditionalLoadComplete(event);
        }
        private function onBestEffortFetchLoadComplete(event:ParseEvent):void{
            this.manifest.bestEffortFetchInfo = (event.data as BestEffortFetchInfo);
            this.onAdditionalLoadComplete(event);
        }
        private function onAdditionalLoadComplete(event:Event):void{
            this.unfinishedLoads--;
            if ((((this.unfinishedLoads == 0)) && (!(this.parsing)))){
                this.finishLoad(this.manifest);
            };
        }
        private function onAdditionalLoadError(event:Event):void{
            dispatchEvent(new ParseEvent(ParseEvent.PARSE_ERROR));
        }

    }
}//package org.osmf.elements.f4mClasses 
﻿package org.osmf.elements.f4mClasses {

    public class BestEffortFetchInfo {

        public static const DEFAULT_MAX_FORWARD_FETCHES:uint = 2;
        public static const DEFAULT_MAX_BACKWARD_FETCHES:uint = 2;

        public var maxForwardFetches:uint = 2;
        public var maxBackwardFetches:uint = 2;
        public var segmentDuration:uint = 0;
        public var fragmentDuration:uint = 0;

    }
}//package org.osmf.elements.f4mClasses 
﻿package org.osmf.elements.f4mClasses.builders {
    import org.osmf.elements.f4mClasses.*;

    public class BaseManifestBuilder {

        public function canParse(resource:String):Boolean{
            return (false);
        }
        public function build(resource:String):ManifestParser{
            return (null);
        }

    }
}//package org.osmf.elements.f4mClasses.builders 
﻿package org.osmf.elements.f4mClasses.builders {
    import org.osmf.media.pluginClasses.*;
    import org.osmf.elements.f4mClasses.*;
    import org.osmf.elements.f4mClasses.utils.*;

    public class ManifestBuilder extends BaseManifestBuilder {

        private static const MINIMUM_VERSION:Object = VersionUtils.parseVersionString("0.0");
        private static const MAXIMUM_VERSION:Object = VersionUtils.parseVersionString("1.9");

        override public function canParse(resource:String):Boolean{
            var _local2:Object = this.getVersion(resource);
            return ((((((((_local2.major >= MINIMUM_VERSION.major)) && ((_local2.major <= MAXIMUM_VERSION.major)))) && ((_local2.minor >= MINIMUM_VERSION.minor)))) && ((_local2.minor <= MAXIMUM_VERSION.minor))));
        }
        override public function build(resource:String):ManifestParser{
            var _local2:ManifestParser = this.createParser();
            return (_local2);
        }
        protected function getVersion(resource:String):Object{
            return (F4MUtils.getVersion(resource));
        }
        protected function createParser():ManifestParser{
            return (new ManifestParser());
        }

    }
}//package org.osmf.elements.f4mClasses.builders 
﻿package org.osmf.elements.f4mClasses.builders {
    import org.osmf.media.pluginClasses.*;
    import org.osmf.elements.f4mClasses.*;
    import org.osmf.elements.f4mClasses.utils.*;

    public class MultiLevelManifestBuilder extends BaseManifestBuilder {

        private static const MINIMUM_VERSION:Object = VersionUtils.parseVersionString("2.0");

        override public function canParse(resource:String):Boolean{
            var _local2:Object = this.getVersion(resource);
            return ((((_local2.major >= MINIMUM_VERSION.major)) && ((_local2.minor >= MINIMUM_VERSION.minor))));
        }
        override public function build(resource:String):ManifestParser{
            var _local2:ManifestParser = this.createParser();
            return (_local2);
        }
        protected function getVersion(resource:String):Object{
            return (F4MUtils.getVersion(resource));
        }
        protected function createParser():ManifestParser{
            return (new MultiLevelManifestParser());
        }

    }
}//package org.osmf.elements.f4mClasses.builders 
﻿package org.osmf.elements.f4mClasses {
    import org.osmf.events.*;
    import flash.events.*;
    import flash.utils.*;
    import flash.net.*;
    import org.osmf.utils.*;
    import org.osmf.net.httpstreaming.*;

    public class MultiLevelManifestParser extends ManifestParser {

        private var parsing:Boolean = false;
        private var unfinishedLoads:Number = 0;
        private var manifest:Manifest;
        private var queue:Array;
        private var baseURLs:Dictionary;
        private var loadingInfo:Dictionary;
        private var externalMediaCount:Number = 0;

        override public function parse(value:String, rootURL:String=null, manifest:Manifest=null, idPrefix:String=""):void{
            var _local8:XML;
            var _local9:String;
            var _local10:URLLoader;
            var _local11:Info;
            this.parsing = true;
            this.manifest = new Manifest();
            var _local5:XML = new XML(value);
            var _local6:Namespace = _local5.namespace();
            this.queue = [];
            this.queue.push(_local5);
            if (!this.baseURLs){
                this.baseURLs = new Dictionary(true);
            };
            var _local7:String = rootURL;
            if (_local5._local6::baseURL.length() > 0){
                _local7 = _local5._local6::baseURL.text();
            };
            _local7 = URL.normalizePathForURL(_local7, false);
            this.baseURLs[_local5] = _local7;
            for each (_local8 in _local5._local6::media) {
                if (_local8.attribute("href").length() > 0){
                    this.unfinishedLoads++;
                    _local9 = _local8.@href;
                    if (!URL.isAbsoluteURL(_local9)){
                        _local9 = (URL.normalizeRootURL(_local7) + URL.normalizeRelativeURL(_local9));
                    };
                    _local10 = new URLLoader();
                    _local10.addEventListener(Event.COMPLETE, this.onLoadComplete);
                    _local10.addEventListener(IOErrorEvent.IO_ERROR, this.onLoadError);
                    _local10.addEventListener(SecurityErrorEvent.SECURITY_ERROR, this.onLoadError);
                    if (!this.loadingInfo){
                        this.loadingInfo = new Dictionary(true);
                    };
                    _local11 = new Info();
                    _local11.baseURL = URL.normalizeRootURL(URL.getRootUrl(_local9));
                    if (_local8.attribute("bitrate").length() > 0){
                        _local11.attributes.bitrate = _local8.@bitrate;
                    };
                    if (_local8.attribute("width").length() > 0){
                        _local11.attributes.width = _local8.@width;
                    };
                    if (_local8.attribute("height").length() > 0){
                        _local11.attributes.height = _local8.@height;
                    };
                    if (_local8.attribute("type").length() > 0){
                        _local11.attributes.type = _local8.@type;
                    };
                    if (((_local8.hasOwnProperty("@alternate")) || ((_local8.attribute("alternate").length() > 0)))){
                        _local11.attributes.alternate = "true";
                    };
                    if (_local8.attribute("label").length() > 0){
                        _local11.attributes.label = _local8.@label;
                    };
                    if (_local8.attribute("lang").length() > 0){
                        _local11.attributes.lang = _local8.@lang;
                    };
                    this.loadingInfo[_local10] = _local11;
                    _local10.load(new URLRequest(HTTPStreamingUtils.normalizeURL(_local9)));
                };
            };
            this.parsing = false;
            if (this.unfinishedLoads == 0){
                this.processQueue();
            };
        }
        override protected function finishLoad(manifest:Manifest):void{
            if (!this.processQueue()){
                manifest.baseURL = null;
                super.finishLoad(manifest);
            };
        }
        override protected function buildMediaParser():BaseParser{
            return (new ExternalMediaParser());
        }
        private function processQueue():Boolean{
            var _local1:XML;
            var _local2:String;
            var _local3:String;
            if (this.parsing){
                return (true);
            };
            if (this.queue.length > 0){
                _local1 = (this.queue.pop() as XML);
                _local2 = this.baseURLs[_local1];
                this.externalMediaCount = (this.externalMediaCount + 1);
                _local3 = (("external" + this.externalMediaCount) + "_");
                super.parse(_local1.toXMLString(), _local2, this.manifest, _local3);
                return (true);
            };
            return (false);
        }
        private function onLoadComplete(event:Event):void{
            var _local6:XML;
            var _local7:XMLList;
            var _local8:String;
            var _local9:int;
            var _local2:URLLoader = (event.target as URLLoader);
            _local2.removeEventListener(Event.COMPLETE, this.onLoadComplete);
            _local2.removeEventListener(IOErrorEvent.IO_ERROR, this.onLoadError);
            _local2.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, this.onLoadError);
            var _local3:XML = XML(URLLoader(event.target).data);
            var _local4:Namespace = _local3.namespace();
            var _local5:Info = this.loadingInfo[_local2];
            delete this.loadingInfo[_local2];
            for each (_local6 in _local3._local4::media) {
                _local7 = describeType(_local5.attributes)..variable;
                while (_local9 < _local7.length()) {
                    _local8 = _local7[_local9].@name;
                    if (((!((_local5.attributes[_local8] == null))) && ((_local5.attributes[_local8].length > 0)))){
                        _local6.@[_local8] = _local5.attributes[_local8];
                    } else {
                        delete _local6.@[_local8];
                    };
                    _local9++;
                };
            };
            if (!this.baseURLs){
                this.baseURLs = new Dictionary(true);
            };
            this.baseURLs[_local3] = URL.normalizeRootURL(_local5.baseURL);
            this.queue.push(_local3);
            this.unfinishedLoads--;
            if (this.unfinishedLoads == 0){
                this.processQueue();
            };
        }
        private function onLoadError(event:Event):void{
            this.unfinishedLoads--;
            dispatchEvent(new ParseEvent(ParseEvent.PARSE_ERROR));
        }

    }
}//package org.osmf.elements.f4mClasses 

class Info {

    public var baseURL:String;
    public var attributes:Attributes;

    public function Info(){
        this.attributes = new Attributes();
    }
}
class Attributes {

    public var bitrate:String;
    public var width:String;
    public var height:String;
    public var type:String;
    public var alternate:String;
    public var label:String;
    public var lang:String;

    public function Attributes(){
    }
}
﻿package org.osmf.elements.f4mClasses {
    import flash.events.*;

    public class BaseParser extends EventDispatcher {

        public function parse(value:String, rootURL:String=null, idPrefix:String=""):void{
        }

    }
}//package org.osmf.elements.f4mClasses 
﻿package org.osmf.elements.f4mClasses {
    import flash.utils.*;
    import org.osmf.elements.f4mClasses.*;

    class Media {

        public var url:String;
        public var bitrate:Number;
        public var type:String;
        public var label:String;
        public var language:String;
        public var alternate:Boolean;
        public var drmAdditionalHeader:DRMAdditionalHeader;
        public var bootstrapInfo:BootstrapInfo;
        public var metadata:Object;
        public var xmp:ByteArray;
        public var moov:ByteArray;
        public var width:Number;
        public var height:Number;
        public var multicastGroupspec:String;
        public var multicastStreamName:String;

    }
}//package org.osmf.elements.f4mClasses 
﻿package org.osmf.elements.f4mClasses {
    import org.osmf.events.*;
    import org.osmf.utils.*;
    import org.osmf.elements.f4mClasses.utils.*;

    public class BootstrapInfoParser extends BaseParser {

        override public function parse(value:String, baseURL:String=null, idPrefix:String=""):void{
            var _local7:String;
            var _local8:Base64Decoder;
            var _local4:XML = new XML(value);
            if (!_local4){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.F4M_PARSE_VALUE_MISSING)));
            };
            var _local5:BootstrapInfo = new BootstrapInfo();
            var _local6:String;
            if (_local4.attribute("profile").length() > 0){
                _local5.profile = _local4.@profile;
            } else {
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.F4M_PARSE_PROFILE_MISSING)));
            };
            if (_local4.attribute("id").length() > 0){
                _local5.id = (idPrefix + _local4.@id);
            } else {
                _local5.id = (idPrefix + F4MUtils.GLOBAL_ELEMENT_ID);
            };
            if (_local4.attribute("url").length() > 0){
                _local6 = _local4.@url;
                if (!URL.isAbsoluteURL(_local6)){
                    _local6 = (URL.normalizeRootURL(baseURL) + URL.normalizeRelativeURL(_local6));
                };
                _local5.url = _local6;
            } else {
                _local7 = _local4.text();
                _local8 = new Base64Decoder();
                _local8.decode(_local7);
                _local5.data = _local8.drain();
            };
            this.finishLoad(_local5);
        }
        protected function finishLoad(info:BootstrapInfo):void{
            if (!info){
                return;
            };
            dispatchEvent(new ParseEvent(ParseEvent.PARSE_COMPLETE, false, false, info));
        }

    }
}//package org.osmf.elements.f4mClasses 
﻿package org.osmf.elements.f4mClasses {
    import flash.utils.*;

    public class DRMAdditionalHeader {

        public var data:ByteArray;
        public var url:String;
        public var id:String;

    }
}//package org.osmf.elements.f4mClasses 
﻿package org.osmf.elements.f4mClasses {
    import org.osmf.events.*;
    import flash.utils.*;
    import org.osmf.utils.*;
    import org.osmf.net.*;
    import org.osmf.elements.f4mClasses.utils.*;

    public class MediaParser extends BaseParser {

        override public function parse(value:String, baseURL:String=null, idPrefix:String=""):void{
            var _local7:Base64Decoder;
            var _local8:String;
            var _local9:ByteArray;
            var _local10:String;
            var _local11:Object;
            var _local4:XML = new XML(value);
            if (!_local4){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.F4M_PARSE_VALUE_MISSING)));
            };
            var _local5:Media = new Media();
            var _local6:Namespace = _local4.namespace();
            if (_local4.attribute("url").length() > 0){
                _local8 = _local4.@url;
                if (!URL.isAbsoluteURL(_local8)){
                    _local8 = (URL.normalizeRootURL(baseURL) + URL.normalizeRelativeURL(_local8));
                };
                _local5.url = _local8;
            } else {
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.F4M_PARSE_MEDIA_URL_MISSING)));
            };
            if (_local4.attribute("bitrate").length() > 0){
                _local5.bitrate = _local4.@bitrate;
            };
            if (_local4.attribute("drmAdditionalHeaderId").length() > 0){
                _local5.drmAdditionalHeader = new DRMAdditionalHeader();
                _local5.drmAdditionalHeader.id = (idPrefix + _local4.@drmAdditionalHeaderId);
            } else {
                _local5.drmAdditionalHeader = new DRMAdditionalHeader();
                _local5.drmAdditionalHeader.id = (idPrefix + F4MUtils.GLOBAL_ELEMENT_ID);
            };
            if (_local4.attribute("bootstrapInfoId").length() > 0){
                _local5.bootstrapInfo = new BootstrapInfo();
                _local5.bootstrapInfo.id = (idPrefix + _local4.@bootstrapInfoId);
            } else {
                _local5.bootstrapInfo = new BootstrapInfo();
                _local5.bootstrapInfo.id = (idPrefix + F4MUtils.GLOBAL_ELEMENT_ID);
            };
            if (_local4.attribute("height").length() > 0){
                _local5.height = _local4.@height;
            };
            if (_local4.attribute("width").length() > 0){
                _local5.width = _local4.@width;
            };
            if (_local4.attribute("groupspec").length() > 0){
                _local5.multicastGroupspec = _local4.@groupspec;
            };
            if (_local4.attribute("multicastStreamName").length() > 0){
                _local5.multicastStreamName = _local4.@multicastStreamName;
            };
            if (_local4.attribute("label").length() > 0){
                _local5.label = _local4.@label;
            };
            if (_local4.attribute("type").length() > 0){
                _local5.type = _local4.@type;
            } else {
                _local5.type = StreamingItemType.VIDEO;
            };
            if (_local4.attribute("lang").length() > 0){
                _local5.language = _local4.@lang;
            };
            if (((_local4.hasOwnProperty("@alternate")) || ((_local4.attribute("alternate").length() > 0)))){
                _local5.alternate = true;
            };
            if (_local4._local6::moov.length() > 0){
                _local7 = new Base64Decoder();
                _local7.decode(_local4._local6::moov.text());
                _local5.moov = _local7.drain();
            };
            if (_local4._local6::metadata.length() > 0){
                _local7 = new Base64Decoder();
                _local7.decode(_local4._local6::metadata.text());
                _local9 = _local7.drain();
                _local9.position = 0;
                _local9.objectEncoding = 0;
                try {
                    _local10 = (_local9.readObject() as String);
                    _local11 = _local9.readObject();
                    _local5.metadata = _local11;
                    if (((((isNaN(_local5.width)) || ((_local5.width == 0)))) && (_local5.metadata.hasOwnProperty("width")))){
                        _local5.width = _local5.metadata["width"];
                    };
                    if (((((isNaN(_local5.height)) || ((_local5.height == 0)))) && (_local5.metadata.hasOwnProperty("height")))){
                        _local5.height = _local5.metadata["height"];
                    };
                } catch(e:Error) {
                };
            };
            if (_local4._local6::xmpMetadata.length() > 0){
                _local7 = new Base64Decoder();
                _local7.decode(_local4._local6::xmpMetadata.text());
                _local5.xmp = _local7.drain();
            };
            this.validateMedia(_local5);
            this.finishLoad(_local5);
        }
        protected function validateMedia(media:Media):void{
            if (((((media) && (((((!((media.multicastGroupspec == null))) && ((media.multicastGroupspec.length > 0)))) && ((((media.multicastStreamName == null)) || ((media.multicastStreamName.length <= 0)))))))) || (((((!((media.multicastStreamName == null))) && ((media.multicastStreamName.length > 0)))) && ((((media.multicastGroupspec == null)) || ((media.multicastGroupspec.length <= 0)))))))){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.MULTICAST_PARAMETER_INVALID)));
            };
        }
        protected function finishLoad(media:Media):void{
            if (!media){
                return;
            };
            dispatchEvent(new ParseEvent(ParseEvent.PARSE_COMPLETE, false, false, media));
        }

    }
}//package org.osmf.elements.f4mClasses 
﻿package org.osmf.elements.f4mClasses.utils {
    import org.osmf.media.pluginClasses.*;

    public class F4MUtils {

        public static const GLOBAL_ELEMENT_ID:String = "global";

        public static function getVersion(resource:String):Object{
            var _local4:String;
            var _local2:XML = new XML(resource);
            var _local3:String = _local2.namespace().toString();
            var _local5:int = _local3.lastIndexOf("/");
            if (_local5 != -1){
                _local4 = _local3.substr((_local5 + 1));
            } else {
                _local4 = _local3;
            };
            return (VersionUtils.parseVersionString(_local4));
        }

    }
}//package org.osmf.elements.f4mClasses.utils 
﻿package org.osmf.elements {
    import org.osmf.media.*;
    import org.osmf.events.*;
    import org.osmf.traits.*;
    import org.osmf.utils.*;
    import org.osmf.metadata.*;
    import __AS3__.vec.*;
    import flash.errors.*;
    import org.osmf.elements.compositeClasses.*;

    public class CompositeElement extends MediaElement {

        private var _traitFactory:CompositeMediaTraitFactory;
        private var children:Vector.<MediaElement>;
        private var _traitAggregator:TraitAggregator;

        public function CompositeElement(){
            this.children = new Vector.<MediaElement>();
            super();
            this._traitFactory = new CompositeMediaTraitFactory();
            this.setupTraitAggregator();
        }
        public function get numChildren():int{
            return (this.children.length);
        }
        public function getChildAt(index:int):MediaElement{
            if ((((index >= 0)) && ((index < this.children.length)))){
                return (this.children[index]);
            };
            return (null);
        }
        public function getChildIndex(child:MediaElement):int{
            return (this.children.indexOf(child));
        }
        public function addChild(child:MediaElement):MediaElement{
            return (this.addChildAt(child, this.numChildren));
        }
        public function addChildAt(child:MediaElement, index:Number):MediaElement{
            if (child == null){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.INVALID_PARAM)));
            };
            if ((((index < 0)) || ((index > this.numChildren)))){
                throw (new RangeError(OSMFStrings.getString(OSMFStrings.INVALID_PARAM)));
            };
            if (this.children.indexOf(child) != -1){
                throw (new IllegalOperationError(OSMFStrings.getString(OSMFStrings.ALREADY_ADDED)));
            };
            this.children.splice(index, 0, child);
            this.processAddedChild(child, index);
            return (child);
        }
        public function removeChild(child:MediaElement):MediaElement{
            var _local2:int = this.children.indexOf(child);
            if (_local2 == -1){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.INVALID_PARAM)));
            };
            return (this.removeChildAt(_local2));
        }
        public function removeChildAt(index:int):MediaElement{
            var _local2:MediaElement;
            if ((((index >= 0)) && ((index < this.children.length)))){
                _local2 = (this.children.splice(index, 1)[0] as MediaElement);
                this.processRemovedChild(_local2);
            } else {
                throw (new RangeError(OSMFStrings.getString(OSMFStrings.INVALID_PARAM)));
            };
            return (_local2);
        }
        override public function set resource(value:MediaResourceBase):void{
        }
        protected function processAddedChild(child:MediaElement, index:int):void{
            child.addEventListener(MediaErrorEvent.MEDIA_ERROR, this.onChildError);
            this.compositeMetadata.addChild(child.metadata);
            if (this.traitAggregator){
                this.traitAggregator.addChildAt(child, index);
            };
        }
        protected function processRemovedChild(child:MediaElement):void{
            child.removeEventListener(MediaErrorEvent.MEDIA_ERROR, this.onChildError);
            if (this.traitAggregator){
                this.traitAggregator.removeChild(child);
            };
            this.compositeMetadata.removeChild(child.metadata);
        }
        protected function processAggregatedTrait(traitType:String, trait:MediaTraitBase):void{
        }
        protected function processUnaggregatedTrait(traitType:String, trait:MediaTraitBase):void{
        }
        override protected function createMetadata():Metadata{
            return (new CompositeMetadata());
        }
        protected function get compositeMetadata():CompositeMetadata{
            return (CompositeMetadata(metadata));
        }
        final protected function get traitAggregator():TraitAggregator{
            return (this._traitAggregator);
        }
        final protected function get traitFactory():CompositeMediaTraitFactory{
            return (this._traitFactory);
        }
        private function setupTraitAggregator():void{
            this._traitAggregator = new TraitAggregator();
            this.traitAggregator.addEventListener(TraitAggregatorEvent.TRAIT_AGGREGATED, this.onTraitAggregated);
            this.traitAggregator.addEventListener(TraitAggregatorEvent.TRAIT_UNAGGREGATED, this.onTraitUnaggregated);
        }
        private function onTraitAggregated(event:TraitAggregatorEvent):void{
            this.processAggregatedTrait(event.traitType, event.trait);
        }
        private function onTraitUnaggregated(event:TraitAggregatorEvent):void{
            this.processUnaggregatedTrait(event.traitType, event.trait);
        }
        private function onChildError(event:MediaErrorEvent):void{
            dispatchEvent(event.clone());
        }

    }
}//package org.osmf.elements 
﻿package org.osmf.elements {
    import org.osmf.media.*;

    public class F4MElement extends LoadFromDocumentElement {

        public function F4MElement(resource:MediaResourceBase=null, loader:F4MLoader=null){
            if (loader == null){
                loader = new F4MLoader();
            };
            super(resource, loader);
        }
    }
}//package org.osmf.elements 
﻿package org.osmf.elements {
    import org.osmf.media.*;
    import org.osmf.events.*;
    import flash.events.*;
    import flash.utils.*;
    import flash.net.*;
    import flash.system.*;
    import org.osmf.traits.*;
    import org.osmf.utils.*;
    import org.osmf.net.*;
    import org.osmf.metadata.*;
    import __AS3__.vec.*;
    import org.osmf.media.videoClasses.*;
    import org.osmf.net.drm.*;
    import flash.media.*;

    public class LightweightVideoElement extends LoadableElementBase {

        private static const DRM_STATUS_CODE:String = "DRM.encryptedFLV";
        private static const DRM_NEEDS_AUTHENTICATION:int = 3330;

        private var displayObjectTrait:DisplayObjectTrait;
        private var defaultTimeTrait:ModifiableTimeTrait;
        private var stream:NetStream;
        private var embeddedCuePoints:TimelineMetadata;
        private var _smoothing:Boolean;
        private var _deblocking:int;
        private var videoSurface:VideoSurface;
        private var drmTrait:NetStreamDRMTrait;

        public function LightweightVideoElement(resource:MediaResourceBase=null, loader:NetLoader=null){
            if (loader == null){
                loader = new NetLoader();
            };
            super(resource, loader);
            if (!(((resource == null)) || ((resource is URLResource)))){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.INVALID_PARAM)));
            };
        }
        public function get client():NetClient{
            return (((this.stream)!=null) ? (this.stream.client as NetClient) : null);
        }
        public function get defaultDuration():Number{
            return (((this.defaultTimeTrait) ? this.defaultTimeTrait.duration : NaN));
        }
        public function set defaultDuration(value:Number):void{
            if (((isNaN(value)) || ((value < 0)))){
                if (this.defaultTimeTrait != null){
                    removeTraitResolver(MediaTraitType.TIME);
                    this.defaultTimeTrait = null;
                };
            } else {
                if (this.defaultTimeTrait == null){
                    this.defaultTimeTrait = new ModifiableTimeTrait();
                    addTraitResolver(MediaTraitType.TIME, new DefaultTraitResolver(MediaTraitType.TIME, this.defaultTimeTrait));
                };
                this.defaultTimeTrait.duration = value;
            };
        }
        public function get smoothing():Boolean{
            return (this._smoothing);
        }
        public function set smoothing(value:Boolean):void{
            this._smoothing = value;
            if (this.videoSurface != null){
                this.videoSurface.smoothing = value;
            };
        }
        public function get deblocking():int{
            return (this._deblocking);
        }
        public function set deblocking(value:int):void{
            this._deblocking = value;
            if (this.videoSurface != null){
                this.videoSurface.deblocking = value;
            };
        }
        public function get currentFPS():Number{
            return (((this.stream)!=null) ? this.stream.currentFPS : 0);
        }
        override protected function createLoadTrait(resource:MediaResourceBase, loader:LoaderBase):LoadTrait{
            return (new NetStreamLoadTrait(loader, resource));
        }
        protected function createVideo():Video{
            return (new Video());
        }
        override protected function processReadyState():void{
            var _local2:ByteArray;
            var _local1:NetStreamLoadTrait = (getTrait(MediaTraitType.LOAD) as NetStreamLoadTrait);
            this.stream = _local1.netStream;
            this.videoSurface = new VideoSurface(((OSMFSettings.enableStageVideo) && (OSMFSettings.supportsStageVideo)), this.createVideo);
            this.videoSurface.smoothing = this._smoothing;
            this.videoSurface.deblocking = this._deblocking;
            this.videoSurface.width = (this.videoSurface.height = 0);
            this.videoSurface.attachNetStream(this.stream);
            NetClient(this.stream.client).addHandler(NetStreamCodes.ON_META_DATA, this.onMetaData);
            NetClient(this.stream.client).addHandler(NetStreamCodes.ON_CUE_POINT, this.onCuePoint);
            this.stream.addEventListener(NetStatusEvent.NET_STATUS, this.onNetStatusEvent);
            _local1.connection.addEventListener(NetStatusEvent.NET_STATUS, this.onNetStatusEvent, false, 0, true);
            this.stream.addEventListener(DRMErrorEvent.DRM_ERROR, this.onDRMErrorEvent);
            _local2 = this.getDRMContentData(resource);
            if (((!((_local2 == null))) && ((_local2.bytesAvailable > 0)))){
                this.setupDRMTrait(_local2);
            } else {
                this.stream.addEventListener(StatusEvent.STATUS, this.onStatus);
                this.stream.addEventListener(DRMStatusEvent.DRM_STATUS, this.onDRMStatus);
            };
            this.finishLoad();
        }
        private function finishLoad():void{
            var timeTrait:* = null;
            var seekTrait:* = null;
            var reconnectStreams:* = false;
            var onDurationChange:* = null;
            var dsTrait:* = null;
            var aaTrait:* = null;
            var loadTrait:* = (getTrait(MediaTraitType.LOAD) as NetStreamLoadTrait);
            var dvrTrait:* = (loadTrait.getTrait(MediaTraitType.DVR) as DVRTrait);
            if (dvrTrait != null){
                addTrait(MediaTraitType.DVR, dvrTrait);
            };
            var audioTrait:* = (loadTrait.getTrait(MediaTraitType.AUDIO) as AudioTrait);
            if (audioTrait == null){
                audioTrait = new NetStreamAudioTrait(this.stream);
            };
            addTrait(MediaTraitType.AUDIO, audioTrait);
            var bufferTrait:* = (loadTrait.getTrait(MediaTraitType.BUFFER) as BufferTrait);
            if (bufferTrait == null){
                bufferTrait = new NetStreamBufferTrait(this.stream, this.videoSurface);
            };
            addTrait(MediaTraitType.BUFFER, bufferTrait);
            timeTrait = (loadTrait.getTrait(MediaTraitType.TIME) as TimeTrait);
            if (timeTrait == null){
                timeTrait = new NetStreamTimeTrait(this.stream, loadTrait.resource, this.defaultDuration);
            };
            addTrait(MediaTraitType.TIME, timeTrait);
            var displayObjectTrait:* = (loadTrait.getTrait(MediaTraitType.DISPLAY_OBJECT) as DisplayObjectTrait);
            if (displayObjectTrait == null){
                displayObjectTrait = new NetStreamDisplayObjectTrait(this.stream, this.videoSurface, NaN, NaN);
            };
            addTrait(MediaTraitType.DISPLAY_OBJECT, displayObjectTrait);
            var playTrait:* = (loadTrait.getTrait(MediaTraitType.PLAY) as PlayTrait);
            if (playTrait == null){
                reconnectStreams = false;
                reconnectStreams = (loader as NetLoader).reconnectStreams;
                playTrait = new NetStreamPlayTrait(this.stream, resource, reconnectStreams, loadTrait.connection);
            };
            addTrait(MediaTraitType.PLAY, playTrait);
            seekTrait = (loadTrait.getTrait(MediaTraitType.SEEK) as SeekTrait);
            if ((((seekTrait == null)) && (!((NetStreamUtils.getStreamType(resource) == StreamType.LIVE))))){
                seekTrait = new NetStreamSeekTrait(timeTrait, loadTrait, this.stream, this.videoSurface);
            };
            if (seekTrait != null){
                if (((isNaN(timeTrait.duration)) || ((timeTrait.duration == 0)))){
                    onDurationChange = function (event:TimeEvent):void{
                        timeTrait.removeEventListener(TimeEvent.DURATION_CHANGE, onDurationChange);
                        addTrait(MediaTraitType.SEEK, seekTrait);
                    };
                    timeTrait.addEventListener(TimeEvent.DURATION_CHANGE, onDurationChange);
                } else {
                    addTrait(MediaTraitType.SEEK, seekTrait);
                };
            };
            var dsResource:* = (resource as DynamicStreamingResource);
            if (((!((dsResource == null))) && (!((loadTrait.switchManager == null))))){
                dsTrait = (loadTrait.getTrait(MediaTraitType.DYNAMIC_STREAM) as DynamicStreamTrait);
                if (dsTrait == null){
                    dsTrait = new NetStreamDynamicStreamTrait(this.stream, loadTrait.switchManager, dsResource);
                };
                addTrait(MediaTraitType.DYNAMIC_STREAM, dsTrait);
            };
            var sResource:* = (resource as StreamingURLResource);
            if (((((!((sResource == null))) && (!((sResource.alternativeAudioStreamItems == null))))) && ((sResource.alternativeAudioStreamItems.length > 0)))){
                aaTrait = (loadTrait.getTrait(MediaTraitType.ALTERNATIVE_AUDIO) as AlternativeAudioTrait);
                if (aaTrait == null){
                    aaTrait = new NetStreamAlternativeAudioTrait(this.stream, sResource);
                };
                addTrait(MediaTraitType.ALTERNATIVE_AUDIO, aaTrait);
            };
        }
        override protected function processUnloadingState():void{
            if (this.stream != null){
                this.stream.removeEventListener(NetStatusEvent.NET_STATUS, this.onNetStatusEvent);
                if (this.stream.client != null){
                    NetClient(this.stream.client).removeHandler(NetStreamCodes.ON_META_DATA, this.onMetaData);
                };
            };
            var _local1:NetStreamLoadTrait = (getTrait(MediaTraitType.LOAD) as NetStreamLoadTrait);
            if (((!((_local1 == null))) && (!((_local1.connection == null))))){
                _local1.connection.removeEventListener(NetStatusEvent.NET_STATUS, this.onNetStatusEvent);
            };
            removeTrait(MediaTraitType.AUDIO);
            removeTrait(MediaTraitType.BUFFER);
            removeTrait(MediaTraitType.PLAY);
            removeTrait(MediaTraitType.TIME);
            removeTrait(MediaTraitType.DISPLAY_OBJECT);
            removeTrait(MediaTraitType.SEEK);
            removeTrait(MediaTraitType.DYNAMIC_STREAM);
            removeTrait(MediaTraitType.ALTERNATIVE_AUDIO);
            removeTrait(MediaTraitType.DVR);
            if (this.stream != null){
                this.stream.removeEventListener(DRMErrorEvent.DRM_ERROR, this.onDRMErrorEvent);
                this.stream.removeEventListener(DRMStatusEvent.DRM_STATUS, this.onDRMStatus);
                this.stream.removeEventListener(StatusEvent.STATUS, this.onStatus);
            };
            if (this.drmTrait != null){
                this.drmTrait.removeEventListener(DRMEvent.DRM_STATE_CHANGE, this.reloadAfterAuth);
                removeTrait(MediaTraitType.DRM);
                this.drmTrait = null;
            };
            if (this.videoSurface != null){
                this.videoSurface.attachNetStream(null);
            };
            this.videoSurface = null;
            this.stream = null;
            this.displayObjectTrait = null;
        }
        private function onMetaData(info:Object):void{
            var _local3:TimelineMetadata;
            var _local4:int;
            var _local5:CuePoint;
            var _local2:Array = info.cuePoints;
            if (((!((_local2 == null))) && ((_local2.length > 0)))){
                _local3 = (getMetadata(CuePoint.DYNAMIC_CUEPOINTS_NAMESPACE) as TimelineMetadata);
                if (_local3 == null){
                    _local3 = new TimelineMetadata(this);
                    addMetadata(CuePoint.DYNAMIC_CUEPOINTS_NAMESPACE, _local3);
                };
                _local4 = 0;
                while (_local4 < _local2.length) {
                    _local5 = new CuePoint(_local2[_local4].type, _local2[_local4].time, _local2[_local4].name, _local2[_local4].parameters);
                    try {
                        _local3.addMarker(_local5);
                    } catch(error:ArgumentError) {
                    };
                    _local4++;
                };
            };
        }
        private function onCuePoint(info:Object):void{
            if (this.embeddedCuePoints == null){
                this.embeddedCuePoints = new TimelineMetadata(this);
                addMetadata(CuePoint.EMBEDDED_CUEPOINTS_NAMESPACE, this.embeddedCuePoints);
            };
            var _local2:CuePoint = new CuePoint(info.type, info.time, info.name, info.parameters);
            try {
                this.embeddedCuePoints.addMarker(_local2);
            } catch(error:ArgumentError) {
            };
        }
        private function onUpdateComplete(event:Event):void{
            (getTrait(MediaTraitType.LOAD) as LoadTrait).unload();
            (getTrait(MediaTraitType.LOAD) as LoadTrait).load();
        }
        private function onNetStatusEvent(event:NetStatusEvent):void{
            var _local2:MediaError;
            switch (event.info.code){
                case NetStreamCodes.NETSTREAM_PLAY_FAILED:
                case NetStreamCodes.NETSTREAM_FAILED:
                    _local2 = new MediaError(MediaErrorCodes.NETSTREAM_PLAY_FAILED, event.info.description);
                    break;
                case NetStreamCodes.NETSTREAM_PLAY_STREAMNOTFOUND:
                    _local2 = new MediaError(MediaErrorCodes.NETSTREAM_STREAM_NOT_FOUND, event.info.description);
                    break;
                case NetStreamCodes.NETSTREAM_PLAY_FILESTRUCTUREINVALID:
                    _local2 = new MediaError(MediaErrorCodes.NETSTREAM_FILE_STRUCTURE_INVALID, event.info.description);
                    break;
                case NetStreamCodes.NETSTREAM_PLAY_NOSUPPORTEDTRACKFOUND:
                    _local2 = new MediaError(MediaErrorCodes.NETSTREAM_NO_SUPPORTED_TRACK_FOUND, event.info.description);
                    break;
                case NetConnectionCodes.CONNECT_IDLE_TIME_OUT:
                    _local2 = new MediaError(MediaErrorCodes.NETCONNECTION_TIMEOUT, event.info.description);
                    break;
            };
            if (event.info.code == NetStreamCodes.NETSTREAM_DRM_UPDATE){
                this.update(SystemUpdaterType.DRM);
            };
            if (_local2 != null){
                dispatchEvent(new MediaErrorEvent(MediaErrorEvent.MEDIA_ERROR, false, false, _local2));
            };
        }
        private function getDRMContentData(resource:MediaResourceBase):ByteArray{
            var _local3:Metadata;
            var _local4:String;
            var _local5:DynamicStreamingResource;
            var _local6:ByteArray;
            var _local7:Vector.<String>;
            var _local8:int;
            var _local9:String;
            var _local2:StreamingURLResource = (resource as StreamingURLResource);
            if (_local2 != null){
                if (_local2.drmContentData != null){
                    return (_local2.drmContentData);
                };
                _local3 = (resource.getMetadataValue(MetadataNamespaces.DRM_METADATA) as Metadata);
                if (((!((_local3 == null))) && ((_local3.keys.length > 0)))){
                    _local4 = null;
                    _local5 = (resource as DynamicStreamingResource);
                    if (((((!((_local5 == null))) && ((_local5.initialIndex > -1)))) && ((_local5.initialIndex < _local5.streamItems.length)))){
                        _local4 = _local5.streamItems[_local5.initialIndex].streamName;
                    };
                    _local6 = null;
                    if (_local4 != null){
                        _local6 = (_local3.getValue(_local4) as ByteArray);
                    };
                    if (_local6 == null){
                        _local7 = _local3.keys;
                        _local8 = 0;
                        do  {
                            _local9 = _local7[_local8];
                            if (_local9.indexOf(MetadataNamespaces.DRM_ADDITIONAL_HEADER_KEY) != 0){
                                _local6 = _local3.getValue(_local9);
                            };
                            _local8++;
                        } while ((((_local6 == null)) && ((_local8 < _local7.length))));
                    };
                    return (_local6);
                };
            };
            return (null);
        }
        private function onStatus(event:StatusEvent):void{
            if ((((event.code == DRM_STATUS_CODE)) && ((getTrait(MediaTraitType.DRM) == null)))){
                this.createDRMTrait();
            };
        }
        private function onDRMStatus(event:DRMStatusEvent):void{
            this.drmTrait.inlineOnVoucher(event);
        }
        private function reloadAfterAuth(event:DRMEvent):void{
            var _local2:NetStreamLoadTrait;
            if (this.drmTrait.drmState == DRMState.AUTHENTICATION_COMPLETE){
                _local2 = (getTrait(MediaTraitType.LOAD) as NetStreamLoadTrait);
                if (_local2.loadState == LoadState.READY){
                    _local2.unload();
                };
                _local2.load();
            };
        }
        private function createDRMTrait():void{
            this.drmTrait = new NetStreamDRMTrait();
            addTrait(MediaTraitType.DRM, this.drmTrait);
        }
        private function setupDRMTrait(contentData:ByteArray):void{
            this.createDRMTrait();
            this.drmTrait.drmMetadata = contentData;
        }
        private function onDRMErrorEvent(event:DRMErrorEvent):void{
            if (event.errorID == DRM_NEEDS_AUTHENTICATION){
                this.drmTrait.addEventListener(DRMEvent.DRM_STATE_CHANGE, this.reloadAfterAuth);
                this.drmTrait.drmMetadata = event.contentData;
            } else {
                if (event.drmUpdateNeeded){
                    this.update(SystemUpdaterType.DRM);
                } else {
                    if (event.systemUpdateNeeded){
                        this.update(SystemUpdaterType.SYSTEM);
                    } else {
                        this.drmTrait.inlineDRMFailed(new MediaError(event.errorID));
                    };
                };
            };
        }
        private function update(type:String):void{
            if (this.drmTrait == null){
                this.createDRMTrait();
            };
            var _local2:SystemUpdater = this.drmTrait.update(type);
            _local2.addEventListener(Event.COMPLETE, this.onUpdateComplete);
        }

    }
}//package org.osmf.elements 
﻿package org.osmf.elements {
    import org.osmf.media.*;
    import org.osmf.events.*;
    import flash.events.*;
    import flash.utils.*;
    import org.osmf.traits.*;
    import __AS3__.vec.*;
    import org.osmf.elements.proxyClasses.*;

    public class DurationElement extends ProxyElement {

        private static const DEFAULT_PLAYHEAD_UPDATE_INTERVAL:Number = 250;
        private static const NO_TRAITS:Vector.<String> = new Vector.<String>();
;
        private static const ALL_OTHER_TRAITS:Vector.<String> = new Vector.<String>();
;

        private var _currentTime:Number = 0;
        private var _duration:Number = 0;
        private var absoluteStartTime:Number = 0;
        private var playheadTimer:Timer;
        private var mediaAtEnd:Boolean = false;
        private var timeTrait:DurationTimeTrait;
        private var seekTrait:DurationSeekTrait;
        private var playTrait:PlayTrait;

        public function DurationElement(duration:Number, mediaElement:MediaElement=null){
            this._duration = duration;
            this.playheadTimer = new Timer(DEFAULT_PLAYHEAD_UPDATE_INTERVAL);
            this.playheadTimer.addEventListener(TimerEvent.TIMER, this.onPlayheadTimer, false, 0, true);
            super(((mediaElement)!=null) ? mediaElement : new MediaElement());
        }
        override protected function setupTraits():void{
            super.setupTraits();
            this.timeTrait = new DurationTimeTrait(this._duration);
            this.timeTrait.addEventListener(TimeEvent.COMPLETE, this.onComplete, false, int.MAX_VALUE);
            addTrait(MediaTraitType.TIME, this.timeTrait);
            this.seekTrait = new DurationSeekTrait(this.timeTrait);
            addTrait(MediaTraitType.SEEK, this.seekTrait);
            this.seekTrait.addEventListener(SeekEvent.SEEKING_CHANGE, this.onSeekingChange, false, -1);
            this.playTrait = new PlayTrait();
            this.playTrait.addEventListener(PlayEvent.PLAY_STATE_CHANGE, this.onPlayStateChange);
            addTrait(MediaTraitType.PLAY, this.playTrait);
            blockedTraits = ALL_OTHER_TRAITS;
        }
        private function onPlayheadTimer(event:TimerEvent):void{
            if (this.currentTime >= this._duration){
                this.playheadTimer.stop();
                this.playTrait.stop();
                this.currentTime = this._duration;
            } else {
                this.currentTime = ((getTimer() - this.absoluteStartTime) / 1000);
            };
        }
        private function onPlayStateChange(event:PlayEvent):void{
            if (event.playState == PlayState.PLAYING){
                if (this.mediaAtEnd){
                    this.mediaAtEnd = false;
                    this.currentTime = 0;
                };
                this.absoluteStartTime = (getTimer() - (this.currentTime * 1000));
                this.playheadTimer.start();
            } else {
                this.playheadTimer.stop();
            };
            if (((!((event.playState == PlayState.STOPPED))) && ((this.currentTime < this._duration)))){
                blockedTraits = NO_TRAITS;
            } else {
                blockedTraits = ALL_OTHER_TRAITS;
            };
        }
        private function onSeekingChange(event:SeekEvent):void{
            var _local2:Number;
            this.mediaAtEnd = false;
            if (event.seeking){
                _local2 = (event.time - this.currentTime);
                this.currentTime = event.time;
                this.absoluteStartTime = (this.absoluteStartTime - (_local2 * 1000));
            } else {
                if ((((this.currentTime < this._duration)) && ((((this.currentTime > 0)) || ((this.playTrait.playState == PlayState.PLAYING)))))){
                    blockedTraits = NO_TRAITS;
                } else {
                    blockedTraits = ALL_OTHER_TRAITS;
                };
            };
        }
        private function onComplete(event:TimeEvent):void{
            this.playheadTimer.stop();
            this.playTrait.stop();
            this.mediaAtEnd = true;
            blockedTraits = ALL_OTHER_TRAITS;
        }
        private function get currentTime():Number{
            return (this._currentTime);
        }
        private function set currentTime(value:Number):void{
            this._currentTime = value;
            this.timeTrait.currentTime = value;
        }

        ALL_OTHER_TRAITS.push(MediaTraitType.AUDIO);
        ALL_OTHER_TRAITS.push(MediaTraitType.BUFFER);
        ALL_OTHER_TRAITS.push(MediaTraitType.DISPLAY_OBJECT);
        ALL_OTHER_TRAITS.push(MediaTraitType.DRM);
        ALL_OTHER_TRAITS.push(MediaTraitType.DVR);
        ALL_OTHER_TRAITS.push(MediaTraitType.DYNAMIC_STREAM);
    }
}//package org.osmf.elements 
﻿package org.osmf.elements {
    import org.osmf.media.*;
    import org.osmf.traits.*;
    import org.osmf.elements.loaderClasses.*;

    public class SWFElement extends LoadableElementBase {

        public function SWFElement(resource:URLResource=null, loader:SWFLoader=null){
            if (loader == null){
                loader = new SWFLoader();
            };
            super(resource, loader);
        }
        override protected function createLoadTrait(resource:MediaResourceBase, loader:LoaderBase):LoadTrait{
            return (new LoaderLoadTrait(loader, resource));
        }
        override protected function processReadyState():void{
            var _local1:LoaderLoadTrait = (getTrait(MediaTraitType.LOAD) as LoaderLoadTrait);
            addTrait(MediaTraitType.DISPLAY_OBJECT, LoaderUtils.createDisplayObjectTrait(_local1.loader, this));
        }
        override protected function processUnloadingState():void{
            removeTrait(MediaTraitType.DISPLAY_OBJECT);
        }

    }
}//package org.osmf.elements 
﻿package org.osmf.elements {
    import org.osmf.media.*;
    import org.osmf.events.*;
    import flash.events.*;
    import flash.utils.*;
    import org.osmf.traits.*;
    import org.osmf.utils.*;
    import __AS3__.vec.*;
    import org.osmf.elements.proxyClasses.*;
    import org.osmf.elements.f4mClasses.*;
    import org.osmf.elements.f4mClasses.builders.*;

    public class ManifestLoaderBase extends LoaderBase {

        protected var factory:MediaFactory;
        protected var builders:Vector.<BaseManifestBuilder>;
        protected var loadTrait:LoadTrait;
        protected var parserTimer:Timer;
        protected var parser:ManifestParser;

        protected function onParserTimerComplete(event:TimerEvent):void{
            if (this.parserTimer){
                this.parserTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, this.onParserTimerComplete);
                this.parserTimer = null;
            };
            updateLoadTrait(this.loadTrait, LoadState.LOAD_ERROR);
            this.loadTrait.dispatchEvent(new MediaErrorEvent(MediaErrorEvent.MEDIA_ERROR, false, false, new MediaError(MediaErrorCodes.F4M_FILE_INVALID, OSMFStrings.getString(OSMFStrings.F4M_PARSE_ERROR))));
        }
        protected function onParserLoadComplete(event:ParseEvent):void{
            if (this.parserTimer){
                this.parserTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, this.onParserTimerComplete);
                this.parserTimer.stop();
                this.parserTimer = null;
            };
            this.parser.removeEventListener(ParseEvent.PARSE_COMPLETE, this.onParserLoadComplete);
            this.parser.removeEventListener(ParseEvent.PARSE_ERROR, this.onParserLoadError);
            var _local2:Manifest = (event.data as Manifest);
            this.finishManifestLoad(_local2);
        }
        protected function onParserLoadError(event:ParseEvent):void{
            if (this.parserTimer){
                this.parserTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, this.onParserTimerComplete);
                this.parserTimer.stop();
                this.parserTimer = null;
            };
            this.parser.removeEventListener(ParseEvent.PARSE_COMPLETE, this.onParserLoadComplete);
            this.parser.removeEventListener(ParseEvent.PARSE_ERROR, this.onParserLoadError);
            updateLoadTrait(this.loadTrait, LoadState.LOAD_ERROR);
            this.loadTrait.dispatchEvent(new MediaErrorEvent(MediaErrorEvent.MEDIA_ERROR, false, false, new MediaError(MediaErrorCodes.F4M_FILE_INVALID, OSMFStrings.getString(OSMFStrings.F4M_PARSE_ERROR))));
        }
        protected function finishManifestLoad(manifest:Manifest):void{
            var netResource:* = null;
            var loadedElem:* = null;
            var manifest:* = manifest;
            try {
                netResource = this.parser.createResource(manifest, this.loadTrait.resource);
                loadedElem = this.factory.createMediaElement(netResource);
                if (((loadedElem.hasOwnProperty("defaultDuration")) && (!(isNaN(manifest.duration))))){
                    loadedElem["defaultDuration"] = manifest.duration;
                };
                LoadFromDocumentLoadTrait(this.loadTrait).mediaElement = loadedElem;
                updateLoadTrait(this.loadTrait, LoadState.READY);
            } catch(error:Error) {
                updateLoadTrait(loadTrait, LoadState.LOAD_ERROR);
                loadTrait.dispatchEvent(new MediaErrorEvent(MediaErrorEvent.MEDIA_ERROR, false, false, new MediaError(MediaErrorCodes.F4M_FILE_INVALID, error.message)));
            };
        }
        override protected function executeUnload(loadTrait:LoadTrait):void{
            updateLoadTrait(loadTrait, LoadState.UNINITIALIZED);
        }
        protected function getBuilders():Vector.<BaseManifestBuilder>{
            var _local1:Vector.<BaseManifestBuilder> = new Vector.<BaseManifestBuilder>();
            _local1.push(new MultiLevelManifestBuilder());
            _local1.push(new ManifestBuilder());
            return (_local1);
        }
        protected function getParser(resourceData:String):ManifestParser{
            var _local2:ManifestParser;
            var _local3:BaseManifestBuilder;
            for each (_local3 in this.builders) {
                if (_local3.canParse(resourceData)){
                    _local2 = (_local3.build(resourceData) as ManifestParser);
                    break;
                };
            };
            return (_local2);
        }

    }
}//package org.osmf.elements 
﻿package org.osmf.elements {
    import org.osmf.traits.*;
    import org.osmf.metadata.*;
    import org.osmf.elements.compositeClasses.*;

    public class ParallelElement extends CompositeElement {

        override protected function createMetadata():Metadata{
            var _local1:Metadata = super.createMetadata();
            CompositeMetadata(_local1).mode = CompositionMode.PARALLEL;
            return (_local1);
        }
        override protected function processAggregatedTrait(traitType:String, trait:MediaTraitBase):void{
            super.processAggregatedTrait(traitType, trait);
            var _local3:MediaTraitBase = getTrait(traitType);
            if (_local3 == null){
                _local3 = traitFactory.createTrait(traitType, traitAggregator, CompositionMode.PARALLEL, this);
                if (_local3 != null){
                    addTrait(traitType, _local3);
                };
            };
        }
        override protected function processUnaggregatedTrait(traitType:String, trait:MediaTraitBase):void{
            super.processUnaggregatedTrait(traitType, trait);
            if (traitAggregator.hasTrait(traitType) == false){
                removeTrait(traitType);
            };
        }

    }
}//package org.osmf.elements 
﻿package org.osmf.elements {
    import org.osmf.media.*;
    import org.osmf.events.*;
    import flash.events.*;
    import flash.utils.*;
    import org.osmf.traits.*;
    import org.osmf.utils.*;
    import org.osmf.net.*;

    public class XMLLoader extends ManifestLoaderBase {

        public function XMLLoader(factory:MediaFactory=null){
            if (factory == null){
                factory = new DefaultMediaFactory();
            };
            this.factory = factory;
            this.builders = getBuilders();
        }
        override public function canHandleResource(resource:MediaResourceBase):Boolean{
            if ((resource is StreamingXMLResource)){
                return (true);
            };
            return (false);
        }
        override protected function executeLoad(loadTrait:LoadTrait):void{
            var manifest:* = null;
            var resourceData:* = null;
            var loadTrait:* = loadTrait;
            this.loadTrait = loadTrait;
            updateLoadTrait(loadTrait, LoadState.LOADING);
            try {
                resourceData = (loadTrait.resource as StreamingXMLResource).manifest;
                parser = getParser(resourceData);
                parser.addEventListener(ParseEvent.PARSE_COMPLETE, onParserLoadComplete);
                parser.addEventListener(ParseEvent.PARSE_ERROR, onParserLoadError);
                parserTimer = new Timer(OSMFSettings.f4mParseTimeout, 1);
                parserTimer.addEventListener(TimerEvent.TIMER_COMPLETE, onParserTimerComplete);
                parserTimer.start();
                parser.parse(resourceData, URL.normalizePathForURL(StreamingXMLResource(loadTrait.resource).url, true));
            } catch(parseError:Error) {
                updateLoadTrait(loadTrait, LoadState.LOAD_ERROR);
                loadTrait.dispatchEvent(new MediaErrorEvent(MediaErrorEvent.MEDIA_ERROR, false, false, new MediaError(parseError.errorID, parseError.message)));
            };
        }

    }
}//package org.osmf.elements 
﻿package org.osmf.elements.audioClasses {
    import org.osmf.media.*;
    import org.osmf.events.*;
    import flash.events.*;
    import flash.media.*;

    public class SoundAdapter extends EventDispatcher {

        public static const DOWNLOAD_COMPLETE:String = "downloadComplete";

        private var owner:MediaElement;
        private var _soundTransform:SoundTransform;
        private var sound:Sound;
        private var playing:Boolean = false;
        private var channel:SoundChannel;
        private var lastStartTime:Number = 0;

        public function SoundAdapter(owner:MediaElement, sound:Sound){
            this.owner = owner;
            this.sound = sound;
            this._soundTransform = new SoundTransform();
            sound.addEventListener(Event.COMPLETE, this.onDownloadComplete, false, 0, true);
            sound.addEventListener(ProgressEvent.PROGRESS, this.onProgress, false, 0, true);
            sound.addEventListener(IOErrorEvent.IO_ERROR, this.onIOError, false, 0, true);
        }
        public function get currentTime():Number{
            return (((this.channel)!=null) ? (this.channel.position / 1000) : (this.lastStartTime / 1000));
        }
        public function get estimatedDuration():Number{
            return ((this.sound.length / ((1000 * this.sound.bytesLoaded) / this.sound.bytesTotal)));
        }
        public function get soundTransform():SoundTransform{
            return (this._soundTransform);
        }
        public function set soundTransform(value:SoundTransform):void{
            this._soundTransform = value;
            if (this.channel != null){
                this.channel.soundTransform = value;
            };
        }
        public function play(time:Number=-1):Boolean{
            var time:int = time;
            var success:* = false;
            if (this.channel == null){
                try {
                    this.channel = this.sound.play(((time)!=-1) ? time : this.lastStartTime);
                } catch(error:ArgumentError) {
                    channel = null;
                };
                if (this.channel != null){
                    this.playing = true;
                    this.channel.soundTransform = this._soundTransform;
                    this.channel.addEventListener(Event.SOUND_COMPLETE, this.onSoundComplete);
                    success = true;
                } else {
                    this.owner.dispatchEvent(new MediaErrorEvent(MediaErrorEvent.MEDIA_ERROR, false, false, new MediaError(MediaErrorCodes.SOUND_PLAY_FAILED)));
                };
            };
            return (success);
        }
        public function pause():void{
            if (this.channel != null){
                this.lastStartTime = this.channel.position;
                this.clearChannel();
                this.playing = false;
            };
        }
        public function stop():void{
            if (this.channel != null){
                this.lastStartTime = 0;
                this.clearChannel();
                this.playing = false;
            };
        }
        public function seek(time:Number):void{
            var _local2:Boolean = this.playing;
            if (this.channel != null){
                this.clearChannel();
            };
            this.play((time * 1000));
            if (_local2 == false){
                this.pause();
            };
        }
        private function clearChannel():void{
            if (this.channel != null){
                this.channel.removeEventListener(Event.SOUND_COMPLETE, this.onSoundComplete);
                this.channel.stop();
                this.channel = null;
            };
        }
        private function onSoundComplete(event:Event):void{
            this.lastStartTime = this.channel.position;
            this.clearChannel();
            this.playing = false;
            dispatchEvent(new Event(Event.COMPLETE));
        }
        private function onDownloadComplete(event:Event):void{
            dispatchEvent(new Event(DOWNLOAD_COMPLETE));
        }
        private function onProgress(event:ProgressEvent):void{
            dispatchEvent(event.clone());
        }
        private function onIOError(event:IOErrorEvent):void{
            this.owner.dispatchEvent(new MediaErrorEvent(MediaErrorEvent.MEDIA_ERROR, false, false, new MediaError(MediaErrorCodes.IO_ERROR)));
        }

    }
}//package org.osmf.elements.audioClasses 
﻿package org.osmf.elements.audioClasses {
    import org.osmf.traits.*;

    public class AudioSeekTrait extends SeekTrait {

        private var soundAdapter:SoundAdapter;

        public function AudioSeekTrait(timeTrait:TimeTrait, soundAdapter:SoundAdapter){
            super(timeTrait);
            this.soundAdapter = soundAdapter;
        }
        override protected function seekingChangeStart(newSeeking:Boolean, time:Number):void{
            if (newSeeking){
                this.soundAdapter.seek(time);
            };
        }
        override protected function seekingChangeEnd(time:Number):void{
            super.seekingChangeEnd(time);
            if (seeking == true){
                setSeeking(false, time);
            };
        }

    }
}//package org.osmf.elements.audioClasses 
﻿package org.osmf.elements.audioClasses {
    import org.osmf.media.*;
    import org.osmf.events.*;
    import flash.events.*;
    import org.osmf.traits.*;
    import flash.media.*;

    public class SoundLoadTrait extends LoadTrait {

        private var lastBytesTotal:Number;
        private var _sound:Sound;

        public function SoundLoadTrait(loader:LoaderBase, resource:MediaResourceBase){
            super(loader, resource);
        }
        public function get sound():Sound{
            return (this._sound);
        }
        public function set sound(value:Sound):void{
            this._sound = value;
        }
        override protected function loadStateChangeStart(newState:String):void{
            if (newState == LoadState.READY){
                if (this._sound != null){
                    this._sound.addEventListener(Event.OPEN, this.bytesTotalCheckingHandler, false, 0, true);
                    this._sound.addEventListener(ProgressEvent.PROGRESS, this.bytesTotalCheckingHandler, false, 0, true);
                };
            } else {
                if (newState == LoadState.UNINITIALIZED){
                    this._sound = null;
                };
            };
        }
        override public function get bytesLoaded():Number{
            return (((this._sound) ? this._sound.bytesLoaded : NaN));
        }
        override public function get bytesTotal():Number{
            return (((this._sound) ? this._sound.bytesTotal : NaN));
        }
        private function bytesTotalCheckingHandler(_:Event):void{
            var _local2:LoadEvent;
            if (this.lastBytesTotal != this._sound.bytesTotal){
                _local2 = new LoadEvent(LoadEvent.BYTES_TOTAL_CHANGE, false, false, null, this._sound.bytesTotal);
                this.lastBytesTotal = this._sound.bytesTotal;
                dispatchEvent(_local2);
            };
        }

    }
}//package org.osmf.elements.audioClasses 
﻿package org.osmf.elements.audioClasses {
    import flash.events.*;
    import org.osmf.traits.*;

    public class AudioTimeTrait extends TimeTrait {

        public static var POLICY_ACCEPT_ESTIMATED_DURATION:Boolean = true;

        private var _durationIsEstimated:Boolean = false;
        private var soundAdapter:SoundAdapter;

        public function AudioTimeTrait(soundAdapter:SoundAdapter){
            this.soundAdapter = soundAdapter;
            soundAdapter.addEventListener(ProgressEvent.PROGRESS, this.onDownloadProgress, false, 0, true);
            soundAdapter.addEventListener(SoundAdapter.DOWNLOAD_COMPLETE, this.onDownloadComplete, false, 0, true);
            soundAdapter.addEventListener(Event.COMPLETE, this.onPlaybackComplete, false, 0, true);
        }
        public function get durationIsEstimated():Boolean{
            return (this._durationIsEstimated);
        }
        override public function get currentTime():Number{
            if (((this._durationIsEstimated) && (!(POLICY_ACCEPT_ESTIMATED_DURATION)))){
                setDuration(this.soundAdapter.estimatedDuration);
            };
            return (this.soundAdapter.currentTime);
        }
        private function onDownloadProgress(event:Event):void{
            if (((!(isNaN(this.soundAdapter.estimatedDuration))) && ((this.soundAdapter.estimatedDuration > 0)))){
                this._durationIsEstimated = true;
                this.soundAdapter.removeEventListener(ProgressEvent.PROGRESS, this.onDownloadProgress);
                setDuration(this.soundAdapter.estimatedDuration);
            };
        }
        private function onDownloadComplete(event:Event):void{
            this._durationIsEstimated = false;
            setDuration(this.soundAdapter.estimatedDuration);
        }
        private function onPlaybackComplete(event:Event):void{
            signalComplete();
        }

    }
}//package org.osmf.elements.audioClasses 
﻿package org.osmf.elements.audioClasses {
    import org.osmf.traits.*;
    import flash.media.*;

    public class AudioAudioTrait extends AudioTrait {

        private var soundAdapter:SoundAdapter;

        public function AudioAudioTrait(soundAdapter:SoundAdapter){
            this.soundAdapter = soundAdapter;
            soundAdapter.soundTransform.volume = volume;
            soundAdapter.soundTransform.pan = pan;
        }
        override protected function volumeChangeStart(newVolume:Number):void{
            var _local2:SoundTransform = this.soundAdapter.soundTransform;
            _local2.volume = ((muted) ? 0 : newVolume);
            this.soundAdapter.soundTransform = _local2;
        }
        override protected function mutedChangeStart(newMuted:Boolean):void{
            var _local2:SoundTransform = this.soundAdapter.soundTransform;
            _local2.volume = ((newMuted) ? 0 : volume);
            this.soundAdapter.soundTransform = _local2;
        }
        override protected function panChangeStart(newPan:Number):void{
            var _local2:SoundTransform = this.soundAdapter.soundTransform;
            _local2.pan = newPan;
            this.soundAdapter.soundTransform = _local2;
        }

    }
}//package org.osmf.elements.audioClasses 
﻿package org.osmf.elements.audioClasses {
    import flash.events.*;
    import org.osmf.traits.*;

    public class AudioPlayTrait extends PlayTrait {

        private var lastPlayFailed:Boolean = false;
        private var soundAdapter:SoundAdapter;

        public function AudioPlayTrait(soundAdapter:SoundAdapter){
            this.soundAdapter = soundAdapter;
            soundAdapter.addEventListener(Event.COMPLETE, this.onPlaybackComplete, false, 1, true);
        }
        override protected function playStateChangeStart(newPlayState:String):void{
            if (newPlayState == PlayState.PLAYING){
                this.lastPlayFailed = !(this.soundAdapter.play());
            } else {
                if (newPlayState == PlayState.PAUSED){
                    this.soundAdapter.pause();
                } else {
                    if (newPlayState == PlayState.STOPPED){
                        this.soundAdapter.stop();
                    };
                };
            };
        }
        override protected function playStateChangeEnd():void{
            if (this.lastPlayFailed){
                stop();
                this.lastPlayFailed = false;
            } else {
                super.playStateChangeEnd();
            };
        }
        private function onPlaybackComplete(event:Event):void{
            stop();
        }

    }
}//package org.osmf.elements.audioClasses 
﻿package org.osmf.elements {
    import org.osmf.media.*;
    import org.osmf.events.*;
    import flash.events.*;
    import flash.utils.*;
    import flash.net.*;
    import org.osmf.traits.*;
    import org.osmf.utils.*;
    import org.osmf.net.*;
    import __AS3__.vec.*;
    import org.osmf.elements.proxyClasses.*;
    import org.osmf.elements.f4mClasses.*;
    import org.osmf.elements.f4mClasses.builders.*;

    public class F4MLoader extends LoaderBase {

        public static const F4M_MIME_TYPE:String = "application/f4m+xml";
        private static const F4M_EXTENSION:String = "f4m";

        private var supportedMimeTypes:Vector.<String>;
        private var factory:MediaFactory;
        private var parser:ManifestParser;
        private var parserTimer:Timer;
        private var builders:Vector.<BaseManifestBuilder>;
        private var loadTrait:LoadTrait;

        public function F4MLoader(factory:MediaFactory=null){
            this.supportedMimeTypes = new Vector.<String>();
            super();
            this.supportedMimeTypes.push(F4M_MIME_TYPE);
            if (factory == null){
                factory = new DefaultMediaFactory();
            };
            this.factory = factory;
            this.builders = this.getBuilders();
        }
        override public function canHandleResource(resource:MediaResourceBase):Boolean{
            var _local3:URLResource;
            var _local4:String;
            var _local5:DynamicStreamingResource;
            var _local2:int = MediaTypeUtil.checkMetadataMatchWithResource(resource, new Vector.<String>(), this.supportedMimeTypes);
            if (_local2 == MediaTypeUtil.METADATA_MATCH_FOUND){
                return (true);
            };
            if ((resource is URLResource)){
                if ((resource is DynamicStreamingResource)){
                    _local5 = DynamicStreamingResource(resource);
                    if (_local5.streamItems.length > 0){
                        return (false);
                    };
                };
                _local3 = URLResource(resource);
                _local4 = new URL(_local3.url).extension;
                return ((_local4 == F4M_EXTENSION));
            };
            return (false);
        }
        override protected function executeLoad(loadTrait:LoadTrait):void{
            var manifest:* = null;
            var manifestLoader:* = null;
            var onError:* = null;
            var onComplete:* = null;
            var loadTrait:* = loadTrait;
            onError = function (event:ErrorEvent):void{
                manifestLoader.removeEventListener(Event.COMPLETE, onComplete);
                manifestLoader.removeEventListener(IOErrorEvent.IO_ERROR, onError);
                manifestLoader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, onError);
                updateLoadTrait(loadTrait, LoadState.LOAD_ERROR);
                loadTrait.dispatchEvent(new MediaErrorEvent(MediaErrorEvent.MEDIA_ERROR, false, false, new MediaError(0, event.text)));
            };
            onComplete = function (event:Event):void{
                var resourceData:* = null;
                var event:* = event;
                manifestLoader.removeEventListener(Event.COMPLETE, onComplete);
                manifestLoader.removeEventListener(IOErrorEvent.IO_ERROR, onError);
                manifestLoader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, onError);
                try {
                    resourceData = String((event.target as URLLoader).data);
                    parser = getParser(resourceData);
                    parser.addEventListener(ParseEvent.PARSE_COMPLETE, onParserLoadComplete);
                    parser.addEventListener(ParseEvent.PARSE_ERROR, onParserLoadError);
                    parserTimer = new Timer(OSMFSettings.f4mParseTimeout, 1);
                    parserTimer.addEventListener(TimerEvent.TIMER_COMPLETE, onParserTimerComplete);
                    parserTimer.start();
                    parser.parse(resourceData, URL.normalizePathForURL(URLResource(loadTrait.resource).url, true));
                } catch(parseError:Error) {
                    updateLoadTrait(loadTrait, LoadState.LOAD_ERROR);
                    loadTrait.dispatchEvent(new MediaErrorEvent(MediaErrorEvent.MEDIA_ERROR, false, false, new MediaError(parseError.errorID, parseError.message)));
                };
            };
            this.loadTrait = loadTrait;
            updateLoadTrait(loadTrait, LoadState.LOADING);
            manifestLoader = new URLLoader(new URLRequest(URLResource(loadTrait.resource).url));
            manifestLoader.addEventListener(Event.COMPLETE, onComplete);
            manifestLoader.addEventListener(IOErrorEvent.IO_ERROR, onError);
            manifestLoader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onError);
        }
        private function onParserTimerComplete(event:TimerEvent):void{
            if (this.parserTimer){
                this.parserTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, this.onParserTimerComplete);
                this.parserTimer = null;
            };
            updateLoadTrait(this.loadTrait, LoadState.LOAD_ERROR);
            this.loadTrait.dispatchEvent(new MediaErrorEvent(MediaErrorEvent.MEDIA_ERROR, false, false, new MediaError(MediaErrorCodes.F4M_FILE_INVALID, OSMFStrings.getString(OSMFStrings.F4M_PARSE_ERROR))));
        }
        private function onParserLoadComplete(event:ParseEvent):void{
            if (this.parserTimer){
                this.parserTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, this.onParserTimerComplete);
                this.parserTimer.stop();
                this.parserTimer = null;
            };
            this.parser.removeEventListener(ParseEvent.PARSE_COMPLETE, this.onParserLoadComplete);
            this.parser.removeEventListener(ParseEvent.PARSE_ERROR, this.onParserLoadError);
            var _local2:Manifest = (event.data as Manifest);
            this.finishManifestLoad(_local2);
        }
        private function onParserLoadError(event:ParseEvent):void{
            if (this.parserTimer){
                this.parserTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, this.onParserTimerComplete);
                this.parserTimer.stop();
                this.parserTimer = null;
            };
            this.parser.removeEventListener(ParseEvent.PARSE_COMPLETE, this.onParserLoadComplete);
            this.parser.removeEventListener(ParseEvent.PARSE_ERROR, this.onParserLoadError);
            updateLoadTrait(this.loadTrait, LoadState.LOAD_ERROR);
            this.loadTrait.dispatchEvent(new MediaErrorEvent(MediaErrorEvent.MEDIA_ERROR, false, false, new MediaError(MediaErrorCodes.F4M_FILE_INVALID, OSMFStrings.getString(OSMFStrings.F4M_PARSE_ERROR))));
        }
        private function finishManifestLoad(manifest:Manifest):void{
            var netResource:* = null;
            var loadedElem:* = null;
            var manifest:* = manifest;
            try {
                netResource = this.parser.createResource(manifest, URLResource(this.loadTrait.resource));
                loadedElem = this.factory.createMediaElement(netResource);
                if (((loadedElem.hasOwnProperty("defaultDuration")) && (!(isNaN(manifest.duration))))){
                    loadedElem["defaultDuration"] = manifest.duration;
                };
                LoadFromDocumentLoadTrait(this.loadTrait).mediaElement = loadedElem;
                updateLoadTrait(this.loadTrait, LoadState.READY);
            } catch(error:Error) {
                updateLoadTrait(loadTrait, LoadState.LOAD_ERROR);
                loadTrait.dispatchEvent(new MediaErrorEvent(MediaErrorEvent.MEDIA_ERROR, false, false, new MediaError(MediaErrorCodes.F4M_FILE_INVALID, error.message)));
            };
        }
        override protected function executeUnload(loadTrait:LoadTrait):void{
            updateLoadTrait(loadTrait, LoadState.UNINITIALIZED);
        }
        protected function getBuilders():Vector.<BaseManifestBuilder>{
            var _local1:Vector.<BaseManifestBuilder> = new Vector.<BaseManifestBuilder>();
            _local1.push(new MultiLevelManifestBuilder());
            _local1.push(new ManifestBuilder());
            return (_local1);
        }
        private function getParser(resourceData:String):ManifestParser{
            var _local2:ManifestParser;
            var _local3:BaseManifestBuilder;
            for each (_local3 in this.builders) {
                if (_local3.canParse(resourceData)){
                    _local2 = (_local3.build(resourceData) as ManifestParser);
                    break;
                };
            };
            return (_local2);
        }

    }
}//package org.osmf.elements 
﻿package org.osmf.elements {
    import org.osmf.media.*;
    import org.osmf.traits.*;
    import org.osmf.net.*;
    import __AS3__.vec.*;
    import org.osmf.net.httpstreaming.*;
    import org.osmf.net.rtmpstreaming.*;

    public class VideoElement extends LightweightVideoElement {

        private var _alternateLoaders:Vector.<LoaderBase>;

        public function VideoElement(resource:MediaResourceBase=null, loader:NetLoader=null){
            super(null, null);
            super.loader = loader;
            this.resource = resource;
        }
        override public function set resource(value:MediaResourceBase):void{
            loader = getLoaderForResource(value, this.alternateLoaders);
            super.resource = value;
        }
        private function get alternateLoaders():Vector.<LoaderBase>{
            if (this._alternateLoaders == null){
                this._alternateLoaders = new Vector.<LoaderBase>();
                this._alternateLoaders.push(new HTTPStreamingNetLoader());
                this._alternateLoaders.push(new RTMPDynamicStreamingNetLoader());
                this._alternateLoaders.push(new NetLoader());
            };
            return (this._alternateLoaders);
        }

    }
}//package org.osmf.elements 
﻿package org.osmf.elements {
    import org.osmf.media.*;
    import org.osmf.traits.*;
    import org.osmf.utils.*;
    import __AS3__.vec.*;
    import org.osmf.elements.loaderClasses.*;

    public class ImageLoader extends LoaderBase {

        private static const MIME_TYPES_SUPPORTED:Vector.<String> = Vector.<String>(["image/png", "image/gif", "image/jpeg"]);
        private static const MEDIA_TYPES_SUPPORTED:Vector.<String> = Vector.<String>([MediaType.IMAGE]);

        private var checkPolicyFile:Boolean;

        public function ImageLoader(checkPolicyFile:Boolean=true){
            this.checkPolicyFile = checkPolicyFile;
        }
        override public function canHandleResource(resource:MediaResourceBase):Boolean{
            var _local4:URL;
            var _local2:int = MediaTypeUtil.checkMetadataMatchWithResource(resource, MEDIA_TYPES_SUPPORTED, MIME_TYPES_SUPPORTED);
            if (_local2 != MediaTypeUtil.METADATA_MATCH_UNKNOWN){
                return ((_local2 == MediaTypeUtil.METADATA_MATCH_FOUND));
            };
            var _local3:URLResource = (resource as URLResource);
            if (((!((_local3 == null))) && (!((_local3.url == null))))){
                _local4 = new URL(_local3.url);
                return (!((_local4.path.search(/\.gif$|\.jpg$|\.png$/i) == -1)));
            };
            return (false);
        }
        override protected function executeLoad(loadTrait:LoadTrait):void{
            LoaderUtils.loadLoadTrait(loadTrait, updateLoadTrait, false, this.checkPolicyFile);
        }
        override protected function executeUnload(loadTrait:LoadTrait):void{
            LoaderUtils.unloadLoadTrait(loadTrait, updateLoadTrait);
        }

    }
}//package org.osmf.elements 
﻿package org.osmf.elements {
    import org.osmf.media.*;
    import flash.display.*;
    import org.osmf.traits.*;
    import org.osmf.elements.loaderClasses.*;

    public class ImageElement extends LoadableElementBase {

        private var _smoothing:Boolean;

        public function ImageElement(resource:URLResource=null, loader:ImageLoader=null){
            if (loader == null){
                loader = new ImageLoader();
            };
            super(resource, loader);
        }
        public function get smoothing():Boolean{
            return (this._smoothing);
        }
        public function set smoothing(value:Boolean):void{
            if (this._smoothing != value){
                this._smoothing = value;
                this.applySmoothingSetting();
            };
        }
        override protected function createLoadTrait(resource:MediaResourceBase, loader:LoaderBase):LoadTrait{
            return (new LoaderLoadTrait(loader, resource));
        }
        override protected function processReadyState():void{
            var _local1:LoaderLoadTrait = (getTrait(MediaTraitType.LOAD) as LoaderLoadTrait);
            addTrait(MediaTraitType.DISPLAY_OBJECT, LoaderUtils.createDisplayObjectTrait(_local1.loader, this));
            this.applySmoothingSetting();
        }
        override protected function processUnloadingState():void{
            removeTrait(MediaTraitType.DISPLAY_OBJECT);
        }
        private function applySmoothingSetting():void{
            var _local2:Loader;
            var _local3:Bitmap;
            var _local1:DisplayObjectTrait = (getTrait(MediaTraitType.DISPLAY_OBJECT) as DisplayObjectTrait);
            if (_local1){
                _local2 = (_local1.displayObject as Loader);
                if (_local2 != null){
                    try {
                        _local3 = (_local2.content as Bitmap);
                        if (_local3 != null){
                            _local3.smoothing = this._smoothing;
                        };
                    } catch(error:SecurityError) {
                    };
                };
            };
        }

    }
}//package org.osmf.elements 
﻿package org.osmf.elements.proxyClasses {
    import org.osmf.traits.*;

    public class DurationTimeTrait extends TimeTrait {

        public function DurationTimeTrait(duration:Number){
            super(duration);
        }
        public function set currentTime(value:Number):void{
            super.setCurrentTime(value);
        }

    }
}//package org.osmf.elements.proxyClasses 
﻿package org.osmf.elements.proxyClasses {
    import org.osmf.media.*;
    import org.osmf.events.*;
    import org.osmf.traits.*;

    public class LoadFromDocumentLoadTrait extends LoadTrait {

        private var _mediaElement:MediaElement;

        public function LoadFromDocumentLoadTrait(loader:LoaderBase, resource:MediaResourceBase){
            super(loader, resource);
        }
        override protected function loadStateChangeEnd():void{
            dispatchEvent(new LoadEvent(LoadEvent.LOAD_STATE_CHANGE, false, false, loadState));
        }
        public function set mediaElement(value:MediaElement):void{
            this._mediaElement = value;
        }
        public function get mediaElement():MediaElement{
            return (this._mediaElement);
        }

    }
}//package org.osmf.elements.proxyClasses 
﻿package org.osmf.elements.proxyClasses {
    import org.osmf.traits.*;

    public class DurationSeekTrait extends SeekTrait {

        public function DurationSeekTrait(temporal:TimeTrait){
            super(temporal);
        }
        override protected function seekingChangeEnd(time:Number):void{
            super.seekingChangeEnd(time);
            if (seeking == true){
                setSeeking(false, time);
            };
        }

    }
}//package org.osmf.elements.proxyClasses 
﻿package org.osmf.elements.proxyClasses {
    import org.osmf.events.*;
    import flash.events.*;
    import org.osmf.metadata.*;
    import __AS3__.vec.*;

    public class ProxyMetadata extends Metadata {

        private var proxiedMetadata:Metadata;

        public function ProxyMetadata(){
            this.proxiedMetadata = new Metadata();
            this.proxiedMetadata.addEventListener(MetadataEvent.VALUE_ADD, this.redispatchEvent);
            this.proxiedMetadata.addEventListener(MetadataEvent.VALUE_CHANGE, this.redispatchEvent);
            this.proxiedMetadata.addEventListener(MetadataEvent.VALUE_REMOVE, this.redispatchEvent);
        }
        public function set metadata(value:Metadata):void{
            var _local2:String;
            this.proxiedMetadata.removeEventListener(MetadataEvent.VALUE_ADD, this.redispatchEvent);
            this.proxiedMetadata.removeEventListener(MetadataEvent.VALUE_CHANGE, this.redispatchEvent);
            this.proxiedMetadata.removeEventListener(MetadataEvent.VALUE_REMOVE, this.redispatchEvent);
            for each (_local2 in this.proxiedMetadata.keys) {
                value.addValue(_local2, this.proxiedMetadata.getValue(_local2));
            };
            this.proxiedMetadata = value;
            this.proxiedMetadata.addEventListener(MetadataEvent.VALUE_ADD, this.redispatchEvent);
            this.proxiedMetadata.addEventListener(MetadataEvent.VALUE_CHANGE, this.redispatchEvent);
            this.proxiedMetadata.addEventListener(MetadataEvent.VALUE_REMOVE, this.redispatchEvent);
        }
        override public function getValue(key:String){
            return (this.proxiedMetadata.getValue(key));
        }
        override public function addValue(key:String, value:Object):void{
            this.proxiedMetadata.addValue(key, value);
        }
        override public function removeValue(key:String){
            return (this.proxiedMetadata.removeValue(key));
        }
        override public function get keys():Vector.<String>{
            return (this.proxiedMetadata.keys);
        }
        private function redispatchEvent(event:Event):void{
            dispatchEvent(event.clone());
        }

    }
}//package org.osmf.elements.proxyClasses 
﻿package org.osmf.elements {
    import org.osmf.media.*;
    import org.osmf.traits.*;
    import org.osmf.utils.*;
    import __AS3__.vec.*;
    import org.osmf.elements.loaderClasses.*;

    public class SWFLoader extends LoaderBase {

        private static const MIME_TYPES_SUPPORTED:Vector.<String> = Vector.<String>(["application/x-shockwave-flash"]);
        private static const MEDIA_TYPES_SUPPORTED:Vector.<String> = Vector.<String>([MediaType.SWF]);

        public static var allowValidationOfLoadedContent:Boolean = true;

        private var useCurrentSecurityDomain:Boolean = false;
        private var _validateLoadedContentFunction:Function = null;

        public function SWFLoader(useCurrentSecurityDomain:Boolean=false){
            this.useCurrentSecurityDomain = useCurrentSecurityDomain;
        }
        override public function canHandleResource(resource:MediaResourceBase):Boolean{
            var _local4:URL;
            var _local2:int = MediaTypeUtil.checkMetadataMatchWithResource(resource, MEDIA_TYPES_SUPPORTED, MIME_TYPES_SUPPORTED);
            if (_local2 != MediaTypeUtil.METADATA_MATCH_UNKNOWN){
                return ((_local2 == MediaTypeUtil.METADATA_MATCH_FOUND));
            };
            var _local3:URLResource = (resource as URLResource);
            if (((!((_local3 == null))) && (!((_local3.url == null))))){
                _local4 = new URL(_local3.url);
                return (!((_local4.path.search(/\.swf$/i) == -1)));
            };
            return (false);
        }
        override protected function executeLoad(loadTrait:LoadTrait):void{
            LoaderUtils.loadLoadTrait(loadTrait, updateLoadTrait, this.useCurrentSecurityDomain, false, this.validateLoadedContentFunction);
        }
        override protected function executeUnload(loadTrait:LoadTrait):void{
            LoaderUtils.unloadLoadTrait(loadTrait, updateLoadTrait);
        }
        public function get validateLoadedContentFunction():Function{
            return (((allowValidationOfLoadedContent) ? this._validateLoadedContentFunction : null));
        }
        public function set validateLoadedContentFunction(value:Function):void{
            this._validateLoadedContentFunction = value;
        }

    }
}//package org.osmf.elements 
﻿package org.osmf.elements {
    import org.osmf.media.*;
    import org.osmf.events.*;
    import org.osmf.traits.*;
    import org.osmf.utils.*;
    import org.osmf.metadata.*;
    import __AS3__.vec.*;
    import org.osmf.elements.proxyClasses.*;

    public class ProxyElement extends MediaElement {

        private var _proxiedMetadata:ProxyMetadata;
        private var _proxiedElement:MediaElement;
        private var _blockedTraits:Vector.<String>;

        public function ProxyElement(proxiedElement:MediaElement=null){
            this.addEventListener(MediaElementEvent.TRAIT_ADD, this.onProxyTraitAdd, false, int.MAX_VALUE);
            this.addEventListener(MediaElementEvent.TRAIT_REMOVE, this.onProxyTraitRemove, false, int.MAX_VALUE);
            this.addEventListener(ContainerChangeEvent.CONTAINER_CHANGE, this.onProxyContainerChange);
            this.proxiedElement = proxiedElement;
        }
        public function get proxiedElement():MediaElement{
            return (this._proxiedElement);
        }
        public function set proxiedElement(value:MediaElement):void{
            var _local2:String;
            if (value != this._proxiedElement){
                if (this._proxiedElement != null){
                    this.toggleMediaElementListeners(this._proxiedElement, false);
                    for each (_local2 in this._proxiedElement.traitTypes) {
                        if ((((super.hasTrait(_local2) == false)) && ((((this._blockedTraits == null)) || ((this._blockedTraits.indexOf(_local2) == -1)))))){
                            super.dispatchEvent(new MediaElementEvent(MediaElementEvent.TRAIT_REMOVE, false, false, _local2));
                        };
                    };
                };
                this._proxiedElement = value;
                if (this._proxiedElement != null){
                    ProxyMetadata(metadata).metadata = this._proxiedElement.metadata;
                    this._proxiedElement.dispatchEvent(new ContainerChangeEvent(ContainerChangeEvent.CONTAINER_CHANGE, false, false, this._proxiedElement.container, container));
                    this.toggleMediaElementListeners(this._proxiedElement, true);
                    for each (_local2 in this._proxiedElement.traitTypes) {
                        if ((((super.hasTrait(_local2) == false)) && ((((this._blockedTraits == null)) || ((this._blockedTraits.indexOf(_local2) == -1)))))){
                            super.dispatchEvent(new MediaElementEvent(MediaElementEvent.TRAIT_ADD, false, false, _local2));
                        };
                    };
                };
            };
        }
        override public function get traitTypes():Vector.<String>{
            var _local2:String;
            var _local1:Vector.<String> = new Vector.<String>();
            for each (_local2 in MediaTraitType.ALL_TYPES) {
                if (this.hasTrait(_local2)){
                    _local1.push(_local2);
                };
            };
            return (_local1);
        }
        override public function hasTrait(type:String):Boolean{
            if (type == null){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.INVALID_PARAM)));
            };
            return (!((this.getTrait(type) == null)));
        }
        override public function getTrait(type:String):MediaTraitBase{
            if (type == null){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.INVALID_PARAM)));
            };
            var _local2:MediaTraitBase;
            if (this.blocksTrait(type) == false){
                _local2 = ((super.getTrait(type)) || (((this.proxiedElement)!=null) ? this.proxiedElement.getTrait(type) : null));
            };
            return (_local2);
        }
        override public function get resource():MediaResourceBase{
            return (((this.proxiedElement) ? this.proxiedElement.resource : null));
        }
        override public function set resource(value:MediaResourceBase):void{
            if (this.proxiedElement != null){
                this.proxiedElement.resource = value;
            };
        }
        override protected function addTrait(type:String, instance:MediaTraitBase):void{
            if ((((((this.blocksTrait(type) == false)) && (!((this.proxiedElement == null))))) && ((this.proxiedElement.hasTrait(type) == true)))){
                super.dispatchEvent(new MediaElementEvent(MediaElementEvent.TRAIT_REMOVE, false, false, type));
            };
            super.addTrait(type, instance);
        }
        override protected function removeTrait(type:String):MediaTraitBase{
            var _local2:MediaTraitBase = super.removeTrait(type);
            if ((((((this.blocksTrait(type) == false)) && (!((this.proxiedElement == null))))) && ((this.proxiedElement.hasTrait(type) == true)))){
                super.dispatchEvent(new MediaElementEvent(MediaElementEvent.TRAIT_ADD, false, false, type));
            };
            return (_local2);
        }
        override protected function createMetadata():Metadata{
            return (new ProxyMetadata());
        }
        final protected function get blockedTraits():Vector.<String>{
            if (this._blockedTraits == null){
                this._blockedTraits = new Vector.<String>();
            };
            return (this._blockedTraits);
        }
        final protected function set blockedTraits(value:Vector.<String>):void{
            var _local4:String;
            if (value == this._blockedTraits){
                return;
            };
            var _local2:Array = [];
            var _local3:Array = [];
            if (this._proxiedElement != null){
                for each (_local4 in MediaTraitType.ALL_TYPES) {
                    if (value.indexOf(_local4) != -1){
                        if ((((this._blockedTraits == null)) || ((this._blockedTraits.indexOf(_local4) == -1)))){
                            _local2.push(_local4);
                        };
                    } else {
                        if (((!((this._blockedTraits == null))) && (!((this._blockedTraits.indexOf(_local4) == -1))))){
                            _local3.push(_local4);
                        };
                    };
                };
            };
            if (this._proxiedElement != null){
                for each (_local4 in _local2) {
                    if (((this.proxiedElement.hasTrait(_local4)) || (super.hasTrait(_local4)))){
                        dispatchEvent(new MediaElementEvent(MediaElementEvent.TRAIT_REMOVE, false, false, _local4));
                    };
                };
                this._blockedTraits = value;
                for each (_local4 in _local3) {
                    if (((this.proxiedElement.hasTrait(_local4)) || (super.hasTrait(_local4)))){
                        dispatchEvent(new MediaElementEvent(MediaElementEvent.TRAIT_ADD, false, false, _local4));
                    };
                };
            } else {
                this._blockedTraits = value;
            };
        }
        private function toggleMediaElementListeners(mediaElement:MediaElement, add:Boolean):void{
            if (add){
                this._proxiedElement.addEventListener(MediaErrorEvent.MEDIA_ERROR, this.onMediaError);
                this._proxiedElement.addEventListener(MediaElementEvent.TRAIT_ADD, this.onTraitAdd);
                this._proxiedElement.addEventListener(MediaElementEvent.TRAIT_REMOVE, this.onTraitRemove);
                this._proxiedElement.addEventListener(MediaElementEvent.METADATA_ADD, this.onMetadataEvent);
                this._proxiedElement.addEventListener(MediaElementEvent.METADATA_REMOVE, this.onMetadataEvent);
            } else {
                this._proxiedElement.removeEventListener(MediaErrorEvent.MEDIA_ERROR, this.onMediaError);
                this._proxiedElement.removeEventListener(MediaElementEvent.TRAIT_ADD, this.onTraitAdd);
                this._proxiedElement.removeEventListener(MediaElementEvent.TRAIT_REMOVE, this.onTraitRemove);
                this._proxiedElement.removeEventListener(MediaElementEvent.METADATA_ADD, this.onMetadataEvent);
                this._proxiedElement.removeEventListener(MediaElementEvent.METADATA_REMOVE, this.onMetadataEvent);
            };
        }
        private function onMediaError(event:MediaErrorEvent):void{
            dispatchEvent(event.clone());
        }
        private function onTraitAdd(event:MediaElementEvent):void{
            this.processTraitsChangeEvent(event);
        }
        private function onTraitRemove(event:MediaElementEvent):void{
            this.processTraitsChangeEvent(event);
        }
        private function onMetadataEvent(event:MediaElementEvent):void{
            dispatchEvent(event.clone());
        }
        private function onProxyContainerChange(event:ContainerChangeEvent):void{
            if (this.proxiedElement != null){
                this.proxiedElement.dispatchEvent(event.clone());
            };
        }
        private function onProxyTraitAdd(event:MediaElementEvent):void{
            this.processProxyTraitsChangeEvent(event);
        }
        private function onProxyTraitRemove(event:MediaElementEvent):void{
            this.processProxyTraitsChangeEvent(event);
        }
        private function processTraitsChangeEvent(event:MediaElementEvent):void{
            if ((((this.blocksTrait(event.traitType) == false)) && ((super.hasTrait(event.traitType) == false)))){
                super.dispatchEvent(event.clone());
            };
        }
        private function processProxyTraitsChangeEvent(event:MediaElementEvent):void{
            if (this.blocksTrait(event.traitType) == true){
                event.stopImmediatePropagation();
            };
        }
        private function blocksTrait(traitType:String):Boolean{
            return (((this._blockedTraits) && (!((this._blockedTraits.indexOf(traitType) == -1)))));
        }

    }
}//package org.osmf.elements 
﻿package org.osmf.elements {
    import org.osmf.media.*;
    import org.osmf.events.*;
    import flash.events.*;
    import org.osmf.traits.*;
    import org.osmf.utils.*;
    import org.osmf.net.*;
    import org.osmf.elements.proxyClasses.*;

    public class LoadFromDocumentElement extends ProxyElement {

        private var _resource:MediaResourceBase;
        private var loadTrait:LoadFromDocumentLoadTrait;
        private var loader:LoaderBase;

        public function LoadFromDocumentElement(resource:MediaResourceBase=null, loader:LoaderBase=null){
            super(null);
            this.loader = loader;
            this.resource = resource;
            if (loader == null){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.NULL_PARAM)));
            };
        }
        override public function set resource(value:MediaResourceBase):void{
            if (((!((this._resource == value))) && (!((value == null))))){
                this._resource = value;
                if ((value is StreamingXMLResource)){
                    this.loader = new XMLLoader();
                };
                this.loadTrait = new LoadFromDocumentLoadTrait(this.loader, this.resource);
                this.loadTrait.addEventListener(LoadEvent.LOAD_STATE_CHANGE, this.onLoadStateChange, false, int.MAX_VALUE);
                if (super.getTrait(MediaTraitType.LOAD) != null){
                    super.removeTrait(MediaTraitType.LOAD);
                };
                super.addTrait(MediaTraitType.LOAD, this.loadTrait);
            };
        }
        override public function get resource():MediaResourceBase{
            return (this._resource);
        }
        private function onLoaderStateChange(event:Event):void{
            removeTrait(MediaTraitType.LOAD);
            proxiedElement = this.loadTrait.mediaElement;
        }
        private function onLoadStateChange(event:LoadEvent):void{
            var proxiedLoadTrait:* = null;
            var onProxiedElementLoadStateChange:* = null;
            var event:* = event;
            if (event.loadState == LoadState.READY){
                onProxiedElementLoadStateChange = function (event:LoadEvent):void{
                    if (event.loadState == LoadState.LOADING){
                        event.stopImmediatePropagation();
                    } else {
                        proxiedLoadTrait.removeEventListener(LoadEvent.LOAD_STATE_CHANGE, onProxiedElementLoadStateChange);
                    };
                };
                event.stopImmediatePropagation();
                removeTrait(MediaTraitType.LOAD);
                proxiedLoadTrait = (this.loadTrait.mediaElement.getTrait(MediaTraitType.LOAD) as LoadTrait);
                proxiedLoadTrait.addEventListener(LoadEvent.LOAD_STATE_CHANGE, onProxiedElementLoadStateChange, false, int.MAX_VALUE);
                proxiedElement = this.loadTrait.mediaElement;
                if (proxiedLoadTrait.loadState == LoadState.UNINITIALIZED){
                    proxiedLoadTrait.load();
                };
            };
        }

    }
}//package org.osmf.elements 
﻿package org.osmf.elements.compositeClasses {
    import org.osmf.events.*;
    import org.osmf.traits.*;
    import org.osmf.elements.compositeClasses.*;

    class CompositePlayTrait extends PlayTrait implements IReusable {

        private var mode:String;
        private var traitAggregator:TraitAggregator;
        private var traitAggregationHelper:TraitAggregationHelper;
        private var playStateIsChanging:Boolean;
        private var deferredPlayTraitToSet:PlayTrait;
        private var deferredPlayStateToSet:String;

        public function CompositePlayTrait(traitAggregator:TraitAggregator, mode:String){
            this.traitAggregator = traitAggregator;
            this.mode = mode;
            this.traitAggregationHelper = new TraitAggregationHelper(traitType, traitAggregator, this.processAggregatedChild, this.processUnaggregatedChild);
        }
        public function attach():void{
            this.traitAggregationHelper.attach();
        }
        public function detach():void{
            this.traitAggregationHelper.detach();
        }
        override protected function playStateChangeStart(newPlayState:String):void{
            if (((!((newPlayState == playState))) && (!(this.playStateIsChanging)))){
                this.playStateIsChanging = true;
                if (this.mode == CompositionMode.PARALLEL){
                    if (newPlayState == PlayState.PLAYING){
                        this.traitAggregator.invokeOnEachChildTrait("play", [], MediaTraitType.PLAY);
                    } else {
                        if (newPlayState == PlayState.PAUSED){
                            this.traitAggregator.invokeOnEachChildTrait("pause", [], MediaTraitType.PLAY);
                        } else {
                            this.traitAggregator.invokeOnEachChildTrait("stop", [], MediaTraitType.PLAY);
                        };
                    };
                } else {
                    this.deferredPlayTraitToSet = this.traitOfCurrentChild;
                    this.deferredPlayStateToSet = newPlayState;
                };
                this.playStateIsChanging = false;
            };
        }
        override protected function playStateChangeEnd():void{
            if (this.playStateIsChanging == false){
                super.playStateChangeEnd();
            };
            if (this.deferredPlayTraitToSet != null){
                this.setPlayState(this.deferredPlayTraitToSet, this.deferredPlayStateToSet);
            };
            this.deferredPlayTraitToSet = null;
            this.deferredPlayStateToSet = null;
        }
        private function processAggregatedChild(child:MediaTraitBase):void{
            child.addEventListener(PlayEvent.PLAY_STATE_CHANGE, this.onPlayStateChange, false, 0, true);
            child.addEventListener(PlayEvent.CAN_PAUSE_CHANGE, this.onCanPauseChange, false, 0, true);
            var _local2:PlayTrait = (child as PlayTrait);
            if (this.mode == CompositionMode.PARALLEL){
                if (this.traitAggregator.getNumTraits(MediaTraitType.PLAY) == 1){
                    this.setPlayState(this, _local2.playState);
                } else {
                    this.setPlayState(_local2, this.playState);
                };
                this.updateCanPauseState();
            } else {
                if (child == this.traitOfCurrentChild){
                    this.setPlayState(this, _local2.playState);
                    this.updateCanPauseState();
                };
            };
        }
        private function processUnaggregatedChild(child:MediaTraitBase):void{
            child.removeEventListener(PlayEvent.PLAY_STATE_CHANGE, this.onPlayStateChange);
            child.removeEventListener(PlayEvent.CAN_PAUSE_CHANGE, this.onCanPauseChange);
            this.updateCanPauseState();
        }
        private function onPlayStateChange(event:PlayEvent):void{
            var computedPlayState:* = null;
            var event:* = event;
            var playTrait:* = (event.target as PlayTrait);
            if (this.mode == CompositionMode.PARALLEL){
                computedPlayState = playTrait.playState;
                if (computedPlayState == PlayState.STOPPED){
                    this.traitAggregator.forEachChildTrait(function (mediaTrait:PlayTrait):void{
                        if (mediaTrait.playState != PlayState.STOPPED){
                            computedPlayState = mediaTrait.playState;
                        };
                    }, MediaTraitType.PLAY);
                };
                this.setPlayState(this, computedPlayState);
            } else {
                if (playTrait == this.traitOfCurrentChild){
                    this.setPlayState(this, playTrait.playState);
                    if ((((playTrait.playState == PlayState.STOPPED)) && ((this.traitAggregator.listenedChild.hasTrait(MediaTraitType.TIME) == false)))){
                        SerialElementTransitionManager.playNextPlayableChild(this.traitAggregator, null);
                    };
                };
            };
        }
        private function onCanPauseChange(event:PlayEvent):void{
            this.updateCanPauseState();
        }
        private function setPlayState(playTrait:PlayTrait, value:String):void{
            if (value != playTrait.playState){
                if (value == PlayState.PLAYING){
                    playTrait.play();
                } else {
                    if (value == PlayState.PAUSED){
                        if (playTrait.canPause){
                            playTrait.pause();
                        };
                    } else {
                        playTrait.stop();
                    };
                };
            };
        }
        private function updateCanPauseState():void{
            var newCanPause:* = false;
            var newPlayState:* = null;
            if (this.mode == CompositionMode.PARALLEL){
                newCanPause = false;
                this.traitAggregator.forEachChildTrait(function (mediaTrait:MediaTraitBase):void{
                    newCanPause = ((newCanPause) || (PlayTrait(mediaTrait).canPause));
                }, MediaTraitType.PLAY);
                if (canPause != newCanPause){
                    setCanPause(newCanPause);
                    if ((((newCanPause == false)) && ((playState == PlayState.PAUSED)))){
                        this.traitAggregator.forEachChildTrait(function (mediaTrait:MediaTraitBase):void{
                            newPlayState = ((newPlayState) || (PlayTrait(mediaTrait).playState));
                        }, MediaTraitType.PLAY);
                        if (newPlayState != null){
                            this.setPlayState(this, newPlayState);
                        };
                    };
                };
            } else {
                setCanPause(this.traitOfCurrentChild.canPause);
            };
        }
        private function get traitOfCurrentChild():PlayTrait{
            return (((this.traitAggregator.listenedChild) ? (this.traitAggregator.listenedChild.getTrait(MediaTraitType.PLAY) as PlayTrait) : null));
        }

    }
}//package org.osmf.elements.compositeClasses 
﻿package org.osmf.elements.compositeClasses {
    import org.osmf.media.*;
    import flash.events.*;
    import org.osmf.traits.*;

    public class TraitAggregatorEvent extends Event {

        public static const TRAIT_AGGREGATED:String = "traitAggregated";
        public static const TRAIT_UNAGGREGATED:String = "traitUnaggregated";
        public static const LISTENED_CHILD_CHANGE:String = "listenedChildChange";

        private var _traitType:String;
        private var _trait:MediaTraitBase;
        private var _child:MediaElement;
        private var _oldListenedChild:MediaElement;
        private var _newListenedChild:MediaElement;

        public function TraitAggregatorEvent(type:String, traitType:String, trait:MediaTraitBase, child:MediaElement, oldListenedChild:MediaElement=null, newListenedChild:MediaElement=null, bubbles:Boolean=false, cancelable:Boolean=false){
            super(type, bubbles, cancelable);
            this._child = child;
            this._oldListenedChild = oldListenedChild;
            this._newListenedChild = newListenedChild;
            this._traitType = traitType;
            this._trait = trait;
        }
        override public function clone():Event{
            return (new TraitAggregatorEvent(type, this._traitType, this._trait, this._oldListenedChild, this._newListenedChild));
        }
        public function get traitType():String{
            return (this._traitType);
        }
        public function get trait():MediaTraitBase{
            return (this._trait);
        }
        public function get child():MediaElement{
            return (this._child);
        }
        public function get oldListenedChild():MediaElement{
            return (this._oldListenedChild);
        }
        public function get newListenedChild():MediaElement{
            return (this._newListenedChild);
        }

    }
}//package org.osmf.elements.compositeClasses 
﻿package org.osmf.elements.compositeClasses {
    import org.osmf.media.*;
    import org.osmf.events.*;
    import org.osmf.traits.*;
    import __AS3__.vec.*;
    import org.osmf.elements.compositeClasses.*;

    class SerialSeekTrait extends CompositeSeekTrait {

        private var owner:MediaElement;
        private var crossChildrenSeeking:Boolean;
        private var allCrossChildrenSeeksInitiated:Boolean;
        private var readyToExitSeekingState:Boolean = true;
        private var exitSeekingStateTime:Number;

        public function SerialSeekTrait(traitAggregator:TraitAggregator, owner:MediaElement){
            super(traitAggregator, CompositionMode.SERIAL, owner);
            this.owner = owner;
        }
        override protected function doSeek(seekOp:CompositeSeekOperationInfo):void{
            var _local4:String;
            var _local5:PlayTrait;
            var _local6:Number;
            var _local7:SeekTrait;
            var _local8:PlayTrait;
            var _local9:TimeTrait;
            var _local10:SerialElementSegment;
            var _local11:SeekTrait;
            var _local2:SerialSeekOperationInfo = (seekOp as SerialSeekOperationInfo);
            var _local3:SeekTrait = (_local2.fromChild.getTrait(MediaTraitType.SEEK) as SeekTrait);
            if (_local2.fromChild == _local2.toChild){
                this.readyToExitSeekingState = true;
                if (!_local3){
                    return;
                };
                _local3.seek(_local2.toChildTime);
            } else {
                this.crossChildrenSeeking = true;
                this.allCrossChildrenSeeksInitiated = false;
                this.readyToExitSeekingState = false;
                _local4 = this.getCompositePlayState();
                _local5 = (_local2.fromChild.getTrait(MediaTraitType.PLAY) as PlayTrait);
                if (_local5 != null){
                    _local5.stop();
                };
                if (_local2.seekForward){
                    _local9 = (_local2.fromChild.getTrait(MediaTraitType.TIME) as TimeTrait);
                    _local6 = _local9.duration;
                } else {
                    for each (_local10 in _local2.inBetweenChildren) {
                        if (_local10.mediaElement.hasTrait(MediaTraitType.SEEK)){
                            _local11 = (_local10.mediaElement.getTrait(MediaTraitType.SEEK) as SeekTrait);
                            if (_local11.canSeekTo(0)){
                                _local11.seek(0);
                            };
                        };
                    };
                    _local6 = 0;
                };
                _local7 = (_local2.toChild.getTrait(MediaTraitType.SEEK) as SeekTrait);
                _local7.seek(_local2.toChildTime);
                if (_local2.seekForward){
                    traitAggregator.listenedChild = _local2.toChild;
                    this.readyToExitSeekingState = true;
                };
                this.allCrossChildrenSeeksInitiated = true;
                _local3.seek(_local6);
                if (_local2.seekForward == false){
                    this.readyToExitSeekingState = true;
                    traitAggregator.listenedChild = _local2.toChild;
                };
                if (!isNaN(this.exitSeekingStateTime)){
                    setSeeking(false, this.exitSeekingStateTime);
                    this.exitSeekingStateTime = NaN;
                };
                _local8 = (this.owner.getTrait(MediaTraitType.PLAY) as PlayTrait);
                if (_local8 != null){
                    if (_local4 == PlayState.PLAYING){
                        _local8.play();
                    } else {
                        if ((((_local4 == PlayState.PAUSED)) && (_local8.canPause))){
                            _local8.pause();
                        };
                    };
                };
            };
        }
        override protected function prepareSeekOperationInfo(time:Number):CompositeSeekOperationInfo{
            var _local3:SerialSeekOperationInfo;
            var _local5:SerialElementSegment;
            var _local2:Vector.<SerialElementSegment> = this.prepareSerialSegments();
            var _local4:int = traitAggregator.getChildIndex(traitAggregator.listenedChild);
            if (_local4 < _local2.length){
                _local5 = _local2[_local4];
                if ((((_local5.relativeStart <= time)) && ((time <= _local5.relativeEnd)))){
                    _local3 = new SerialSeekOperationInfo();
                    _local3.canSeekTo = true;
                    _local3.fromChild = _local5.mediaElement;
                    _local3.toChild = _local5.mediaElement;
                    _local3.toChildTime = (time - _local5.relativeStart);
                } else {
                    if (time < _local5.relativeStart){
                        _local3 = this.canSeekBackward(time, _local2, _local4);
                    } else {
                        _local3 = this.canSeekForward(time, _local2, _local4);
                    };
                };
            } else {
                _local3 = new SerialSeekOperationInfo();
                _local3.canSeekTo = false;
            };
            return (_local3);
        }
        override protected function checkSeeking():Boolean{
            return (((this.traitOfCurrentChild)!=null) ? this.traitOfCurrentChild.seeking : false);
        }
        private function prepareSerialSegments():Vector.<SerialElementSegment>{
            var _local4:MediaElement;
            var _local5:TimeTrait;
            var _local1:Vector.<SerialElementSegment> = new Vector.<SerialElementSegment>();
            var _local2 = 0;
            var _local3:int;
            while (_local3 < traitAggregator.numChildren) {
                _local4 = traitAggregator.getChildAt(_local3);
                _local5 = (_local4.getTrait(MediaTraitType.TIME) as TimeTrait);
                if (((!((_local5 == null))) && (!(isNaN(_local5.duration))))){
                    _local1.push(new SerialElementSegment(_local4, _local2, (_local2 + _local5.duration), (_local4.hasTrait(MediaTraitType.SEEK) == false)));
                    _local2 = (_local2 + _local5.duration);
                } else {
                    _local1.push(new SerialElementSegment(_local4, _local2, _local2, (_local4.hasTrait(MediaTraitType.SEEK) == false)));
                };
                _local3++;
            };
            return (_local1);
        }
        override protected function onSeekingChanged(event:SeekEvent):void{
            var _local2:MediaElement;
            var _local3:Boolean;
            if (this.crossChildrenSeeking){
                if (this.allCrossChildrenSeeksInitiated){
                    while ((_local2 = traitAggregator.getNextChildWithTrait(_local2, MediaTraitType.SEEK))) {
                        if ((_local2.getTrait(MediaTraitType.SEEK) as SeekTrait).seeking){
                            return;
                        };
                    };
                    this.crossChildrenSeeking = false;
                    if (this.readyToExitSeekingState){
                        setSeeking(false, ((timeTrait)!=null) ? timeTrait.currentTime : 0);
                    } else {
                        this.exitSeekingStateTime = ((timeTrait)!=null) ? timeTrait.currentTime : 0;
                    };
                };
            } else {
                _local3 = this.checkSeeking();
                if (_local3 != seeking){
                    if (!_local3){
                        setSeeking(false, event.time);
                    };
                };
            };
        }
        private function canSeekBackward(time:Number, serialSegments:Vector.<SerialElementSegment>, curChildIndex:int):SerialSeekOperationInfo{
            var _local7:SeekTrait;
            var _local4:SerialSeekOperationInfo = new SerialSeekOperationInfo();
            _local4.seekForward = false;
            _local4.canSeekTo = false;
            var _local5:int = (curChildIndex - 1);
            if (_local5 < 0){
                return (_local4);
            };
            _local4.fromChild = serialSegments[curChildIndex].mediaElement;
            var _local6:SerialElementSegment = serialSegments[_local5];
            while (_local6 != null) {
                _local7 = (_local6.mediaElement.getTrait(MediaTraitType.SEEK) as SeekTrait);
                if (time >= _local6.relativeStart){
                    if (_local7 == null){
                        _local6 = serialSegments[(_local5 + 1)];
                        _local4.toChild = _local6.mediaElement;
                        _local4.toChildTime = 0;
                    } else {
                        _local4.toChild = _local6.mediaElement;
                        _local4.toChildTime = (time - _local6.relativeStart);
                    };
                    _local4.canSeekTo = true;
                    break;
                };
                --_local5;
                if (_local5 < 0){
                    break;
                };
                _local4.inBetweenChildren.push(_local6);
                _local6 = serialSegments[_local5];
            };
            return (_local4);
        }
        private function canSeekForward(time:Number, serialSegments:Vector.<SerialElementSegment>, curChildIndex:int):SerialSeekOperationInfo{
            var _local7:SeekTrait;
            var _local4:SerialSeekOperationInfo = new SerialSeekOperationInfo();
            _local4.seekForward = true;
            _local4.canSeekTo = false;
            var _local5:int = (curChildIndex + 1);
            if (_local5 >= serialSegments.length){
                return (_local4);
            };
            _local4.fromChild = serialSegments[curChildIndex].mediaElement;
            var _local6:SerialElementSegment = serialSegments[_local5];
            while (_local6 != null) {
                if (time <= _local6.relativeEnd){
                    _local7 = (_local6.mediaElement.getTrait(MediaTraitType.SEEK) as SeekTrait);
                    if (_local7 == null){
                        break;
                    };
                    _local4.toChild = _local6.mediaElement;
                    _local4.toChildTime = (time - _local6.relativeStart);
                    _local4.canSeekTo = true;
                    break;
                };
                ++_local5;
                if ((((_local5 >= serialSegments.length)) || (_local6.unseekable))){
                    break;
                };
                _local4.inBetweenChildren.push(_local6);
                _local6 = serialSegments[_local5];
            };
            return (_local4);
        }
        private function get traitOfCurrentChild():SeekTrait{
            return (((traitAggregator.listenedChild) ? (traitAggregator.listenedChild.getTrait(MediaTraitType.SEEK) as SeekTrait) : null));
        }
        private function getCompositePlayState():String{
            var _local1:PlayTrait = (this.owner.getTrait(MediaTraitType.PLAY) as PlayTrait);
            return (((_local1)==null) ? null : _local1.playState);
        }

    }
}//package org.osmf.elements.compositeClasses 
﻿package org.osmf.elements.compositeClasses {
    import org.osmf.media.*;
    import org.osmf.events.*;
    import org.osmf.traits.*;
    import org.osmf.elements.compositeClasses.*;

    class CompositeLoadTrait extends LoadTrait {

        private static const LOAD_ERROR_INT:int = 0;
        private static const UNLOADING_INT:int = 1;
        private static const LOADING_INT:int = 2;
        private static const UNINITIALIZED_INT:int = 3;
        private static const READY_INT:int = 4;

        private var traitAggregator:TraitAggregator;
        private var traitAggregationHelper:TraitAggregationHelper;
        private var mode:String;

        public function CompositeLoadTrait(traitAggregator:TraitAggregator, mode:String){
            super(null, null);
            this.traitAggregator = traitAggregator;
            this.mode = mode;
            this.traitAggregationHelper = new TraitAggregationHelper(traitType, traitAggregator, this.processAggregatedChild, this.processUnaggregatedChild);
        }
        override public function dispose():void{
            this.traitAggregationHelper.detach();
            this.traitAggregationHelper = null;
            super.dispose();
        }
        override public function get bytesLoaded():Number{
            var compositeBytesLoaded:* = NaN;
            var emptyUnitSeen:* = false;
            if (this.mode == CompositionMode.SERIAL){
                emptyUnitSeen = false;
                this.traitAggregator.forEachChildTrait(function (mediaTrait:MediaTraitBase):void{
                    var _local2:LoadTrait;
                    if (!emptyUnitSeen){
                        _local2 = LoadTrait(mediaTrait);
                        if (!isNaN(_local2.bytesLoaded)){
                            emptyUnitSeen = (_local2.bytesLoaded < _local2.bytesTotal);
                            if (isNaN(compositeBytesLoaded)){
                                compositeBytesLoaded = 0;
                            };
                            compositeBytesLoaded = (compositeBytesLoaded + _local2.bytesLoaded);
                        };
                    };
                }, MediaTraitType.LOAD);
            } else {
                this.traitAggregator.forEachChildTrait(function (mediaTrait:MediaTraitBase):void{
                    var _local2:LoadTrait = LoadTrait(mediaTrait);
                    if (!isNaN(_local2.bytesLoaded)){
                        if (isNaN(compositeBytesLoaded)){
                            compositeBytesLoaded = 0;
                        };
                        compositeBytesLoaded = (compositeBytesLoaded + _local2.bytesLoaded);
                    };
                }, MediaTraitType.LOAD);
            };
            return (compositeBytesLoaded);
        }
        override public function get resource():MediaResourceBase{
            var _local1:MediaResourceBase;
            if (this.mode == CompositionMode.SERIAL){
                if (this.traitAggregator.listenedChild != null){
                    _local1 = this.traitAggregator.listenedChild.resource;
                };
            };
            return (_local1);
        }
        override public function load():void{
            var currentLoadTrait:* = null;
            if (this.mode == CompositionMode.PARALLEL){
                this.traitAggregator.forEachChildTrait(function (mediaTrait:MediaTraitBase):void{
                    var _local2:LoadTrait = LoadTrait(mediaTrait);
                    if (((!((_local2.loadState == LoadState.LOADING))) && (!((_local2.loadState == LoadState.READY))))){
                        _local2.load();
                    };
                }, MediaTraitType.LOAD);
            } else {
                currentLoadTrait = this.traitOfCurrentChild;
                if (((((!((currentLoadTrait == null))) && (!((currentLoadTrait.loadState == LoadState.LOADING))))) && (!((currentLoadTrait.loadState == LoadState.READY))))){
                    currentLoadTrait.load();
                };
            };
        }
        override public function unload():void{
            var currentLoadTrait:* = null;
            if (this.mode == CompositionMode.PARALLEL){
                this.traitAggregator.forEachChildTrait(function (mediaTrait:MediaTraitBase):void{
                    var _local2:LoadTrait = LoadTrait(mediaTrait);
                    if ((((_local2.loadState == LoadState.LOADING)) || ((_local2.loadState == LoadState.READY)))){
                        _local2.unload();
                    };
                }, MediaTraitType.LOAD);
            } else {
                currentLoadTrait = this.traitOfCurrentChild;
                if (((((!((currentLoadTrait == null))) && ((currentLoadTrait.loadState == LoadState.LOADING)))) || ((currentLoadTrait.loadState == LoadState.READY)))){
                    currentLoadTrait.unload();
                };
            };
        }
        private function processAggregatedChild(child:MediaTraitBase):void{
            child.addEventListener(LoadEvent.LOAD_STATE_CHANGE, this.onLoadStateChange, false, 0, true);
            child.addEventListener(LoadEvent.BYTES_TOTAL_CHANGE, this.onBytesTotalChange, false, 0, true);
            if (this.mode == CompositionMode.PARALLEL){
                if (this.traitAggregator.getNumTraits(MediaTraitType.LOAD) == 1){
                    this.syncToLoadState((child as LoadTrait).loadState);
                } else {
                    this.syncToLoadState(loadState);
                };
            } else {
                if (child == this.traitOfCurrentChild){
                    this.syncToLoadState((child as LoadTrait).loadState);
                };
            };
            this.updateBytesTotal();
        }
        private function processUnaggregatedChild(child:MediaTraitBase):void{
            child.removeEventListener(LoadEvent.LOAD_STATE_CHANGE, this.onLoadStateChange);
            child.removeEventListener(LoadEvent.BYTES_TOTAL_CHANGE, this.onBytesTotalChange);
            this.updateBytesTotal();
        }
        private function onLoadStateChange(event:LoadEvent):void{
            if ((((this.mode == CompositionMode.PARALLEL)) || ((event.target == this.traitOfCurrentChild)))){
                this.syncToLoadState(event.loadState);
            };
        }
        private function syncToLoadState(newLoadState:String):void{
            if ((((newLoadState == LoadState.LOADING)) || ((newLoadState == LoadState.READY)))){
                this.load();
            } else {
                if ((((newLoadState == LoadState.UNINITIALIZED)) || ((newLoadState == LoadState.UNLOADING)))){
                    this.unload();
                };
            };
            this.updateLoadState();
        }
        private function onBytesTotalChange(event:LoadEvent):void{
            this.updateBytesTotal();
        }
        private function updateLoadState():void{
            var newLoadState:* = null;
            var loadStateInt:* = 0;
            var currentLoadTrait:* = null;
            if (this.mode == CompositionMode.PARALLEL){
                loadStateInt = int.MAX_VALUE;
                this.traitAggregator.forEachChildTrait(function (mediaTrait:MediaTraitBase):void{
                    loadStateInt = Math.min(loadStateInt, getIntegerForLoadState(LoadTrait(mediaTrait).loadState));
                }, MediaTraitType.LOAD);
                newLoadState = ((this.getLoadStateForInteger(loadStateInt)) || (LoadState.UNINITIALIZED));
            } else {
                currentLoadTrait = this.traitOfCurrentChild;
                newLoadState = ((currentLoadTrait) ? currentLoadTrait.loadState : LoadState.UNINITIALIZED);
            };
            setLoadState(newLoadState);
        }
        private function updateBytesTotal():void{
            var compositeBytesTotal:* = NaN;
            this.traitAggregator.forEachChildTrait(function (mediaTrait:MediaTraitBase):void{
                var _local2:LoadTrait = LoadTrait(mediaTrait);
                if (!isNaN(_local2.bytesTotal)){
                    if (isNaN(compositeBytesTotal)){
                        compositeBytesTotal = 0;
                    };
                    compositeBytesTotal = (compositeBytesTotal + _local2.bytesTotal);
                };
            }, MediaTraitType.LOAD);
            setBytesTotal(compositeBytesTotal);
        }
        private function getIntegerForLoadState(loadState:String):int{
            if (loadState == LoadState.UNINITIALIZED){
                return (UNINITIALIZED_INT);
            };
            if (loadState == LoadState.LOADING){
                return (LOADING_INT);
            };
            if (loadState == LoadState.UNLOADING){
                return (UNLOADING_INT);
            };
            if (loadState == LoadState.READY){
                return (READY_INT);
            };
            return (LOAD_ERROR_INT);
        }
        private function getLoadStateForInteger(i:int):String{
            if (i == UNINITIALIZED_INT){
                return (LoadState.UNINITIALIZED);
            };
            if (i == LOADING_INT){
                return (LoadState.LOADING);
            };
            if (i == UNLOADING_INT){
                return (LoadState.UNLOADING);
            };
            if (i == READY_INT){
                return (LoadState.READY);
            };
            if (i == LOAD_ERROR_INT){
                return (LoadState.LOAD_ERROR);
            };
            return (null);
        }
        private function get traitOfCurrentChild():LoadTrait{
            return (((this.traitAggregator.listenedChild) ? (this.traitAggregator.listenedChild.getTrait(MediaTraitType.LOAD) as LoadTrait) : null));
        }

    }
}//package org.osmf.elements.compositeClasses 
﻿package org.osmf.elements.compositeClasses {
    import org.osmf.events.*;
    import org.osmf.traits.*;
    import org.osmf.elements.compositeClasses.*;

    class CompositeAudioTrait extends AudioTrait implements IReusable {

        private var traitAggregator:TraitAggregator;
        private var traitAggregationHelper:TraitAggregationHelper;

        public function CompositeAudioTrait(traitAggregator:TraitAggregator){
            this.traitAggregator = traitAggregator;
            this.traitAggregationHelper = new TraitAggregationHelper(traitType, traitAggregator, this.processAggregatedChild, this.processUnaggregatedChild);
        }
        public function attach():void{
            this.traitAggregationHelper.attach();
        }
        public function detach():void{
            this.traitAggregationHelper.detach();
        }
        override protected function volumeChangeStart(newVolume:Number):void{
            this.applyVolumeToChildren(newVolume);
        }
        override protected function mutedChangeStart(newMuted:Boolean):void{
            this.applyMutedToChildren(newMuted);
        }
        override protected function panChangeStart(newPan:Number):void{
            this.applyPanToChildren(newPan);
        }
        private function processAggregatedChild(child:MediaTraitBase):void{
            var _local2:AudioTrait;
            child.addEventListener(AudioEvent.MUTED_CHANGE, this.onMutedChanged, false, 0, true);
            child.addEventListener(AudioEvent.PAN_CHANGE, this.onPanChanged, false, 0, true);
            child.addEventListener(AudioEvent.VOLUME_CHANGE, this.onVolumeChanged, false, 0, true);
            _local2 = (child as AudioTrait);
            if (this.traitAggregator.getNumTraits(MediaTraitType.AUDIO) == 1){
                pan = _local2.pan;
                muted = _local2.muted;
                volume = _local2.volume;
            } else {
                _local2.pan = pan;
                _local2.muted = muted;
                _local2.volume = volume;
            };
        }
        private function processUnaggregatedChild(child:MediaTraitBase):void{
            child.removeEventListener(AudioEvent.MUTED_CHANGE, this.onMutedChanged);
            child.removeEventListener(AudioEvent.PAN_CHANGE, this.onPanChanged);
            child.removeEventListener(AudioEvent.VOLUME_CHANGE, this.onVolumeChanged);
        }
        private function onVolumeChanged(event:AudioEvent):void{
            volume = (event.target as AudioTrait).volume;
        }
        private function onMutedChanged(event:AudioEvent):void{
            muted = (event.target as AudioTrait).muted;
        }
        private function onPanChanged(event:AudioEvent):void{
            pan = (event.target as AudioTrait).pan;
        }
        private function applyVolumeToChildren(newVolume:Number):void{
            var newVolume:* = newVolume;
            this.traitAggregator.forEachChildTrait(function (mediaTrait:MediaTraitBase):void{
                AudioTrait(mediaTrait).volume = newVolume;
            }, MediaTraitType.AUDIO);
        }
        private function applyMutedToChildren(newMuted:Boolean):void{
            var newMuted:* = newMuted;
            this.traitAggregator.forEachChildTrait(function (mediaTrait:MediaTraitBase):void{
                AudioTrait(mediaTrait).muted = newMuted;
            }, MediaTraitType.AUDIO);
        }
        private function applyPanToChildren(newPan:Number):void{
            var newPan:* = newPan;
            this.traitAggregator.forEachChildTrait(function (mediaTrait:MediaTraitBase):void{
                AudioTrait(mediaTrait).pan = newPan;
            }, MediaTraitType.AUDIO);
        }

    }
}//package org.osmf.elements.compositeClasses 
﻿package org.osmf.elements.compositeClasses {
    import org.osmf.media.*;
    import org.osmf.events.*;
    import org.osmf.traits.*;
    import org.osmf.utils.*;
    import flash.errors.*;
    import org.osmf.elements.compositeClasses.*;

    class CompositeSeekTrait extends SeekTrait implements IReusable {

        private var mode:String;
        private var _traitAggregator:TraitAggregator;
        private var traitAggregationHelper:TraitAggregationHelper;

        public function CompositeSeekTrait(traitAggregator:TraitAggregator, mode:String, owner:MediaElement){
            super((owner.getTrait(MediaTraitType.TIME) as TimeTrait));
            owner.addEventListener(MediaElementEvent.TRAIT_ADD, this.onTraitAdd);
            owner.addEventListener(MediaElementEvent.TRAIT_REMOVE, this.onTraitRemove);
            this._traitAggregator = traitAggregator;
            this.mode = mode;
            this.traitAggregationHelper = new TraitAggregationHelper(traitType, traitAggregator, this.processAggregatedChild, this.processUnaggregatedChild);
        }
        public function attach():void{
            this.traitAggregationHelper.attach();
        }
        public function detach():void{
            this.traitAggregationHelper.detach();
        }
        override protected function seekingChangeEnd(time:Number):void{
            var _local2:CompositeSeekOperationInfo;
            super.seekingChangeEnd(time);
            if (seeking){
                _local2 = this.prepareSeekOperationInfo(time);
                if (_local2.canSeekTo){
                    this.doSeek(_local2);
                };
            };
        }
        override public function canSeekTo(time:Number):Boolean{
            return (((super.canSeekTo(time)) && (this.prepareSeekOperationInfo(time).canSeekTo)));
        }
        private function onTraitAdd(event:MediaElementEvent):void{
            if (event.traitType == MediaTraitType.TIME){
                super.timeTrait = (MediaElement(event.target).getTrait(MediaTraitType.TIME) as TimeTrait);
            };
        }
        private function onTraitRemove(event:MediaElementEvent):void{
            if (event.traitType == MediaTraitType.TIME){
                super.timeTrait = null;
            };
        }
        private function processAggregatedChild(child:MediaTraitBase):void{
            child.addEventListener(SeekEvent.SEEKING_CHANGE, this.onSeekingChanged, false, 0, true);
        }
        private function processUnaggregatedChild(child:MediaTraitBase):void{
            child.removeEventListener(SeekEvent.SEEKING_CHANGE, this.onSeekingChanged);
        }
        protected function onSeekingChanged(event:SeekEvent):void{
            throw (new IllegalOperationError(OSMFStrings.getString(OSMFStrings.FUNCTION_MUST_BE_OVERRIDDEN)));
        }
        protected function doSeek(seekOp:CompositeSeekOperationInfo):void{
            throw (new IllegalOperationError(OSMFStrings.getString(OSMFStrings.FUNCTION_MUST_BE_OVERRIDDEN)));
        }
        protected function prepareSeekOperationInfo(time:Number):CompositeSeekOperationInfo{
            throw (new IllegalOperationError(OSMFStrings.getString(OSMFStrings.FUNCTION_MUST_BE_OVERRIDDEN)));
        }
        protected function checkSeeking():Boolean{
            throw (new IllegalOperationError(OSMFStrings.getString(OSMFStrings.FUNCTION_MUST_BE_OVERRIDDEN)));
        }
        final protected function get traitAggregator():TraitAggregator{
            return (this._traitAggregator);
        }

    }
}//package org.osmf.elements.compositeClasses 
﻿package org.osmf.elements.compositeClasses {
    import org.osmf.media.*;
    import org.osmf.events.*;
    import org.osmf.traits.*;
    import org.osmf.elements.*;
    import __AS3__.vec.*;
    import org.osmf.elements.compositeClasses.*;

    class CompositeTimeTrait extends TimeTrait implements IReusable {

        private var traitAggregator:TraitAggregator;
        private var traitAggregationHelper:TraitAggregationHelper;
        private var mode:String;
        private var owner:MediaElement;

        public function CompositeTimeTrait(traitAggregator:TraitAggregator, mode:String, owner:MediaElement){
            this.mode = mode;
            this.traitAggregator = traitAggregator;
            this.owner = owner;
            this.traitAggregationHelper = new TraitAggregationHelper(traitType, traitAggregator, this.processAggregatedChild, this.processUnaggregatedChild);
        }
        public function attach():void{
            this.traitAggregationHelper.attach();
        }
        public function detach():void{
            this.traitAggregationHelper.detach();
        }
        override public function dispose():void{
        }
        override public function get currentTime():Number{
            this.updateCurrentTime();
            return (super.currentTime);
        }
        override protected function signalComplete():void{
            if ((((((this.mode == CompositionMode.PARALLEL)) && (this.isParallelComplete()))) || ((((this.mode == CompositionMode.SERIAL)) && (this.isSerialComplete()))))){
                super.signalComplete();
            };
        }
        private function isParallelComplete():Boolean{
            var _local3:TimeTrait;
            var _local4:CompositeTimeTrait;
            var _local5:Number;
            var _local1:Vector.<String> = new Vector.<String>();
            var _local2:int;
            while (_local2 < this.traitAggregator.numChildren) {
                _local3 = (this.traitAggregator.getChildAt(_local2).getTrait(MediaTraitType.TIME) as TimeTrait);
                _local4 = (_local3 as CompositeTimeTrait);
                if (_local4){
                    if (_local4.mode == CompositionMode.PARALLEL){
                        if (!_local4.isParallelComplete()){
                            return (false);
                        };
                    } else {
                        if (!_local4.isSerialComplete()){
                            return (false);
                        };
                    };
                } else {
                    if (_local3){
                        _local1.push(((_local3.currentTime + " of ") + _local3.duration));
                        _local5 = (_local3.duration * _local3.currentTime);
                        if (((isNaN(_local5)) || ((_local5 == 0)))){
                            return (false);
                        };
                        if (_local3.duration > _local3.currentTime){
                            return (false);
                        };
                    };
                };
                _local2++;
            };
            return (true);
        }
        private function isSerialComplete():Boolean{
            var _local1:TimeTrait = (this.traitAggregator.listenedChild.getTrait(MediaTraitType.TIME) as TimeTrait);
            var _local2:Boolean = (((((this.traitAggregator.getChildIndex(this.traitAggregator.listenedChild) == (this.traitAggregator.numChildren - 1))) && ((_local1.duration > 0)))) && (!(isNaN(_local1.duration))));
            if (((((_local2) && ((_local1 is CompositeTimeTrait)))) && ((this.traitAggregator.listenedChild is SerialElement)))){
                _local2 = CompositeTimeTrait(_local1).isSerialComplete();
            };
            return (_local2);
        }
        private function processAggregatedChild(child:MediaTraitBase):void{
            child.addEventListener(TimeEvent.DURATION_CHANGE, this.onDurationChanged, false, 0, true);
            child.addEventListener(TimeEvent.COMPLETE, this.onComplete, false, 0, true);
            this.updateDuration();
            this.updateCurrentTime();
        }
        private function processUnaggregatedChild(child:MediaTraitBase):void{
            child.removeEventListener(TimeEvent.DURATION_CHANGE, this.onDurationChanged);
            child.removeEventListener(TimeEvent.COMPLETE, this.onComplete);
            this.updateDuration();
            this.updateCurrentTime();
        }
        private function onDurationChanged(event:TimeEvent):void{
            this.updateDuration();
        }
        private function onComplete(event:TimeEvent):void{
            var timeTrait:* = null;
            var allHaveReachedDuration:* = false;
            var playTrait:* = null;
            var event:* = event;
            timeTrait = (event.target as TimeTrait);
            if (this.mode == CompositionMode.PARALLEL){
                allHaveReachedDuration = true;
                this.traitAggregator.forEachChildTrait(function (mediaTrait:MediaTraitBase):void{
                    var _local2:TimeTrait = TimeTrait(mediaTrait);
                    if (((!((_local2 == timeTrait))) && ((_local2.currentTime < _local2.duration)))){
                        allHaveReachedDuration = false;
                    };
                }, MediaTraitType.TIME);
                if (allHaveReachedDuration){
                    if (super.currentTime != this.duration){
                        this.updateCurrentTime();
                    } else {
                        dispatchEvent(new TimeEvent(TimeEvent.COMPLETE));
                    };
                };
            } else {
                if (timeTrait == this.traitOfCurrentChild){
                    playTrait = (this.owner.getTrait(MediaTraitType.PLAY) as PlayTrait);
                    if (playTrait != null){
                        SerialElementTransitionManager.playNextPlayableChild(this.traitAggregator, this.checkDispatchCompleteEvent);
                    } else {
                        this.checkDispatchCompleteEvent();
                    };
                };
            };
        }
        private function checkDispatchCompleteEvent():void{
            var _local1:MediaElement = this.traitAggregator.getNextChildWithTrait(this.traitAggregator.listenedChild, MediaTraitType.TIME);
            if (_local1 == null){
                super.signalComplete();
            };
        }
        private function updateDuration():void{
            var newDuration:* = NaN;
            newDuration = 0;
            var hasChildWithDuration:* = false;
            this.traitAggregator.forEachChildTrait(function (mediaTrait:MediaTraitBase):void{
                var _local2:Number = TimeTrait(mediaTrait).duration;
                if (!isNaN(_local2)){
                    hasChildWithDuration = true;
                    if (mode == CompositionMode.PARALLEL){
                        newDuration = Math.max(newDuration, _local2);
                    } else {
                        newDuration = (newDuration + _local2);
                    };
                };
            }, MediaTraitType.TIME);
            setDuration(((hasChildWithDuration) ? newDuration : NaN));
        }
        private function updateCurrentTime():void{
            var newCurrentTime:* = NaN;
            var serialCurrentTimeCalculated:* = false;
            newCurrentTime = 0;
            var hasChildWithCurrentTime:* = false;
            serialCurrentTimeCalculated = false;
            this.traitAggregator.forEachChildTrait(function (mediaTrait:MediaTraitBase):void{
                var _local3:Number;
                var _local2:Number = TimeTrait(mediaTrait).currentTime;
                if (isNaN(_local2)){
                    _local2 = 0;
                } else {
                    hasChildWithCurrentTime = true;
                };
                if (mode == CompositionMode.PARALLEL){
                    newCurrentTime = Math.max(newCurrentTime, _local2);
                } else {
                    if (!serialCurrentTimeCalculated){
                        if (mediaTrait == traitOfCurrentChild){
                            newCurrentTime = (newCurrentTime + _local2);
                            serialCurrentTimeCalculated = true;
                        } else {
                            _local3 = TimeTrait(mediaTrait).duration;
                            if (!isNaN(_local3)){
                                newCurrentTime = (newCurrentTime + _local3);
                            };
                        };
                    };
                };
            }, MediaTraitType.TIME);
            setCurrentTime(((hasChildWithCurrentTime) ? newCurrentTime : NaN));
        }
        private function get traitOfCurrentChild():TimeTrait{
            return (((this.traitAggregator.listenedChild) ? (this.traitAggregator.listenedChild.getTrait(MediaTraitType.TIME) as TimeTrait) : null));
        }

    }
}//package org.osmf.elements.compositeClasses 
﻿package org.osmf.elements.compositeClasses {
    import org.osmf.media.*;
    import org.osmf.containers.*;
    import org.osmf.events.*;
    import org.osmf.layout.*;
    import org.osmf.traits.*;
    import org.osmf.elements.compositeClasses.*;

    class SerialDisplayObjectTrait extends CompositeDisplayObjectTrait implements IReusable {

        private var traitAggregationHelper:TraitAggregationHelper;
        private var layoutTarget:MediaElementLayoutTarget;

        public function SerialDisplayObjectTrait(traitAggregator:TraitAggregator, owner:MediaElement){
            super(traitAggregator, owner);
            this.traitAggregationHelper = new TraitAggregationHelper(traitType, traitAggregator, this.processAggregatedChild, this.processUnaggregatedChild);
            traitAggregator.addEventListener(TraitAggregatorEvent.LISTENED_CHILD_CHANGE, this.onListenedChildChange);
            this.setupLayoutTarget(traitAggregator.listenedChild);
        }
        public function attach():void{
            this.traitAggregationHelper.attach();
            this.addToRenderer();
        }
        public function detach():void{
            this.traitAggregationHelper.detach();
            this.removeFromRenderer();
        }
        private function onListenedChildChange(event:TraitAggregatorEvent):void{
            this.setupLayoutTarget(event.newListenedChild);
        }
        private function onTargetContainerChange(event:ContainerChangeEvent):void{
            var _local2:IMediaContainer = event.oldContainer;
            var _local3:IMediaContainer = event.newContainer;
            var _local4:MediaElement = this.layoutTarget.mediaElement;
            var _local5:Boolean = layoutRenderer.hasTarget(this.layoutTarget);
            if ((((_local3 == null)) || ((_local3 == owner.container)))){
                if (_local5 == false){
                    layoutRenderer.addTarget(this.layoutTarget);
                };
            } else {
                if (_local5){
                    layoutRenderer.removeTarget(this.layoutTarget);
                };
            };
        }
        private function setupLayoutTarget(listenedChild:MediaElement):void{
            if (this.layoutTarget != null){
                this.layoutTarget.mediaElement.removeEventListener(ContainerChangeEvent.CONTAINER_CHANGE, this.onTargetContainerChange);
                this.removeFromRenderer();
            };
            if (listenedChild != null){
                this.layoutTarget = MediaElementLayoutTarget.getInstance(listenedChild);
                listenedChild.addEventListener(ContainerChangeEvent.CONTAINER_CHANGE, this.onTargetContainerChange);
                this.onTargetContainerChange(new ContainerChangeEvent(ContainerChangeEvent.CONTAINER_CHANGE, false, false, null, this.layoutTarget.mediaElement.container));
            };
        }
        private function addToRenderer():void{
            if (traitAggregator.listenedChild != null){
                this.layoutTarget = MediaElementLayoutTarget.getInstance(traitAggregator.listenedChild);
                if (!layoutRenderer.hasTarget(this.layoutTarget)){
                    layoutRenderer.addTarget(this.layoutTarget);
                    childrenContainer.measure(true);
                };
            };
        }
        private function removeFromRenderer():void{
            if (traitAggregator.listenedChild != null){
                this.layoutTarget = MediaElementLayoutTarget.getInstance(traitAggregator.listenedChild);
                if (layoutRenderer.hasTarget(this.layoutTarget)){
                    layoutRenderer.removeTarget(this.layoutTarget);
                };
            };
        }
        private function processAggregatedChild(child:MediaTraitBase):void{
        }
        private function processUnaggregatedChild(child:MediaTraitBase):void{
        }

    }
}//package org.osmf.elements.compositeClasses 
﻿package org.osmf.elements.compositeClasses {
    import org.osmf.events.*;
    import org.osmf.traits.*;
    import org.osmf.utils.*;
    import __AS3__.vec.*;
    import org.osmf.elements.compositeClasses.*;

    class ParallelDynamicStreamTrait extends DynamicStreamTrait {

        private var traitAggregator:TraitAggregator;
        private var traitAggregationHelper:TraitAggregationHelper;
        private var bitrates:Vector.<Number>;
        private var autoSwitchIsChanging:Boolean = false;
        private var numChildrenSwitching:int = 0;

        public function ParallelDynamicStreamTrait(traitAggregator:TraitAggregator){
            this.bitrates = new Vector.<Number>();
            super();
            this.traitAggregator = traitAggregator;
            this.traitAggregationHelper = new TraitAggregationHelper(traitType, traitAggregator, this.processAggregatedChild, this.processUnaggregatedChild);
        }
        override public function getBitrateForIndex(index:int):Number{
            if ((((index >= this.bitrates.length)) || ((index < 0)))){
                throw (new RangeError(OSMFStrings.getString(OSMFStrings.STREAMSWITCH_INVALID_INDEX)));
            };
            return (this.bitrates[index]);
        }
        override protected function autoSwitchChangeStart(value:Boolean):void{
            var value:* = value;
            if (this.autoSwitchIsChanging == false){
                this.autoSwitchIsChanging = true;
                this.traitAggregator.forEachChildTrait(function (mediaTrait:DynamicStreamTrait):void{
                    mediaTrait.autoSwitch = value;
                }, MediaTraitType.DYNAMIC_STREAM);
                this.autoSwitchIsChanging = false;
            };
        }
        override protected function autoSwitchChangeEnd():void{
            if (this.autoSwitchIsChanging == false){
                super.autoSwitchChangeEnd();
            };
        }
        override protected function switchingChangeStart(newSwitching:Boolean, index:int):void{
            var newSwitching:* = newSwitching;
            var index:* = index;
            if (newSwitching){
                this.traitAggregator.forEachChildTrait(function (mediaTrait:DynamicStreamTrait):void{
                    var _local3:Number;
                    var _local5:Number;
                    var _local2:Number = bitrates[index];
                    _local3 = 0;
                    while (_local3 <= mediaTrait.maxAllowedIndex) {
                        _local5 = mediaTrait.getBitrateForIndex(_local3);
                        if (_local5 == _local2){
                            break;
                        };
                        if (_local5 > _local2){
                            _local3--;
                            break;
                        };
                        _local3++;
                    };
                    var _local4:int = Math.max(0, Math.min(_local3, mediaTrait.maxAllowedIndex));
                    if (mediaTrait.currentIndex != _local4){
                        numChildrenSwitching++;
                        mediaTrait.switchTo(_local4);
                    };
                }, MediaTraitType.DYNAMIC_STREAM);
                setCurrentIndex(index);
            };
        }
        override protected function switchingChangeEnd(index:int):void{
            super.switchingChangeEnd(index);
            if ((((switching == true)) && ((this.numChildrenSwitching == 0)))){
                setSwitching(false, index);
            };
        }
        private function processAggregatedChild(child:MediaTraitBase):void{
            var _local2:int;
            var _local3:DynamicStreamTrait = DynamicStreamTrait(child);
            if (this.traitAggregator.getNumTraits(MediaTraitType.DYNAMIC_STREAM) == 1){
                autoSwitch = _local3.autoSwitch;
            } else {
                _local3.autoSwitch = autoSwitch;
            };
            this.mergeChildRates(_local3);
            child.addEventListener(DynamicStreamEvent.NUM_DYNAMIC_STREAMS_CHANGE, this.recomputeIndices);
            child.addEventListener(DynamicStreamEvent.SWITCHING_CHANGE, this.onSwitchingChange);
            child.addEventListener(DynamicStreamEvent.AUTO_SWITCH_CHANGE, this.onAutoSwitchChange);
            setNumDynamicStreams(this.bitrates.length);
            maxAllowedIndex = (this.bitrates.length - 1);
        }
        private function processUnaggregatedChild(child:MediaTraitBase):void{
            child.removeEventListener(DynamicStreamEvent.NUM_DYNAMIC_STREAMS_CHANGE, this.recomputeIndices);
            child.removeEventListener(DynamicStreamEvent.SWITCHING_CHANGE, this.onSwitchingChange);
            child.removeEventListener(DynamicStreamEvent.AUTO_SWITCH_CHANGE, this.onAutoSwitchChange);
            this.recomputeIndices();
        }
        private function rebuildBitRateTable():Boolean{
            var oldBitrates:* = this.bitrates;
            this.bitrates = new Vector.<Number>();
            this.traitAggregator.forEachChildTrait(function (mediaTrait:DynamicStreamTrait):void{
                mergeChildRates(mediaTrait);
            }, MediaTraitType.DYNAMIC_STREAM);
            if (this.bitrates.length > 0){
                setNumDynamicStreams(this.bitrates.length);
                maxAllowedIndex = (this.bitrates.length - 1);
            };
            return (!((oldBitrates.length == this.bitrates.length)));
        }
        private function mergeChildRates(child:DynamicStreamTrait):Boolean{
            var _local5:Number;
            var _local2:int;
            var _local3:Boolean;
            var _local4:int;
            while (_local4 <= child.maxAllowedIndex) {
                _local5 = child.getBitrateForIndex(_local4);
                if (this.bitrates.length <= _local2){
                    _local3 = true;
                    this.bitrates.push(_local5);
                    _local2++;
                } else {
                    if (this.bitrates[_local2] == _local5){
                    } else {
                        if (this.bitrates[_local2] < _local5){
                            _local2++;
                            _local4--;
                        } else {
                            _local3 = true;
                            this.bitrates.splice(_local2, 0, _local5);
                        };
                    };
                };
                _local4++;
            };
            return (_local3);
        }
        private function recomputeIndices(event:DynamicStreamEvent=null):void{
            var highestBitRate:* = NaN;
            var newBIndex:* = NaN;
            var event = event;
            var oldBitRate:* = this.bitrates[currentIndex];
            if (((this.rebuildBitRateTable()) && (this.bitrates.length))){
                if (!autoSwitch){
                    highestBitRate = 0;
                    this.traitAggregator.forEachChildTrait(function (mediaTrait:DynamicStreamTrait):void{
                        highestBitRate = Math.max(mediaTrait.getBitrateForIndex(mediaTrait.currentIndex), highestBitRate);
                    }, MediaTraitType.DYNAMIC_STREAM);
                    newBIndex = 0;
                    while (highestBitRate != this.bitrates[newBIndex]) {
                        newBIndex = (newBIndex + 1);
                    };
                    setCurrentIndex(newBIndex);
                };
            };
        }
        private function onSwitchingChange(event:DynamicStreamEvent):void{
            if ((((event.switching == false)) && ((this.numChildrenSwitching > 0)))){
                this.numChildrenSwitching--;
                if ((((this.numChildrenSwitching == 0)) && ((switching == true)))){
                    setSwitching(false, currentIndex);
                };
            };
        }
        private function onAutoSwitchChange(event:DynamicStreamEvent):void{
            autoSwitch = event.autoSwitch;
        }

    }
}//package org.osmf.elements.compositeClasses 
﻿package org.osmf.elements.compositeClasses {
    import org.osmf.media.*;
    import org.osmf.traits.*;
    import org.osmf.utils.*;

    public class CompositeMediaTraitFactory {

        public function createTrait(traitType:String, traitAggregator:TraitAggregator, mode:String, owner:MediaElement):MediaTraitBase{
            var _local5:MediaTraitBase;
            switch (traitType){
                case MediaTraitType.AUDIO:
                    _local5 = new CompositeAudioTrait(traitAggregator);
                    break;
                case MediaTraitType.BUFFER:
                    _local5 = new CompositeBufferTrait(traitAggregator, mode);
                    break;
                case MediaTraitType.DYNAMIC_STREAM:
                    _local5 = ((mode)==CompositionMode.PARALLEL) ? new ParallelDynamicStreamTrait(traitAggregator) : new SerialDynamicStreamTrait(traitAggregator);
                    break;
                case MediaTraitType.LOAD:
                    _local5 = new CompositeLoadTrait(traitAggregator, mode);
                    break;
                case MediaTraitType.PLAY:
                    _local5 = new CompositePlayTrait(traitAggregator, mode);
                    break;
                case MediaTraitType.SEEK:
                    _local5 = ((mode)==CompositionMode.PARALLEL) ? new ParallelSeekTrait(traitAggregator, owner) : new SerialSeekTrait(traitAggregator, owner);
                    break;
                case MediaTraitType.TIME:
                    _local5 = new CompositeTimeTrait(traitAggregator, mode, owner);
                    break;
                case MediaTraitType.DISPLAY_OBJECT:
                    _local5 = ((mode)==CompositionMode.PARALLEL) ? new ParallelDisplayObjectTrait(traitAggregator, owner) : new SerialDisplayObjectTrait(traitAggregator, owner);
                    break;
                case MediaTraitType.DRM:
                    _local5 = new CompositeDRMTrait(traitAggregator, owner, mode);
                    break;
                case MediaTraitType.DVR:
                    _local5 = new CompositeDVRTrait(traitAggregator, owner, mode);
                    break;
                    throw (new Error(OSMFStrings.getString(OSMFStrings.COMPOSITE_TRAIT_NOT_FOUND)));
            };
            return (_local5);
        }

    }
}//package org.osmf.elements.compositeClasses 
﻿package org.osmf.elements.compositeClasses {

    class CompositeSeekOperationInfo {

        private var _canSeekTo:Boolean;

        public function CompositeSeekOperationInfo(canSeekTo:Boolean=true){
            this._canSeekTo = canSeekTo;
        }
        public function get canSeekTo():Boolean{
            return (this._canSeekTo);
        }
        public function set canSeekTo(value:Boolean):void{
            this._canSeekTo = value;
        }

    }
}//package org.osmf.elements.compositeClasses 
﻿package org.osmf.elements.compositeClasses {
    import org.osmf.media.*;
    import org.osmf.events.*;
    import org.osmf.traits.*;
    import org.osmf.elements.compositeClasses.*;

    class CompositeDRMTrait extends DRMTrait implements IReusable {

        private static var drmLevels:Object;

        private var mode:String;
        private var calculatedDrmState:String = "";
        private var traitAggregationHelper:TraitAggregationHelper;
        private var owner:MediaElement;
        private var traitAggregator:TraitAggregator;

        public function CompositeDRMTrait(traitAggregator:TraitAggregator, owner:MediaElement, mode:String){
            if (drmLevels == null){
                drmLevels = {};
                drmLevels[DRMState.DRM_SYSTEM_UPDATING] = 0;
                drmLevels[DRMState.AUTHENTICATION_ERROR] = 1;
                drmLevels[DRMState.AUTHENTICATION_NEEDED] = 2;
                drmLevels[DRMState.UNINITIALIZED] = 3;
                drmLevels[DRMState.AUTHENTICATING] = 4;
                drmLevels[DRMState.AUTHENTICATION_COMPLETE] = 5;
                drmLevels[""] = 6;
            };
            this.mode = mode;
            this.traitAggregator = traitAggregator;
            this.owner = owner;
            this.traitAggregationHelper = new TraitAggregationHelper(traitType, traitAggregator, this.processAggregatedChild, this.processUnaggregatedChild);
            if (mode == CompositionMode.SERIAL){
                traitAggregator.addEventListener(TraitAggregatorEvent.LISTENED_CHILD_CHANGE, this.listenedChildChange);
            };
        }
        public function attach():void{
            if (this.traitAggregationHelper){
                this.traitAggregationHelper.attach();
            };
        }
        public function detach():void{
            if (this.traitAggregationHelper){
                this.traitAggregationHelper.detach();
            };
        }
        override public function get endDate():Date{
            var end:* = null;
            var listenedTrait:* = null;
            end = null;
            if (this.mode == CompositionMode.SERIAL){
                listenedTrait = ((this.traitAggregator.listenedChild) ? (this.traitAggregator.listenedChild.getTrait(MediaTraitType.DRM) as DRMTrait) : null);
                end = ((listenedTrait) ? listenedTrait.endDate : null);
            } else {
                this.traitAggregator.forEachChildTrait(function (trait:DRMTrait):void{
                    if (((end) && (trait.endDate))){
                        end = ((end.time)<trait.endDate.time) ? end : trait.endDate;
                    } else {
                        if ((((end == null)) && (!((trait.endDate == null))))){
                            end = trait.endDate;
                        };
                    };
                }, MediaTraitType.DRM);
            };
            return (end);
        }
        override public function get startDate():Date{
            var start:* = null;
            var listenedTrait:* = null;
            start = null;
            if (this.mode == CompositionMode.SERIAL){
                listenedTrait = ((this.traitAggregator.listenedChild) ? (this.traitAggregator.listenedChild.getTrait(MediaTraitType.DRM) as DRMTrait) : null);
                start = ((listenedTrait) ? listenedTrait.startDate : null);
            } else {
                this.traitAggregator.forEachChildTrait(function (trait:DRMTrait):void{
                    if (((start) && (trait.startDate))){
                        start = ((start.time)>trait.startDate.time) ? start : trait.startDate;
                    } else {
                        if ((((start == null)) && (!((trait.startDate == null))))){
                            start = trait.startDate;
                        };
                    };
                }, MediaTraitType.DRM);
            };
            return (start);
        }
        override public function get period():Number{
            var newPeriod:* = NaN;
            var listenedTrait:* = null;
            newPeriod = NaN;
            if (this.mode == CompositionMode.SERIAL){
                listenedTrait = ((this.traitAggregator.listenedChild) ? (this.traitAggregator.listenedChild.getTrait(MediaTraitType.DRM) as DRMTrait) : null);
                newPeriod = ((listenedTrait) ? listenedTrait.period : NaN);
            } else {
                this.traitAggregator.forEachChildTrait(function (trait:DRMTrait):void{
                    newPeriod = ((newPeriod)<trait.period) ? newPeriod : trait.period;
                }, MediaTraitType.DRM);
            };
            return (newPeriod);
        }
        override public function get drmState():String{
            return (this.calculatedDrmState);
        }
        override public function authenticate(username:String=null, password:String=null):void{
            this.invokeOnChildren("authenticate", [username, password]);
        }
        override public function authenticateWithToken(token:Object):void{
            this.invokeOnChildren("authenticateWithToken", [token]);
        }
        private function invokeOnChildren(methodName:String, args:Array):void{
            var _local3:DRMTrait;
            var _local4:MediaElement;
            var _local5:DRMTrait;
            if (this.mode == CompositionMode.SERIAL){
                _local3 = ((this.traitAggregator.listenedChild) ? (this.traitAggregator.listenedChild.getTrait(MediaTraitType.DRM) as DRMTrait) : null);
                if (_local3 != null){
                    _local3[methodName].apply(_local3, args);
                };
            } else {
                _local4 = this.traitAggregator.getNextChildWithTrait(null, MediaTraitType.DRM);
                while (_local4 != null) {
                    _local5 = (_local4.getTrait(MediaTraitType.DRM) as DRMTrait);
                    if ((((_local5.drmState == DRMState.AUTHENTICATION_ERROR)) || ((_local5.drmState == DRMState.AUTHENTICATION_NEEDED)))){
                        _local5[methodName].apply(_local5, args);
                        return;
                    };
                    _local4 = this.traitAggregator.getNextChildWithTrait(_local4, MediaTraitType.DRM);
                };
            };
        }
        override public function dispose():void{
            if (this.traitAggregationHelper != null){
                this.traitAggregationHelper.detach();
                this.traitAggregationHelper = null;
            };
            super.dispose();
        }
        private function recalculateDRMState():void{
            var listenedTrait:* = null;
            this.calculatedDrmState = "";
            if (this.mode == CompositionMode.SERIAL){
                listenedTrait = ((this.traitAggregator.listenedChild) ? (this.traitAggregator.listenedChild.getTrait(MediaTraitType.DRM) as DRMTrait) : null);
                this.calculatedDrmState = ((listenedTrait) ? listenedTrait.drmState : DRMState.UNINITIALIZED);
            } else {
                var nextChildTrait:* = function (trait:DRMTrait):void{
                    var _local2:Number = drmLevels[trait.drmState];
                    if (_local2 < drmLevels[calculatedDrmState]){
                        calculatedDrmState = trait.drmState;
                    };
                };
                this.traitAggregator.forEachChildTrait(nextChildTrait, MediaTraitType.DRM);
            };
        }
        private function processAggregatedChild(childTrait:MediaTraitBase, child:MediaElement):void{
            DRMTrait(childTrait).addEventListener(DRMEvent.DRM_STATE_CHANGE, this.onDRMStateChange);
            this.onChildDRMChange(DRMTrait(childTrait).drmState);
        }
        private function processUnaggregatedChild(childTrait:MediaTraitBase, child:MediaElement):void{
            DRMTrait(childTrait).removeEventListener(DRMEvent.DRM_STATE_CHANGE, this.onDRMStateChange);
            this.onChildDRMChange(this.calculatedDrmState);
        }
        private function onDRMStateChange(event:DRMEvent):void{
            this.onChildDRMChange(event.drmState, event.token, event.mediaError, event.startDate, event.endDate, event.period, event.serverURL);
        }
        private function onChildDRMChange(newState:String, token:Object=null, error:MediaError=null, start:Date=null, end:Date=null, period:Number=0, serverURL:String=null):void{
            var _local8:String = this.calculatedDrmState;
            this.recalculateDRMState();
            if (((!((_local8 == this.calculatedDrmState))) || ((((this.calculatedDrmState == DRMState.AUTHENTICATION_NEEDED)) && ((newState == DRMState.AUTHENTICATION_COMPLETE)))))){
                dispatchEvent(new DRMEvent(DRMEvent.DRM_STATE_CHANGE, this.drmState, false, false, this.startDate, this.endDate, period, serverURL, token, error));
            };
        }
        private function listenedChildChange(event:TraitAggregatorEvent):void{
            this.onChildDRMChange(null);
        }

    }
}//package org.osmf.elements.compositeClasses 
﻿package org.osmf.elements.compositeClasses {
    import org.osmf.events.*;
    import flash.events.*;
    import org.osmf.traits.*;
    import org.osmf.elements.compositeClasses.*;

    class SerialDynamicStreamTrait extends DynamicStreamTrait implements IReusable {

        private var traitAggregator:TraitAggregator;
        private var traitAggregationHelper:TraitAggregationHelper;
        private var preventSwitchingChangePropagate:Boolean;

        public function SerialDynamicStreamTrait(traitAggregator:TraitAggregator){
            this.traitAggregator = traitAggregator;
            this.traitAggregationHelper = new TraitAggregationHelper(traitType, traitAggregator, this.processAggregatedChild, this.processUnaggregatedChild);
        }
        override public function getBitrateForIndex(index:int):Number{
            return (this.traitOfCurrentChild.getBitrateForIndex(index));
        }
        public function attach():void{
            this.traitAggregationHelper.attach();
        }
        public function detach():void{
            this.traitAggregationHelper.detach();
        }
        override protected function autoSwitchChangeEnd():void{
            this.traitOfCurrentChild.autoSwitch = autoSwitch;
            super.autoSwitchChangeEnd();
        }
        override protected function switchingChangeEnd(index:int):void{
            if (((switching) && (!(this.preventSwitchingChangePropagate)))){
                this.traitOfCurrentChild.switchTo(index);
            };
            super.switchingChangeEnd(index);
        }
        private function processAggregatedChild(child:MediaTraitBase):void{
            var _local2:DynamicStreamTrait;
            var _local3:Number;
            if (child == this.traitOfCurrentChild){
                _local2 = (child as DynamicStreamTrait);
                setNumDynamicStreams(_local2.numDynamicStreams);
                maxAllowedIndex = _local2.maxAllowedIndex;
                autoSwitch = _local2.autoSwitch;
                if (!_local2.autoSwitch){
                    _local3 = 0;
                    while (_local3 <= _local2.maxAllowedIndex) {
                        if (_local2.getBitrateForIndex(_local3) > this.getBitrateForIndex(currentIndex)){
                            _local2.switchTo(Math.max((_local3 - 1), 0));
                            break;
                        };
                        if ((((_local2.getBitrateForIndex(_local3) == this.getBitrateForIndex(currentIndex))) || ((_local3 == _local2.maxAllowedIndex)))){
                            _local2.switchTo(_local3);
                            break;
                        };
                        _local3++;
                    };
                };
                child.addEventListener(DynamicStreamEvent.SWITCHING_CHANGE, this.onSwitchingChange);
                child.addEventListener(DynamicStreamEvent.NUM_DYNAMIC_STREAMS_CHANGE, this.redispatchEvent);
                child.addEventListener(DynamicStreamEvent.AUTO_SWITCH_CHANGE, this.onAutoSwitchChange);
            };
        }
        private function processUnaggregatedChild(child:MediaTraitBase):void{
            child.removeEventListener(DynamicStreamEvent.SWITCHING_CHANGE, this.onSwitchingChange);
            child.removeEventListener(DynamicStreamEvent.NUM_DYNAMIC_STREAMS_CHANGE, this.redispatchEvent);
            child.removeEventListener(DynamicStreamEvent.AUTO_SWITCH_CHANGE, this.onAutoSwitchChange);
        }
        private function redispatchEvent(event:Event):void{
            dispatchEvent(event.clone());
        }
        private function onAutoSwitchChange(event:DynamicStreamEvent):void{
            autoSwitch = event.autoSwitch;
        }
        private function onSwitchingChange(event:DynamicStreamEvent):void{
            this.preventSwitchingChangePropagate = true;
            setSwitching(event.switching, this.traitOfCurrentChild.currentIndex);
            this.preventSwitchingChangePropagate = false;
        }
        private function get traitOfCurrentChild():DynamicStreamTrait{
            return (((this.traitAggregator.listenedChild) ? (this.traitAggregator.listenedChild.getTrait(MediaTraitType.DYNAMIC_STREAM) as DynamicStreamTrait) : null));
        }

    }
}//package org.osmf.elements.compositeClasses 
﻿package org.osmf.elements.compositeClasses {
    import org.osmf.media.*;
    import flash.events.*;

    class TraitLoaderEvent extends Event {

        public static const TRAIT_FOUND:String = "traitFound";

        public var mediaElement:MediaElement;

        public function TraitLoaderEvent(mediaElement:MediaElement=null, bubbles:Boolean=false, cancelable:Boolean=false){
            super(TRAIT_FOUND, bubbles, cancelable);
            this.mediaElement = mediaElement;
        }
        override public function clone():Event{
            return (new TraitLoaderEvent(this.mediaElement));
        }

    }
}//package org.osmf.elements.compositeClasses 
﻿package org.osmf.elements.compositeClasses {
    import org.osmf.media.*;

    class ChildSeekOperation {

        private var _child:MediaElement;
        private var _time:Number;

        public function ChildSeekOperation(child:MediaElement, time:Number){
            this._child = child;
            this._time = time;
        }
        public function get child():MediaElement{
            return (this._child);
        }
        public function get time():Number{
            return (this._time);
        }

    }
}//package org.osmf.elements.compositeClasses 
﻿package org.osmf.elements.compositeClasses {
    import org.osmf.media.*;

    class SerialElementSegment {

        private var _mediaElement:MediaElement;
        private var _relativeStart:Number;
        private var _relativeEnd:Number;
        private var _unseekable:Boolean;

        public function SerialElementSegment(mediaElement:MediaElement, relativeStart:Number, relativeEnd:Number, unseekable:Boolean=false){
            this._mediaElement = mediaElement;
            this._relativeStart = relativeStart;
            this._relativeEnd = relativeEnd;
            this._unseekable = unseekable;
        }
        public function get mediaElement():MediaElement{
            return (this._mediaElement);
        }
        public function get relativeStart():Number{
            return (this._relativeStart);
        }
        public function get relativeEnd():Number{
            return (this._relativeEnd);
        }
        public function get unseekable():Boolean{
            return (this._unseekable);
        }

    }
}//package org.osmf.elements.compositeClasses 
﻿package org.osmf.elements.compositeClasses {
    import org.osmf.events.*;
    import flash.events.*;
    import flash.utils.*;
    import org.osmf.utils.*;
    import org.osmf.metadata.*;
    import __AS3__.vec.*;
    import flash.errors.*;

    public class CompositeMetadata extends Metadata {

        private var children:Vector.<Metadata>;
        private var childMetadataGroups:Dictionary;
        private var metadataSynthesizers:Dictionary;
        private var _mode:String;
        private var _activeChild:Metadata;

        public function CompositeMetadata(){
            this.children = new Vector.<Metadata>();
            this.childMetadataGroups = new Dictionary();
            this.metadataSynthesizers = new Dictionary();
        }
        public function addChild(child:Metadata):void{
            var _local3:String;
            if (child == null){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.NULL_PARAM)));
            };
            var _local2:int = this.children.indexOf(child);
            if (_local2 != -1){
                throw (new IllegalOperationError());
            };
            this.children.push(child);
            child.addEventListener(MetadataEvent.VALUE_ADD, this.onChildMetadataAdd);
            child.addEventListener(MetadataEvent.VALUE_REMOVE, this.onChildMetadataRemove);
            if ((child is CompositeMetadata)){
                child.addEventListener(CompositeMetadataEvent.METADATA_GROUP_CHANGE, this.onChildMetadataGroupChange);
            };
            for each (_local3 in child.keys) {
                this.processChildMetadataAdd(child, (child.getValue(_local3) as Metadata), _local3);
            };
            dispatchEvent(new CompositeMetadataEvent(CompositeMetadataEvent.CHILD_ADD, false, false, child));
        }
        public function removeChild(child:Metadata):void{
            var _local3:String;
            if (child == null){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.NULL_PARAM)));
            };
            var _local2:int = this.children.indexOf(child);
            if (_local2 == -1){
                throw (new IllegalOperationError(OSMFStrings.getString(OSMFStrings.INVALID_PARAM)));
            };
            this.children.splice(_local2, 1);
            child.removeEventListener(MetadataEvent.VALUE_ADD, this.onChildMetadataAdd);
            child.removeEventListener(MetadataEvent.VALUE_REMOVE, this.onChildMetadataRemove);
            if ((child is CompositeMetadata)){
                child.removeEventListener(CompositeMetadataEvent.METADATA_GROUP_CHANGE, this.onChildMetadataGroupChange);
            };
            for each (_local3 in child.keys) {
                this.processChildMetadataRemove(child, (child.getValue(_local3) as Metadata), _local3);
            };
            dispatchEvent(new CompositeMetadataEvent(CompositeMetadataEvent.CHILD_REMOVE, false, false, child));
        }
        public function get numChildren():int{
            return (this.children.length);
        }
        public function getChildAt(index:int):Metadata{
            if ((((index >= this.children.length)) || ((index < 0)))){
                throw (new RangeError(OSMFStrings.getString(OSMFStrings.INVALID_PARAM)));
            };
            return (this.children[index]);
        }
        public function set mode(value:String):void{
            if (this._mode != value){
                this._mode = value;
                this.processSynthesisDependencyChanged();
            };
        }
        public function get mode():String{
            return (this._mode);
        }
        public function set activeChild(value:Metadata):void{
            if (this._activeChild != value){
                this._activeChild = value;
                this.processSynthesisDependencyChanged();
            };
        }
        public function get activeChild():Metadata{
            return (this._activeChild);
        }
        public function addMetadataSynthesizer(namespaceURL:String, synthesizer:MetadataSynthesizer):void{
            if (synthesizer == null){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.NULL_PARAM)));
            };
            if (this.getMetadataSynthesizer(namespaceURL) != null){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.INVALID_PARAM)));
            };
            this.metadataSynthesizers[namespaceURL] = synthesizer;
        }
        public function removeMetadataSynthesizer(namespaceURL:String):void{
            if (namespaceURL == null){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.NULL_PARAM)));
            };
            if (this.getMetadataSynthesizer(namespaceURL) != null){
                delete this.metadataSynthesizers[namespaceURL];
            };
        }
        public function getMetadataSynthesizer(namespaceURL:String):MetadataSynthesizer{
            var _local2:MetadataSynthesizer;
            var _local3:String;
            if (namespaceURL != null){
                for (_local3 in this.metadataSynthesizers) {
                    if (_local3 == namespaceURL){
                        _local2 = this.metadataSynthesizers[_local3];
                        break;
                    };
                };
            };
            return (_local2);
        }
        public function getMetadataGroupNamespaceURLs():Vector.<String>{
            var _local2:String;
            var _local1:Vector.<String> = new Vector.<String>();
            for (_local2 in this.childMetadataGroups) {
                _local1.push(_local2);
            };
            return (_local1);
        }
        public function getMetadataGroup(namespaceURL:String):MetadataGroup{
            if (namespaceURL == null){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.NULL_PARAM)));
            };
            return (this.childMetadataGroups[namespaceURL]);
        }
        private function processChildMetadataAdd(child:Metadata, metadata:Metadata, metadataNamespaceURL:String):void{
            var _local4:CompositeMetadataEvent;
            var _local5:String;
            var _local6:MetadataGroup;
            if (metadata != null){
                _local5 = metadataNamespaceURL;
                _local6 = this.childMetadataGroups[_local5];
                if (_local6 == null){
                    _local6 = new MetadataGroup(_local5);
                    this.childMetadataGroups[_local5] = _local6;
                    _local6.addEventListener(Event.CHANGE, this.onMetadataGroupChange);
                    _local4 = new CompositeMetadataEvent(CompositeMetadataEvent.METADATA_GROUP_ADD, false, false, child, metadataNamespaceURL, metadata, _local6);
                };
                _local6.addMetadata(child, metadata);
            };
            if (_local4 != null){
                dispatchEvent(_local4);
            };
        }
        private function processChildMetadataRemove(child:Metadata, metadata:Metadata, metadataNamespaceURL:String):void{
            var _local4:CompositeMetadataEvent;
            var _local5:String;
            var _local6:MetadataGroup;
            if (metadata != null){
                _local5 = metadataNamespaceURL;
                _local6 = this.childMetadataGroups[_local5];
                _local6.removeMetadata(child, metadata);
                if (_local6.metadatas.length == 0){
                    _local6.removeEventListener(Event.CHANGE, this.onMetadataGroupChange);
                    _local4 = new CompositeMetadataEvent(CompositeMetadataEvent.METADATA_GROUP_REMOVE, false, false, child, metadataNamespaceURL, metadata, _local6);
                    delete this.childMetadataGroups[_local5];
                };
            };
            if (_local4 != null){
                dispatchEvent(_local4);
            };
        }
        private function processSynthesisDependencyChanged():void{
            var _local1:MetadataGroup;
            for each (_local1 in this.childMetadataGroups) {
                this.onMetadataGroupChange(null, _local1);
            };
        }
        private function onChildMetadataAdd(event:MetadataEvent):void{
            this.processChildMetadataAdd((event.target as Metadata), (event.value as Metadata), event.key);
        }
        private function onChildMetadataRemove(event:MetadataEvent):void{
            this.processChildMetadataRemove((event.target as Metadata), (event.value as Metadata), event.key);
        }
        private function onChildMetadataGroupChange(event:CompositeMetadataEvent):void{
            if (event.suggestedMetadataSynthesizer == null){
                event.suggestedMetadataSynthesizer = this.metadataSynthesizers[event.metadataGroup.namespaceURL];
            };
            var _local2:CompositeMetadataEvent = (event.clone() as CompositeMetadataEvent);
            dispatchEvent(_local2);
            if (event.suggestedMetadataSynthesizer == null){
                event.suggestedMetadataSynthesizer = _local2.suggestedMetadataSynthesizer;
            };
        }
        private function onMetadataGroupChange(event:Event, metadataGroup:MetadataGroup=null):void{
            var _local3:Metadata;
            var _local7:Metadata;
            metadataGroup = ((metadataGroup) || (((event) ? (event.target as MetadataGroup) : null)));
            if (metadataGroup == null){
                throw (new IllegalOperationError(OSMFStrings.getString(OSMFStrings.NULL_PARAM)));
            };
            var _local4:MetadataSynthesizer = this.metadataSynthesizers[metadataGroup.namespaceURL];
            var _local5:CompositeMetadataEvent = new CompositeMetadataEvent(CompositeMetadataEvent.METADATA_GROUP_CHANGE, false, false, null, null, null, metadataGroup, _local4);
            dispatchEvent(_local5);
            _local4 = ((_local4) || (((((_local5.suggestedMetadataSynthesizer) || (((metadataGroup.metadatas.length)>0) ? metadataGroup.metadatas[0].synthesizer : null))) || (new MetadataSynthesizer()))));
            var _local6:Metadata = this._activeChild;
            if (((!((this._activeChild == null))) && ((this.children.indexOf(this._activeChild) == -1)))){
                _local6 = null;
            };
            _local3 = _local4.synthesize(metadataGroup.namespaceURL, this, metadataGroup.metadatas, this._mode, _local6);
            if (_local3 == null){
                _local7 = (getValue(metadataGroup.namespaceURL) as Metadata);
                if (((!((_local7 == null))) && (((_local7.synthesizer is NullMetadataSynthesizer) == false)))){
                    removeValue(metadataGroup.namespaceURL);
                };
            } else {
                addValue(metadataGroup.namespaceURL, _local3);
            };
        }

    }
}//package org.osmf.elements.compositeClasses 
﻿package org.osmf.elements.compositeClasses {
    import org.osmf.media.*;
    import flash.display.*;
    import org.osmf.events.*;
    import org.osmf.layout.*;
    import org.osmf.traits.*;
    import org.osmf.utils.*;
    import org.osmf.elements.*;
    import org.osmf.metadata.*;
    import flash.errors.*;

    public class CompositeDisplayObjectTrait extends DisplayObjectTrait {

        private var _traitAggregator:TraitAggregator;
        private var _owner:CompositeElement;
        private var _childrenContainer:ILayoutTarget;
        private var _layoutRenderer:LayoutRendererBase;
        private var watcher:MetadataWatcher;

        public function CompositeDisplayObjectTrait(traitAggregator:TraitAggregator, owner:MediaElement){
            super(null);
            this._traitAggregator = traitAggregator;
            this._owner = (owner as CompositeElement);
            this._childrenContainer = this.constructChildrenContainer();
            this._childrenContainer.addEventListener(DisplayObjectEvent.MEDIA_SIZE_CHANGE, this.onContainerDimensionChange);
            this.watcher = new MetadataWatcher(owner.metadata, MetadataNamespaces.LAYOUT_RENDERER_TYPE, null, this.layoutRendererMetadataChangeCallback);
            this.watcher.watch();
        }
        public function get layoutRenderer():LayoutRendererBase{
            return (this._layoutRenderer);
        }
        override public function get displayObject():DisplayObject{
            return (this._childrenContainer.displayObject);
        }
        override public function get mediaWidth():Number{
            return (this._childrenContainer.measuredWidth);
        }
        override public function get mediaHeight():Number{
            return (this._childrenContainer.measuredHeight);
        }
        protected function get traitAggregator():TraitAggregator{
            return (this._traitAggregator);
        }
        protected function get owner():CompositeElement{
            return (this._owner);
        }
        protected function get childrenContainer():ILayoutTarget{
            return (this._childrenContainer);
        }
        private function constructChildrenContainer():ILayoutTarget{
            var _local1:LayoutTargetSprite = new LayoutTargetSprite((this._owner.getMetadata(LayoutMetadata.LAYOUT_NAMESPACE) as LayoutMetadata));
            return (_local1);
        }
        private function onContainerDimensionChange(event:DisplayObjectEvent):void{
            dispatchEvent(event.clone());
        }
        private function layoutRendererMetadataChangeCallback(metadata:Metadata):void{
            var metadata:* = metadata;
            if (this._layoutRenderer){
                this._layoutRenderer.container = null;
                this._layoutRenderer = null;
            };
            if (metadata != null){
                try {
                    this._layoutRenderer = (new ((metadata.getValue(MetadataNamespaces.LAYOUT_RENDERER_TYPE) as Class))() as LayoutRendererBase);
                } catch(e) {
                    throw (new IllegalOperationError(OSMFStrings.getString(OSMFStrings.INVALID_LAYOUT_RENDERER_CONSTRUCTOR)));
                };
            };
            if (this._layoutRenderer == null){
                this._layoutRenderer = new LayoutRenderer();
            };
            this._layoutRenderer.container = this._childrenContainer;
        }

    }
}//package org.osmf.elements.compositeClasses 
﻿package org.osmf.elements.compositeClasses {
    import org.osmf.media.*;
    import org.osmf.events.*;
    import org.osmf.traits.*;
    import org.osmf.elements.compositeClasses.*;

    class CompositeDVRTrait extends DVRTrait implements IReusable {

        private var mode:String;
        private var traitAggregator:TraitAggregator;
        private var traitAggregationHelper:TraitAggregationHelper;

        public function CompositeDVRTrait(traitAggregator:TraitAggregator, owner:MediaElement, mode:String){
            this.traitAggregator = traitAggregator;
            this.mode = mode;
            super();
            this.traitAggregationHelper = new TraitAggregationHelper(traitType, traitAggregator, this.processAggregatedChild, this.processUnaggregatedChild);
        }
        public function attach():void{
            this.traitAggregationHelper.attach();
        }
        public function detach():void{
            this.traitAggregationHelper.detach();
        }
        private function processAggregatedChild(childTrait:MediaTraitBase, child:MediaElement):void{
            childTrait.addEventListener(DVREvent.IS_RECORDING_CHANGE, this.onChildIsRecordingChange);
            this.onChildIsRecordingChange();
        }
        private function processUnaggregatedChild(childTrait:MediaTraitBase, child:MediaElement):void{
            childTrait.removeEventListener(DVREvent.IS_RECORDING_CHANGE, this.onChildIsRecordingChange);
            this.onChildIsRecordingChange();
        }
        private function onChildIsRecordingChange(event:DVREvent=null):void{
            var dvrTrait:* = null;
            var newIsRecording:* = false;
            var event = event;
            if (this.mode == CompositionMode.SERIAL){
                dvrTrait = ((this.traitAggregator.listenedChild) ? (this.traitAggregator.listenedChild.getTrait(MediaTraitType.DVR) as DVRTrait) : null);
                if (dvrTrait){
                    setIsRecording(dvrTrait.isRecording);
                };
            } else {
                this.traitAggregator.forEachChildTrait(function (dvrTrait:DVRTrait):void{
                    newIsRecording = ((newIsRecording) || (dvrTrait.isRecording));
                }, MediaTraitType.DVR);
                if (isRecording != newIsRecording){
                    setIsRecording(newIsRecording);
                };
            };
        }

    }
}//package org.osmf.elements.compositeClasses 
﻿package org.osmf.elements.compositeClasses {
    import flash.events.*;
    import org.osmf.metadata.*;

    public class CompositeMetadataEvent extends Event {

        public static const CHILD_ADD:String = "childAdd";
        public static const CHILD_REMOVE:String = "childRemove";
        public static const METADATA_GROUP_ADD:String = "metadataGroupAdd";
        public static const METADATA_GROUP_REMOVE:String = "metadataGroupRemove";
        public static const METADATA_GROUP_CHANGE:String = "metadataGroupChange";

        private var _child:Metadata;
        private var _childMetadataNamespaceURL:String;
        private var _childMetadata:Metadata;
        private var _metadataGroup:MetadataGroup;
        private var _suggestedMetadataSynthesizer:MetadataSynthesizer;

        public function CompositeMetadataEvent(type:String, bubbles:Boolean=false, cancelable:Boolean=false, child:Metadata=null, childMetadataNamespaceURL:String=null, childMetadata:Metadata=null, metadataGroup:MetadataGroup=null, suggestedMetadataSynthesizer:MetadataSynthesizer=null){
            super(type, bubbles, cancelable);
            this._child = child;
            this._childMetadataNamespaceURL = childMetadataNamespaceURL;
            this._childMetadata = childMetadata;
            this._metadataGroup = metadataGroup;
            this._suggestedMetadataSynthesizer = suggestedMetadataSynthesizer;
        }
        public function get child():Metadata{
            return (this._child);
        }
        public function get childMetadataNamespaceURL():String{
            return (this._childMetadataNamespaceURL);
        }
        public function get childMetadata():Metadata{
            return (this._childMetadata);
        }
        public function get metadataGroup():MetadataGroup{
            return (this._metadataGroup);
        }
        public function set suggestedMetadataSynthesizer(value:MetadataSynthesizer):void{
            this._suggestedMetadataSynthesizer = value;
        }
        public function get suggestedMetadataSynthesizer():MetadataSynthesizer{
            return (this._suggestedMetadataSynthesizer);
        }
        override public function clone():Event{
            return (new CompositeMetadataEvent(type, bubbles, cancelable, this._child, this._childMetadataNamespaceURL, this._childMetadata, this._metadataGroup, this._suggestedMetadataSynthesizer));
        }

    }
}//package org.osmf.elements.compositeClasses 
﻿package org.osmf.elements.compositeClasses {

    public final class CompositionMode {

        public static const PARALLEL:String = "parallel";
        public static const SERIAL:String = "serial";

    }
}//package org.osmf.elements.compositeClasses 
﻿package org.osmf.elements.compositeClasses {
    import org.osmf.media.*;
    import org.osmf.events.*;
    import flash.events.*;
    import org.osmf.traits.*;
    import flash.errors.*;

    class TraitLoader extends EventDispatcher {

        public function findOrLoadMediaElementWithTrait(mediaElements:Array, traitType:String):void{
            var mediaElement:* = null;
            var loadTrait:* = null;
            var onLoadStateChange:* = null;
            var onTraitRemove:* = null;
            var onTraitAdd:* = null;
            var mediaElements:* = mediaElements;
            var traitType:* = traitType;
            var noSuchTrait:* = true;
            for each (mediaElement in mediaElements) {
                loadTrait = (mediaElement.getTrait(MediaTraitType.LOAD) as LoadTrait);
                if (((mediaElement.hasTrait(traitType)) && ((((loadTrait == null)) || ((loadTrait.loadState == LoadState.READY)))))){
                    noSuchTrait = false;
                    this.dispatchFindOrLoadEvent(mediaElement);
                    break;
                };
                if (((!((loadTrait == null))) && (!((loadTrait.loadState == LoadState.READY))))){
                    onLoadStateChange = function (event:LoadEvent):void{
                        var _local2:LoadTrait = (event.target as LoadTrait);
                        if (_local2.loadState == LoadState.READY){
                            mediaElement.removeEventListener(MediaElementEvent.TRAIT_REMOVE, onTraitRemove);
                            _local2.removeEventListener(LoadEvent.LOAD_STATE_CHANGE, onLoadStateChange);
                            if (mediaElement.hasTrait(traitType)){
                                dispatchFindOrLoadEvent(mediaElement);
                            } else {
                                findOrLoadMediaElementWithTrait(mediaElements.slice((mediaElements.indexOf(mediaElement) + 1)), traitType);
                            };
                        };
                    };
                    onTraitRemove = function (event:MediaElementEvent):void{
                        if (event.traitType == MediaTraitType.LOAD){
                            loadTrait.removeEventListener(LoadEvent.LOAD_STATE_CHANGE, onLoadStateChange);
                            mediaElement.addEventListener(MediaElementEvent.TRAIT_ADD, onTraitAdd);
                        };
                    };
                    onTraitAdd = function (event:MediaElementEvent):void{
                        if (event.traitType == MediaTraitType.LOAD){
                            mediaElement.removeEventListener(MediaElementEvent.TRAIT_ADD, onTraitAdd);
                            loadTrait = (mediaElement.getTrait(MediaTraitType.LOAD) as LoadTrait);
                            loadTrait.addEventListener(LoadEvent.LOAD_STATE_CHANGE, onLoadStateChange);
                            executeLoad(loadTrait, mediaElement);
                        };
                    };
                    noSuchTrait = false;
                    loadTrait.addEventListener(LoadEvent.LOAD_STATE_CHANGE, onLoadStateChange);
                    mediaElement.addEventListener(MediaElementEvent.TRAIT_REMOVE, onTraitRemove);
                    this.executeLoad(loadTrait, mediaElement);
                    break;
                };
            };
            if (noSuchTrait){
                this.dispatchFindOrLoadEvent(null);
            };
        }
        private function executeLoad(loadTrait:LoadTrait, mediaElement:MediaElement):void{
            var loadTrait:* = loadTrait;
            var mediaElement:* = mediaElement;
            if (loadTrait.loadState != LoadState.LOADING){
                try {
                    loadTrait.load();
                } catch(error:IllegalOperationError) {
                    mediaElement.dispatchEvent(new MediaErrorEvent(MediaErrorEvent.MEDIA_ERROR, false, false, new MediaError(MediaErrorCodes.MEDIA_LOAD_FAILED, error.message)));
                    dispatchFindOrLoadEvent(null);
                };
            };
        }
        private function dispatchFindOrLoadEvent(mediaElement:MediaElement):void{
            dispatchEvent(new TraitLoaderEvent(mediaElement));
        }

    }
}//package org.osmf.elements.compositeClasses 
﻿package org.osmf.elements.compositeClasses {
    import org.osmf.media.*;
    import org.osmf.events.*;
    import org.osmf.traits.*;
    import org.osmf.elements.compositeClasses.*;

    class SerialElementTransitionManager {

        public static function playNextPlayableChild(traitAggregator:TraitAggregator, noNextPlayableChildCallback:Function):void{
            var nextChildren:* = null;
            var traitLoader:* = null;
            var onTraitFound:* = null;
            var traitAggregator:* = traitAggregator;
            var noNextPlayableChildCallback:* = noNextPlayableChildCallback;
            onTraitFound = function (event:TraitLoaderEvent):void{
                var traitOfNextPlayableChild:* = null;
                var playbackInitiated:* = false;
                var event:* = event;
                traitLoader.removeEventListener(TraitLoaderEvent.TRAIT_FOUND, onTraitFound);
                if (event.mediaElement){
                    var onPlayStateChange:* = function (event:PlayEvent):void{
                        if (event.playState == PlayState.PLAYING){
                            playbackInitiated = true;
                        };
                    };
                    traitOfNextPlayableChild = (event.mediaElement.getTrait(MediaTraitType.PLAY) as PlayTrait);
                    playbackInitiated = false;
                    traitOfNextPlayableChild.addEventListener(PlayEvent.PLAY_STATE_CHANGE, onPlayStateChange);
                    traitAggregator.listenedChild = event.mediaElement;
                    traitOfNextPlayableChild.removeEventListener(PlayEvent.PLAY_STATE_CHANGE, onPlayStateChange);
                    if (playbackInitiated == false){
                        traitOfNextPlayableChild.play();
                    } else {
                        if ((((traitOfNextPlayableChild.playState == PlayState.STOPPED)) && ((traitAggregator.listenedChild.hasTrait(MediaTraitType.TIME) == false)))){
                            playNextPlayableChild(traitAggregator, noNextPlayableChildCallback);
                        };
                    };
                } else {
                    if (nextChildren.length > 0){
                        traitAggregator.listenedChild = (nextChildren[0] as MediaElement);
                    };
                    if (noNextPlayableChildCallback != null){
                        noNextPlayableChildCallback();
                    };
                };
            };
            var currentChild:* = traitAggregator.listenedChild;
            nextChildren = getNextChildren(traitAggregator, currentChild);
            traitLoader = new TraitLoader();
            traitLoader.addEventListener(TraitLoaderEvent.TRAIT_FOUND, onTraitFound);
            traitLoader.findOrLoadMediaElementWithTrait(nextChildren, MediaTraitType.PLAY);
        }
        private static function getNextChildren(traitAggregator:TraitAggregator, currentChild:MediaElement):Array{
            var _local6:MediaElement;
            var _local3:Array = [];
            var _local4:Boolean;
            var _local5:int;
            while (_local5 < traitAggregator.numChildren) {
                _local6 = traitAggregator.getChildAt(_local5);
                if (currentChild == _local6){
                    _local4 = true;
                } else {
                    if (_local4){
                        _local3.push(_local6);
                    };
                };
                _local5++;
            };
            return (_local3);
        }

    }
}//package org.osmf.elements.compositeClasses 
﻿package org.osmf.elements.compositeClasses {
    import org.osmf.media.*;
    import org.osmf.events.*;
    import org.osmf.traits.*;
    import __AS3__.vec.*;
    import org.osmf.elements.compositeClasses.*;

    class ParallelSeekTrait extends CompositeSeekTrait {

        private var inSeek:Boolean = false;
        private var owner:MediaElement;

        public function ParallelSeekTrait(traitAggregator:TraitAggregator, owner:MediaElement){
            super(traitAggregator, CompositionMode.PARALLEL, owner);
            this.owner = owner;
        }
        override public function dispose():void{
            detach();
            super.dispose();
        }
        override protected function doSeek(seekOp:CompositeSeekOperationInfo):void{
            this.inSeek = true;
            var _local2:ParallelSeekOperationInfo = (seekOp as ParallelSeekOperationInfo);
            var _local3:Vector.<ChildSeekOperation> = _local2.childSeekOperations;
            var _local4:int;
            while (_local4 < _local3.length) {
                this.doChildSeek((_local3[_local4] as ChildSeekOperation));
                _local4++;
            };
            this.inSeek = false;
        }
        private function doChildSeek(childSeekOperation:ChildSeekOperation):void{
            var childSeekTrait:* = null;
            var onChildSeekingChange:* = null;
            var childSeekOperation:* = childSeekOperation;
            onChildSeekingChange = function (event:SeekEvent):void{
                var _local2:PlayTrait;
                var _local3:TimeTrait;
                var _local4:PlayTrait;
                if (event.seeking == false){
                    childSeekTrait.removeEventListener(SeekEvent.SEEKING_CHANGE, onChildSeekingChange);
                    _local2 = (childSeekOperation.child.getTrait(MediaTraitType.PLAY) as PlayTrait);
                    _local3 = (childSeekOperation.child.getTrait(MediaTraitType.TIME) as TimeTrait);
                    _local4 = (owner.getTrait(MediaTraitType.PLAY) as PlayTrait);
                    if (((((!((_local2 == null))) && (!((_local4 == null))))) && ((((_local3 == null)) || (!((_local3.currentTime == _local3.duration))))))){
                        if (_local4.playState == PlayState.PLAYING){
                            _local2.play();
                        } else {
                            if ((((_local4.playState == PlayState.PAUSED)) && (_local2.canPause))){
                                _local2.pause();
                            };
                        };
                    };
                };
            };
            childSeekTrait = (childSeekOperation.child.getTrait(MediaTraitType.SEEK) as SeekTrait);
            childSeekTrait.addEventListener(SeekEvent.SEEKING_CHANGE, onChildSeekingChange);
            childSeekTrait.seek(childSeekOperation.time);
        }
        override protected function prepareSeekOperationInfo(time:Number):CompositeSeekOperationInfo{
            var _local4:SeekTrait;
            var _local5:TimeTrait;
            var _local6:Number;
            var _local7:ChildSeekOperation;
            var _local2:ParallelSeekOperationInfo = new ParallelSeekOperationInfo();
            var _local3:int;
            while (_local3 < traitAggregator.numChildren) {
                _local4 = (traitAggregator.getChildAt(_local3).getTrait(MediaTraitType.SEEK) as SeekTrait);
                _local5 = (traitAggregator.getChildAt(_local3).getTrait(MediaTraitType.TIME) as TimeTrait);
                if (!(((_local5 == null)) || (isNaN(_local5.duration)))){
                    if (_local4 == null){
                        _local2.canSeekTo = false;
                        break;
                    };
                    _local6 = Math.min(time, _local5.duration);
                    _local2.canSeekTo = _local4.canSeekTo(_local6);
                    if (_local2.canSeekTo){
                        _local7 = new ChildSeekOperation(traitAggregator.getChildAt(_local3), _local6);
                        _local2.childSeekOperations.push(_local7);
                    } else {
                        break;
                    };
                };
                _local3++;
            };
            if (_local2.childSeekOperations.length == 0){
                _local2.canSeekTo = false;
            };
            return (_local2);
        }
        override protected function checkSeeking():Boolean{
            var seekingState:* = false;
            seekingState = false;
            traitAggregator.forEachChildTrait(function (mediaTrait:MediaTraitBase):void{
                seekingState = ((seekingState) || (SeekTrait(mediaTrait).seeking));
            }, MediaTraitType.SEEK);
            return (seekingState);
        }
        override protected function onSeekingChanged(event:SeekEvent):void{
            if (((event.seeking) && (!(this.inSeek)))){
                seek(event.time);
            } else {
                if ((((event.seeking == false)) && ((this.checkSeeking() == false)))){
                    setSeeking(false, event.time);
                };
            };
        }

    }
}//package org.osmf.elements.compositeClasses 
﻿package org.osmf.elements.compositeClasses {
    import org.osmf.media.*;
    import org.osmf.containers.*;
    import org.osmf.events.*;
    import org.osmf.layout.*;
    import flash.utils.*;
    import org.osmf.traits.*;
    import org.osmf.elements.compositeClasses.*;

    class ParallelDisplayObjectTrait extends CompositeDisplayObjectTrait {

        private var traitAggregationHelper:TraitAggregationHelper;
        private var mediaElementLayoutTargets:Dictionary;

        public function ParallelDisplayObjectTrait(traitAggregator:TraitAggregator, owner:MediaElement){
            var _local4:MediaElement;
            var _local5:MediaElementLayoutTarget;
            this.mediaElementLayoutTargets = new Dictionary();
            super(traitAggregator, owner);
            this.traitAggregationHelper = new TraitAggregationHelper(traitType, traitAggregator, this.processAggregatedChild, this.processUnaggregatedChild);
            var _local3:int;
            while (_local3 < this.owner.numChildren) {
                _local4 = this.owner.getChildAt(_local3);
                _local5 = MediaElementLayoutTarget.getInstance(_local4);
                _local5.addEventListener(ContainerChangeEvent.CONTAINER_CHANGE, this.onLayoutTargetContainerChange);
                this.mediaElementLayoutTargets[_local4] = _local5;
                this.setupLayoutTarget(_local5);
                _local3++;
            };
        }
        override public function dispose():void{
            this.traitAggregationHelper.detach();
            this.traitAggregationHelper = null;
            super.dispose();
        }
        private function processAggregatedChild(childTrait:MediaTraitBase, child:MediaElement):void{
            var _local4:MediaElementLayoutTarget;
            var _local5:LayoutMetadata;
            var _local3:MediaElementLayoutTarget = this.mediaElementLayoutTargets[child];
            if (_local3 == null){
                _local4 = MediaElementLayoutTarget.getInstance(child);
                child.addEventListener(ContainerChangeEvent.CONTAINER_CHANGE, this.onLayoutTargetContainerChange);
                this.mediaElementLayoutTargets[child] = _local4;
                _local5 = _local4.layoutMetadata;
                if (_local5 == null){
                    _local5 = new LayoutMetadata();
                    _local4.mediaElement.addMetadata(LayoutMetadata.LAYOUT_NAMESPACE, _local5);
                };
                if (isNaN(_local5.index)){
                    _local5.index = owner.getChildIndex(child);
                };
                this.setupLayoutTarget(_local4);
            };
        }
        private function processUnaggregatedChild(childTrait:MediaTraitBase, child:MediaElement):void{
            var _local3:MediaElementLayoutTarget = this.mediaElementLayoutTargets[child];
            child.removeEventListener(ContainerChangeEvent.CONTAINER_CHANGE, this.onLayoutTargetContainerChange);
            if (layoutRenderer.hasTarget(_local3)){
                layoutRenderer.removeTarget(_local3);
            };
            return;
            /*not popped
            delete this.mediaElementLayoutTargets[child]
            */
        }
        private function setupLayoutTarget(target:MediaElementLayoutTarget):void{
            var _local2:IMediaContainer = target.mediaElement.container;
            if (((_local2) && (!((_local2 == owner.container))))){
                if (layoutRenderer.hasTarget(target)){
                    layoutRenderer.removeTarget(target);
                };
            } else {
                if (layoutRenderer.hasTarget(target) == false){
                    layoutRenderer.addTarget(target);
                };
            };
        }
        private function onLayoutTargetContainerChange(event:ContainerChangeEvent):void{
            var _local2:MediaElement = (event.target as MediaElement);
            this.setupLayoutTarget(this.mediaElementLayoutTargets[_local2]);
        }

    }
}//package org.osmf.elements.compositeClasses 
﻿package org.osmf.elements.compositeClasses {
    import org.osmf.media.*;

    class SerialSeekOperationInfo extends CompositeSeekOperationInfo {

        private var _seekForward:Boolean;
        private var _fromChild:MediaElement;
        private var _toChild:MediaElement;
        private var _toChildTime:Number;
        private var _inBetweenChildren:Array;

        public function get seekForward():Boolean{
            return (this._seekForward);
        }
        public function set seekForward(value:Boolean):void{
            this._seekForward = value;
        }
        public function get fromChild():MediaElement{
            return (this._fromChild);
        }
        public function set fromChild(value:MediaElement):void{
            this._fromChild = value;
        }
        public function get toChild():MediaElement{
            return (this._toChild);
        }
        public function set toChild(value:MediaElement):void{
            this._toChild = value;
        }
        public function get toChildTime():Number{
            return (this._toChildTime);
        }
        public function set toChildTime(value:Number):void{
            this._toChildTime = value;
        }
        public function set inBetweenChildren(value:Array):void{
            this._inBetweenChildren = value;
        }
        public function get inBetweenChildren():Array{
            if (this._inBetweenChildren == null){
                this._inBetweenChildren = new Array();
            };
            return (this._inBetweenChildren);
        }

    }
}//package org.osmf.elements.compositeClasses 
﻿package org.osmf.elements.compositeClasses {
    import __AS3__.vec.*;
    import org.osmf.elements.compositeClasses.*;

    class ParallelSeekOperationInfo extends CompositeSeekOperationInfo {

        private var _childSeekOperations:Vector.<ChildSeekOperation>;

        public function ParallelSeekOperationInfo(){
            this._childSeekOperations = new Vector.<ChildSeekOperation>();
        }
        public function get childSeekOperations():Vector.<ChildSeekOperation>{
            return (this._childSeekOperations);
        }

    }
}//package org.osmf.elements.compositeClasses 
﻿package org.osmf.elements.compositeClasses {
    import org.osmf.media.*;
    import org.osmf.events.*;
    import flash.events.*;
    import flash.utils.*;
    import org.osmf.traits.*;

    public class TraitAggregator extends EventDispatcher {

        private var childrenTraits:Dictionary;
        private var childMediaElements:Array;
        private var _listenedChild:MediaElement;

        public function TraitAggregator(){
            this.childMediaElements = new Array();
            super();
            this.childrenTraits = new Dictionary();
        }
        public function set listenedChild(value:MediaElement):void{
            var _local2:int;
            var _local3:MediaElement;
            var _local4:String;
            var _local5:String;
            if (value != this._listenedChild){
                _local2 = 0;
                _local3 = this._listenedChild;
                if (this._listenedChild){
                    this._listenedChild.removeEventListener(MediaElementEvent.TRAIT_ADD, this.onTraitAdded);
                    this._listenedChild.removeEventListener(MediaElementEvent.TRAIT_REMOVE, this.onTraitRemoved);
                    _local2 = 0;
                    while (_local2 < this._listenedChild.traitTypes.length) {
                        _local4 = this._listenedChild.traitTypes[_local2];
                        dispatchEvent(new TraitAggregatorEvent(TraitAggregatorEvent.TRAIT_UNAGGREGATED, _local4, this.listenedChild.getTrait(_local4), this.listenedChild));
                        _local2++;
                    };
                };
                this._listenedChild = value;
                if (this._listenedChild){
                    _local2 = 0;
                    while (_local2 < this._listenedChild.traitTypes.length) {
                        _local5 = this._listenedChild.traitTypes[_local2];
                        dispatchEvent(new TraitAggregatorEvent(TraitAggregatorEvent.TRAIT_AGGREGATED, _local5, this.listenedChild.getTrait(_local5), this.listenedChild));
                        _local2++;
                    };
                    this._listenedChild.addEventListener(MediaElementEvent.TRAIT_ADD, this.onTraitAdded);
                    this._listenedChild.addEventListener(MediaElementEvent.TRAIT_REMOVE, this.onTraitRemoved);
                };
                dispatchEvent(new TraitAggregatorEvent(TraitAggregatorEvent.LISTENED_CHILD_CHANGE, null, null, null, _local3, this._listenedChild));
            };
        }
        public function get listenedChild():MediaElement{
            return (this._listenedChild);
        }
        public function getNextChildWithTrait(child:MediaElement, traitType:String):MediaElement{
            var _local5:MediaElement;
            var _local3:MediaElement;
            var _local4 = (child == null);
            for each (_local5 in this.childMediaElements) {
                if (_local5.hasTrait(traitType)){
                    if (_local4){
                        _local3 = _local5;
                        break;
                    };
                    if (_local5 == child){
                        _local4 = true;
                    };
                };
            };
            return (_local3);
        }
        public function forEachChildTrait(method:Function, traitType:String):void{
            var _local3:MediaElement;
            var _local4:MediaTraitBase;
            for each (_local3 in this.childMediaElements) {
                _local4 = _local3.getTrait(traitType);
                if (_local4 != null){
                    if (method.length == 1){
                        method(_local4);
                    } else {
                        method(_local4, _local3);
                    };
                };
            };
        }
        public function invokeOnEachChildTrait(method:String, args:Array, traitType:String):void{
            var _local4:MediaElement;
            var _local5:MediaTraitBase;
            var _local6:Function;
            for each (_local4 in this.childMediaElements) {
                _local5 = _local4.getTrait(traitType);
                if (_local5 != null){
                    _local6 = _local5[method];
                    _local6.apply(_local5, args);
                };
            };
        }
        public function hasTrait(traitType:String):Boolean{
            return ((this.getNumTraits(traitType) > 0));
        }
        public function getNumTraits(traitType:String):int{
            var _local4:MediaElement;
            var _local2:int;
            var _local3:Array = this.childrenTraits[traitType];
            for each (_local4 in _local3) {
                if (_local4.hasTrait(traitType)){
                    _local2++;
                };
            };
            return (_local2);
        }
        public function get numChildren():int{
            return (this.childMediaElements.length);
        }
        public function getChildAt(index:int):MediaElement{
            return (this.childMediaElements[index]);
        }
        public function getChildIndex(child:MediaElement):int{
            return (this.childMediaElements.indexOf(child));
        }
        public function addChild(child:MediaElement):void{
            this.addChildAt(child, this.childMediaElements.length);
        }
        public function addChildAt(child:MediaElement, index:int):void{
            var _local3:String;
            child.addEventListener(MediaElementEvent.TRAIT_ADD, this.onTraitAdded);
            child.addEventListener(MediaElementEvent.TRAIT_REMOVE, this.onTraitRemoved);
            this.childMediaElements.splice(index, 0, child);
            for each (_local3 in child.traitTypes) {
                if (!this.childrenTraits[_local3]){
                    this.childrenTraits[_local3] = new Array();
                };
                this.childrenTraits[_local3].push(child);
                dispatchEvent(new TraitAggregatorEvent(TraitAggregatorEvent.TRAIT_AGGREGATED, _local3, child.getTrait(_local3), child));
            };
        }
        public function removeChild(child:MediaElement):void{
            var _local3:String;
            var _local4:Array;
            child.removeEventListener(MediaElementEvent.TRAIT_ADD, this.onTraitAdded);
            child.removeEventListener(MediaElementEvent.TRAIT_REMOVE, this.onTraitRemoved);
            this.childMediaElements.splice(this.childMediaElements.indexOf(child), 1);
            var _local2 = 0;
            while (_local2 < child.traitTypes.length) {
                _local3 = child.traitTypes[_local2];
                _local4 = this.childrenTraits[_local3];
                this.childrenTraits[_local3].splice(_local4.indexOf(child), 1);
                dispatchEvent(new TraitAggregatorEvent(TraitAggregatorEvent.TRAIT_UNAGGREGATED, _local3, child.getTrait(_local3), child));
                _local2++;
            };
        }
        public function removeChildAt(index:int):void{
            if ((((index < 0)) || ((index >= this.childMediaElements.length)))){
                throw (new RangeError());
            };
            this.removeChild(this.childMediaElements[index]);
        }
        private function onTraitRemoved(event:MediaElementEvent):void{
            var _local2:MediaElement = (event.target as MediaElement);
            var _local3:Array = this.childrenTraits[event.traitType];
            if (_local3 != null){
                _local3.splice(_local3.indexOf(_local2), 1);
                dispatchEvent(new TraitAggregatorEvent(TraitAggregatorEvent.TRAIT_UNAGGREGATED, event.traitType, _local2.getTrait(event.traitType), _local2));
            };
        }
        private function onTraitAdded(event:MediaElementEvent):void{
            var _local2:MediaElement = (event.target as MediaElement);
            var _local3:MediaTraitBase = _local2.getTrait(event.traitType);
            if (!this.childrenTraits[event.traitType]){
                this.childrenTraits[event.traitType] = new Array();
            };
            this.childrenTraits[event.traitType].push(_local2);
            dispatchEvent(new TraitAggregatorEvent(TraitAggregatorEvent.TRAIT_AGGREGATED, event.traitType, _local3, _local2));
        }

    }
}//package org.osmf.elements.compositeClasses 
﻿package org.osmf.elements.compositeClasses {
    import org.osmf.events.*;
    import org.osmf.traits.*;
    import org.osmf.elements.compositeClasses.*;

    class CompositeBufferTrait extends BufferTrait implements IReusable {

        private var traitAggregator:TraitAggregator;
        private var traitAggregationHelper:TraitAggregationHelper;
        private var mode:String;
        private var bufferTimeFromChildren:Boolean;
        private var settingBufferTime:Boolean;

        public function CompositeBufferTrait(traitAggregator:TraitAggregator, mode:String){
            this.bufferTime = 0;
            this.bufferTimeFromChildren = true;
            this.settingBufferTime = false;
            this.mode = mode;
            this.traitAggregator = traitAggregator;
            this.traitAggregationHelper = new TraitAggregationHelper(traitType, traitAggregator, this.processAggregatedChild, this.processUnaggregatedChild);
        }
        override public function get bufferLength():Number{
            var length:* = NaN;
            var totalUnadjustedBufferLength:* = NaN;
            var totalAdjustedBufferLength:* = NaN;
            var needAdjustment:* = false;
            if (this.mode == CompositionMode.PARALLEL){
                totalUnadjustedBufferLength = 0;
                totalAdjustedBufferLength = 0;
                needAdjustment = false;
                this.traitAggregator.forEachChildTrait(function (mediaTrait:MediaTraitBase):void{
                    var _local2:BufferTrait = BufferTrait(mediaTrait);
                    if (_local2.bufferLength < _local2.bufferTime){
                        totalUnadjustedBufferLength = (totalUnadjustedBufferLength + _local2.bufferLength);
                        totalAdjustedBufferLength = (totalAdjustedBufferLength + _local2.bufferLength);
                        needAdjustment = true;
                    } else {
                        totalUnadjustedBufferLength = (totalUnadjustedBufferLength + _local2.bufferLength);
                        totalAdjustedBufferLength = (totalAdjustedBufferLength + _local2.bufferTime);
                    };
                }, MediaTraitType.BUFFER);
                length = (((needAdjustment) ? totalAdjustedBufferLength : totalUnadjustedBufferLength) / this.traitAggregator.getNumTraits(MediaTraitType.BUFFER));
            } else {
                length = ((this.traitOfCurrentChild)!=null) ? this.traitOfCurrentChild.bufferLength : 0;
            };
            return (length);
        }
        override public function set bufferTime(value:Number):void{
            var value:* = value;
            if (bufferTime == value){
                return;
            };
            this.settingBufferTime = true;
            this.traitAggregator.forEachChildTrait(function (mediaTrait:MediaTraitBase):void{
                BufferTrait(mediaTrait).bufferTime = value;
            }, MediaTraitType.BUFFER);
            super.bufferTime = value;
            this.bufferTimeFromChildren = false;
            this.settingBufferTime = false;
        }
        public function attach():void{
            this.traitAggregationHelper.attach();
        }
        public function detach():void{
            this.traitAggregationHelper.detach();
        }
        private function processAggregatedChild(child:MediaTraitBase):void{
            this.onBufferingChanged();
            if (this.bufferTimeFromChildren){
                this.onBufferTimeChanged();
            } else {
                if ((child is BufferTrait)){
                    this.settingBufferTime = true;
                    (child as BufferTrait).bufferTime = bufferTime;
                    this.settingBufferTime = false;
                };
            };
            child.addEventListener(BufferEvent.BUFFERING_CHANGE, this.onBufferingChanged, false, 0, true);
            child.addEventListener(BufferEvent.BUFFER_TIME_CHANGE, this.onBufferTimeChanged, false, 0, true);
        }
        private function processUnaggregatedChild(child:MediaTraitBase):void{
            this.onBufferingChanged();
            if (this.bufferTimeFromChildren){
                this.onBufferTimeChanged();
            };
            child.removeEventListener(BufferEvent.BUFFERING_CHANGE, this.onBufferingChanged);
            child.removeEventListener(BufferEvent.BUFFER_TIME_CHANGE, this.onBufferTimeChanged);
        }
        private function onBufferingChanged(event:BufferEvent=null):void{
            var _local2:Boolean = this.checkBuffering();
            if (_local2 != buffering){
                setBuffering(_local2);
            };
        }
        private function onBufferTimeChanged(event:BufferEvent=null):void{
            if (this.settingBufferTime){
                return;
            };
            var _local2:Number = bufferTime;
            var _local3:Number = this.calculateBufferTime();
            this.bufferTimeFromChildren = true;
            if (_local2 != _local3){
                super.bufferTime = _local3;
            };
        }
        private function calculateBufferTime():Number{
            var time:* = NaN;
            time = 0;
            if (this.mode == CompositionMode.PARALLEL){
                this.traitAggregator.forEachChildTrait(function (mediaTrait:MediaTraitBase):void{
                    time = (time + BufferTrait(mediaTrait).bufferTime);
                }, MediaTraitType.BUFFER);
                if (time > 0){
                    time = (time / this.traitAggregator.getNumTraits(MediaTraitType.BUFFER));
                };
            } else {
                time = ((this.traitOfCurrentChild)!=null) ? this.traitOfCurrentChild.bufferTime : 0;
            };
            return (time);
        }
        private function checkBuffering():Boolean{
            var isBuffering:* = false;
            isBuffering = false;
            if (this.mode == CompositionMode.PARALLEL){
                this.traitAggregator.forEachChildTrait(function (mediaTrait:MediaTraitBase):void{
                    isBuffering = ((isBuffering) || (BufferTrait(mediaTrait).buffering));
                }, MediaTraitType.BUFFER);
            } else {
                isBuffering = ((this.traitOfCurrentChild)!=null) ? this.traitOfCurrentChild.buffering : false;
            };
            return (isBuffering);
        }
        private function get traitOfCurrentChild():BufferTrait{
            return (((this.traitAggregator.listenedChild) ? (this.traitAggregator.listenedChild.getTrait(MediaTraitType.BUFFER) as BufferTrait) : null));
        }

    }
}//package org.osmf.elements.compositeClasses 
﻿package org.osmf.elements.compositeClasses {
    import org.osmf.elements.compositeClasses.*;

    class TraitAggregationHelper {

        private var traitType:String;
        private var traitAggregator:TraitAggregator;
        private var traitAggregationFunction:Function;
        private var traitUnaggregationFunction:Function;

        public function TraitAggregationHelper(traitType:String, traitAggregator:TraitAggregator, traitAggregationFunction:Function, traitUnaggregationFunction:Function){
            this.traitType = traitType;
            this.traitAggregator = traitAggregator;
            this.traitAggregationFunction = traitAggregationFunction;
            this.traitUnaggregationFunction = traitUnaggregationFunction;
            this.attach();
        }
        public function attach():void{
            this.traitAggregator.addEventListener(TraitAggregatorEvent.TRAIT_AGGREGATED, this.onChildAggregated, false, 0, true);
            this.traitAggregator.addEventListener(TraitAggregatorEvent.TRAIT_UNAGGREGATED, this.onChildUnaggregated, false, 0, true);
            this.traitAggregator.forEachChildTrait(this.traitAggregationFunction, this.traitType);
        }
        public function detach():void{
            this.traitAggregator.removeEventListener(TraitAggregatorEvent.TRAIT_AGGREGATED, this.onChildAggregated);
            this.traitAggregator.removeEventListener(TraitAggregatorEvent.TRAIT_UNAGGREGATED, this.onChildUnaggregated);
        }
        private function onChildAggregated(event:TraitAggregatorEvent):void{
            if (event.traitType == this.traitType){
                if (this.traitAggregationFunction.length == 2){
                    this.traitAggregationFunction.call(null, event.trait, event.child);
                } else {
                    this.traitAggregationFunction.call(null, event.trait);
                };
            };
        }
        private function onChildUnaggregated(event:TraitAggregatorEvent):void{
            if (event.traitType == this.traitType){
                if (this.traitUnaggregationFunction.length == 2){
                    this.traitUnaggregationFunction.call(null, event.trait, event.child);
                } else {
                    this.traitUnaggregationFunction.call(null, event.trait);
                };
            };
        }

    }
}//package org.osmf.elements.compositeClasses 
﻿package org.osmf.elements.compositeClasses {

    public interface IReusable {

        function detach():void;
        function attach():void;

    }
}//package org.osmf.elements.compositeClasses 
﻿package org.osmf.elements {
    import org.osmf.media.*;
    import org.osmf.events.*;
    import flash.events.*;
    import flash.net.*;
    import org.osmf.traits.*;
    import org.osmf.utils.*;
    import __AS3__.vec.*;
    import flash.errors.*;
    import flash.media.*;
    import org.osmf.elements.audioClasses.*;

    public class SoundLoader extends LoaderBase {

        private static const MIME_TYPES_SUPPORTED:Vector.<String> = Vector.<String>(["audio/mpeg"]);
        private static const MEDIA_TYPES_SUPPORTED:Vector.<String> = Vector.<String>([MediaType.AUDIO]);
        private static const MIN_BYTES_TO_RECEIVE:int = 16;

        private var checkPolicyFile:Boolean;

        public function SoundLoader(checkPolicyFile:Boolean=false){
            this.checkPolicyFile = checkPolicyFile;
        }
        override public function canHandleResource(resource:MediaResourceBase):Boolean{
            var _local2:int = MediaTypeUtil.checkMetadataMatchWithResource(resource, MEDIA_TYPES_SUPPORTED, MIME_TYPES_SUPPORTED);
            if (_local2 != MediaTypeUtil.METADATA_MATCH_UNKNOWN){
                return ((_local2 == MediaTypeUtil.METADATA_MATCH_FOUND));
            };
            var _local3:URLResource = (resource as URLResource);
            if ((((((_local3 == null)) || ((_local3.url == null)))) || ((_local3.url.length <= 0)))){
                return (false);
            };
            var _local4:URL = new URL(_local3.url);
            if (_local4.protocol == ""){
                return (!((_local4.path.search(/\.mp3$|\.m4a$/i) == -1)));
            };
            if (_local4.protocol.search(/file$|http$|https$/i) != -1){
                return ((((((((_local4.path == null)) || ((_local4.path.length <= 0)))) || ((_local4.path.indexOf(".") == -1)))) || (!((_local4.path.search(/\.mp3$|\.m4a$/i) == -1)))));
            };
            return (false);
        }
        override protected function executeLoad(loadTrait:LoadTrait):void{
            var soundLoadTrait:* = null;
            var sound:* = null;
            var onProgress:* = null;
            var onIOError:* = null;
            var loadTrait:* = loadTrait;
            var toggleSoundListeners:* = function (sound:Sound, on:Boolean):void{
                if (on){
                    sound.addEventListener(ProgressEvent.PROGRESS, onProgress);
                    sound.addEventListener(IOErrorEvent.IO_ERROR, onIOError);
                } else {
                    sound.removeEventListener(ProgressEvent.PROGRESS, onProgress);
                    sound.removeEventListener(IOErrorEvent.IO_ERROR, onIOError);
                };
            };
            onProgress = function (event:ProgressEvent):void{
                if ((((event.bytesTotal >= MIN_BYTES_TO_RECEIVE)) && ((soundLoadTrait.loadState == LoadState.LOADING)))){
                    toggleSoundListeners(sound, false);
                    soundLoadTrait.sound = sound;
                    updateLoadTrait(soundLoadTrait, LoadState.READY);
                };
            };
            onIOError = function (ioEvent:IOErrorEvent, ioEventDetail:String=null):void{
                toggleSoundListeners(sound, false);
                updateLoadTrait(loadTrait, LoadState.LOAD_ERROR);
                loadTrait.dispatchEvent(new MediaErrorEvent(MediaErrorEvent.MEDIA_ERROR, false, false, new MediaError(MediaErrorCodes.IO_ERROR, ((ioEvent) ? ioEvent.text : ioEventDetail))));
            };
            var handleSecurityError:* = function (securityErrorDetail:String):void{
                toggleSoundListeners(sound, false);
                updateLoadTrait(loadTrait, LoadState.LOAD_ERROR);
                loadTrait.dispatchEvent(new MediaErrorEvent(MediaErrorEvent.MEDIA_ERROR, false, false, new MediaError(MediaErrorCodes.SECURITY_ERROR, securityErrorDetail)));
            };
            soundLoadTrait = (loadTrait as SoundLoadTrait);
            updateLoadTrait(soundLoadTrait, LoadState.LOADING);
            sound = new Sound();
            toggleSoundListeners(sound, true);
            var urlRequest:* = new URLRequest((soundLoadTrait.resource as URLResource).url.toString());
            var context:* = new SoundLoaderContext(1000, this.checkPolicyFile);
            try {
                sound.load(urlRequest, context);
            } catch(ioError:IOError) {
                onIOError(null, ioError.message);
            } catch(securityError:SecurityError) {
                handleSecurityError(securityError.message);
            };
        }
        override protected function executeUnload(loadTrait:LoadTrait):void{
            var _local2:SoundLoadTrait = (loadTrait as SoundLoadTrait);
            updateLoadTrait(_local2, LoadState.UNLOADING);
            try {
                if (_local2.sound != null){
                    _local2.sound.close();
                };
            } catch(error:IOError) {
            };
            updateLoadTrait(_local2, LoadState.UNINITIALIZED);
        }

    }
}//package org.osmf.elements 
﻿package org.osmf.metadata {
    import org.osmf.events.*;
    import org.osmf.utils.*;
    import flash.errors.*;

    public class MetadataWatcher {

        private var parentMetadata:Metadata;
        private var namespaceURL:String;
        private var key:String;
        private var callback:Function;
        private var currentMetadata:Metadata;
        private var watching:Boolean;

        public function MetadataWatcher(parentMetadata:Metadata, namespaceURL:String, key:String, callback:Function){
            if ((((((parentMetadata == null)) || ((namespaceURL == null)))) || ((callback == null)))){
                throw (new IllegalOperationError(OSMFStrings.getString(OSMFStrings.NULL_PARAM)));
            };
            this.parentMetadata = parentMetadata;
            this.namespaceURL = namespaceURL;
            this.key = key;
            this.callback = callback;
        }
        public function watch(dispatchInitialChangeEvent:Boolean=true):void{
            if (this.watching == false){
                this.watching = true;
                this.parentMetadata.addEventListener(MetadataEvent.VALUE_ADD, this.onMetadataAdd, false, 0, true);
                this.processWatchedMetadataChange((this.parentMetadata.getValue(this.namespaceURL) as Metadata));
                if (dispatchInitialChangeEvent == true){
                    if (this.key != null){
                        this.callback(((this.currentMetadata) ? this.currentMetadata.getValue(this.key) : undefined));
                    } else {
                        this.callback(((this.currentMetadata) ? this.currentMetadata : undefined));
                    };
                };
            };
        }
        public function unwatch():void{
            if (this.watching == true){
                this.processWatchedMetadataChange(null, false);
                this.parentMetadata.removeEventListener(MetadataEvent.VALUE_ADD, this.onMetadataAdd);
                this.watching = false;
            };
        }
        private function processWatchedMetadataChange(metadata:Metadata, dispatchChange:Boolean=true):void{
            var _local3:Metadata;
            if (this.currentMetadata != metadata){
                _local3 = this.currentMetadata;
                if (this.currentMetadata){
                    this.currentMetadata.removeEventListener(MetadataEvent.VALUE_CHANGE, this.onValueChange);
                    this.currentMetadata.removeEventListener(MetadataEvent.VALUE_ADD, this.onValueAdd);
                    this.currentMetadata.removeEventListener(MetadataEvent.VALUE_REMOVE, this.onValueRemove);
                    this.parentMetadata.removeEventListener(MetadataEvent.VALUE_REMOVE, this.onMetadataRemove);
                } else {
                    this.parentMetadata.removeEventListener(MetadataEvent.VALUE_ADD, this.onMetadataAdd);
                };
                this.currentMetadata = metadata;
                if (metadata){
                    metadata.addEventListener(MetadataEvent.VALUE_CHANGE, this.onValueChange, false, 0, true);
                    metadata.addEventListener(MetadataEvent.VALUE_ADD, this.onValueAdd, false, 0, true);
                    metadata.addEventListener(MetadataEvent.VALUE_REMOVE, this.onValueRemove, false, 0, true);
                    this.parentMetadata.addEventListener(MetadataEvent.VALUE_REMOVE, this.onMetadataRemove);
                } else {
                    this.parentMetadata.addEventListener(MetadataEvent.VALUE_ADD, this.onMetadataAdd);
                };
            };
        }
        private function onMetadataAdd(event:MetadataEvent):void{
            var _local2:Metadata = (event.value as Metadata);
            if (((_local2) && ((event.key == this.namespaceURL)))){
                this.processWatchedMetadataChange(_local2);
                if (this.key == null){
                    this.callback(_local2);
                } else {
                    this.callback(_local2.getValue(this.key));
                };
            };
        }
        private function onMetadataRemove(event:MetadataEvent):void{
            var _local2:Metadata = (event.value as Metadata);
            if (((_local2) && ((event.key == this.namespaceURL)))){
                this.processWatchedMetadataChange(null);
                this.callback(undefined);
            };
        }
        private function onValueChange(event:MetadataEvent):void{
            if (this.key){
                if (this.key == event.key){
                    this.callback(event.value);
                };
            } else {
                this.callback((event.target as Metadata));
            };
        }
        private function onValueAdd(event:MetadataEvent):void{
            if (this.key){
                if (this.key == event.key){
                    this.callback(event.value);
                };
            } else {
                this.callback((event.target as Metadata));
            };
        }
        private function onValueRemove(event:MetadataEvent):void{
            if (this.key){
                if (this.key == event.key){
                    this.callback(undefined);
                };
            } else {
                this.callback((event.target as Metadata));
            };
        }

    }
}//package org.osmf.metadata 
﻿package org.osmf.metadata {

    public final class CuePointType {

        public static const NAVIGATION:String = "navigation";
        public static const EVENT:String = "event";
        public static const ACTIONSCRIPT:String = "actionscript";

    }
}//package org.osmf.metadata 
﻿package org.osmf.metadata {

    public class TimelineMarker {

        private var _time:Number;
        private var _duration:Number;

        public function TimelineMarker(time:Number, duration:Number=NaN){
            this._time = time;
            this._duration = duration;
        }
        public function get time():Number{
            return (this._time);
        }
        public function get duration():Number{
            return (this._duration);
        }

    }
}//package org.osmf.metadata 
﻿package org.osmf.metadata {
    import org.osmf.events.*;
    import flash.events.*;
    import org.osmf.utils.*;
    import __AS3__.vec.*;

    public class MetadataGroup extends EventDispatcher {

        private var _namespaceURL:String;
        private var _parentMetadatas:Vector.<Metadata>;
        private var _metadatas:Vector.<Metadata>;

        public function MetadataGroup(namespaceURL:String){
            this._namespaceURL = namespaceURL;
            this._parentMetadatas = new Vector.<Metadata>();
            this._metadatas = new Vector.<Metadata>();
        }
        public function get namespaceURL():String{
            return (this._namespaceURL);
        }
        public function addMetadata(parentMetadata:Metadata, metadata:Metadata):void{
            if ((((parentMetadata == null)) || ((metadata == null)))){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.NULL_PARAM)));
            };
            this._parentMetadatas.push(parentMetadata);
            this._metadatas.push(metadata);
            metadata.addEventListener(MetadataEvent.VALUE_CHANGE, this.changeDispatchingEventHandler);
            dispatchEvent(new Event(Event.CHANGE));
        }
        public function removeMetadata(parentMetadata:Metadata, metadata:Metadata):Metadata{
            var _local3:Metadata;
            var _local4:int = this.indexOf(parentMetadata, metadata);
            if (_local4 != -1){
                this._parentMetadatas.splice(_local4, 1);
                _local3 = this._metadatas.splice(_local4, 1)[0];
                metadata.removeEventListener(MetadataEvent.VALUE_CHANGE, this.changeDispatchingEventHandler);
                dispatchEvent(new Event(Event.CHANGE));
            };
            return (_local3);
        }
        public function get metadatas():Vector.<Metadata>{
            return (this._metadatas);
        }
        public function get parentMetadatas():Vector.<Metadata>{
            return (this._parentMetadatas);
        }
        public function indexOf(parentMetadata:Metadata, metadata:Metadata):int{
            var _local5:Metadata;
            var _local3 = -1;
            var _local4:int;
            while (_local4 < this._metadatas.length) {
                _local5 = this._metadatas[_local4];
                if ((((_local5 == metadata)) && ((this.parentMetadatas[_local4] == parentMetadata)))){
                    _local3 = _local4;
                    break;
                };
                _local4++;
            };
            return (_local3);
        }
        private function changeDispatchingEventHandler(event:Event):void{
            dispatchEvent(new Event(Event.CHANGE));
        }

    }
}//package org.osmf.metadata 
﻿package org.osmf.metadata {

    public class CuePoint extends TimelineMarker {

        public static const EMBEDDED_CUEPOINTS_NAMESPACE:String = "http://www.osmf.org/timeline/embeddedCuePoints/1.0";
        public static const DYNAMIC_CUEPOINTS_NAMESPACE:String = "http://www.osmf.org/timeline/dynamicCuePoints/1.0";

        private var _name:String;
        private var _type:String;
        private var _parameters:Object;

        public function CuePoint(type:String, time:Number, name:String, parameters:Object, duration:Number=NaN){
            super(time, duration);
            this._type = type;
            this._name = name;
            this._parameters = parameters;
        }
        public function get type():String{
            return (this._type);
        }
        public function get name():String{
            return (this._name);
        }
        public function get parameters():Object{
            return (this._parameters);
        }

    }
}//package org.osmf.metadata 
﻿package org.osmf.metadata {
    import org.osmf.events.*;
    import flash.events.*;
    import flash.utils.*;
    import org.osmf.utils.*;
    import __AS3__.vec.*;

    public class Metadata extends EventDispatcher {

        private var data:Dictionary;

        public function getValue(key:String){
            if (key == null){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.NULL_PARAM)));
            };
            return (((this.data)!=null) ? this.data[key] : null);
        }
        public function addValue(key:String, value:Object):void{
            var _local4:Event;
            if (key == null){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.NULL_PARAM)));
            };
            if (this.data == null){
                this.data = new Dictionary();
            };
            var _local3:* = this.data[key];
            this.data[key] = value;
            if (_local3 != value){
                _local4 = ((_local3)===undefined) ? new MetadataEvent(MetadataEvent.VALUE_ADD, false, false, key, value) : new MetadataEvent(MetadataEvent.VALUE_CHANGE, false, false, key, value, _local3);
                dispatchEvent(_local4);
            };
        }
        public function removeValue(key:String){
            if (key == null){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.NULL_PARAM)));
            };
            var _local2:* = this.data[key];
            if (_local2 !== undefined){
                delete this.data[key];
                dispatchEvent(new MetadataEvent(MetadataEvent.VALUE_REMOVE, false, false, key, _local2));
            };
            return (_local2);
        }
        public function get keys():Vector.<String>{
            var _local2:Object;
            var _local1:Vector.<String> = new Vector.<String>();
            if (this.data != null){
                for (_local2 in this.data) {
                    _local1.push(_local2);
                };
            };
            return (_local1);
        }
        public function get synthesizer():MetadataSynthesizer{
            return (null);
        }

    }
}//package org.osmf.metadata 
﻿package org.osmf.metadata {

    public class NonSynthesizingMetadata extends Metadata {

        private var _synthesizer:MetadataSynthesizer;

        public function NonSynthesizingMetadata(){
            this._synthesizer = new NullMetadataSynthesizer();
            super();
        }
        override public function get synthesizer():MetadataSynthesizer{
            return (this._synthesizer);
        }

    }
}//package org.osmf.metadata 
﻿package org.osmf.metadata {
    import org.osmf.media.*;
    import org.osmf.events.*;
    import flash.events.*;
    import flash.utils.*;
    import org.osmf.traits.*;
    import org.osmf.utils.*;
    import __AS3__.vec.*;

    public class TimelineMetadata extends Metadata {

        private static const CHECK_INTERVAL:Number = 100;
        private static const TOLERANCE:Number = 0.25;

        private var temporalKeyCollection:Vector.<Number>;
        private var temporalValueCollection:Vector.<TimelineMarker>;
        private var media:MediaElement;
        private var timeTrait:TimeTrait;
        private var seekTrait:SeekTrait;
        private var playTrait:PlayTrait;
        private var lastFiredTemporalMetadataIndex:int;
        private var intervalTimer:Timer;
        private var restartTimer:Boolean;
        private var _enabled:Boolean;
        private var durationTimers:Dictionary;

        public function TimelineMetadata(media:MediaElement){
            if (media == null){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.NULL_PARAM)));
            };
            this.media = media;
            this._enabled = true;
            this.intervalTimer = new Timer(CHECK_INTERVAL);
            this.intervalTimer.addEventListener(TimerEvent.TIMER, this.onIntervalTimer);
            this.timeTrait = (media.getTrait(MediaTraitType.TIME) as TimeTrait);
            this.seekTrait = (media.getTrait(MediaTraitType.SEEK) as SeekTrait);
            this.setupTraitEventListener(MediaTraitType.SEEK);
            this.playTrait = (media.getTrait(MediaTraitType.PLAY) as PlayTrait);
            this.setupTraitEventListener(MediaTraitType.PLAY);
            media.addEventListener(MediaElementEvent.TRAIT_ADD, this.onTraitAdd);
            media.addEventListener(MediaElementEvent.TRAIT_REMOVE, this.onTraitRemove);
        }
        public function get numMarkers():int{
            return (((this.temporalValueCollection) ? this.temporalValueCollection.length : 0));
        }
        public function getMarkerAt(index:int):TimelineMarker{
            if ((((((index >= 0)) && (!((this.temporalValueCollection == null))))) && ((index < this.temporalValueCollection.length)))){
                return (this.temporalValueCollection[index]);
            };
            return (null);
        }
        public function addMarker(marker:TimelineMarker):void{
            if (marker == null){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.INVALID_PARAM)));
            };
            this.addValue(("" + marker.time), marker);
        }
        public function removeMarker(marker:TimelineMarker):TimelineMarker{
            if (marker == null){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.INVALID_PARAM)));
            };
            return (this.removeValue(("" + marker.time)));
        }
        override public function addValue(key:String, value:Object):void{
            var _local5:int;
            var _local3:Number = new Number(key);
            var _local4:TimelineMarker = (value as TimelineMarker);
            if ((((((((key == null)) || (isNaN(_local3)))) || ((_local3 < 0)))) || ((_local4 == null)))){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.INVALID_PARAM)));
            };
            if (this.temporalValueCollection == null){
                this.temporalKeyCollection = new Vector.<Number>();
                this.temporalKeyCollection.push(_local3);
                this.temporalValueCollection = new Vector.<TimelineMarker>();
                this.temporalValueCollection.push(value);
            } else {
                _local5 = this.findTemporalMetadata(0, (this.temporalValueCollection.length - 1), _local3);
                if (_local5 < 0){
                    _local5 = (_local5 * -1);
                    this.temporalKeyCollection.splice(_local5, 0, _local3);
                    this.temporalValueCollection.splice(_local5, 0, _local4);
                } else {
                    if ((((_local5 == 0)) && (!((_local3 == this.temporalKeyCollection[0]))))){
                        this.temporalKeyCollection.splice(_local5, 0, _local3);
                        this.temporalValueCollection.splice(_local5, 0, _local4);
                    } else {
                        this.temporalKeyCollection[_local5] = _local3;
                        this.temporalValueCollection[_local5] = _local4;
                    };
                };
            };
            this.enabled = true;
            dispatchEvent(new MetadataEvent(MetadataEvent.VALUE_ADD, false, false, key, _local4));
            dispatchEvent(new TimelineMetadataEvent(TimelineMetadataEvent.MARKER_ADD, false, false, _local4));
        }
        override public function removeValue(key:String){
            if (key == null){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.NULL_PARAM)));
            };
            var _local2:Number = new Number(key);
            var _local3:* = null;
            var _local4:int = ((this.temporalValueCollection) ? this.findTemporalMetadata(0, (this.temporalValueCollection.length - 1), _local2) : -1);
            if (_local4 >= 0){
                this.temporalKeyCollection.splice(_local4, 1);
                _local3 = this.temporalValueCollection.splice(_local4, 1)[0];
                if (this.temporalValueCollection.length == 0){
                    this.reset(false);
                    this.temporalValueCollection = null;
                    this.temporalKeyCollection = null;
                };
                dispatchEvent(new MetadataEvent(MetadataEvent.VALUE_REMOVE, false, false, key, _local3));
                dispatchEvent(new TimelineMetadataEvent(TimelineMetadataEvent.MARKER_REMOVE, false, false, (_local3 as TimelineMarker)));
            };
            return (_local3);
        }
        override public function getValue(key:String){
            var _local3:int;
            var _local4:Number;
            if (key == null){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.NULL_PARAM)));
            };
            var _local2:Number = new Number(key);
            if (!isNaN(_local2)){
                _local3 = 0;
                while (_local3 < this.temporalKeyCollection.length) {
                    _local4 = this.temporalKeyCollection[_local3];
                    if (_local4 == _local2){
                        return (this.temporalValueCollection[_local3]);
                    };
                    _local3++;
                };
            };
            return (null);
        }
        public function get enabled():Boolean{
            return (this._enabled);
        }
        public function set enabled(value:Boolean):void{
            this._enabled = value;
            this.reset(value);
        }
        private function startTimer(start:Boolean=true):void{
            if (!start){
                this.intervalTimer.stop();
            } else {
                if (((((((((((!((this.timeTrait == null))) && (!((this.temporalValueCollection == null))))) && ((this.temporalValueCollection.length > 0)))) && (this.restartTimer))) && (this.enabled))) && (!(this.intervalTimer.running)))){
                    if (((!((this.playTrait == null))) && ((this.playTrait.playState == PlayState.PLAYING)))){
                        this.intervalTimer.start();
                    };
                };
            };
        }
        private function reset(startTimer:Boolean):void{
            this.lastFiredTemporalMetadataIndex = -1;
            this.restartTimer = true;
            this.intervalTimer.reset();
            this.intervalTimer.delay = CHECK_INTERVAL;
            if (startTimer){
                this.startTimer();
            };
        }
        private function checkForTemporalMetadata():void{
            var _local1:Number = this.timeTrait.currentTime;
            var _local2:int = this.findTemporalMetadata((this.lastFiredTemporalMetadataIndex + 1), (this.temporalValueCollection.length - 1), _local1);
            if (_local2 <= 0){
                _local2 = (_local2 * -1);
                _local2 = ((_local2)>0) ? (_local2 - 1) : 0;
            };
            if (((!(this.checkTemporalMetadata(_local2, _local1))) && (((_local2 + 1) < this.temporalValueCollection.length)))){
                this.checkTemporalMetadata((_local2 + 1), _local1);
            };
        }
        private function setupTraitEventListener(traitType:String, add:Boolean=true):void{
            var _local3:PlayEvent;
            if (add){
                if ((((traitType == MediaTraitType.SEEK)) && (!((this.seekTrait == null))))){
                    this.seekTrait.addEventListener(SeekEvent.SEEKING_CHANGE, this.onSeekingChange);
                } else {
                    if ((((traitType == MediaTraitType.PLAY)) && (!((this.playTrait == null))))){
                        this.playTrait.addEventListener(PlayEvent.PLAY_STATE_CHANGE, this.onPlayStateChange);
                        if (this.playTrait.playState == PlayState.PLAYING){
                            _local3 = new PlayEvent(PlayEvent.PLAY_STATE_CHANGE, false, false, PlayState.PLAYING);
                            this.onPlayStateChange(_local3);
                        };
                    };
                };
            } else {
                if ((((traitType == MediaTraitType.SEEK)) && (!((this.seekTrait == null))))){
                    this.seekTrait.removeEventListener(SeekEvent.SEEKING_CHANGE, this.onSeekingChange);
                } else {
                    if ((((traitType == MediaTraitType.PLAY)) && (!((this.playTrait == null))))){
                        this.playTrait.removeEventListener(PlayEvent.PLAY_STATE_CHANGE, this.onPlayStateChange);
                    };
                };
            };
        }
        private function onSeekingChange(event:SeekEvent):void{
            if (event.seeking){
                this.reset(true);
            };
        }
        private function onPlayStateChange(event:PlayEvent):void{
            var _local2:Timer;
            if (event.playState == PlayState.PLAYING){
                if (this.durationTimers != null){
                    for each (_local2 in this.durationTimers) {
                        _local2.start();
                    };
                };
                this.startTimer();
            } else {
                if (this.durationTimers != null){
                    for each (_local2 in this.durationTimers) {
                        _local2.stop();
                    };
                };
                this.startTimer(false);
            };
        }
        private function findTemporalMetadata(firstIndex:int, lastIndex:int, time:Number):int{
            var _local4:int;
            if (firstIndex <= lastIndex){
                _local4 = ((firstIndex + lastIndex) / 2);
                if (time == this.temporalKeyCollection[_local4]){
                    return (_local4);
                };
                if (time < this.temporalKeyCollection[_local4]){
                    return (this.findTemporalMetadata(firstIndex, (_local4 - 1), time));
                };
                return (this.findTemporalMetadata((_local4 + 1), lastIndex, time));
            };
            return (-(firstIndex));
        }
        private function dispatchTemporalEvents(index:int):void{
            var marker:* = null;
            var timer:* = null;
            var endTime:* = NaN;
            var onDurationTimer:* = null;
            var index:* = index;
            marker = this.temporalValueCollection[index];
            dispatchEvent(new TimelineMetadataEvent(TimelineMetadataEvent.MARKER_TIME_REACHED, false, false, marker));
            if (marker.duration > 0){
                onDurationTimer = function (event:TimerEvent):void{
                    if (((timeTrait) && ((timeTrait.currentTime >= endTime)))){
                        timer.removeEventListener(TimerEvent.TIMER, onDurationTimer);
                        delete durationTimers[marker];
                        dispatchEvent(new TimelineMetadataEvent(TimelineMetadataEvent.MARKER_DURATION_REACHED, false, false, marker));
                    };
                };
                timer = new Timer(CHECK_INTERVAL);
                endTime = (marker.time + marker.duration);
                if (this.durationTimers == null){
                    this.durationTimers = new Dictionary();
                };
                this.durationTimers[marker] = timer;
                timer.addEventListener(TimerEvent.TIMER, onDurationTimer);
                timer.start();
            };
        }
        private function checkTemporalMetadata(index:int, now:Number):Boolean{
            var _local4:Number;
            var _local5:Number;
            var _local6:Number;
            if (((!(this.temporalValueCollection)) || (!(this.temporalValueCollection.length)))){
                return (false);
            };
            var _local3:Boolean;
            if ((((((this.temporalValueCollection[index].time >= (now - TOLERANCE))) && ((this.temporalValueCollection[index].time <= (now + TOLERANCE))))) && (!((index == this.lastFiredTemporalMetadataIndex))))){
                this.lastFiredTemporalMetadataIndex = index;
                this.dispatchTemporalEvents(index);
                _local4 = this.temporalKeyCollection[index];
                _local5 = this.calcNextTime(index);
                _local6 = (((_local5 - _local4) * 1000) / 4);
                _local6 = ((_local6)>CHECK_INTERVAL) ? _local6 : CHECK_INTERVAL;
                if (_local4 == _local5){
                    this.startTimer(false);
                    this.restartTimer = false;
                } else {
                    if (_local6 != this.intervalTimer.delay){
                        this.intervalTimer.reset();
                        this.intervalTimer.delay = _local6;
                        this.startTimer();
                    };
                };
                _local3 = true;
            } else {
                if (((!((this.intervalTimer.delay == CHECK_INTERVAL))) && (((now + (this.intervalTimer.delay / 1000)) > this.calcNextTime(index))))){
                    this.intervalTimer.reset();
                    this.intervalTimer.delay = CHECK_INTERVAL;
                    this.startTimer();
                };
            };
            return (_local3);
        }
        private function calcNextTime(index:int):Number{
            return (this.temporalValueCollection[(((index + 1))<this.temporalKeyCollection.length) ? (index + 1) : (this.temporalKeyCollection.length - 1)].time);
        }
        private function onIntervalTimer(event:TimerEvent):void{
            this.checkForTemporalMetadata();
        }
        private function onTraitAdd(event:MediaElementEvent):void{
            switch (event.traitType){
                case MediaTraitType.TIME:
                    this.timeTrait = (this.media.getTrait(MediaTraitType.TIME) as TimeTrait);
                    this.startTimer();
                    break;
                case MediaTraitType.SEEK:
                    this.seekTrait = (this.media.getTrait(MediaTraitType.SEEK) as SeekTrait);
                    break;
                case MediaTraitType.PLAY:
                    this.playTrait = (this.media.getTrait(MediaTraitType.PLAY) as PlayTrait);
                    break;
            };
            this.setupTraitEventListener(event.traitType);
        }
        private function onTraitRemove(event:MediaElementEvent):void{
            this.setupTraitEventListener(event.traitType, false);
            switch (event.traitType){
                case MediaTraitType.TIME:
                    this.timeTrait = null;
                    if (this.media.hasOwnProperty("numChildren") == false){
                        this.startTimer(false);
                    };
                    break;
                case MediaTraitType.SEEK:
                    this.seekTrait = null;
                    break;
                case MediaTraitType.PLAY:
                    this.playTrait = null;
                    break;
            };
        }

    }
}//package org.osmf.metadata 
﻿package org.osmf.metadata {
    import __AS3__.vec.*;
    import org.osmf.elements.compositeClasses.*;

    public class MetadataSynthesizer {

        public function synthesize(namespaceURL:String, targetParentMetadata:Metadata, metadatas:Vector.<Metadata>, mode:String, serialElementActiveChildMetadata:Metadata):Metadata{
            var _local6:Metadata;
            if ((((mode == CompositionMode.SERIAL)) && (serialElementActiveChildMetadata))){
                _local6 = (serialElementActiveChildMetadata.getValue(namespaceURL) as Metadata);
            } else {
                _local6 = ((metadatas.length)>=1) ? metadatas[0] : null;
            };
            return (_local6);
        }

    }
}//package org.osmf.metadata 
﻿package org.osmf.metadata {

    public final class MetadataNamespaces {

        public static const MEDIA_ELEMENT_METADATA:String = "http://www.osmf.org/mediaElement/1.0";
        public static const DERIVED_RESOURCE_METADATA:String = "http://www.osmf.org/derivedResource/1.0";
        public static const FMS_SERVER_VERSION_METADATA:String = "http://www.osmf.org/fmsServerVersion/1.0";
        public static const ELEMENT_ID:String = "http://www.osmf.org/layout/elementId/1.0";
        public static const LAYOUT_RENDERER_TYPE:String = "http://www.osmf.org/layout/renderer_type/1.0";
        public static const ABSOLUTE_LAYOUT_PARAMETERS:String = "http://www.osmf.org/layout/absolute/1.0";
        public static const RELATIVE_LAYOUT_PARAMETERS:String = "http://www.osmf.org/layout/relative/1.0";
        public static const ANCHOR_LAYOUT_PARAMETERS:String = "http://www.osmf.org/layout/anchor/1.0";
        public static const PADDING_LAYOUT_PARAMETERS:String = "http://www.osmf.org/layout/padding/1.0";
        public static const LAYOUT_ATTRIBUTES:String = "http://www.osmf.org/layout/attributes/1.0";
        public static const OVERLAY_LAYOUT_PARAMETERS:String = "http://www.osmf.org/layout/overlay/1.0";
        public static const BOX_LAYOUT_ATTRIBUTES:String = "http://www.osmf.org/layout/attributes/box/1.0";
        public static const DRM_METADATA:String = "http://www.osmf.org/drm/1.0";
        public static const MULTICAST_INFO:String = "http://www.osmf.org/multicast/info/1.0";
        public static const MULTICAST_NET_LOADER:String = "http://www.osmf.org/multicast/netloader/1.0";
        public static const DVR_METADATA:String = "http://www.osmf.org/dvr/1.0";
        public static const DRM_ADDITIONAL_HEADER_KEY:String = "DRMAdditionalHeader";
        public static const HTTP_STREAMING_METADATA:String = "http://www.osmf.org/httpstreaming/1.0";
        public static const HTTP_STREAMING_BOOTSTRAP_KEY:String = "bootstrap";
        public static const HTTP_STREAMING_STREAM_METADATA_KEY:String = "streamMetadata";
        public static const HTTP_STREAMING_XMP_METADATA_KEY:String = "xmpMetadata";
        public static const HTTP_STREAMING_SERVER_BASE_URLS_KEY:String = "serverBaseUrls";
        public static const HTTP_STREAMING_DVR_BEGIN_OFFSET_KEY:String = "beginOffset";
        public static const HTTP_STREAMING_DVR_END_OFFSET_KEY:String = "endOffset";
        public static const HTTP_STREAMING_DVR_WINDOW_DURATION_KEY:String = "windowDuration";
        public static const HTTP_STREAMING_DVR_OFFLINE_KEY:String = "dvrOffline";
        public static const HTTP_STREAMING_DVR_ID_KEY:String = "dvrId";
        public static const RESOURCE_INITIAL_INDEX:String = "resourceInitialIndex";
        public static const BEST_EFFORT_FETCH_METADATA:String = "http://www.osmf.org/bestEffortFetch/1.0";
        public static const HTTP_STREAMING_BEST_EFFORT_FETCH_MAX_FORWARD_FETCHES:String = "bestEffortFetchMaxForwardFetches";
        public static const HTTP_STREAMING_BEST_EFFORT_FETCH_MAX_BACKWARD_FETCHES:String = "bestEffortFetchMaxBackwardFetches";
        public static const HTTP_STREAMING_BEST_EFFORT_FETCH_SEGMENT_DURATION:String = "bestEffortFetchSegmentDuration";
        public static const HTTP_STREAMING_BEST_EFFORT_FETCH_FRAGMENT_DURATION:String = "bestEffortFetchFragmentDuration";

    }
}//package org.osmf.metadata 
﻿package org.osmf.metadata {
    import __AS3__.vec.*;

    public class NullMetadataSynthesizer extends MetadataSynthesizer {

        override public function synthesize(namespaceURL:String, targetParentMetadata:Metadata, metadatas:Vector.<Metadata>, mode:String, activeParentMetadata:Metadata):Metadata{
            return (null);
        }

    }
}//package org.osmf.metadata 
﻿package org.osmf.smil.elements {
    import org.osmf.media.*;
    import org.osmf.elements.*;
    import org.osmf.smil.loader.*;

    public class SMILElement extends LoadFromDocumentElement {

        public function SMILElement(resource:MediaResourceBase=null, loader:SMILLoader=null){
            if (loader == null){
                loader = new SMILLoader();
            };
            super(resource, loader);
        }
    }
}//package org.osmf.smil.elements 
﻿package org.osmf.smil.model {
    import org.osmf.utils.*;
    import __AS3__.vec.*;

    public class SMILElement {

        private var _type:String;
        private var children:Vector.<SMILElement>;

        public function SMILElement(type:String){
            this._type = type;
        }
        public function get type():String{
            return (this._type);
        }
        public function addChild(child:SMILElement):void{
            if (this.children == null){
                this.children = new Vector.<SMILElement>();
            };
            this.children.push(child);
        }
        public function get numChildren():int{
            var _local1:int;
            if (this.children != null){
                _local1 = this.children.length;
            };
            return (_local1);
        }
        public function getChildAt(index:int):SMILElement{
            if (((!((this.children == null))) && ((index < this.children.length)))){
                return (this.children[index]);
            };
            throw (new RangeError(OSMFStrings.getString(OSMFStrings.INVALID_PARAM)));
        }

    }
}//package org.osmf.smil.model 
﻿package org.osmf.smil.model {
    import org.osmf.utils.*;
    import __AS3__.vec.*;

    public class SMILDocument {

        private var elements:Vector.<SMILElement>;

        public function addElement(value:SMILElement):void{
            if (this.elements == null){
                this.elements = new Vector.<SMILElement>();
            };
            this.elements.push(value);
        }
        public function get numElements():int{
            var _local1:int;
            if (this.elements != null){
                _local1 = this.elements.length;
            };
            return (_local1);
        }
        public function getElementAt(index:int):SMILElement{
            if (((!((this.elements == null))) && ((index < this.elements.length)))){
                return (this.elements[index]);
            };
            throw (new RangeError(OSMFStrings.getString(OSMFStrings.INVALID_PARAM)));
        }

    }
}//package org.osmf.smil.model 
﻿package org.osmf.smil.model {

    public class SMILMetaElement extends SMILElement {

        private var _base:String;

        public function SMILMetaElement(){
            super(SMILElementType.META);
        }
        public function get base():String{
            return (this._base);
        }
        public function set base(value:String):void{
            this._base = value;
        }

    }
}//package org.osmf.smil.model 
﻿package org.osmf.smil.model {
    import __AS3__.vec.*;

    public class SMILElementType {

        public static const SEQUENCE:String = "seq";
        public static const PARALLEL:String = "par";
        public static const SWITCH:String = "switch";
        public static const VIDEO:String = "video";
        public static const IMAGE:String = "img";
        public static const AUDIO:String = "audio";
        public static const META:String = "meta";
        public static const ALL_TYPES:Vector.<String> = Vector.<String>([SEQUENCE, PARALLEL, SWITCH, VIDEO, IMAGE, AUDIO, META]);

    }
}//package org.osmf.smil.model 
﻿package org.osmf.smil.model {

    public class SMILMediaElement extends SMILElement {

        private var _src:String;
        private var _bitrate:Number;
        private var _duration:Number;
        private var _clipBegin:Number;
        private var _clipEnd:Number;

        public function SMILMediaElement(type:String){
            super(type);
        }
        public function get src():String{
            return (this._src);
        }
        public function set src(value:String):void{
            this._src = value;
        }
        public function get bitrate():Number{
            return (this._bitrate);
        }
        public function set bitrate(value:Number):void{
            this._bitrate = value;
        }
        public function get duration():Number{
            return (this._duration);
        }
        public function set duration(value:Number):void{
            this._duration = value;
        }
        public function get clipBegin():Number{
            return (this._clipBegin);
        }
        public function set clipBegin(value:Number):void{
            this._clipBegin = value;
        }
        public function get clipEnd():Number{
            return (this._clipEnd);
        }
        public function set clipEnd(value:Number):void{
            this._clipEnd = value;
        }

    }
}//package org.osmf.smil.model 
﻿package org.osmf.smil {
    import org.osmf.media.*;
    import __AS3__.vec.*;
    import org.osmf.smil.loader.*;
    import org.osmf.smil.elements.*;

    public class SMILPluginInfo extends PluginInfo {

        private var mediaFactory:MediaFactory;

        public function SMILPluginInfo(){
            var _local1:Vector.<MediaFactoryItem> = new Vector.<MediaFactoryItem>();
            var _local2:MediaFactoryItem = new MediaFactoryItem("org.osmf.smil.SMILPluginInfo", new SMILLoader().canHandleResource, this.createSMILProxyElement);
            _local1.push(_local2);
            super(_local1);
        }
        private function createSMILProxyElement():MediaElement{
            return (new SMILElement(null, new SMILLoader(this.mediaFactory)));
        }
        override public function initializePlugin(resource:MediaResourceBase):void{
            this.mediaFactory = (resource.getMetadataValue(PluginInfo.PLUGIN_MEDIAFACTORY_NAMESPACE) as MediaFactory);
        }

    }
}//package org.osmf.smil 
﻿package org.osmf.smil.loader {
    import org.osmf.media.*;
    import org.osmf.events.*;
    import flash.events.*;
    import flash.net.*;
    import org.osmf.traits.*;
    import org.osmf.utils.*;
    import org.osmf.metadata.*;
    import __AS3__.vec.*;
    import org.osmf.elements.proxyClasses.*;
    import org.osmf.smil.parser.*;
    import org.osmf.smil.model.*;
    import org.osmf.smil.media.*;

    public class SMILLoader extends LoaderBase {

        public static const SMIL_MIME_TYPE:String = "application/smil+xml";

        private var supportedMimeTypes:Vector.<String>;
        private var mediaTypesSupported:Vector.<String>;
        private var factory:MediaFactory;

        public function SMILLoader(mediaFactory:MediaFactory=null){
            this.supportedMimeTypes = new Vector.<String>();
            this.mediaTypesSupported = new Vector.<String>();
            super();
            this.supportedMimeTypes.push(SMIL_MIME_TYPE);
            this.factory = mediaFactory;
            if (this.factory == null){
                this.factory = new DefaultMediaFactory();
            };
        }
        override public function canHandleResource(resource:MediaResourceBase):Boolean{
            var _local3:URLResource;
            var _local4:URL;
            var _local2:Boolean;
            if (((resource) && (!((resource.mimeType == null))))){
                _local2 = (resource.mimeType == SMIL_MIME_TYPE);
            } else {
                if ((resource is URLResource)){
                    _local3 = URLResource(resource);
                    _local4 = new URL(_local3.url);
                    _local2 = !((_local4.path.search(/\.smi$|\.smil$/i) == -1));
                };
            };
            return (_local2);
        }
        override protected function executeLoad(loadTrait:LoadTrait):void{
            var urlLoader:* = null;
            var onError:* = null;
            var onComplete:* = null;
            var loadTrait:* = loadTrait;
            var setupListeners:* = function (add:Boolean=true):void{
                if (add){
                    urlLoader.addEventListener(Event.COMPLETE, onComplete);
                    urlLoader.addEventListener(IOErrorEvent.IO_ERROR, onError);
                    urlLoader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onError);
                } else {
                    urlLoader.removeEventListener(Event.COMPLETE, onComplete);
                    urlLoader.removeEventListener(IOErrorEvent.IO_ERROR, onError);
                    urlLoader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, onError);
                };
            };
            onError = function (event:ErrorEvent):void{
                setupListeners(false);
                updateLoadTrait(loadTrait, LoadState.LOAD_ERROR);
                loadTrait.dispatchEvent(new MediaErrorEvent(MediaErrorEvent.MEDIA_ERROR, false, false, new MediaError(0, event.text)));
            };
            onComplete = function (event:Event):void{
                var parser:* = null;
                var smilDocument:* = null;
                var event:* = event;
                setupListeners(false);
                try {
                    parser = createParser();
                    smilDocument = parser.parse(event.target.data);
                    finishLoad(loadTrait, smilDocument);
                } catch(parseError:Error) {
                    updateLoadTrait(loadTrait, LoadState.LOAD_ERROR);
                    loadTrait.dispatchEvent(new MediaErrorEvent(MediaErrorEvent.MEDIA_ERROR, false, false, new MediaError(parseError.errorID, parseError.message)));
                };
            };
            updateLoadTrait(loadTrait, LoadState.LOADING);
            urlLoader = new URLLoader(new URLRequest(URLResource(loadTrait.resource).url));
            return;
            /*not popped
            setupListeners()
            */
        }
        override protected function executeUnload(loadTrait:LoadTrait):void{
            updateLoadTrait(loadTrait, LoadState.UNLOADING);
            updateLoadTrait(loadTrait, LoadState.UNINITIALIZED);
        }
        protected function createMediaGenerator():SMILMediaGenerator{
            return (new SMILMediaGenerator());
        }
        protected function createParser():SMILParser{
            return (new SMILParser());
        }
        private function finishLoad(loadTrait:LoadTrait, smilDocument:SMILDocument):void{
            var onMediaElementCreate:* = null;
            var elementLoadTrait:* = null;
            var loadTrait:* = loadTrait;
            var smilDocument:* = smilDocument;
            onMediaElementCreate = function (event:MediaFactoryEvent):void{
                var _local2:MediaResourceBase = event.mediaElement.resource;
                if (_local2 != null){
                    _local2.addMetadataValue(MetadataNamespaces.DERIVED_RESOURCE_METADATA, loadTrait.resource);
                };
            };
            var mediaGenerator:* = this.createMediaGenerator();
            this.factory.addEventListener(MediaFactoryEvent.MEDIA_ELEMENT_CREATE, onMediaElementCreate, false, int.MAX_VALUE);
            var loadedElement:* = mediaGenerator.createMediaElement(loadTrait.resource, smilDocument, this.factory);
            this.factory.removeEventListener(MediaFactoryEvent.MEDIA_ELEMENT_CREATE, onMediaElementCreate);
            if (loadedElement == null){
                updateLoadTrait(loadTrait, LoadState.LOAD_ERROR);
            } else {
                elementLoadTrait = (loadTrait as LoadFromDocumentLoadTrait);
                if (elementLoadTrait){
                    elementLoadTrait.mediaElement = loadedElement;
                };
                updateLoadTrait(loadTrait, LoadState.READY);
            };
        }

    }
}//package org.osmf.smil.loader 
﻿package org.osmf.smil.media {
    import org.osmf.media.*;
    import org.osmf.elements.*;
    import org.osmf.net.*;
    import __AS3__.vec.*;
    import org.osmf.smil.model.*;

    public class SMILMediaGenerator {

        private var factory:MediaFactory;

        public function createMediaElement(resource:MediaResourceBase, smilDocument:SMILDocument, factory:MediaFactory):MediaElement{
            var _local4:MediaElement;
            var _local6:SMILElement;
            this.factory = factory;
            var _local5:int;
            while (_local5 < smilDocument.numElements) {
                _local6 = smilDocument.getElementAt(_local5);
                _local4 = this.internalCreateMediaElement(resource, null, smilDocument, _local6);
                _local5++;
            };
            return (_local4);
        }
        private function internalCreateMediaElement(originalResource:MediaResourceBase, parentMediaElement:MediaElement, smilDocument:SMILDocument, smilElement:SMILElement):MediaElement{
            var _local6:MediaElement;
            var _local7:ParallelElement;
            var _local8:SerialElement;
            var _local9:StreamingURLResource;
            var _local10:MediaElement;
            var _local11:SMILMediaElement;
            var _local12:Number;
            var _local13:URLResource;
            var _local14:MediaElement;
            var _local15:Number;
            var _local16:DurationElement;
            var _local17:URLResource;
            var _local18:MediaElement;
            var _local19:MediaElement;
            var _local20:int;
            var _local21:SMILElement;
            var _local22:String;
            var _local23:Object;
            var _local5:MediaResourceBase;
            switch (smilElement.type){
                case SMILElementType.SWITCH:
                    _local5 = this.createDynamicStreamingResource(smilElement, smilDocument);
                    break;
                case SMILElementType.PARALLEL:
                    _local7 = new ParallelElement();
                    _local6 = _local7;
                    break;
                case SMILElementType.SEQUENCE:
                    _local8 = new SerialElement();
                    _local6 = _local8;
                    break;
                case SMILElementType.VIDEO:
                    _local9 = new StreamingURLResource((smilElement as SMILMediaElement).src);
                    _local9.mediaType = MediaType.VIDEO;
                    _local10 = this.factory.createMediaElement(_local9);
                    _local11 = (smilElement as SMILMediaElement);
                    if (((((((!(isNaN(_local11.clipBegin))) && ((_local11.clipBegin > 0)))) && (!(isNaN(_local11.clipEnd))))) && ((_local11.clipEnd > 0)))){
                        _local9.clipStartTime = _local11.clipBegin;
                        _local9.clipEndTime = _local11.clipEnd;
                    };
                    _local12 = (smilElement as SMILMediaElement).duration;
                    if (((!(isNaN(_local12))) && ((_local12 > 0)))){
                        if ((_local10 is VideoElement)){
                            (_local10 as VideoElement).defaultDuration = _local12;
                        } else {
                            if ((_local10 is ProxyElement)){
                                _local19 = _local10;
                                while ((_local19 is ProxyElement)) {
                                    _local19 = (_local19 as ProxyElement).proxiedElement;
                                };
                                if (((!((_local19 == null))) && ((_local19 is VideoElement)))){
                                    (_local19 as VideoElement).defaultDuration = _local12;
                                };
                            };
                        };
                    };
                    (parentMediaElement as CompositeElement).addChild(_local10);
                    break;
                case SMILElementType.IMAGE:
                    _local13 = new URLResource((smilElement as SMILMediaElement).src);
                    _local13.mediaType = MediaType.IMAGE;
                    _local14 = this.factory.createMediaElement(_local13);
                    _local15 = (smilElement as SMILMediaElement).duration;
                    _local16 = new DurationElement(_local15, _local14);
                    (parentMediaElement as CompositeElement).addChild(_local16);
                    break;
                case SMILElementType.AUDIO:
                    _local17 = new URLResource((smilElement as SMILMediaElement).src);
                    _local17.mediaType = MediaType.AUDIO;
                    _local18 = this.factory.createMediaElement(_local17);
                    (parentMediaElement as CompositeElement).addChild(_local18);
                    break;
            };
            if (_local6 != null){
                _local20 = 0;
                while (_local20 < smilElement.numChildren) {
                    _local21 = smilElement.getChildAt(_local20);
                    this.internalCreateMediaElement(originalResource, _local6, smilDocument, _local21);
                    _local20++;
                };
                if ((parentMediaElement is CompositeElement)){
                    (parentMediaElement as CompositeElement).addChild(_local6);
                };
            } else {
                if (_local5 != null){
                    for each (_local22 in originalResource.metadataNamespaceURLs) {
                        _local23 = originalResource.getMetadataValue(_local22);
                        _local5.addMetadataValue(_local22, _local23);
                    };
                    _local6 = this.factory.createMediaElement(_local5);
                    if ((parentMediaElement is CompositeElement)){
                        (parentMediaElement as CompositeElement).addChild(_local6);
                    };
                };
            };
            return (_local6);
        }
        private function createDynamicStreamingResource(switchElement:SMILElement, smilDocument:SMILDocument):MediaResourceBase{
            var _local4:String;
            var _local6:SMILElement;
            var _local3:DynamicStreamingResource;
            var _local5:int;
            while (_local5 < smilDocument.numElements) {
                _local6 = smilDocument.getElementAt(_local5);
                switch (_local6.type){
                    case SMILElementType.META:
                        _local4 = (_local6 as SMILMetaElement).base;
                        if (_local4 != null){
                            _local3 = this.createDynamicStreamingItems(switchElement, _local4);
                        };
                        break;
                };
                _local5++;
            };
            return (_local3);
        }
        private function createDynamicStreamingItems(switchElement:SMILElement, hostURL:String):DynamicStreamingResource{
            var _local6:SMILElement;
            var _local7:SMILMediaElement;
            var _local8:DynamicStreamingItem;
            var _local3:DynamicStreamingResource;
            var _local4:Vector.<DynamicStreamingItem> = new Vector.<DynamicStreamingItem>();
            var _local5:int;
            while (_local5 < switchElement.numChildren) {
                _local6 = switchElement.getChildAt(_local5);
                if (_local6.type == SMILElementType.VIDEO){
                    _local7 = (_local6 as SMILMediaElement);
                    _local8 = new DynamicStreamingItem(_local7.src, (_local7.bitrate / 1000));
                    _local4.push(_local8);
                };
                _local5++;
            };
            if (_local4.length){
                _local3 = new DynamicStreamingResource(hostURL);
                _local3.streamItems = _local4;
                _local3.streamType = StreamType.LIVE_OR_RECORDED;
            };
            return (_local3);
        }
        private function traceElements(smilDocument:SMILDocument):void{
        }
        private function debugLog(msg:String):void{
        }

    }
}//package org.osmf.smil.media 
﻿package org.osmf.smil.parser {
    import org.osmf.utils.*;
    import flash.errors.*;
    import org.osmf.smil.model.*;

    public class SMILParser {

        private static const ATTRIB_SOURCE:String = "src";
        private static const ATTRIB_BITRATE:String = "system-bitrate";
        private static const ATTRIB_DURATION:String = "dur";
        private static const ATTRIB_META_BASE:String = "base";
        private static const ATTRIB_CLIP_BEGIN:String = "clipBegin";
        private static const ATTRIB_CLIP_END:String = "clipEnd";
        private static const INVALID_FILE_MISSING_BODY_TAG:String = "Invalid SMIL file: <body> tag is missing.";

        public function parse(rawData:String):SMILDocument{
            var xml:* = null;
            var rawData:* = rawData;
            if ((((rawData == null)) || ((rawData == "")))){
                throw (new ArgumentError());
            };
            var smilDocument:* = new SMILDocument();
            try {
                xml = new XML(rawData);
                this.parseHead(smilDocument, xml);
                this.parseBody(smilDocument, xml);
            } catch(err:Error) {
                debugLog(("Unhandled exception in SMILParser : " + err.message));
                throw (err);
            };
            return (smilDocument);
        }
        private function parseHead(doc:SMILDocument, xml:XML):void{
            var _local3:Namespace = xml.namespace();
            var _local4:XMLList = xml.._local3::head;
            if (_local4.length() > 0){
                this.parseElement(doc, _local4.children());
            };
        }
        private function parseBody(doc:SMILDocument, xml:XML):void{
            var _local3:Namespace = xml.namespace();
            var _local4:XMLList = xml.._local3::body;
            if (_local4.length() <= 0){
                this.debugLog(INVALID_FILE_MISSING_BODY_TAG);
                throw (new IllegalOperationError(INVALID_FILE_MISSING_BODY_TAG));
            };
            this.parseElement(doc, _local4.children());
        }
        private function parseElement(doc:SMILDocument, children:XMLList, parent:SMILElement=null):void{
            var _local5:XML;
            var _local6:SMILElement;
            var _local4:uint;
            while (_local4 < children.length()) {
                _local5 = children[_local4];
                switch (_local5.nodeKind()){
                    case "element":
                        switch (_local5.localName()){
                            case SMILElementType.SEQUENCE:
                                _local6 = new SMILElement(SMILElementType.SEQUENCE);
                                break;
                            case SMILElementType.PARALLEL:
                                _local6 = new SMILElement(SMILElementType.PARALLEL);
                                break;
                            case SMILElementType.SWITCH:
                                _local6 = new SMILElement(SMILElementType.SWITCH);
                                break;
                            case SMILElementType.IMAGE:
                            case SMILElementType.VIDEO:
                            case SMILElementType.AUDIO:
                                _local6 = this.parseMediaElement(_local5);
                                break;
                            case SMILElementType.META:
                                _local6 = this.parseMetaElement(_local5);
                                break;
                        };
                        break;
                };
                this.parseElement(doc, _local5.children(), _local6);
                if (_local6 != null){
                    if (parent != null){
                        parent.addChild(_local6);
                    } else {
                        doc.addElement(_local6);
                    };
                };
                _local4++;
            };
        }
        private function parseMediaElement(node:XML):SMILMediaElement{
            var _local2:SMILMediaElement;
            switch (node.nodeKind()){
                case "element":
                    switch (node.localName()){
                        case SMILElementType.VIDEO:
                            _local2 = new SMILMediaElement(SMILElementType.VIDEO);
                            break;
                        case SMILElementType.IMAGE:
                            _local2 = new SMILMediaElement(SMILElementType.IMAGE);
                            break;
                        case SMILElementType.AUDIO:
                            _local2 = new SMILMediaElement(SMILElementType.AUDIO);
                            break;
                    };
                    break;
            };
            if (_local2 != null){
                _local2.src = node.@[ATTRIB_SOURCE];
                if (node.@[ATTRIB_BITRATE] != null){
                    _local2.bitrate = node.@[ATTRIB_BITRATE];
                };
                if (node.@[ATTRIB_DURATION] != null){
                    _local2.duration = TimeUtil.parseTime(node.@[ATTRIB_DURATION]);
                };
                if (node.@[ATTRIB_CLIP_BEGIN] != null){
                    _local2.clipBegin = TimeUtil.parseTime(node.@[ATTRIB_CLIP_BEGIN]);
                };
                if (node.@[ATTRIB_CLIP_END] != null){
                    _local2.clipEnd = TimeUtil.parseTime(node.@[ATTRIB_CLIP_END]);
                };
            };
            return (_local2);
        }
        private function parseMetaElement(node:XML):SMILMetaElement{
            var _local2:SMILMetaElement;
            switch (node.nodeKind()){
                case "element":
                    switch (node.localName()){
                        case SMILElementType.META:
                            _local2 = new SMILMetaElement();
                            _local2.base = node.@[ATTRIB_META_BASE];
                            break;
                    };
                    break;
            };
            return (_local2);
        }
        private function debugLog(msg:String):void{
        }

    }
}//package org.osmf.smil.parser 
﻿package org.osmf.media {
    import flash.display.*;
    import org.osmf.events.*;
    import flash.events.*;
    import flash.utils.*;
    import org.osmf.traits.*;
    import org.osmf.utils.*;
    import org.osmf.net.*;
    import flash.errors.*;

    public class MediaPlayer extends TraitEventDispatcher {

        private static const DEFAULT_UPDATE_INTERVAL:Number = 250;

        private var lastCurrentTime:Number = 0;
        private var lastBytesLoaded:Number = NaN;
        private var _autoPlay:Boolean = true;
        private var _autoRewind:Boolean = true;
        private var _loop:Boolean = false;
        private var _currentTimeUpdateInterval:Number = 250;
        private var _currentTimeTimer:Timer;
        private var _state:String;
        private var _bytesLoadedUpdateInterval:Number = 250;
        private var _bytesLoadedTimer:Timer;
        private var inExecuteAutoRewind:Boolean = false;
        private var inSeek:Boolean = false;
        private var mediaAtEnd:Boolean = false;
        private var mediaPlayerVolume:Number = 1;
        private var mediaPlayerVolumeSet:Boolean = false;
        private var mediaPlayerMuted:Boolean = false;
        private var mediaPlayerMutedSet:Boolean = false;
        private var mediaPlayerAudioPan:Number = 0;
        private var mediaPlayerAudioPanSet:Boolean = false;
        private var mediaPlayerBufferTime:Number = 0;
        private var mediaPlayerBufferTimeSet:Boolean = false;
        private var mediaPlayerMaxAllowedDynamicStreamIndex:int = 0;
        private var mediaPlayerMaxAllowedDynamicStreamIndexSet:Boolean = false;
        private var mediaPlayerAutoDynamicStreamSwitch:Boolean = true;
        private var mediaPlayerAutoDynamicStreamSwitchSet:Boolean = false;
        private var _canPlay:Boolean;
        private var _canSeek:Boolean;
        private var _temporal:Boolean;
        private var _hasAudio:Boolean;
        private var _hasDisplayObject:Boolean;
        private var _canLoad:Boolean;
        private var _canBuffer:Boolean;
        private var _isDynamicStream:Boolean;
        private var _hasAlternativeAudio:Boolean;
        private var _hasDRM:Boolean;

        public function MediaPlayer(media:MediaElement=null){
            this._currentTimeTimer = new Timer(DEFAULT_UPDATE_INTERVAL);
            this._bytesLoadedTimer = new Timer(DEFAULT_UPDATE_INTERVAL);
            super();
            this._state = MediaPlayerState.UNINITIALIZED;
            this.media = media;
            this._currentTimeTimer.addEventListener(TimerEvent.TIMER, this.onCurrentTimeTimer, false, 0, true);
            this._bytesLoadedTimer.addEventListener(TimerEvent.TIMER, this.onBytesLoadedTimer, false, 0, true);
        }
        override public function set media(value:MediaElement):void{
            var _local2:String;
            var _local3:LoadTrait;
            if (value != media){
                this.mediaAtEnd = false;
                if (media != null){
                    this.inExecuteAutoRewind = false;
                    if (this.playing){
                        (this.getTraitOrThrow(MediaTraitType.PLAY) as PlayTrait).stop();
                    };
                    if (this.canLoad){
                        _local3 = (media.getTrait(MediaTraitType.LOAD) as LoadTrait);
                        if (_local3.loadState == LoadState.READY){
                            _local3.unload();
                        };
                    };
                    this.setState(MediaPlayerState.UNINITIALIZED);
                    if (media){
                        media.removeEventListener(MediaElementEvent.TRAIT_ADD, this.onTraitAdd);
                        media.removeEventListener(MediaElementEvent.TRAIT_REMOVE, this.onTraitRemove);
                        media.removeEventListener(MediaErrorEvent.MEDIA_ERROR, this.onMediaError);
                        for each (_local2 in media.traitTypes) {
                            this.updateTraitListeners(_local2, false);
                        };
                    };
                };
                super.media = value;
                if (media != null){
                    media.addEventListener(MediaElementEvent.TRAIT_ADD, this.onTraitAdd);
                    media.addEventListener(MediaElementEvent.TRAIT_REMOVE, this.onTraitRemove);
                    media.addEventListener(MediaErrorEvent.MEDIA_ERROR, this.onMediaError);
                    if (media.hasTrait(MediaTraitType.LOAD) == false){
                        this.processReadyState();
                    };
                    for each (_local2 in media.traitTypes) {
                        this.updateTraitListeners(_local2, true);
                    };
                };
                dispatchEvent(new MediaElementChangeEvent(MediaElementChangeEvent.MEDIA_ELEMENT_CHANGE));
            };
        }
        public function set autoRewind(value:Boolean):void{
            this._autoRewind = value;
        }
        public function get autoRewind():Boolean{
            return (this._autoRewind);
        }
        public function set autoPlay(value:Boolean):void{
            this._autoPlay = value;
        }
        public function get autoPlay():Boolean{
            return (this._autoPlay);
        }
        public function set loop(value:Boolean):void{
            this._loop = value;
        }
        public function get loop():Boolean{
            return (this._loop);
        }
        public function set currentTimeUpdateInterval(value:Number):void{
            if (this._currentTimeUpdateInterval != value){
                this._currentTimeUpdateInterval = value;
                if (((isNaN(this._currentTimeUpdateInterval)) || ((this._currentTimeUpdateInterval <= 0)))){
                    this._currentTimeTimer.stop();
                } else {
                    this._currentTimeTimer.delay = this._currentTimeUpdateInterval;
                    if (this.temporal){
                        this._currentTimeTimer.start();
                    };
                };
            };
        }
        public function get currentTimeUpdateInterval():Number{
            return (this._currentTimeUpdateInterval);
        }
        public function set bytesLoadedUpdateInterval(value:Number):void{
            if (this._bytesLoadedUpdateInterval != value){
                this._bytesLoadedUpdateInterval = value;
                if (((isNaN(this._bytesLoadedUpdateInterval)) || ((this._bytesLoadedUpdateInterval <= 0)))){
                    this._bytesLoadedTimer.stop();
                } else {
                    this._bytesLoadedTimer.delay = this._bytesLoadedUpdateInterval;
                    if (this.canLoad){
                        this._bytesLoadedTimer.start();
                    };
                };
            };
        }
        public function get bytesLoadedUpdateInterval():Number{
            return (this._bytesLoadedUpdateInterval);
        }
        public function get state():String{
            return (this._state);
        }
        public function get canPlay():Boolean{
            return (this._canPlay);
        }
        public function get canPause():Boolean{
            return (((this.canPlay) ? (this.getTraitOrThrow(MediaTraitType.PLAY) as PlayTrait).canPause : false));
        }
        public function get canSeek():Boolean{
            return (this._canSeek);
        }
        public function get temporal():Boolean{
            return (this._temporal);
        }
        public function get hasAudio():Boolean{
            return (this._hasAudio);
        }
        public function get isDynamicStream():Boolean{
            return (this._isDynamicStream);
        }
        public function get hasAlternativeAudio():Boolean{
            return (this._hasAlternativeAudio);
        }
        public function get canLoad():Boolean{
            return (this._canLoad);
        }
        public function get canBuffer():Boolean{
            return (this._canBuffer);
        }
        public function get hasDRM():Boolean{
            return (this._hasDRM);
        }
        public function get volume():Number{
            return (((this.hasAudio) ? AudioTrait(this.getTraitOrThrow(MediaTraitType.AUDIO)).volume : this.mediaPlayerVolume));
        }
        public function set volume(value:Number):void{
            var _local2:Boolean;
            if (this.hasAudio){
                (this.getTraitOrThrow(MediaTraitType.AUDIO) as AudioTrait).volume = value;
            } else {
                if (value != this.mediaPlayerVolume){
                    _local2 = true;
                };
            };
            this.mediaPlayerVolume = value;
            this.mediaPlayerVolumeSet = true;
            if (_local2){
                dispatchEvent(new AudioEvent(AudioEvent.VOLUME_CHANGE, false, false, false, value));
            };
        }
        public function get muted():Boolean{
            return (((this.hasAudio) ? AudioTrait(this.getTraitOrThrow(MediaTraitType.AUDIO)).muted : this.mediaPlayerMuted));
        }
        public function set muted(value:Boolean):void{
            var _local2:Boolean;
            if (this.hasAudio){
                (this.getTraitOrThrow(MediaTraitType.AUDIO) as AudioTrait).muted = value;
            } else {
                if (value != this.mediaPlayerMuted){
                    _local2 = true;
                };
            };
            this.mediaPlayerMuted = value;
            this.mediaPlayerMutedSet = true;
            if (_local2){
                dispatchEvent(new AudioEvent(AudioEvent.MUTED_CHANGE, false, false, value));
            };
        }
        public function get audioPan():Number{
            return (((this.hasAudio) ? AudioTrait(this.getTraitOrThrow(MediaTraitType.AUDIO)).pan : this.mediaPlayerAudioPan));
        }
        public function set audioPan(value:Number):void{
            var _local2:Boolean;
            if (this.hasAudio){
                (this.getTraitOrThrow(MediaTraitType.AUDIO) as AudioTrait).pan = value;
            } else {
                if (value != this.mediaPlayerAudioPan){
                    _local2 = true;
                };
            };
            this.mediaPlayerAudioPan = value;
            this.mediaPlayerAudioPanSet = true;
            if (_local2){
                dispatchEvent(new AudioEvent(AudioEvent.PAN_CHANGE, false, false, false, NaN, value));
            };
        }
        public function get paused():Boolean{
            return (((this.canPlay) ? ((this.getTraitOrThrow(MediaTraitType.PLAY) as PlayTrait).playState == PlayState.PAUSED) : false));
        }
        public function pause():void{
            (this.getTraitOrThrow(MediaTraitType.PLAY) as PlayTrait).pause();
        }
        public function get playing():Boolean{
            return (((this.canPlay) ? ((this.getTraitOrThrow(MediaTraitType.PLAY) as PlayTrait).playState == PlayState.PLAYING) : false));
        }
        public function play():void{
            if (((((((this.canPlay) && (this.canSeek))) && (this.canSeekTo(0)))) && (this.mediaAtEnd))){
                this.executeAutoRewind(true);
            } else {
                (this.getTraitOrThrow(MediaTraitType.PLAY) as PlayTrait).play();
            };
        }
        public function get seeking():Boolean{
            return (((this.canSeek) ? (this.getTraitOrThrow(MediaTraitType.SEEK) as SeekTrait).seeking : false));
        }
        public function seek(time:Number):void{
            this.inSeek = true;
            (this.getTraitOrThrow(MediaTraitType.SEEK) as SeekTrait).seek(time);
            this.inSeek = false;
        }
        public function canSeekTo(time:Number):Boolean{
            return (((this.canSeek) ? (this.getTraitOrThrow(MediaTraitType.SEEK) as SeekTrait).canSeekTo(time) : false));
        }
        public function stop():void{
            (this.getTraitOrThrow(MediaTraitType.PLAY) as PlayTrait).stop();
            if (this.canSeek){
                this.executeAutoRewind(false);
            };
        }
        public function get mediaWidth():Number{
            return (((this._hasDisplayObject) ? (this.getTraitOrThrow(MediaTraitType.DISPLAY_OBJECT) as DisplayObjectTrait).mediaWidth : NaN));
        }
        public function get mediaHeight():Number{
            return (((this._hasDisplayObject) ? (this.getTraitOrThrow(MediaTraitType.DISPLAY_OBJECT) as DisplayObjectTrait).mediaHeight : NaN));
        }
        public function get autoDynamicStreamSwitch():Boolean{
            return (((this.isDynamicStream) ? (this.getTraitOrThrow(MediaTraitType.DYNAMIC_STREAM) as DynamicStreamTrait).autoSwitch : this.mediaPlayerAutoDynamicStreamSwitch));
        }
        public function set autoDynamicStreamSwitch(value:Boolean):void{
            var _local2:Boolean;
            if (this.isDynamicStream){
                (this.getTraitOrThrow(MediaTraitType.DYNAMIC_STREAM) as DynamicStreamTrait).autoSwitch = value;
            } else {
                if (value != this.mediaPlayerAutoDynamicStreamSwitch){
                    _local2 = true;
                };
            };
            this.mediaPlayerAutoDynamicStreamSwitch = value;
            this.mediaPlayerAutoDynamicStreamSwitchSet = true;
            if (_local2){
                dispatchEvent(new DynamicStreamEvent(DynamicStreamEvent.AUTO_SWITCH_CHANGE, false, false, this.dynamicStreamSwitching, this.mediaPlayerAutoDynamicStreamSwitch));
            };
        }
        public function get currentDynamicStreamIndex():int{
            return (((this.isDynamicStream) ? (this.getTraitOrThrow(MediaTraitType.DYNAMIC_STREAM) as DynamicStreamTrait).currentIndex : 0));
        }
        public function get numDynamicStreams():int{
            return (((this.isDynamicStream) ? (this.getTraitOrThrow(MediaTraitType.DYNAMIC_STREAM) as DynamicStreamTrait).numDynamicStreams : 0));
        }
        public function getBitrateForDynamicStreamIndex(index:int):Number{
            return ((this.getTraitOrThrow(MediaTraitType.DYNAMIC_STREAM) as DynamicStreamTrait).getBitrateForIndex(index));
        }
        public function get currentAlternativeAudioStreamIndex():int{
            return (((this.hasAlternativeAudio) ? (this.getTraitOrThrow(MediaTraitType.ALTERNATIVE_AUDIO) as AlternativeAudioTrait).currentIndex : -1));
        }
        public function get numAlternativeAudioStreams():int{
            return (((this.hasAlternativeAudio) ? (this.getTraitOrThrow(MediaTraitType.ALTERNATIVE_AUDIO) as AlternativeAudioTrait).numAlternativeAudioStreams : 0));
        }
        public function getAlternativeAudioItemAt(index:int):StreamingItem{
            return ((this.getTraitOrThrow(MediaTraitType.ALTERNATIVE_AUDIO) as AlternativeAudioTrait).getItemForIndex(index));
        }
        public function get maxAllowedDynamicStreamIndex():int{
            return (((this.isDynamicStream) ? (this.getTraitOrThrow(MediaTraitType.DYNAMIC_STREAM) as DynamicStreamTrait).maxAllowedIndex : this.mediaPlayerMaxAllowedDynamicStreamIndex));
        }
        public function set maxAllowedDynamicStreamIndex(value:int):void{
            if (this.isDynamicStream){
                (this.getTraitOrThrow(MediaTraitType.DYNAMIC_STREAM) as DynamicStreamTrait).maxAllowedIndex = value;
            };
            this.mediaPlayerMaxAllowedDynamicStreamIndex = value;
            this.mediaPlayerMaxAllowedDynamicStreamIndexSet = true;
        }
        public function get dynamicStreamSwitching():Boolean{
            return (((this.isDynamicStream) ? (this.getTraitOrThrow(MediaTraitType.DYNAMIC_STREAM) as DynamicStreamTrait).switching : false));
        }
        public function get alternativeAudioStreamSwitching():Boolean{
            return (((this.hasAlternativeAudio) ? (this.getTraitOrThrow(MediaTraitType.ALTERNATIVE_AUDIO) as AlternativeAudioTrait).switching : false));
        }
        public function switchDynamicStreamIndex(streamIndex:int):void{
            (this.getTraitOrThrow(MediaTraitType.DYNAMIC_STREAM) as DynamicStreamTrait).switchTo(streamIndex);
        }
        public function switchAlternativeAudioIndex(streamIndex:int):void{
            (this.getTraitOrThrow(MediaTraitType.ALTERNATIVE_AUDIO) as AlternativeAudioTrait).switchTo(streamIndex);
        }
        public function get displayObject():DisplayObject{
            return (((this._hasDisplayObject) ? (this.getTraitOrThrow(MediaTraitType.DISPLAY_OBJECT) as DisplayObjectTrait).displayObject : null));
        }
        public function get duration():Number{
            return (((this.temporal) ? (this.getTraitOrThrow(MediaTraitType.TIME) as TimeTrait).duration : 0));
        }
        public function get currentTime():Number{
            return (((this.temporal) ? (this.getTraitOrThrow(MediaTraitType.TIME) as TimeTrait).currentTime : 0));
        }
        public function get buffering():Boolean{
            return (((this.canBuffer) ? (this.getTraitOrThrow(MediaTraitType.BUFFER) as BufferTrait).buffering : false));
        }
        public function get bufferLength():Number{
            return (((this.canBuffer) ? (this.getTraitOrThrow(MediaTraitType.BUFFER) as BufferTrait).bufferLength : 0));
        }
        public function get bufferTime():Number{
            return (((this.canBuffer) ? (this.getTraitOrThrow(MediaTraitType.BUFFER) as BufferTrait).bufferTime : this.mediaPlayerBufferTime));
        }
        public function set bufferTime(value:Number):void{
            var _local2:Boolean;
            if (this.canBuffer){
                (this.getTraitOrThrow(MediaTraitType.BUFFER) as BufferTrait).bufferTime = value;
            } else {
                if (value != this.mediaPlayerBufferTime){
                    _local2 = true;
                };
            };
            this.mediaPlayerBufferTime = value;
            this.mediaPlayerBufferTimeSet = true;
            if (_local2){
                dispatchEvent(new BufferEvent(BufferEvent.BUFFER_TIME_CHANGE, false, false, this.buffering, this.mediaPlayerBufferTime));
            };
        }
        public function get bytesLoaded():Number{
            var _local1 = 0;
            if (this.canLoad){
                _local1 = (this.getTraitOrThrow(MediaTraitType.LOAD) as LoadTrait).bytesLoaded;
                if (isNaN(_local1)){
                    _local1 = 0;
                };
            };
            return (_local1);
        }
        public function get bytesTotal():Number{
            var _local1 = 0;
            if (this.canLoad){
                _local1 = (this.getTraitOrThrow(MediaTraitType.LOAD) as LoadTrait).bytesTotal;
                if (isNaN(_local1)){
                    _local1 = 0;
                };
            };
            return (_local1);
        }
        public function authenticate(username:String=null, password:String=null):void{
            (this.getTraitOrThrow(MediaTraitType.DRM) as DRMTrait).authenticate(username, password);
        }
        public function authenticateWithToken(token:Object):void{
            (this.getTraitOrThrow(MediaTraitType.DRM) as DRMTrait).authenticateWithToken(token);
        }
        public function get drmState():String{
            return (((this.hasDRM) ? DRMTrait(media.getTrait(MediaTraitType.DRM)).drmState : DRMState.UNINITIALIZED));
        }
        public function get drmStartDate():Date{
            return (((this.hasDRM) ? DRMTrait(media.getTrait(MediaTraitType.DRM)).startDate : null));
        }
        public function get drmEndDate():Date{
            return (((this.hasDRM) ? DRMTrait(media.getTrait(MediaTraitType.DRM)).endDate : null));
        }
        public function get drmPeriod():Number{
            return (((this.hasDRM) ? DRMTrait(media.getTrait(MediaTraitType.DRM)).period : NaN));
        }
        public function get isDVRRecording():Boolean{
            var _local1:DVRTrait = ((media)!=null) ? (media.getTrait(MediaTraitType.DVR) as DVRTrait) : null;
            return (((_local1)!=null) ? _local1.isRecording : false);
        }
        private function getTraitOrThrow(traitType:String):MediaTraitBase{
            var _local2:String;
            var _local3:String;
            if (((!(media)) || (!(media.hasTrait(traitType))))){
                _local2 = OSMFStrings.getString(OSMFStrings.CAPABILITY_NOT_SUPPORTED);
                _local3 = traitType.replace("[class ", "");
                _local3 = _local3.replace("]", "").toLowerCase();
                _local2 = _local2.replace("*trait*", _local3);
                throw (new IllegalOperationError(_local2));
            };
            return (media.getTrait(traitType));
        }
        private function onMediaError(event:MediaErrorEvent):void{
            this.setState(MediaPlayerState.PLAYBACK_ERROR);
            dispatchEvent(event.clone());
        }
        private function onTraitAdd(event:MediaElementEvent):void{
            this.updateTraitListeners(event.traitType, true);
        }
        private function onTraitRemove(event:MediaElementEvent):void{
            this.updateTraitListeners(event.traitType, false);
        }
        private function updateTraitListeners(traitType:String, add:Boolean, skipIfInErrorState:Boolean=true):void{
            var _local4:TimeTrait;
            var _local5:PlayTrait;
            var _local6:AudioTrait;
            var _local7:DynamicStreamTrait;
            var _local8:AlternativeAudioTrait;
            var _local9:DisplayObjectTrait;
            var _local10:LoadTrait;
            var _local11:BufferTrait;
            var _local12:String;
            if ((((((this.state == MediaPlayerState.PLAYBACK_ERROR)) && (skipIfInErrorState))) && (!((traitType == MediaTraitType.LOAD))))){
                return;
            };
            if (add){
                this.updateCapabilityForTrait(traitType, add);
            };
            switch (traitType){
                case MediaTraitType.TIME:
                    this.changeListeners(add, traitType, TimeEvent.COMPLETE, this.onComplete);
                    this._temporal = add;
                    if (((((add) && ((this._currentTimeUpdateInterval > 0)))) && (!(isNaN(this._currentTimeUpdateInterval))))){
                        this._currentTimeTimer.start();
                    } else {
                        this._currentTimeTimer.stop();
                    };
                    _local4 = TimeTrait(media.getTrait(MediaTraitType.TIME));
                    if (((((!((_local4.currentTime == 0))) && ((this._currentTimeUpdateInterval > 0)))) && (!(isNaN(this._currentTimeUpdateInterval))))){
                        dispatchEvent(new TimeEvent(TimeEvent.CURRENT_TIME_CHANGE, false, false, this.currentTime));
                    };
                    if (_local4.duration != 0){
                        dispatchEvent(new TimeEvent(TimeEvent.DURATION_CHANGE, false, false, this.duration));
                    };
                    break;
                case MediaTraitType.PLAY:
                    this.changeListeners(add, traitType, PlayEvent.PLAY_STATE_CHANGE, this.onPlayStateChange);
                    this.changeListeners(add, traitType, PlayEvent.LIVE_STALL, this.onLiveStall);
                    this.changeListeners(add, traitType, PlayEvent.LIVE_RESUME, this.onLiveResume);
                    this._canPlay = add;
                    _local5 = PlayTrait(media.getTrait(MediaTraitType.PLAY));
                    if (((((((this.autoPlay) && (this.canPlay))) && (!(this.playing)))) && (!(this.inSeek)))){
                        this.play();
                    } else {
                        if (_local5.playState != PlayState.STOPPED){
                            dispatchEvent(new PlayEvent(PlayEvent.PLAY_STATE_CHANGE, false, false, ((add) ? _local5.playState : PlayState.STOPPED)));
                        };
                    };
                    if (_local5.canPause){
                        dispatchEvent(new PlayEvent(PlayEvent.CAN_PAUSE_CHANGE, false, false, null, add));
                    };
                    break;
                case MediaTraitType.AUDIO:
                    this._hasAudio = add;
                    _local6 = AudioTrait(media.getTrait(MediaTraitType.AUDIO));
                    if (this.mediaPlayerVolumeSet){
                        this.volume = this.mediaPlayerVolume;
                    } else {
                        if (this.mediaPlayerVolume != _local6.volume){
                            dispatchEvent(new AudioEvent(AudioEvent.VOLUME_CHANGE, false, false, this.muted, this.volume, this.audioPan));
                        };
                    };
                    if (this.mediaPlayerMutedSet){
                        this.muted = this.mediaPlayerMuted;
                    } else {
                        if (this.mediaPlayerMuted != _local6.muted){
                            dispatchEvent(new AudioEvent(AudioEvent.MUTED_CHANGE, false, false, this.muted, this.volume, this.audioPan));
                        };
                    };
                    if (this.mediaPlayerAudioPanSet){
                        this.audioPan = this.mediaPlayerAudioPan;
                    } else {
                        if (this.mediaPlayerAudioPan != _local6.pan){
                            dispatchEvent(new AudioEvent(AudioEvent.PAN_CHANGE, false, false, this.muted, this.volume, this.audioPan));
                        };
                    };
                    break;
                case MediaTraitType.SEEK:
                    this.changeListeners(add, traitType, SeekEvent.SEEKING_CHANGE, this.onSeeking);
                    this._canSeek = add;
                    if (((SeekTrait(media.getTrait(MediaTraitType.SEEK)).seeking) && (!(this.inExecuteAutoRewind)))){
                        dispatchEvent(new SeekEvent(SeekEvent.SEEKING_CHANGE, false, false, add));
                    };
                    break;
                case MediaTraitType.DYNAMIC_STREAM:
                    this._isDynamicStream = add;
                    _local7 = DynamicStreamTrait(media.getTrait(MediaTraitType.DYNAMIC_STREAM));
                    if (this.mediaPlayerMaxAllowedDynamicStreamIndexSet){
                        this.maxAllowedDynamicStreamIndex = this.mediaPlayerMaxAllowedDynamicStreamIndex;
                    };
                    if (this.mediaPlayerAutoDynamicStreamSwitchSet){
                        this.autoDynamicStreamSwitch = this.mediaPlayerAutoDynamicStreamSwitch;
                    } else {
                        if (this.mediaPlayerAutoDynamicStreamSwitch != _local7.autoSwitch){
                            dispatchEvent(new DynamicStreamEvent(DynamicStreamEvent.AUTO_SWITCH_CHANGE, false, false, this.dynamicStreamSwitching, this.autoDynamicStreamSwitch));
                        };
                    };
                    if (_local7.switching){
                        dispatchEvent(new DynamicStreamEvent(DynamicStreamEvent.SWITCHING_CHANGE, false, false, this.dynamicStreamSwitching, this.autoDynamicStreamSwitch));
                    };
                    dispatchEvent(new DynamicStreamEvent(DynamicStreamEvent.NUM_DYNAMIC_STREAMS_CHANGE, false, false, this.dynamicStreamSwitching, this.autoDynamicStreamSwitch));
                    break;
                case MediaTraitType.ALTERNATIVE_AUDIO:
                    this._hasAlternativeAudio = add;
                    _local8 = AlternativeAudioTrait(media.getTrait(MediaTraitType.ALTERNATIVE_AUDIO));
                    if (((_local8.switching) && (add))){
                        dispatchEvent(new AlternativeAudioEvent(AlternativeAudioEvent.AUDIO_SWITCHING_CHANGE, false, false, _local8.switching));
                    };
                    dispatchEvent(new AlternativeAudioEvent(AlternativeAudioEvent.NUM_ALTERNATIVE_AUDIO_STREAMS_CHANGE, false, false, ((_local8.switching) && (add))));
                    break;
                case MediaTraitType.DISPLAY_OBJECT:
                    this._hasDisplayObject = add;
                    _local9 = DisplayObjectTrait(media.getTrait(MediaTraitType.DISPLAY_OBJECT));
                    if (_local9.displayObject != null){
                        dispatchEvent(new DisplayObjectEvent(DisplayObjectEvent.DISPLAY_OBJECT_CHANGE, false, false, null, this.displayObject, NaN, NaN, this.mediaWidth, this.mediaHeight));
                    };
                    if (((!(isNaN(_local9.mediaHeight))) || (!(isNaN(_local9.mediaWidth))))){
                        dispatchEvent(new DisplayObjectEvent(DisplayObjectEvent.MEDIA_SIZE_CHANGE, false, false, null, this.displayObject, NaN, NaN, this.mediaWidth, this.mediaHeight));
                    };
                    break;
                case MediaTraitType.LOAD:
                    this.changeListeners(add, traitType, LoadEvent.LOAD_STATE_CHANGE, this.onLoadState);
                    this._canLoad = add;
                    _local10 = LoadTrait(media.getTrait(MediaTraitType.LOAD));
                    if (_local10.bytesLoaded > 0){
                        dispatchEvent(new LoadEvent(LoadEvent.BYTES_LOADED_CHANGE, false, false, null, this.bytesLoaded));
                    };
                    if (_local10.bytesTotal > 0){
                        dispatchEvent(new LoadEvent(LoadEvent.BYTES_TOTAL_CHANGE, false, false, null, this.bytesTotal));
                    };
                    if (add){
                        _local12 = (media.getTrait(traitType) as LoadTrait).loadState;
                        if (((!((_local12 == LoadState.READY))) && (!((_local12 == LoadState.LOADING))))){
                            this.load();
                        } else {
                            if (((((this.autoPlay) && (this.canPlay))) && (!(this.playing)))){
                                this.play();
                            };
                        };
                        if ((((this._bytesLoadedUpdateInterval > 0)) && (!(isNaN(this._bytesLoadedUpdateInterval))))){
                            this._bytesLoadedTimer.start();
                        } else {
                            this._bytesLoadedTimer.stop();
                        };
                    };
                    break;
                case MediaTraitType.BUFFER:
                    this.changeListeners(add, traitType, BufferEvent.BUFFERING_CHANGE, this.onBuffering);
                    this._canBuffer = add;
                    _local11 = BufferTrait(media.getTrait(MediaTraitType.BUFFER));
                    if (this.mediaPlayerBufferTimeSet){
                        this.bufferTime = this.mediaPlayerBufferTime;
                    } else {
                        if (this.mediaPlayerBufferTime != _local11.bufferTime){
                            dispatchEvent(new BufferEvent(BufferEvent.BUFFER_TIME_CHANGE, false, false, false, this.bufferTime));
                        };
                    };
                    if (_local11.buffering){
                        dispatchEvent(new BufferEvent(BufferEvent.BUFFERING_CHANGE, false, false, this.buffering));
                    };
                    break;
                case MediaTraitType.DRM:
                    this._hasDRM = add;
                    dispatchEvent(new DRMEvent(DRMEvent.DRM_STATE_CHANGE, this.drmState, false, false, this.drmStartDate, this.drmEndDate, this.drmPeriod));
                    break;
            };
            if (add == false){
                this.updateCapabilityForTrait(traitType, false);
            };
        }
        private function updateCapabilityForTrait(traitType:String, capabilityAdd:Boolean):void{
            var _local3:String;
            switch (traitType){
                case MediaTraitType.AUDIO:
                    _local3 = MediaPlayerCapabilityChangeEvent.HAS_AUDIO_CHANGE;
                    this._hasAudio = capabilityAdd;
                    break;
                case MediaTraitType.BUFFER:
                    _local3 = MediaPlayerCapabilityChangeEvent.CAN_BUFFER_CHANGE;
                    this._canBuffer = capabilityAdd;
                    break;
                case MediaTraitType.DISPLAY_OBJECT:
                    _local3 = MediaPlayerCapabilityChangeEvent.HAS_DISPLAY_OBJECT_CHANGE;
                    break;
                case MediaTraitType.DRM:
                    _local3 = MediaPlayerCapabilityChangeEvent.HAS_DRM_CHANGE;
                    this._hasDRM = capabilityAdd;
                    break;
                case MediaTraitType.DYNAMIC_STREAM:
                    _local3 = MediaPlayerCapabilityChangeEvent.IS_DYNAMIC_STREAM_CHANGE;
                    this._isDynamicStream = capabilityAdd;
                    break;
                case MediaTraitType.ALTERNATIVE_AUDIO:
                    _local3 = MediaPlayerCapabilityChangeEvent.HAS_ALTERNATIVE_AUDIO_CHANGE;
                    this._hasAlternativeAudio = capabilityAdd;
                    break;
                case MediaTraitType.LOAD:
                    _local3 = MediaPlayerCapabilityChangeEvent.CAN_LOAD_CHANGE;
                    this._canLoad = capabilityAdd;
                    break;
                case MediaTraitType.PLAY:
                    _local3 = MediaPlayerCapabilityChangeEvent.CAN_PLAY_CHANGE;
                    this._canPlay = capabilityAdd;
                    break;
                case MediaTraitType.SEEK:
                    _local3 = MediaPlayerCapabilityChangeEvent.CAN_SEEK_CHANGE;
                    this._canSeek = capabilityAdd;
                    break;
                case MediaTraitType.TIME:
                    _local3 = MediaPlayerCapabilityChangeEvent.TEMPORAL_CHANGE;
                    this._temporal = capabilityAdd;
                    break;
            };
            if (_local3 != null){
                dispatchEvent(new MediaPlayerCapabilityChangeEvent(_local3, false, false, capabilityAdd));
            };
        }
        private function changeListeners(add:Boolean, traitType:String, event:String, listener:Function):void{
            var _local5:int;
            if (add){
                _local5 = 1;
                media.getTrait(traitType).addEventListener(event, listener, false, _local5);
            } else {
                if (media.hasTrait(traitType)){
                    media.getTrait(traitType).removeEventListener(event, listener);
                };
            };
        }
        private function onSeeking(event:SeekEvent):void{
            this.mediaAtEnd = false;
            if ((((event.type == SeekEvent.SEEKING_CHANGE)) && (event.seeking))){
                this.setState(MediaPlayerState.BUFFERING);
            } else {
                if (((this.canPlay) && (this.paused))){
                    this.setState(MediaPlayerState.PAUSED);
                } else {
                    if (((this.canBuffer) && (this.buffering))){
                        this.setState(MediaPlayerState.BUFFERING);
                    } else {
                        if (((this.canPlay) && (this.playing))){
                            this.setState(MediaPlayerState.PLAYING);
                        } else {
                            if (!this.inExecuteAutoRewind){
                                this.setState(MediaPlayerState.READY);
                            };
                        };
                    };
                };
            };
        }
        private function onPlayStateChange(event:PlayEvent):void{
            if (event.playState == PlayState.PLAYING){
                if ((((((this.canBuffer == false)) || ((this.bufferLength > 0)))) || ((this.bufferTime < 0.001)))){
                    this.setState(MediaPlayerState.PLAYING);
                };
            } else {
                if (event.playState == PlayState.PAUSED){
                    this.setState(MediaPlayerState.PAUSED);
                };
            };
        }
        private function onLiveStall(event:PlayEvent):void{
            dispatchEvent(event.clone());
        }
        private function onLiveResume(event:PlayEvent):void{
            dispatchEvent(event.clone());
        }
        private function onLoadState(event:LoadEvent):void{
            if ((((event.loadState == LoadState.READY)) && ((this.state == MediaPlayerState.LOADING)))){
                this.processReadyState();
            } else {
                if (event.loadState == LoadState.UNINITIALIZED){
                    this.setState(MediaPlayerState.UNINITIALIZED);
                } else {
                    if (event.loadState == LoadState.LOAD_ERROR){
                        this.setState(MediaPlayerState.PLAYBACK_ERROR);
                    } else {
                        if (event.loadState == LoadState.LOADING){
                            this.setState(MediaPlayerState.LOADING);
                        };
                    };
                };
            };
        }
        private function processReadyState():void{
            this.setState(MediaPlayerState.READY);
            if (((((this.autoPlay) && (this.canPlay))) && (!(this.playing)))){
                this.play();
            };
        }
        private function onComplete(event:TimeEvent):void{
            this.mediaAtEnd = true;
            if (((((this.loop) && (this.canSeek))) && (this.canPlay))){
                this.executeAutoRewind(true);
            } else {
                if (((!(this.loop)) && (this.canPlay))){
                    (this.getTraitOrThrow(MediaTraitType.PLAY) as PlayTrait).stop();
                    if (((this.autoRewind) && (this.canSeek))){
                        this.executeAutoRewind(false);
                    } else {
                        this.setState(MediaPlayerState.READY);
                    };
                } else {
                    this.setState(MediaPlayerState.READY);
                };
            };
        }
        private function executeAutoRewind(playAfterAutoRewind:Boolean):void{
            var onSeekingChange:* = null;
            var playAfterAutoRewind:* = playAfterAutoRewind;
            if (this.inExecuteAutoRewind == false){
                onSeekingChange = function (event:SeekEvent):void{
                    if (event.seeking == false){
                        removeEventListener(SeekEvent.SEEKING_CHANGE, onSeekingChange);
                        if (playAfterAutoRewind){
                            play();
                        } else {
                            setState(MediaPlayerState.READY);
                        };
                        inExecuteAutoRewind = false;
                    };
                };
                this.inExecuteAutoRewind = true;
                this.mediaAtEnd = false;
                addEventListener(SeekEvent.SEEKING_CHANGE, onSeekingChange);
                this.seek(0);
            };
        }
        private function onCurrentTimeTimer(event:TimerEvent):void{
            if (((((this.temporal) && (!((this.currentTime == this.lastCurrentTime))))) && (((!(this.canSeek)) || (!(this.seeking)))))){
                this.lastCurrentTime = this.currentTime;
                dispatchEvent(new TimeEvent(TimeEvent.CURRENT_TIME_CHANGE, false, false, this.currentTime));
            };
        }
        private function onBytesLoadedTimer(event:TimerEvent):void{
            var _local2:LoadEvent;
            if (((this.canLoad) && (!((this.bytesLoaded == this.lastBytesLoaded))))){
                _local2 = new LoadEvent(LoadEvent.BYTES_LOADED_CHANGE, false, false, null, this.bytesLoaded);
                this.lastBytesLoaded = this.bytesLoaded;
                dispatchEvent(_local2);
            };
        }
        private function onBuffering(event:BufferEvent):void{
            if (event.buffering){
                this.setState(MediaPlayerState.BUFFERING);
            } else {
                if (((this.canPlay) && (this.playing))){
                    this.setState(MediaPlayerState.PLAYING);
                } else {
                    if (((this.canPlay) && (this.paused))){
                        this.setState(MediaPlayerState.PAUSED);
                    } else {
                        this.setState(MediaPlayerState.READY);
                    };
                };
            };
        }
        private function setState(newState:String):void{
            var _local2:Boolean;
            var _local3:String;
            if (this._state != newState){
                this._state = newState;
                dispatchEvent(new MediaPlayerStateChangeEvent(MediaPlayerStateChangeEvent.MEDIA_PLAYER_STATE_CHANGE, false, false, this._state));
                if (newState == MediaPlayerState.PLAYBACK_ERROR){
                    _local2 = this.playing;
                    for each (_local3 in media.traitTypes) {
                        if (_local3 != MediaTraitType.LOAD){
                            this.updateTraitListeners(_local3, false, false);
                        };
                    };
                    if (_local2){
                        (this.getTraitOrThrow(MediaTraitType.PLAY) as PlayTrait).stop();
                    };
                };
            };
        }
        private function load():void{
            var loadTrait:* = null;
            try {
                loadTrait = (media.getTrait(MediaTraitType.LOAD) as LoadTrait);
                if (((!((loadTrait.loadState == LoadState.LOADING))) && (!((loadTrait.loadState == LoadState.READY))))){
                    loadTrait.load();
                };
            } catch(error:IllegalOperationError) {
                setState(MediaPlayerState.PLAYBACK_ERROR);
                dispatchEvent(new MediaErrorEvent(MediaErrorEvent.MEDIA_ERROR, false, false, new MediaError(MediaErrorCodes.MEDIA_LOAD_FAILED, error.message)));
            };
        }

    }
}//package org.osmf.media 
﻿package org.osmf.media.pluginClasses {

    public class VersionUtils {

        public static function parseVersionString(version:String):Object{
            var _local2:Array = version.split(".");
            var _local3:int;
            var _local4:int;
            if (_local2.length >= 1){
                _local3 = parseInt(_local2[0]);
            };
            if (_local2.length >= 2){
                _local4 = parseInt(_local2[1]);
                if (_local4 < 10){
                    _local4 = (_local4 * 10);
                };
            };
            return ({
                major:_local3,
                minor:_local4
            });
        }

    }
}//package org.osmf.media.pluginClasses 
﻿package org.osmf.media.pluginClasses {
    import org.osmf.media.*;
    import flash.display.*;
    import org.osmf.events.*;
    import org.osmf.traits.*;
    import org.osmf.elements.*;
    import org.osmf.media.pluginClasses.*;
    import org.osmf.elements.loaderClasses.*;

    class DynamicPluginLoader extends PluginLoader {

        private static const PLUGININFO_PROPERTY_NAME:String = "pluginInfo";

        public function DynamicPluginLoader(mediaFactory:MediaFactory, minimumSupportedFrameworkVersion:String){
            super(mediaFactory, minimumSupportedFrameworkVersion);
        }
        override public function canHandleResource(resource:MediaResourceBase):Boolean{
            return (new SWFLoader().canHandleResource(resource));
        }
        override protected function executeLoad(loadTrait:LoadTrait):void{
            var swfLoader:* = null;
            var loaderLoadTrait:* = null;
            var onSWFLoaderStateChange:* = null;
            var onLoadError:* = null;
            var loadTrait:* = loadTrait;
            onSWFLoaderStateChange = function (event:LoaderEvent):void{
                var _local2:DisplayObject;
                var _local3:PluginInfo;
                if (event.newState == LoadState.READY){
                    swfLoader.removeEventListener(LoaderEvent.LOAD_STATE_CHANGE, onSWFLoaderStateChange);
                    loaderLoadTrait.removeEventListener(MediaErrorEvent.MEDIA_ERROR, onLoadError);
                    _local2 = loaderLoadTrait.loader.content;
                    _local3 = (_local2[PLUGININFO_PROPERTY_NAME] as PluginInfo);
                    loadFromPluginInfo(loadTrait, _local3, loaderLoadTrait.loader);
                } else {
                    if (event.newState == LoadState.LOAD_ERROR){
                        swfLoader.removeEventListener(LoaderEvent.LOAD_STATE_CHANGE, onSWFLoaderStateChange);
                        updateLoadTrait(loadTrait, event.newState);
                    };
                };
            };
            onLoadError = function (event:MediaErrorEvent):void{
                loaderLoadTrait.removeEventListener(MediaErrorEvent.MEDIA_ERROR, onLoadError);
                loadTrait.dispatchEvent(event.clone());
            };
            updateLoadTrait(loadTrait, LoadState.LOADING);
            swfLoader = new SWFLoader(true);
            swfLoader.validateLoadedContentFunction = this.validateLoadedContent;
            swfLoader.addEventListener(LoaderEvent.LOAD_STATE_CHANGE, onSWFLoaderStateChange);
            loaderLoadTrait = new LoaderLoadTrait(swfLoader, loadTrait.resource);
            loaderLoadTrait.addEventListener(MediaErrorEvent.MEDIA_ERROR, onLoadError);
            swfLoader.load(loaderLoadTrait);
        }
        override protected function executeUnload(loadTrait:LoadTrait):void{
            updateLoadTrait(loadTrait, LoadState.UNLOADING);
            var _local2:PluginLoadTrait = (loadTrait as PluginLoadTrait);
            unloadFromPluginInfo(_local2.pluginInfo);
            _local2.loader.unloadAndStop();
            updateLoadTrait(loadTrait, LoadState.UNINITIALIZED);
        }
        private function validateLoadedContent(displayObject:DisplayObject):Boolean{
            var _local2:Object = ((displayObject.hasOwnProperty(PLUGININFO_PROPERTY_NAME)) ? displayObject[PLUGININFO_PROPERTY_NAME] : null);
            return (((_local2)!=null) ? isPluginCompatible(_local2) : false);
        }

    }
}//package org.osmf.media.pluginClasses 
﻿package org.osmf.media.pluginClasses {
    import org.osmf.media.*;
    import org.osmf.events.*;
    import flash.events.*;
    import flash.utils.*;
    import org.osmf.traits.*;
    import org.osmf.utils.*;
    import __AS3__.vec.*;

    public class PluginManager extends EventDispatcher {

        private static const STATIC_PLUGIN_MEDIA_INFO_ID:String = "org.osmf.plugins.StaticPluginLoader";
        private static const DYNAMIC_PLUGIN_MEDIA_INFO_ID:String = "org.osmf.plugins.DynamicPluginLoader";

        private var _mediaFactory:MediaFactory;
        private var _pluginFactory:MediaFactory;
        private var _pluginMap:Dictionary;
        private var _pluginList:Vector.<PluginEntry>;
        private var notificationFunctions:Vector.<Function>;
        private var createdElements:Dictionary;
        private var minimumSupportedFrameworkVersion:String;
        private var staticPluginLoader:StaticPluginLoader;
        private var dynamicPluginLoader:DynamicPluginLoader;

        public function PluginManager(mediaFactory:MediaFactory){
            this._mediaFactory = mediaFactory;
            this._mediaFactory.addEventListener(MediaFactoryEvent.MEDIA_ELEMENT_CREATE, this.onMediaElementCreate);
            this.minimumSupportedFrameworkVersion = Version.lastAPICompatibleVersion;
            this.initPluginFactory();
            this._pluginMap = new Dictionary();
            this._pluginList = new Vector.<PluginEntry>();
        }
        public function loadPlugin(resource:MediaResourceBase):void{
            var identifier:* = null;
            var pluginEntry:* = null;
            var onLoadStateChange:* = null;
            var onMediaError:* = null;
            var pluginElement:* = null;
            var loadTrait:* = null;
            var resource:* = resource;
            onLoadStateChange = function (event:LoadEvent):void{
                var _local2:PluginLoadTrait;
                if (event.loadState == LoadState.READY){
                    pluginEntry.state = PluginLoadingState.LOADED;
                    _pluginList.push(pluginEntry);
                    _local2 = (pluginElement.getTrait(MediaTraitType.LOAD) as PluginLoadTrait);
                    if (_local2.pluginInfo.mediaElementCreationNotificationFunction != null){
                        invokeMediaElementCreationNotificationForCreatedMediaElements(_local2.pluginInfo.mediaElementCreationNotificationFunction);
                        if (notificationFunctions == null){
                            notificationFunctions = new Vector.<Function>();
                        };
                        notificationFunctions.push(_local2.pluginInfo.mediaElementCreationNotificationFunction);
                    };
                    dispatchEvent(new PluginManagerEvent(PluginManagerEvent.PLUGIN_LOAD, false, false, resource));
                } else {
                    if (event.loadState == LoadState.LOAD_ERROR){
                        delete _pluginMap[identifier];
                        dispatchEvent(new PluginManagerEvent(PluginManagerEvent.PLUGIN_LOAD_ERROR, false, false, resource));
                    };
                };
            };
            onMediaError = function (event:MediaErrorEvent):void{
                dispatchEvent(event.clone());
            };
            if (resource == null){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.INVALID_PARAM)));
            };
            identifier = this.getPluginIdentifier(resource);
            pluginEntry = (this._pluginMap[identifier] as PluginEntry);
            if (pluginEntry != null){
                dispatchEvent(new PluginManagerEvent(PluginManagerEvent.PLUGIN_LOAD, false, false, resource));
            } else {
                pluginElement = this._pluginFactory.createMediaElement(resource);
                if (pluginElement != null){
                    pluginEntry = new PluginEntry(pluginElement, PluginLoadingState.LOADING);
                    this._pluginMap[identifier] = pluginEntry;
                    loadTrait = (pluginElement.getTrait(MediaTraitType.LOAD) as LoadTrait);
                    if (loadTrait != null){
                        loadTrait.addEventListener(LoadEvent.LOAD_STATE_CHANGE, onLoadStateChange);
                        loadTrait.addEventListener(MediaErrorEvent.MEDIA_ERROR, onMediaError);
                        loadTrait.load();
                    } else {
                        dispatchEvent(new PluginManagerEvent(PluginManagerEvent.PLUGIN_LOAD_ERROR, false, false, resource));
                    };
                } else {
                    dispatchEvent(new PluginManagerEvent(PluginManagerEvent.PLUGIN_LOAD_ERROR, false, false, resource));
                };
            };
        }
        public function get mediaFactory():MediaFactory{
            return (this._mediaFactory);
        }
        private function getPluginIdentifier(resource:MediaResourceBase):Object{
            var _local2:Object;
            if ((resource is URLResource)){
                _local2 = (resource as URLResource).url;
            } else {
                if ((resource is PluginInfoResource)){
                    _local2 = (resource as PluginInfoResource).pluginInfo;
                };
            };
            return (_local2);
        }
        private function initPluginFactory():void{
            this._pluginFactory = new MediaFactory();
            this.staticPluginLoader = new StaticPluginLoader(this.mediaFactory, this.minimumSupportedFrameworkVersion);
            this.dynamicPluginLoader = new DynamicPluginLoader(this.mediaFactory, this.minimumSupportedFrameworkVersion);
            var _local1:MediaFactoryItem = new MediaFactoryItem(STATIC_PLUGIN_MEDIA_INFO_ID, this.staticPluginLoader.canHandleResource, this.createStaticPluginElement);
            this._pluginFactory.addItem(_local1);
            var _local2:MediaFactoryItem = new MediaFactoryItem(DYNAMIC_PLUGIN_MEDIA_INFO_ID, this.dynamicPluginLoader.canHandleResource, this.createDynamicPluginElement);
            this._pluginFactory.addItem(_local2);
        }
        private function createStaticPluginElement():MediaElement{
            return (new PluginElement(this.staticPluginLoader));
        }
        private function createDynamicPluginElement():MediaElement{
            return (new PluginElement(this.dynamicPluginLoader));
        }
        private function onMediaElementCreate(event:MediaFactoryEvent):void{
            this.invokeMediaElementCreationNotifications(event.mediaElement);
            if (this.createdElements == null){
                this.createdElements = new Dictionary(true);
            };
            this.createdElements[event.mediaElement] = true;
        }
        private function invokeMediaElementCreationNotifications(mediaElement:MediaElement):void{
            var _local2:Function;
            for each (_local2 in this.notificationFunctions) {
                this.invokeMediaElementCreationNotificationFunction(_local2, mediaElement);
            };
        }
        private function invokeMediaElementCreationNotificationFunction(func:Function, mediaElement:MediaElement):void{
            try {
                func.call(null, mediaElement);
            } catch(error:Error) {
            };
        }
        private function invokeMediaElementCreationNotificationForCreatedMediaElements(func:Function):void{
            var _local2:Object;
            for (_local2 in this.createdElements) {
                this.invokeMediaElementCreationNotificationFunction(func, (_local2 as MediaElement));
            };
        }

    }
}//package org.osmf.media.pluginClasses 
﻿package org.osmf.media.pluginClasses {
    import org.osmf.media.*;
    import flash.display.*;
    import org.osmf.events.*;
    import org.osmf.traits.*;
    import org.osmf.utils.*;
    import org.osmf.media.pluginClasses.*;

    class PluginLoader extends LoaderBase {

        private static const FRAMEWORK_VERSION_PROPERTY_NAME:String = "frameworkVersion";
        private static const IS_FRAMEWORK_VERSION_SUPPORTED_PROPERTY_NAME:String = "isFrameworkVersionSupported";

        private var minimumSupportedFrameworkVersion:String;
        private var mediaFactory:MediaFactory;

        public function PluginLoader(mediaFactory:MediaFactory, minimumSupportedFrameworkVersion:String){
            this.mediaFactory = mediaFactory;
            this.minimumSupportedFrameworkVersion = minimumSupportedFrameworkVersion;
        }
        protected function unloadFromPluginInfo(pluginInfo:PluginInfo):void{
            var _local2:int;
            var _local3:MediaFactoryItem;
            var _local4:MediaFactoryItem;
            if (pluginInfo != null){
                _local2 = 0;
                while (_local2 < pluginInfo.numMediaFactoryItems) {
                    _local3 = pluginInfo.getMediaFactoryItemAt(_local2);
                    _local4 = this.mediaFactory.getItemById(_local3.id);
                    if (_local4 != null){
                        this.mediaFactory.removeItem(_local4);
                    };
                    _local2++;
                };
            };
        }
        protected function loadFromPluginInfo(loadTrait:LoadTrait, pluginInfo:PluginInfo, loader:Loader=null):void{
            var passedMediaFactory:* = null;
            var i:* = 0;
            var pluginLoadTrait:* = null;
            var item:* = null;
            var loadTrait:* = loadTrait;
            var pluginInfo:* = pluginInfo;
            var loader = loader;
            var invalidImplementation:* = false;
            if (pluginInfo != null){
                if (this.isPluginCompatible(pluginInfo)){
                    try {
                        passedMediaFactory = (loadTrait.resource.getMetadataValue(PluginInfo.PLUGIN_MEDIAFACTORY_NAMESPACE) as MediaFactory);
                        if (passedMediaFactory == null){
                            loadTrait.resource.addMetadataValue(PluginInfo.PLUGIN_MEDIAFACTORY_NAMESPACE, this.mediaFactory);
                        };
                        pluginInfo.initializePlugin(loadTrait.resource);
                        i = 0;
                        while (i < pluginInfo.numMediaFactoryItems) {
                            item = pluginInfo.getMediaFactoryItemAt(i);
                            if (item == null){
                                throw (new RangeError());
                            };
                            this.mediaFactory.addItem(item);
                            i = (i + 1);
                        };
                        pluginLoadTrait = (loadTrait as PluginLoadTrait);
                        pluginLoadTrait.pluginInfo = pluginInfo;
                        pluginLoadTrait.loader = loader;
                        updateLoadTrait(pluginLoadTrait, LoadState.READY);
                    } catch(error:RangeError) {
                        invalidImplementation = true;
                    };
                } else {
                    updateLoadTrait(loadTrait, LoadState.LOAD_ERROR);
                    loadTrait.dispatchEvent(new MediaErrorEvent(MediaErrorEvent.MEDIA_ERROR, false, false, new MediaError(MediaErrorCodes.PLUGIN_VERSION_INVALID)));
                };
            } else {
                invalidImplementation = true;
            };
            if (invalidImplementation){
                updateLoadTrait(loadTrait, LoadState.LOAD_ERROR);
                loadTrait.dispatchEvent(new MediaErrorEvent(MediaErrorEvent.MEDIA_ERROR, false, false, new MediaError(MediaErrorCodes.PLUGIN_IMPLEMENTATION_INVALID)));
            };
        }
        protected function isPluginCompatible(pluginInfo:Object):Boolean{
            var _local5:Function;
            var _local2:Boolean;
            var _local3:String = ((pluginInfo.hasOwnProperty(FRAMEWORK_VERSION_PROPERTY_NAME)) ? pluginInfo[FRAMEWORK_VERSION_PROPERTY_NAME] : null);
            var _local4:Boolean = this.isPluginVersionSupported(_local3);
            if (_local4){
                _local5 = ((pluginInfo.hasOwnProperty(IS_FRAMEWORK_VERSION_SUPPORTED_PROPERTY_NAME)) ? (pluginInfo[IS_FRAMEWORK_VERSION_SUPPORTED_PROPERTY_NAME] as Function) : null);
                if (_local5 != null){
                    try {
                        _local2 = _local5(Version.version);
                    } catch(error:Error) {
                    };
                };
            };
            return (_local2);
        }
        private function isPluginVersionSupported(pluginVersion:String):Boolean{
            if ((((pluginVersion == null)) || ((pluginVersion.length == 0)))){
                return (false);
            };
            var _local2:Object = VersionUtils.parseVersionString(this.minimumSupportedFrameworkVersion);
            var _local3:Object = VersionUtils.parseVersionString(pluginVersion);
            return ((((_local3.major > _local2.major)) || ((((_local3.major == _local2.major)) && ((_local3.minor >= _local2.minor))))));
        }

    }
}//package org.osmf.media.pluginClasses 
﻿package org.osmf.media.pluginClasses {

    class PluginLoadingState {

        public static const LOADING:PluginLoadingState = new PluginLoadingState("Loading");
;
        public static const LOADED:PluginLoadingState = new PluginLoadingState("Loaded");
;

        private var _state:String;

        public function PluginLoadingState(state:String){
            this._state = state;
        }
        public function get state():String{
            return (this._state);
        }

    }
}//package org.osmf.media.pluginClasses 
﻿package org.osmf.media.pluginClasses {
    import org.osmf.media.*;
    import org.osmf.traits.*;

    class StaticPluginLoader extends PluginLoader {

        public function StaticPluginLoader(mediaFactory:MediaFactory, minimumSupportedFrameworkVersion:String){
            super(mediaFactory, minimumSupportedFrameworkVersion);
        }
        override public function canHandleResource(resource:MediaResourceBase):Boolean{
            return ((resource is PluginInfoResource));
        }
        override protected function executeLoad(loadTrait:LoadTrait):void{
            updateLoadTrait(loadTrait, LoadState.LOADING);
            var _local2:PluginInfoResource = (loadTrait.resource as PluginInfoResource);
            var _local3:PluginInfo = _local2.pluginInfo;
            loadFromPluginInfo(loadTrait, _local3);
        }
        override protected function executeUnload(loadTrait:LoadTrait):void{
            var _local2:PluginLoadTrait = (loadTrait as PluginLoadTrait);
            var _local3:PluginInfo = _local2.pluginInfo;
            updateLoadTrait(loadTrait, LoadState.UNLOADING);
            unloadFromPluginInfo(_local3);
            updateLoadTrait(loadTrait, LoadState.UNINITIALIZED);
        }

    }
}//package org.osmf.media.pluginClasses 
﻿package org.osmf.media.pluginClasses {
    import org.osmf.media.*;
    import org.osmf.traits.*;

    class PluginElement extends LoadableElementBase {

        public function PluginElement(loader:PluginLoader, resource:MediaResourceBase=null){
            super(resource, loader);
        }
        override protected function createLoadTrait(resource:MediaResourceBase, loader:LoaderBase):LoadTrait{
            return (new PluginLoadTrait(loader, resource));
        }

    }
}//package org.osmf.media.pluginClasses 
﻿package org.osmf.media.pluginClasses {
    import org.osmf.media.*;

    class PluginEntry {

        private var _pluginElement:MediaElement;
        private var _state:PluginLoadingState;

        public function PluginEntry(pluginElement:MediaElement, state:PluginLoadingState){
            this._pluginElement = pluginElement;
            this._state = state;
        }
        public function get pluginElement():MediaElement{
            return (this._pluginElement);
        }
        public function get state():PluginLoadingState{
            return (this._state);
        }
        public function set state(value:PluginLoadingState):void{
            this._state = value;
        }

    }
}//package org.osmf.media.pluginClasses 
﻿package org.osmf.media.pluginClasses {
    import org.osmf.media.*;
    import flash.display.*;
    import org.osmf.traits.*;

    class PluginLoadTrait extends LoadTrait {

        private var _pluginInfo:PluginInfo;
        private var _loader:Loader;

        public function PluginLoadTrait(loader:LoaderBase, resource:MediaResourceBase){
            super(loader, resource);
        }
        public function get pluginInfo():PluginInfo{
            return (this._pluginInfo);
        }
        public function set pluginInfo(value:PluginInfo):void{
            this._pluginInfo = value;
        }
        public function get loader():Loader{
            return (this._loader);
        }
        public function set loader(value:Loader):void{
            this._loader = value;
        }

    }
}//package org.osmf.media.pluginClasses 
﻿package org.osmf.media {
    import org.osmf.events.*;
    import org.osmf.traits.*;
    import __AS3__.vec.*;

    public class LoadableElementBase extends MediaElement {

        private var _loader:LoaderBase;

        public function LoadableElementBase(resource:MediaResourceBase=null, loader:LoaderBase=null){
            this._loader = loader;
            this.resource = resource;
        }
        override public function set resource(value:MediaResourceBase):void{
            super.resource = value;
            this.updateLoadTrait();
        }
        final protected function get loader():LoaderBase{
            return (this._loader);
        }
        final protected function set loader(value:LoaderBase):void{
            this._loader = value;
        }
        protected function createLoadTrait(resource:MediaResourceBase, loader:LoaderBase):LoadTrait{
            return (new LoadTrait(this._loader, resource));
        }
        protected function processLoadingState():void{
        }
        protected function processReadyState():void{
        }
        protected function processUnloadingState():void{
        }
        protected function getLoaderForResource(resource:MediaResourceBase, alternateLoaders:Vector.<LoaderBase>):LoaderBase{
            var _local4:Boolean;
            var _local5:LoaderBase;
            var _local3:LoaderBase = this.loader;
            if (((!((resource == null))) && ((((this.loader == null)) || ((this.loader.canHandleResource(resource) == false)))))){
                _local4 = false;
                for each (_local5 in alternateLoaders) {
                    if ((((this.loader == null)) || (!((this.loader == _local5))))){
                        if (_local5.canHandleResource(resource)){
                            _local3 = _local5;
                            break;
                        };
                    };
                };
                if ((((_local3 == null)) && (!((alternateLoaders == null))))){
                    _local3 = alternateLoaders[(alternateLoaders.length - 1)];
                };
            };
            return (_local3);
        }
        private function onLoadStateChange(event:LoadEvent):void{
            if (event.loadState == LoadState.LOADING){
                this.processLoadingState();
            } else {
                if (event.loadState == LoadState.READY){
                    this.processReadyState();
                } else {
                    if (event.loadState == LoadState.UNLOADING){
                        this.processUnloadingState();
                    };
                };
            };
        }
        private function updateLoadTrait():void{
            var _local1:LoadTrait = (getTrait(MediaTraitType.LOAD) as LoadTrait);
            if (_local1 != null){
                if (_local1.loadState == LoadState.READY){
                    _local1.unload();
                };
                _local1.removeEventListener(LoadEvent.LOAD_STATE_CHANGE, this.onLoadStateChange);
                removeTrait(MediaTraitType.LOAD);
            };
            if (this.loader != null){
                _local1 = this.createLoadTrait(resource, this.loader);
                _local1.addEventListener(LoadEvent.LOAD_STATE_CHANGE, this.onLoadStateChange, false, 10);
                addTrait(MediaTraitType.LOAD, _local1);
            };
        }

    }
}//package org.osmf.media 
﻿package org.osmf.media {

    public final class MediaType {

        public static const VIDEO:String = "video";
        public static const AUDIO:String = "audio";
        public static const IMAGE:String = "image";
        public static const SWF:String = "swf";

    }
}//package org.osmf.media 
﻿package org.osmf.media {

    public final class MediaPlayerState {

        public static const UNINITIALIZED:String = "uninitialized";
        public static const LOADING:String = "loading";
        public static const READY:String = "ready";
        public static const PLAYING:String = "playing";
        public static const PAUSED:String = "paused";
        public static const BUFFERING:String = "buffering";
        public static const PLAYBACK_ERROR:String = "playbackError";

    }
}//package org.osmf.media 
﻿package org.osmf.media {
    import org.osmf.utils.*;

    public class MediaFactoryItem {

        private var _id:String;
        private var _canHandleResourceFunction:Function;
        private var _mediaElementCreationFunction:Function;
        private var _type:String;

        public function MediaFactoryItem(id:String, canHandleResourceFunction:Function, mediaElementCreationFunction:Function, type:String=null){
            if ((((((id == null)) || ((canHandleResourceFunction == null)))) || ((mediaElementCreationFunction == null)))){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.INVALID_PARAM)));
            };
            type = ((type) || (MediaFactoryItemType.STANDARD));
            this._id = id;
            this._canHandleResourceFunction = canHandleResourceFunction;
            this._mediaElementCreationFunction = mediaElementCreationFunction;
            this._type = type;
        }
        public function get id():String{
            return (this._id);
        }
        public function get canHandleResourceFunction():Function{
            return (this._canHandleResourceFunction);
        }
        public function get mediaElementCreationFunction():Function{
            return (this._mediaElementCreationFunction);
        }
        public function get type():String{
            return (this._type);
        }

    }
}//package org.osmf.media 
﻿package org.osmf.media {
    import org.osmf.elements.*;
    import org.osmf.net.*;
    import org.osmf.net.httpstreaming.*;
    import org.osmf.net.rtmpstreaming.*;
    import org.osmf.net.dvr.*;

    public class DefaultMediaFactory extends MediaFactory {

        private var rtmpStreamingNetLoader:RTMPDynamicStreamingNetLoader;
        private var f4mLoader:F4MLoader;
        private var dvrCastLoader:DVRCastNetLoader;
        private var netLoader:NetLoader;
        private var imageLoader:ImageLoader;
        private var swfLoader:SWFLoader;
        private var soundLoader:SoundLoader;
        private var httpStreamingNetLoader:HTTPStreamingNetLoader;
        private var multicastLoader:MulticastNetLoader;

        public function DefaultMediaFactory(){
            this.init();
        }
        private function init():void{
            this.f4mLoader = new F4MLoader(this);
            addItem(new MediaFactoryItem("org.osmf.elements.f4m", this.f4mLoader.canHandleResource, function ():MediaElement{
                return (new F4MElement(null, f4mLoader));
            }));
            this.dvrCastLoader = new DVRCastNetLoader();
            addItem(new MediaFactoryItem("org.osmf.elements.video.dvr.dvrcast", this.dvrCastLoader.canHandleResource, function ():MediaElement{
                return (new VideoElement(null, dvrCastLoader));
            }));
            this.httpStreamingNetLoader = new HTTPStreamingNetLoader();
            addItem(new MediaFactoryItem("org.osmf.elements.video.httpstreaming", this.httpStreamingNetLoader.canHandleResource, function ():MediaElement{
                return (new VideoElement(null, httpStreamingNetLoader));
            }));
            this.multicastLoader = new MulticastNetLoader();
            addItem(new MediaFactoryItem("org.osmf.elements.video.rtmfp.multicast", this.multicastLoader.canHandleResource, function ():MediaElement{
                return (new VideoElement(null, multicastLoader));
            }));
            this.rtmpStreamingNetLoader = new RTMPDynamicStreamingNetLoader();
            addItem(new MediaFactoryItem("org.osmf.elements.video.rtmpdynamicStreaming", this.rtmpStreamingNetLoader.canHandleResource, function ():MediaElement{
                return (new VideoElement(null, rtmpStreamingNetLoader));
            }));
            this.netLoader = new NetLoader();
            addItem(new MediaFactoryItem("org.osmf.elements.video", this.netLoader.canHandleResource, function ():MediaElement{
                return (new VideoElement(null, netLoader));
            }));
            this.soundLoader = new SoundLoader();
            addItem(new MediaFactoryItem("org.osmf.elements.audio", this.soundLoader.canHandleResource, function ():MediaElement{
                return (new AudioElement(null, soundLoader));
            }));
            addItem(new MediaFactoryItem("org.osmf.elements.audio.streaming", this.netLoader.canHandleResource, function ():MediaElement{
                return (new AudioElement(null, netLoader));
            }));
            this.imageLoader = new ImageLoader();
            addItem(new MediaFactoryItem("org.osmf.elements.image", this.imageLoader.canHandleResource, function ():MediaElement{
                return (new ImageElement(null, imageLoader));
            }));
            this.swfLoader = new SWFLoader();
            addItem(new MediaFactoryItem("org.osmf.elements.swf", this.swfLoader.canHandleResource, function ():MediaElement{
                return (new SWFElement(null, swfLoader));
            }));
        }

    }
}//package org.osmf.media 
﻿package org.osmf.media {
    import org.osmf.utils.*;
    import __AS3__.vec.*;
    import org.osmf.media.pluginClasses.*;

    public class PluginInfo {

        public static const PLUGIN_MEDIAFACTORY_NAMESPACE:String = "http://www.osmf.org/plugin/mediaFactory/1.0";

        private var _mediaFactoryItems:Vector.<MediaFactoryItem>;
        private var _mediaElementCreationNotificationFunction:Function;

        public function PluginInfo(mediaFactoryItems:Vector.<MediaFactoryItem>=null, mediaElementCreationNotificationFunction:Function=null){
            this._mediaFactoryItems = ((mediaFactoryItems)!=null) ? mediaFactoryItems : new Vector.<MediaFactoryItem>();
            this._mediaElementCreationNotificationFunction = mediaElementCreationNotificationFunction;
        }
        public function get numMediaFactoryItems():int{
            return (this._mediaFactoryItems.length);
        }
        public function get frameworkVersion():String{
            return (Version.version);
        }
        public function getMediaFactoryItemAt(index:int):MediaFactoryItem{
            if ((((index < 0)) || ((index >= this._mediaFactoryItems.length)))){
                throw (new RangeError(OSMFStrings.getString(OSMFStrings.INVALID_PARAM)));
            };
            return ((this._mediaFactoryItems[index] as MediaFactoryItem));
        }
        public function isFrameworkVersionSupported(version:String):Boolean{
            if ((((version == null)) || ((version.length == 0)))){
                return (false);
            };
            var _local2:Object = VersionUtils.parseVersionString(version);
            var _local3:Object = VersionUtils.parseVersionString(this.frameworkVersion);
            return ((((_local2.major > _local3.major)) || ((((_local2.major == _local3.major)) && ((_local2.minor >= _local3.minor))))));
        }
        public function initializePlugin(resource:MediaResourceBase):void{
        }
        public function get mediaElementCreationNotificationFunction():Function{
            return (this._mediaElementCreationNotificationFunction);
        }
        final protected function get mediaFactoryItems():Vector.<MediaFactoryItem>{
            return (this._mediaFactoryItems);
        }
        final protected function set mediaFactoryItems(value:Vector.<MediaFactoryItem>):void{
            this._mediaFactoryItems = value;
        }

    }
}//package org.osmf.media 
﻿package org.osmf.media {

    public class PluginInfoResource extends MediaResourceBase {

        private var _pluginInfo:PluginInfo;

        public function PluginInfoResource(pluginInfo:PluginInfo){
            this._pluginInfo = pluginInfo;
        }
        public function get pluginInfo():PluginInfo{
            return (this._pluginInfo);
        }

    }
}//package org.osmf.media 
﻿package org.osmf.media {
    import flash.events.*;
    import org.osmf.traits.*;
    import org.osmf.utils.*;

    class MediaTraitResolver extends EventDispatcher {

        private var _type:String;
        private var _resolvedTrait:MediaTraitBase;

        public function MediaTraitResolver(type:String){
            if (type == null){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.NULL_PARAM)));
            };
            this._type = type;
        }
        final public function get type():String{
            return (this._type);
        }
        final protected function setResolvedTrait(value:MediaTraitBase):void{
            if (value != this._resolvedTrait){
                if (this._resolvedTrait){
                    this._resolvedTrait = null;
                    dispatchEvent(new Event(Event.CHANGE));
                };
                this._resolvedTrait = value;
                dispatchEvent(new Event(Event.CHANGE));
            };
        }
        final public function get resolvedTrait():MediaTraitBase{
            return (this._resolvedTrait);
        }
        final public function addTrait(instance:MediaTraitBase):void{
            if (instance == null){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.NULL_PARAM)));
            };
            if (instance.traitType != this.type){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.INVALID_PARAM)));
            };
            this.processAddTrait(instance);
        }
        final public function removeTrait(instance:MediaTraitBase):MediaTraitBase{
            if (instance == null){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.NULL_PARAM)));
            };
            if (instance.traitType != this.type){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.INVALID_PARAM)));
            };
            return (this.processRemoveTrait(instance));
        }
        protected function processAddTrait(instance:MediaTraitBase):void{
        }
        protected function processRemoveTrait(instance:MediaTraitBase):MediaTraitBase{
            return (null);
        }

    }
}//package org.osmf.media 
﻿package org.osmf.media {
    import org.osmf.traits.*;
    import org.osmf.utils.*;

    public class DefaultTraitResolver extends MediaTraitResolver {

        private var defaultTrait:MediaTraitBase;
        private var trait:MediaTraitBase;

        public function DefaultTraitResolver(type:String, defaultTrait:MediaTraitBase){
            super(type);
            if (defaultTrait == null){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.NULL_PARAM)));
            };
            if (defaultTrait.traitType != type){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.INVALID_PARAM)));
            };
            this.defaultTrait = defaultTrait;
            setResolvedTrait(defaultTrait);
        }
        override protected function processAddTrait(instance:MediaTraitBase):void{
            if (this.trait == null){
                setResolvedTrait((this.trait = instance));
            };
        }
        override protected function processRemoveTrait(instance:MediaTraitBase):MediaTraitBase{
            var _local2:MediaTraitBase;
            if (((instance) && ((instance == this.trait)))){
                _local2 = this.trait;
                this.trait = null;
                setResolvedTrait(this.defaultTrait);
            };
            return (_local2);
        }

    }
}//package org.osmf.media 
﻿package org.osmf.media.videoClasses {

    public final class VideoSurfaceInfo {

        public static const UNAVAILABLE:String = "unavailable";
        public static const SOFTWARE:String = "software";
        public static const ACCELERATED:String = "accelerated";

        protected var _stageVideoInUse:Boolean;
        protected var _renderStatus:String;
        protected var _stageVideoInUseCount:int;
        protected var _stageVideoCount:int;

        public function VideoSurfaceInfo(stageVideoInUse:Boolean, renderStatus:String, stageVideoInUseCount:int, stageVideoCount:int){
            this._stageVideoInUse = stageVideoInUse;
            this._renderStatus = renderStatus;
            this._stageVideoInUseCount = stageVideoInUseCount;
            this._stageVideoCount = stageVideoCount;
        }
        public function get stageVideoInUse():Boolean{
            return (this._stageVideoInUse);
        }
        public function get renderStatus():String{
            return (this._renderStatus);
        }
        public function get stageVideoInUseCount():int{
            return (this._stageVideoInUseCount);
        }
        public function get stageVideoCount():int{
            return (this._stageVideoCount);
        }

    }
}//package org.osmf.media.videoClasses 
﻿package org.osmf.media.videoClasses {
    import flash.display.*;
    import org.osmf.events.*;
    import flash.events.*;
    import flash.geom.*;
    import flash.net.*;
    import flash.media.*;

    public class VideoSurface extends Sprite {

        static var videoSurfaceManager:VideoSurfaceManager = null;
        static var stageVideoInUseCount:int = 0;
        static var stageVideoCount:int = 0;

        var createVideo:Function;
        var stageVideo = null;
        var video:Video = null;
        private var currentVideoRenderer = null;
        private var netStream:NetStream;
        private var surfaceRect:Rectangle;
        private var invalidSurfaceRect:Boolean = false;
        private var surfaceShape:Shape = null;
        private var _deblocking:int = 0;
        private var _smoothing:Boolean = false;
        private var _visible:Boolean = true;
        private var renderStatus:String;

        public function VideoSurface(useStageVideo:Boolean=true, createVideo:Function=null){
            var useStageVideo:Boolean = useStageVideo;
            var createVideo = createVideo;
            this.surfaceRect = new Rectangle(0, 0, 0, 0);
            super();
            this.doubleClickEnabled = true;
            if (createVideo != null){
                this.createVideo = createVideo;
            } else {
                this.createVideo = function ():Video{
                    return (new Video());
                };
            };
            if (useStageVideo){
                this.register();
            } else {
                this.switchRenderer(this.createVideo());
            };
        }
        private static function updateRect(rect:Rectangle):Rectangle{
            var _local2:Rectangle = rect;
            if (isNaN(_local2.x)){
                _local2.x = 0;
            };
            if (isNaN(_local2.y)){
                _local2.y = 0;
            };
            if (isNaN(_local2.width)){
                _local2.width = 0;
            };
            if (isNaN(_local2.height)){
                _local2.height = 0;
            };
            return (_local2);
        }

        public function get info():VideoSurfaceInfo{
            return (new VideoSurfaceInfo(!((this.stageVideo == null)), this.renderStatus, stageVideoInUseCount, stageVideoCount));
        }
        public function attachNetStream(netStream:NetStream):void{
            this.netStream = netStream;
            if (this.currentVideoRenderer){
                this.currentVideoRenderer.attachNetStream(netStream);
            };
        }
        public function clear(clearStageVideoObject:Boolean=false):void{
            if (this.currentVideoRenderer){
                if (this.currentVideoRenderer == this.video){
                    this.video.clear();
                } else {
                    if (clearStageVideoObject){
                        this.stageVideo.depth = 0;
                        this.stageVideo.viewPort = new Rectangle(0, 0, 0, 0);
                    };
                };
            };
        }
        public function get deblocking():int{
            return (this._deblocking);
        }
        public function set deblocking(value:int):void{
            if (this._deblocking != value){
                this._deblocking = value;
                if ((this.currentVideoRenderer is Video)){
                    this.currentVideoRenderer.deblocking = this._deblocking;
                };
            };
        }
        public function get smoothing():Boolean{
            return (this._smoothing);
        }
        public function set smoothing(value:Boolean):void{
            if (this._smoothing != value){
                this._smoothing = value;
                if ((this.currentVideoRenderer is Video)){
                    this.currentVideoRenderer.smoothing = this._smoothing;
                };
            };
        }
        override public function set visible(value:Boolean):void{
            this._visible = value;
            if (videoSurfaceManager){
                if (this._visible){
                    videoSurfaceManager.provideRenderer(this);
                } else {
                    videoSurfaceManager.releaseRenderer(this);
                };
            };
        }
        override public function get visible():Boolean{
            return (this._visible);
        }
        public function get videoHeight():int{
            return (((this.currentVideoRenderer) ? this.currentVideoRenderer.videoHeight : this.surfaceRect.height));
        }
        public function get videoWidth():int{
            return (((this.currentVideoRenderer) ? this.currentVideoRenderer.videoWidth : this.surfaceRect.width));
        }
        override public function set x(value:Number):void{
            super.x = value;
            this.surfaceRect.x = 0;
            this.updateView();
        }
        override public function set y(value:Number):void{
            super.y = value;
            this.surfaceRect.y = 0;
            this.updateView();
        }
        override public function get height():Number{
            return (this.surfaceRect.height);
        }
        override public function set height(value:Number):void{
            if (this.surfaceRect.height != value){
                this.surfaceRect.height = value;
                this.updateView();
            };
        }
        override public function get width():Number{
            return (this.surfaceRect.width);
        }
        override public function set width(value:Number):void{
            if (this.surfaceRect.width != value){
                this.surfaceRect.width = value;
                this.updateView();
            };
        }
        function updateView():void{
            var _local2:Rectangle;
            if (this.currentVideoRenderer == null){
                return;
            };
            var _local1:Rectangle = updateRect(this.surfaceRect);
            if (this.currentVideoRenderer == this.stageVideo){
                _local2 = new Rectangle();
                _local2.topLeft = localToGlobal(_local1.topLeft);
                _local2.bottomRight = localToGlobal(_local1.bottomRight);
                this.stageVideo.viewPort = _local2;
                if (this.surfaceShape == null){
                    this.surfaceShape = new Shape();
                };
                this.surfaceShape.graphics.clear();
                this.surfaceShape.graphics.drawRect(0, 0, _local1.width, _local1.height);
                this.surfaceShape.alpha = 0;
                addChild(this.surfaceShape);
            } else {
                this.currentVideoRenderer.x = _local1.x;
                this.currentVideoRenderer.y = _local1.y;
                this.currentVideoRenderer.height = _local1.height;
                this.currentVideoRenderer.width = _local1.width;
            };
        }
        function switchRenderer(renderer):void{
            if (this.currentVideoRenderer == renderer){
                return;
            };
            if (this.currentVideoRenderer){
                this.currentVideoRenderer.attachNetStream(null);
                if (this.currentVideoRenderer == this.video){
                    this.video = null;
                    removeChild(this.currentVideoRenderer);
                } else {
                    if (this.stageVideo != null){
                        this.stageVideo.viewPort = new Rectangle(0, 0, 0, 0);
                    };
                    this.stageVideo = null;
                    if (this.surfaceShape != null){
                        this.surfaceShape.graphics.clear();
                        removeChild(this.surfaceShape);
                        this.surfaceShape = null;
                    };
                };
            };
            this.currentVideoRenderer = renderer;
            if (this.currentVideoRenderer){
                this.currentVideoRenderer.attachNetStream(this.netStream);
                if ((this.currentVideoRenderer is DisplayObject)){
                    this.video = this.currentVideoRenderer;
                    this.video.deblocking = this._deblocking;
                    this.video.smoothing = this._smoothing;
                    addChild(this.currentVideoRenderer);
                } else {
                    this.stageVideo = this.currentVideoRenderer;
                };
                this.updateView();
                this.currentVideoRenderer.addEventListener("renderState", this.onRenderState);
            };
            if ((((this.currentVideoRenderer == null)) || ((this.currentVideoRenderer is DisplayObject)))){
                dispatchEvent(new VideoSurfaceEvent(VideoSurfaceEvent.RENDER_CHANGE, true, false, false));
            } else {
                dispatchEvent(new VideoSurfaceEvent(VideoSurfaceEvent.RENDER_CHANGE, true, false, true));
            };
        }
        private function onRenderState(event:Event):void{
            if (event.hasOwnProperty("status")){
                this.renderStatus = event["status"];
            };
        }
        private function register():void{
            if (videoSurfaceManager == null){
                videoSurfaceManager = new VideoSurfaceManager();
            };
            videoSurfaceManager.registerVideoSurface(this);
        }

    }
}//package org.osmf.media.videoClasses 
﻿package org.osmf.media.videoClasses {
    import flash.display.*;
    import flash.events.*;
    import flash.utils.*;
    import org.osmf.media.videoClasses.*;
    import flash.media.*;

    class VideoSurfaceManager {

        private static const AVAILABILITY:String = "availability";
        private static const AVAILABLE:String = "available";
        private static const UNAVAILABLE:String = "unavailable";

        var activeVideoSurfaces:Dictionary;
        private var _stage:Stage = null;
        private var stageVideoIsAvailable:Boolean = false;

        public function VideoSurfaceManager(){
            this.activeVideoSurfaces = new Dictionary(true);
            super();
        }
        public function registerVideoSurface(videoSurface:VideoSurface):void{
            videoSurface.addEventListener(Event.ADDED_TO_STAGE, this.onAddedToStage);
            videoSurface.addEventListener(Event.REMOVED_FROM_STAGE, this.onRemovedFromStage);
        }
        public function get stageVideoInUseCount():int{
            var _local2:*;
            var _local1:int;
            for each (_local2 in this.activeVideoSurfaces) {
                if (((_local2) && ((_local2 is StageVideo)))){
                    _local1++;
                };
            };
            return (_local1);
        }
        public function get stageVideoCount():int{
            return (((this._stage) ? this._stage.stageVideos.length : 0));
        }
        function registerStage(stage:Stage):void{
            this._stage = stage;
            this._stage.addEventListener("stageVideoAvailability", this.onStageVideoAvailability);
            this.stageVideoIsAvailable = ((this._stage.hasOwnProperty("stageVideos")) && ((this._stage.stageVideos.length > 0)));
        }
        function provideRenderer(videoSurface:VideoSurface):void{
            if (videoSurface == null){
                return;
            };
            this.switchRenderer(videoSurface);
        }
        function releaseRenderer(videoSurface:VideoSurface):void{
            videoSurface.clear(true);
            this.activeVideoSurfaces[videoSurface] = null;
            videoSurface.switchRenderer(null);
        }
        private function onStageVideoAvailability(event:Event):void{
            var _local2:Boolean;
            var _local3:*;
            var _local4:VideoSurface;
            if (!event.hasOwnProperty(AVAILABILITY)){
                return;
            };
            _local2 = (event[AVAILABILITY] == AVAILABLE);
            if (this.stageVideoIsAvailable != _local2){
                this.stageVideoIsAvailable = _local2;
                for (_local3 in this.activeVideoSurfaces) {
                    _local4 = (_local3 as VideoSurface);
                    if (((!((_local4 == null))) && (!((_local4.info.stageVideoInUse == this.stageVideoIsAvailable))))){
                        this.switchRenderer(_local4);
                    };
                };
            };
        }
        private function onAddedToStage(event:Event):void{
            if (this._stage == null){
                this.registerStage(event.target.stage);
            };
            this.provideRenderer((event.target as VideoSurface));
        }
        private function onRemovedFromStage(event:Event):void{
            this.releaseRenderer((event.target as VideoSurface));
        }
        private function onStageVideoRenderState(event:Event):void{
            var _local2:*;
            var _local3:VideoSurface;
            if (event["status"] == UNAVAILABLE){
                for (_local2 in this.activeVideoSurfaces) {
                    _local3 = (_local2 as VideoSurface);
                    if (event.target == _local3.stageVideo){
                        _local3.stageVideo = null;
                        this.switchRenderer(_local3);
                        break;
                    };
                };
            };
        }
        private function switchRenderer(videoSurface:VideoSurface):void{
            var _local2:*;
            var _local3:StageVideo;
            var _local4:int;
            var _local5:*;
            var _local6:int;
            var _local7:int;
            if (!this.stageVideoIsAvailable){
                if (videoSurface.video == null){
                    videoSurface.video = videoSurface.createVideo();
                };
                _local2 = videoSurface.video;
            } else {
                _local3 = null;
                _local4 = 0;
                while (_local4 < this._stage.stageVideos.length) {
                    _local3 = this._stage.stageVideos[_local4];
                    for (_local5 in this.activeVideoSurfaces) {
                        if (_local3 == this.activeVideoSurfaces[_local5]){
                            _local3 = null;
                        };
                    };
                    //unresolved if
                    _local4++;
                };
                if (_local3 != null){
                    _local6 = 0;
                    _local7 = 0;
                    while (_local7 < this._stage.stageVideos.length) {
                        if (_local6 < this._stage.stageVideos[_local7].depth){
                            _local6 = this._stage.stageVideos[_local7].depth;
                        };
                        _local7++;
                    };
                    this.activeVideoSurfaces[videoSurface] = _local3;
                    videoSurface.stageVideo = _local3;
                    _local2 = _local3;
                    _local3.depth = (_local6 + 1);
                    _local2.addEventListener("renderState", this.onStageVideoRenderState);
                } else {
                    if (videoSurface.video == null){
                        videoSurface.video = videoSurface.createVideo();
                    };
                    _local2 = videoSurface.video;
                };
            };
            this.activeVideoSurfaces[videoSurface] = _local2;
            videoSurface.switchRenderer(_local2);
            VideoSurface.stageVideoCount = this.stageVideoCount;
            VideoSurface.stageVideoInUseCount = this.stageVideoInUseCount;
        }

    }
}//package org.osmf.media.videoClasses 
﻿package org.osmf.media {

    public class MediaFactoryItemType {

        public static const STANDARD:String = "standard";
        public static const PROXY:String = "proxy";
        static const ALL_TYPES:Array = [STANDARD, PROXY];

    }
}//package org.osmf.media 
﻿package org.osmf.media {
    import org.osmf.containers.*;
    import org.osmf.events.*;
    import flash.events.*;
    import flash.utils.*;
    import org.osmf.traits.*;
    import org.osmf.utils.*;
    import org.osmf.metadata.*;
    import __AS3__.vec.*;

    public class MediaElement extends EventDispatcher {

        private var traits:Dictionary;
        private var traitResolvers:Dictionary;
        private var unresolvedTraits:Dictionary;
        private var _traitTypes:Vector.<String>;
        private var _resource:MediaResourceBase;
        private var _metadata:Metadata;
        private var _container:IMediaContainer;

        public function MediaElement(){
            this.traits = new Dictionary();
            this.traitResolvers = new Dictionary();
            this.unresolvedTraits = new Dictionary();
            this._traitTypes = new Vector.<String>();
            super();
            this._metadata = this.createMetadata();
            this._metadata.addEventListener(MetadataEvent.VALUE_ADD, this.onMetadataValueAdd);
            this._metadata.addEventListener(MetadataEvent.VALUE_REMOVE, this.onMetadataValueRemove);
            this._metadata.addEventListener(MetadataEvent.VALUE_CHANGE, this.onMetadataValueChange);
            this.setupTraitResolvers();
            this.setupTraits();
            addEventListener(ContainerChangeEvent.CONTAINER_CHANGE, this.onContainerChange, false, Number.MAX_VALUE);
        }
        public function get traitTypes():Vector.<String>{
            return (this._traitTypes.concat());
        }
        public function hasTrait(type:String):Boolean{
            if (type == null){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.INVALID_PARAM)));
            };
            return (!((this.traits[type] == null)));
        }
        public function getTrait(type:String):MediaTraitBase{
            if (type == null){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.INVALID_PARAM)));
            };
            return (this.traits[type]);
        }
        public function get resource():MediaResourceBase{
            return (this._resource);
        }
        public function set resource(value:MediaResourceBase):void{
            this._resource = value;
        }
        public function get container():IMediaContainer{
            return (this._container);
        }
        public function addMetadata(namespaceURL:String, metadata:Metadata):void{
            if ((((namespaceURL == null)) || ((metadata == null)))){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.NULL_PARAM)));
            };
            this.metadata.addValue(namespaceURL, metadata);
        }
        public function removeMetadata(namespaceURL:String):Metadata{
            if (namespaceURL == null){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.NULL_PARAM)));
            };
            return ((this.metadata.removeValue(namespaceURL) as Metadata));
        }
        public function getMetadata(namespaceURL:String):Metadata{
            if (namespaceURL == null){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.NULL_PARAM)));
            };
            return ((this.metadata.getValue(namespaceURL) as Metadata));
        }
        public function get metadataNamespaceURLs():Vector.<String>{
            return (this.metadata.keys);
        }
        protected function createMetadata():Metadata{
            return (new Metadata());
        }
        public function get metadata():Metadata{
            return (this._metadata);
        }
        protected function addTrait(type:String, instance:MediaTraitBase):void{
            if ((((((type == null)) || ((instance == null)))) || (!((type == instance.traitType))))){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.INVALID_PARAM)));
            };
            var _local3:MediaTraitResolver = this.traitResolvers[type];
            if (_local3 != null){
                _local3.addTrait(instance);
            } else {
                this.setLocalTrait(type, instance);
            };
        }
        protected function removeTrait(type:String):MediaTraitBase{
            if (type == null){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.INVALID_PARAM)));
            };
            var _local2:MediaTraitBase = this.traits[type];
            var _local3:MediaTraitResolver = this.traitResolvers[type];
            if (_local3 != null){
                return (_local3.removeTrait(_local2));
            };
            return (this.setLocalTrait(type, null));
        }
        final protected function addTraitResolver(type:String, instance:MediaTraitResolver):void{
            var _local3:MediaTraitBase;
            if ((((instance == null)) || (!((instance.type == type))))){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.INVALID_PARAM)));
            };
            if (this.traitResolvers[type] == null){
                this.unresolvedTraits[type] = this.traits[type];
                this.traitResolvers[type] = instance;
                _local3 = this.traits[type];
                if (_local3){
                    instance.addTrait(_local3);
                };
                this.processResolvedTraitChange(type, instance.resolvedTrait);
                instance.addEventListener(Event.CHANGE, this.onTraitResolverChange);
            } else {
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.TRAIT_RESOLVER_ALREADY_ADDED)));
            };
        }
        final protected function removeTraitResolver(type:String):MediaTraitResolver{
            if ((((type == null)) || ((this.traitResolvers[type] == null)))){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.INVALID_PARAM)));
            };
            var _local2:MediaTraitResolver = this.traitResolvers[type];
            _local2.removeEventListener(Event.CHANGE, this.onTraitResolverChange);
            delete this.traitResolvers[type];
            var _local3:MediaTraitBase = this.unresolvedTraits[type];
            if (_local3 != this.traits[type]){
                this.setLocalTrait(type, _local3);
            };
            delete this.unresolvedTraits[type];
            return (_local2);
        }
        final protected function getTraitResolver(type:String):MediaTraitResolver{
            return (this.traitResolvers[type]);
        }
        protected function setupTraitResolvers():void{
        }
        protected function setupTraits():void{
        }
        private function onMediaError(event:MediaErrorEvent):void{
            dispatchEvent(event.clone());
        }
        private function setLocalTrait(type:String, instance:MediaTraitBase):MediaTraitBase{
            var _local3:MediaTraitBase = this.traits[type];
            if (instance == null){
                if (_local3 != null){
                    _local3.removeEventListener(MediaErrorEvent.MEDIA_ERROR, this.onMediaError);
                    _local3.dispose();
                    dispatchEvent(new MediaElementEvent(MediaElementEvent.TRAIT_REMOVE, false, false, type));
                    this._traitTypes.splice(this._traitTypes.indexOf(type), 1);
                    delete this.traits[type];
                };
            } else {
                if (_local3 == null){
                    _local3 = instance;
                    this.traits[type] = _local3;
                    this._traitTypes.push(type);
                    _local3.addEventListener(MediaErrorEvent.MEDIA_ERROR, this.onMediaError);
                    dispatchEvent(new MediaElementEvent(MediaElementEvent.TRAIT_ADD, false, false, type));
                } else {
                    if (_local3 != instance){
                        throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.TRAIT_INSTANCE_ALREADY_ADDED)));
                    };
                };
            };
            return (_local3);
        }
        private function onTraitResolverChange(event:Event):void{
            var _local2:MediaTraitResolver = (event.target as MediaTraitResolver);
            this.processResolvedTraitChange(_local2.type, _local2.resolvedTrait);
        }
        private function processResolvedTraitChange(type:String, resolvedTrait:MediaTraitBase):void{
            if (resolvedTrait != this.traits[type]){
                this.setLocalTrait(type, resolvedTrait);
            };
        }
        private function onContainerChange(event:ContainerChangeEvent):void{
            if ((((this._container == event.oldContainer)) && (!((this._container == event.newContainer))))){
                this._container = event.newContainer;
            };
        }
        private function onMetadataValueAdd(event:MetadataEvent):void{
            dispatchEvent(new MediaElementEvent(MediaElementEvent.METADATA_ADD, false, false, null, event.key, (event.value as Metadata)));
        }
        private function onMetadataValueChange(event:MetadataEvent):void{
            dispatchEvent(new MediaElementEvent(MediaElementEvent.METADATA_REMOVE, false, false, null, event.key, (event.oldValue as Metadata)));
            dispatchEvent(new MediaElementEvent(MediaElementEvent.METADATA_ADD, false, false, null, event.key, (event.value as Metadata)));
        }
        private function onMetadataValueRemove(event:MetadataEvent):void{
            dispatchEvent(new MediaElementEvent(MediaElementEvent.METADATA_REMOVE, false, false, null, event.key, (event.value as Metadata)));
        }

    }
}//package org.osmf.media 
﻿package org.osmf.media {
    import __AS3__.vec.*;

    public class MediaTypeUtil {

        public static const METADATA_MATCH_FOUND:int = 0;
        public static const METADATA_CONFLICTS_FOUND:int = 1;
        public static const METADATA_MATCH_UNKNOWN:int = 2;

        public static function checkMetadataMatchWithResource(resource:MediaResourceBase, mediaTypesSupported:Vector.<String>, mimeTypesSupported:Vector.<String>):int{
            var _local4:String = ((resource) ? resource.mediaType : null);
            var _local5:String = ((resource) ? resource.mimeType : null);
            return (checkMetadataMatch(_local4, _local5, mediaTypesSupported, mimeTypesSupported));
        }
        public static function checkMetadataMatch(mediaType:String, mimeType:String, mediaTypesSupported:Vector.<String>, mimeTypesSupported:Vector.<String>):int{
            if (mediaType != null){
                if (mimeType != null){
                    return (((((matchType(mediaType, mediaTypesSupported)) && (matchType(mimeType, mimeTypesSupported)))) ? METADATA_MATCH_FOUND : METADATA_CONFLICTS_FOUND));
                };
                return (((matchType(mediaType, mediaTypesSupported)) ? METADATA_MATCH_FOUND : METADATA_CONFLICTS_FOUND));
            };
            if (mimeType != null){
                return (((matchType(mimeType, mimeTypesSupported)) ? METADATA_MATCH_FOUND : METADATA_CONFLICTS_FOUND));
            };
            return (METADATA_MATCH_UNKNOWN);
        }
        private static function matchType(type:String, typesSupported:Vector.<String>):Boolean{
            var _local3:int;
            while (_local3 < typesSupported.length) {
                if (type == typesSupported[_local3]){
                    return (true);
                };
                _local3++;
            };
            return (false);
        }

    }
}//package org.osmf.media 
﻿package org.osmf.media {
    import org.osmf.events.*;
    import flash.events.*;
    import flash.utils.*;
    import org.osmf.utils.*;
    import org.osmf.elements.*;
    import __AS3__.vec.*;
    import org.osmf.media.pluginClasses.*;

    public class MediaFactory extends EventDispatcher {

        private var pluginManager:PluginManager;
        private var allItems:Dictionary;

        public function MediaFactory(){
            this.allItems = new Dictionary();
        }
        private static function getItemsByResource(resource:MediaResourceBase, items:Vector.<MediaFactoryItem>):Vector.<MediaFactoryItem>{
            var _local4:MediaFactoryItem;
            var _local3:Vector.<MediaFactoryItem> = new Vector.<MediaFactoryItem>();
            for each (_local4 in items) {
                if (_local4.canHandleResourceFunction(resource)){
                    _local3.push(_local4);
                };
            };
            return (_local3);
        }
        private static function getIndexOfItem(id:String, items:Vector.<MediaFactoryItem>):int{
            var _local4:MediaFactoryItem;
            var _local3:int;
            while (_local3 < items.length) {
                _local4 = (items[_local3] as MediaFactoryItem);
                if (_local4.id == id){
                    return (_local3);
                };
                _local3++;
            };
            return (-1);
        }

        public function addItem(item:MediaFactoryItem):void{
            if ((((item == null)) || ((item.id == null)))){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.INVALID_PARAM)));
            };
            var _local2:Vector.<MediaFactoryItem> = this.findOrCreateItems(item.type);
            var _local3:int = getIndexOfItem(item.id, _local2);
            if (_local3 != -1){
                _local2[_local3] = item;
            } else {
                _local2.push(item);
            };
        }
        public function removeItem(item:MediaFactoryItem):void{
            var _local3:int;
            if ((((item == null)) || ((item.id == null)))){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.INVALID_PARAM)));
            };
            var _local2:Vector.<MediaFactoryItem> = this.allItems[item.type];
            if (_local2 != null){
                _local3 = _local2.indexOf(item);
                if (_local3 != -1){
                    _local2.splice(_local3, 1);
                };
            };
        }
        public function get numItems():int{
            var _local2:String;
            var _local3:Vector.<MediaFactoryItem>;
            var _local1:int;
            for each (_local2 in MediaFactoryItemType.ALL_TYPES) {
                _local3 = this.allItems[_local2];
                if (_local3 != null){
                    _local1 = (_local1 + _local3.length);
                };
            };
            return (_local1);
        }
        public function getItemAt(index:int):MediaFactoryItem{
            var _local3:String;
            var _local4:Vector.<MediaFactoryItem>;
            var _local2:MediaFactoryItem;
            if (index >= 0){
                for each (_local3 in MediaFactoryItemType.ALL_TYPES) {
                    _local4 = this.allItems[_local3];
                    if (_local4 != null){
                        if (index < _local4.length){
                            _local2 = _local4[index];
                            break;
                        };
                        index = (index - _local4.length);
                    };
                };
            };
            return (_local2);
        }
        public function getItemById(id:String):MediaFactoryItem{
            var _local3:String;
            var _local4:Vector.<MediaFactoryItem>;
            var _local5:int;
            var _local2:MediaFactoryItem;
            for each (_local3 in MediaFactoryItemType.ALL_TYPES) {
                _local4 = this.allItems[_local3];
                if (_local4 != null){
                    _local5 = getIndexOfItem(id, _local4);
                    if (_local5 != -1){
                        _local2 = _local4[_local5];
                        break;
                    };
                };
            };
            return (_local2);
        }
        public function loadPlugin(resource:MediaResourceBase):void{
            this.createPluginManager();
            this.pluginManager.loadPlugin(resource);
        }
        public function createMediaElement(resource:MediaResourceBase):MediaElement{
            var _local3:MediaElement;
            this.createPluginManager();
            var _local2:MediaElement = this.createMediaElementByResource(resource, MediaFactoryItemType.STANDARD);
            if (_local2 != null){
                _local3 = this.createMediaElementByResource(_local2.resource, MediaFactoryItemType.PROXY, _local2);
                _local2 = ((_local3)!=null) ? _local3 : _local2;
                dispatchEvent(new MediaFactoryEvent(MediaFactoryEvent.MEDIA_ELEMENT_CREATE, false, false, null, _local2));
            };
            return (_local2);
        }
        protected function resolveItems(resource:MediaResourceBase, items:Vector.<MediaFactoryItem>):MediaFactoryItem{
            var _local5:MediaFactoryItem;
            if ((((resource == null)) || ((items == null)))){
                return (null);
            };
            var _local3:MediaFactoryItem;
            var _local4:int;
            while (_local4 < items.length) {
                _local5 = (items[_local4] as MediaFactoryItem);
                if (_local5.id.indexOf("org.osmf") == -1){
                    return (_local5);
                };
                if (_local3 == null){
                    _local3 = _local5;
                };
                _local4++;
            };
            return (_local3);
        }
        private function findOrCreateItems(type:String):Vector.<MediaFactoryItem>{
            if (this.allItems[type] == null){
                this.allItems[type] = new Vector.<MediaFactoryItem>();
            };
            return ((this.allItems[type] as Vector.<MediaFactoryItem>));
        }
        private function createMediaElementByResource(resource:MediaResourceBase, itemType:String, wrappedElement:MediaElement=null):MediaElement{
            var _local6:MediaFactoryItem;
            var _local7:MediaElement;
            var _local8:int;
            var _local9:MediaFactoryItem;
            var _local10:ProxyElement;
            var _local4:MediaElement;
            var _local5:Vector.<MediaFactoryItem> = getItemsByResource(resource, this.allItems[itemType]);
            if (itemType == MediaFactoryItemType.STANDARD){
                _local6 = (this.resolveItems(resource, _local5) as MediaFactoryItem);
                if (_local6 != null){
                    _local4 = this.invokeMediaElementCreationFunction(_local6);
                };
            } else {
                if (itemType == MediaFactoryItemType.PROXY){
                    _local7 = wrappedElement;
                    _local8 = _local5.length;
                    while (_local8 > 0) {
                        _local9 = (_local5[(_local8 - 1)] as MediaFactoryItem);
                        _local10 = (this.invokeMediaElementCreationFunction(_local9) as ProxyElement);
                        if (_local10 != null){
                            _local10.proxiedElement = _local7;
                            _local7 = _local10;
                        };
                        _local8--;
                    };
                    _local4 = _local7;
                };
            };
            if (_local4 != null){
                _local4.resource = resource;
            };
            return (_local4);
        }
        private function onPluginLoad(event:PluginManagerEvent):void{
            dispatchEvent(new MediaFactoryEvent(MediaFactoryEvent.PLUGIN_LOAD, false, false, event.resource));
        }
        private function onPluginLoadError(event:PluginManagerEvent):void{
            dispatchEvent(new MediaFactoryEvent(MediaFactoryEvent.PLUGIN_LOAD_ERROR, false, false, event.resource));
        }
        private function invokeMediaElementCreationFunction(item:MediaFactoryItem):MediaElement{
            var item:* = item;
            var mediaElement:* = null;
            try {
                mediaElement = item.mediaElementCreationFunction();
            } catch(error:Error) {
                trace(("BUT LET ME KNOW ABOUT IT:\n" + error));
            };
            return (mediaElement);
        }
        private function createPluginManager():void{
            if (this.pluginManager == null){
                this.pluginManager = new PluginManager(this);
                this.pluginManager.addEventListener(PluginManagerEvent.PLUGIN_LOAD, this.onPluginLoad);
                this.pluginManager.addEventListener(PluginManagerEvent.PLUGIN_LOAD_ERROR, this.onPluginLoadError);
            };
        }

    }
}//package org.osmf.media 
﻿package org.osmf.media {
    import flash.utils.*;
    import __AS3__.vec.*;

    public class MediaResourceBase {

        private var _metadata:Dictionary;
        private var _mediaType:String;
        private var _mimeType:String;

        public function get mediaType():String{
            return (this._mediaType);
        }
        public function set mediaType(value:String):void{
            this._mediaType = value;
        }
        public function get mimeType():String{
            return (this._mimeType);
        }
        public function set mimeType(value:String):void{
            this._mimeType = value;
        }
        public function get metadataNamespaceURLs():Vector.<String>{
            var _local2:String;
            var _local1:Vector.<String> = new Vector.<String>();
            if (this._metadata != null){
                for (_local2 in this._metadata) {
                    _local1.push(_local2);
                };
            };
            return (_local1);
        }
        public function addMetadataValue(namespaceURL:String, value:Object):void{
            if (this._metadata == null){
                this._metadata = new Dictionary();
            };
            this._metadata[namespaceURL] = value;
        }
        public function getMetadataValue(namespaceURL:String):Object{
            if (this._metadata != null){
                return (this._metadata[namespaceURL]);
            };
            return (null);
        }
        public function removeMetadataValue(namespaceURL:String):Object{
            var _local2:Object;
            if (this._metadata != null){
                _local2 = this._metadata[namespaceURL];
                delete this._metadata[namespaceURL];
                return (_local2);
            };
            return (null);
        }

    }
}//package org.osmf.media 
﻿package org.osmf.media {

    public class URLResource extends MediaResourceBase {

        private var _url:String;

        public function URLResource(url:String){
            this._url = url;
        }
        public function get url():String{
            return (this._url);
        }

    }
}//package org.osmf.media 
﻿package org.osmf.media {
    import org.osmf.containers.*;
    import flash.display.*;
    import org.osmf.events.*;
    import org.osmf.layout.*;

    public class MediaPlayerSprite extends Sprite {

        private var _scaleMode:String = "letterbox";
        private var _media:MediaElement;
        private var _mediaPlayer:MediaPlayer;
        private var _mediaFactory:MediaFactory;
        private var _mediaContainer:MediaContainer;

        public function MediaPlayerSprite(mediaPlayer:MediaPlayer=null, mediaContainer:MediaContainer=null, mediaFactory:MediaFactory=null){
            this._mediaPlayer = ((mediaPlayer) ? mediaPlayer : new MediaPlayer());
            this._mediaFactory = mediaFactory;
            this._mediaContainer = ((mediaContainer) ? mediaContainer : new MediaContainer());
            this._mediaPlayer.addEventListener(MediaElementChangeEvent.MEDIA_ELEMENT_CHANGE, this.onMediaElementChange);
            addChild(this._mediaContainer);
            if (this._mediaPlayer.media != null){
                this.media = this._mediaPlayer.media;
            };
        }
        public function get media():MediaElement{
            return (this._media);
        }
        public function set media(value:MediaElement):void{
            var _local2:LayoutMetadata;
            if (this._media != value){
                if (((this._media) && (this._mediaContainer.containsMediaElement(this._media)))){
                    this._mediaContainer.removeMediaElement(this._media);
                };
                this._media = value;
                if (((this._media) && ((this._media.getMetadata(LayoutMetadata.LAYOUT_NAMESPACE) == null)))){
                    _local2 = new LayoutMetadata();
                    _local2.scaleMode = this._scaleMode;
                    _local2.verticalAlign = VerticalAlign.MIDDLE;
                    _local2.horizontalAlign = HorizontalAlign.CENTER;
                    _local2.percentWidth = 100;
                    _local2.percentHeight = 100;
                    this._media.addMetadata(LayoutMetadata.LAYOUT_NAMESPACE, _local2);
                };
                this._mediaPlayer.media = value;
                if (((value) && (!(this._mediaContainer.containsMediaElement(value))))){
                    this._mediaContainer.addMediaElement(value);
                };
            };
        }
        public function get resource():MediaResourceBase{
            return (((this._media) ? this._media.resource : null));
        }
        public function set resource(value:MediaResourceBase):void{
            this.media = ((value) ? this.mediaFactory.createMediaElement(value) : null);
        }
        public function get mediaPlayer():MediaPlayer{
            return (this._mediaPlayer);
        }
        public function get mediaContainer():MediaContainer{
            return (this._mediaContainer);
        }
        public function get mediaFactory():MediaFactory{
            this._mediaFactory = ((this._mediaFactory) ? this._mediaFactory : new DefaultMediaFactory());
            return (this._mediaFactory);
        }
        public function get scaleMode():String{
            return (this._scaleMode);
        }
        public function set scaleMode(value:String):void{
            var _local2:LayoutMetadata;
            this._scaleMode = value;
            if (this._media){
                _local2 = (this._media.getMetadata(LayoutMetadata.LAYOUT_NAMESPACE) as LayoutMetadata);
                _local2.scaleMode = value;
            };
        }
        override public function set width(value:Number):void{
            this._mediaContainer.width = value;
        }
        override public function set height(value:Number):void{
            this._mediaContainer.height = value;
        }
        override public function get width():Number{
            return (this._mediaContainer.width);
        }
        override public function get height():Number{
            return (this._mediaContainer.height);
        }
        private function onMediaElementChange(event:MediaElementChangeEvent):void{
            this.media = this._mediaPlayer.media;
        }

    }
}//package org.osmf.media 
﻿package org.osmf.containers {
    import org.osmf.media.*;
    import flash.display.*;
    import org.osmf.events.*;
    import org.osmf.layout.*;
    import flash.utils.*;
    import flash.geom.*;
    import org.osmf.utils.*;
    import flash.errors.*;

    public class MediaContainer extends LayoutTargetSprite implements IMediaContainer {

        private var layoutTargets:Dictionary;
        private var _layoutRenderer:LayoutRendererBase;
        private var _backgroundColor:Number;
        private var _backgroundAlpha:Number;
        private var lastAvailableWidth:Number;
        private var lastAvailableHeight:Number;
        private var backgroundVisible:Boolean;

        public function MediaContainer(layoutRenderer:LayoutRendererBase=null, layoutMetadata:LayoutMetadata=null){
            this.layoutTargets = new Dictionary();
            super(layoutMetadata);
            this._layoutRenderer = ((layoutRenderer) || (new LayoutRenderer()));
            this._layoutRenderer.container = this;
            addEventListener(VideoSurfaceEvent.RENDER_CHANGE, this.onVideoSurfaceEvent);
        }
        public function addMediaElement(element:MediaElement):MediaElement{
            var _local2:MediaElementLayoutTarget;
            if (element == null){
                throw (new IllegalOperationError(OSMFStrings.getString(OSMFStrings.NULL_PARAM)));
            };
            if (this.layoutTargets[element] == undefined){
                element.dispatchEvent(new ContainerChangeEvent(ContainerChangeEvent.CONTAINER_CHANGE, false, false, element.container, this));
                _local2 = MediaElementLayoutTarget.getInstance(element);
                this.layoutTargets[element] = _local2;
                this._layoutRenderer.addTarget(_local2);
                element.addEventListener(ContainerChangeEvent.CONTAINER_CHANGE, this.onElementContainerChange);
            } else {
                throw (new IllegalOperationError(OSMFStrings.getString(OSMFStrings.INVALID_PARAM)));
            };
            return (element);
        }
        public function removeMediaElement(element:MediaElement):MediaElement{
            var _local2:MediaElement;
            if (element == null){
                throw (new IllegalOperationError(OSMFStrings.getString(OSMFStrings.NULL_PARAM)));
            };
            var _local3:MediaElementLayoutTarget = this.layoutTargets[element];
            if (_local3){
                element.removeEventListener(ContainerChangeEvent.CONTAINER_CHANGE, this.onElementContainerChange);
                this._layoutRenderer.removeTarget(_local3);
                delete this.layoutTargets[element];
                _local2 = element;
                if (element.container == this){
                    element.dispatchEvent(new ContainerChangeEvent(ContainerChangeEvent.CONTAINER_CHANGE, false, false, element.container, null));
                };
            } else {
                throw (new IllegalOperationError(OSMFStrings.getString(OSMFStrings.INVALID_PARAM)));
            };
            return (_local2);
        }
        public function containsMediaElement(element:MediaElement):Boolean{
            return (!((this.layoutTargets[element] == undefined)));
        }
        public function get layoutRenderer():LayoutRendererBase{
            return (this._layoutRenderer);
        }
        public function get clipChildren():Boolean{
            return (!((scrollRect == null)));
        }
        public function set clipChildren(value:Boolean):void{
            if (((value) && ((scrollRect == null)))){
                scrollRect = new Rectangle(0, 0, this._layoutRenderer.measuredWidth, this._layoutRenderer.measuredHeight);
            } else {
                if ((((value == false)) && (scrollRect))){
                    scrollRect = null;
                };
            };
        }
        public function get backgroundColor():Number{
            return (this._backgroundColor);
        }
        public function set backgroundColor(value:Number):void{
            if (value != this._backgroundColor){
                this._backgroundColor = value;
                this.drawBackground();
            };
        }
        public function get backgroundAlpha():Number{
            return (this._backgroundAlpha);
        }
        public function set backgroundAlpha(value:Number):void{
            if (value != this._backgroundAlpha){
                this._backgroundAlpha = value;
                this.drawBackground();
            };
        }
        override public function layout(availableWidth:Number, availableHeight:Number, deep:Boolean=true):void{
            super.layout(availableWidth, availableHeight, deep);
            this.lastAvailableWidth = availableWidth;
            this.lastAvailableHeight = availableHeight;
            if (!isNaN(this.backgroundColor)){
                this.drawBackground();
            };
            if (scrollRect){
                scrollRect = new Rectangle(0, 0, availableWidth, availableHeight);
            };
        }
        override public function validateNow():void{
            this._layoutRenderer.validateNow();
        }
        override public function addChild(child:DisplayObject):DisplayObject{
            throw (new IllegalOperationError(OSMFStrings.getString(OSMFStrings.DIRECT_DISPLAY_LIST_MOD_ERROR)));
        }
        override public function addChildAt(child:DisplayObject, index:int):DisplayObject{
            throw (new IllegalOperationError(OSMFStrings.getString(OSMFStrings.DIRECT_DISPLAY_LIST_MOD_ERROR)));
        }
        override public function removeChild(child:DisplayObject):DisplayObject{
            throw (new IllegalOperationError(OSMFStrings.getString(OSMFStrings.DIRECT_DISPLAY_LIST_MOD_ERROR)));
        }
        override public function setChildIndex(child:DisplayObject, index:int):void{
            throw (new IllegalOperationError(OSMFStrings.getString(OSMFStrings.DIRECT_DISPLAY_LIST_MOD_ERROR)));
        }
        override protected function onAddChildAt(event:LayoutTargetEvent):void{
            super.addChildAt(event.displayObject, event.index);
        }
        override protected function onRemoveChild(event:LayoutTargetEvent):void{
            super.removeChild(event.displayObject);
        }
        override protected function onSetChildIndex(event:LayoutTargetEvent):void{
            super.setChildIndex(event.displayObject, event.index);
        }
        private function drawBackground():void{
            graphics.clear();
            if (((((((((!(isNaN(this._backgroundColor))) && (!((this._backgroundAlpha == 0))))) && (this.backgroundVisible))) && (this.lastAvailableWidth))) && (this.lastAvailableHeight))){
                graphics.beginFill(this._backgroundColor, this._backgroundAlpha);
                graphics.drawRect(0, 0, this.lastAvailableWidth, this.lastAvailableHeight);
                graphics.endFill();
            };
        }
        private function onElementContainerChange(event:ContainerChangeEvent):void{
            if (event.oldContainer == this){
                this.removeMediaElement((event.target as MediaElement));
            };
        }
        private function onVideoSurfaceEvent(event:VideoSurfaceEvent):void{
            this.backgroundVisible = !(event.usesStageVideo);
            this.drawBackground();
        }

    }
}//package org.osmf.containers 
﻿package org.osmf.containers {
    import org.osmf.media.*;

    public interface IMediaContainer {

        function addMediaElement(_arg1:MediaElement):MediaElement;
        function removeMediaElement(_arg1:MediaElement):MediaElement;
        function containsMediaElement(_arg1:MediaElement):Boolean;

    }
}//package org.osmf.containers 
﻿package org.osmf.events {
    import flash.events.*;

    public class MediaElementChangeEvent extends Event {

        public static const MEDIA_ELEMENT_CHANGE:String = "mediaElementChange";

        public function MediaElementChangeEvent(type:String, bubbles:Boolean=false, cancelable:Boolean=false){
            super(type, bubbles, cancelable);
        }
        override public function clone():Event{
            return (new MediaElementChangeEvent(type, bubbles, cancelable));
        }

    }
}//package org.osmf.events 
﻿package org.osmf.events {
    import flash.events.*;

    public class VideoSurfaceEvent extends Event {

        public static const RENDER_CHANGE:String = "renderSwitch";

        private var _usesStageVideo:Boolean;

        public function VideoSurfaceEvent(type:String, bubbles:Boolean=false, cancelable:Boolean=false, usesStageVideo:Boolean=false){
            super(type, bubbles, cancelable);
            this._usesStageVideo = usesStageVideo;
        }
        public function get usesStageVideo():Boolean{
            return (this._usesStageVideo);
        }
        override public function clone():Event{
            return (new VideoSurfaceEvent(type, bubbles, cancelable, this._usesStageVideo));
        }

    }
}//package org.osmf.events 
﻿package org.osmf.events {
    import flash.events.*;
    import org.osmf.metadata.*;

    public class TimelineMetadataEvent extends MetadataEvent {

        public static const MARKER_TIME_REACHED:String = "markerTimeReached";
        public static const MARKER_DURATION_REACHED:String = "markerDurationReached";
        public static const MARKER_ADD:String = "markerAdd";
        public static const MARKER_REMOVE:String = "markerRemove";

        private var _marker:TimelineMarker;

        public function TimelineMetadataEvent(type:String, bubbles:Boolean=false, cancelable:Boolean=false, marker:TimelineMarker=null){
            super(type, bubbles, cancelable, ("" + marker.time), marker);
            this._marker = marker;
        }
        public function get marker():TimelineMarker{
            return (this._marker);
        }
        override public function clone():Event{
            return (new TimelineMetadataEvent(type, bubbles, cancelable, this._marker));
        }

    }
}//package org.osmf.events 
﻿package org.osmf.events {
    import flash.events.*;

    public class DVRStreamInfoEvent extends Event {

        public static const DVRSTREAMINFO:String = "DVRStreamInfo";

        private var _info:Object;

        public function DVRStreamInfoEvent(type:String, bubbles:Boolean=false, cancelable:Boolean=false, info:Object=null){
            super(type, bubbles, cancelable);
            this._info = info;
        }
        override public function clone():Event{
            return (new DVRStreamInfoEvent(type, bubbles, cancelable, this.info));
        }
        public function get info():Object{
            return (this._info);
        }

    }
}//package org.osmf.events 
﻿package org.osmf.events {
    import org.osmf.utils.*;

    public final class MediaErrorCodes {

        public static const IO_ERROR:int = 1;
        public static const SECURITY_ERROR:int = 2;
        public static const ASYNC_ERROR:int = 3;
        public static const ARGUMENT_ERROR:int = 4;
        public static const URL_SCHEME_INVALID:int = 5;
        public static const HTTP_GET_FAILED:int = 6;
        public static const MEDIA_LOAD_FAILED:int = 7;
        public static const PLUGIN_VERSION_INVALID:int = 8;
        public static const PLUGIN_IMPLEMENTATION_INVALID:int = 9;
        public static const SOUND_PLAY_FAILED:int = 10;
        public static const NETCONNECTION_REJECTED:int = 11;
        public static const NETCONNECTION_APPLICATION_INVALID:int = 12;
        public static const NETCONNECTION_FAILED:int = 13;
        public static const NETCONNECTION_TIMEOUT:int = 14;
        public static const NETSTREAM_PLAY_FAILED:int = 15;
        public static const NETSTREAM_STREAM_NOT_FOUND:int = 16;
        public static const NETSTREAM_FILE_STRUCTURE_INVALID:int = 17;
        public static const NETSTREAM_NO_SUPPORTED_TRACK_FOUND:int = 18;
        public static const DRM_SYSTEM_UPDATE_ERROR:int = 19;
        public static const DVRCAST_SUBSCRIBE_FAILED:int = 20;
        public static const DVRCAST_CONTENT_OFFLINE:int = 21;
        public static const DVRCAST_STREAM_INFO_RETRIEVAL_FAILED:int = 22;
        public static const F4M_FILE_INVALID:int = 23;
        private static const errorMap:Array = [{
            errorID:IO_ERROR,
            message:OSMFStrings.IO_ERROR
        }, {
            errorID:SECURITY_ERROR,
            message:OSMFStrings.SECURITY_ERROR
        }, {
            errorID:ASYNC_ERROR,
            message:OSMFStrings.ASYNC_ERROR
        }, {
            errorID:ARGUMENT_ERROR,
            message:OSMFStrings.ARGUMENT_ERROR
        }, {
            errorID:URL_SCHEME_INVALID,
            message:OSMFStrings.URL_SCHEME_INVALID
        }, {
            errorID:HTTP_GET_FAILED,
            message:OSMFStrings.HTTP_GET_FAILED
        }, {
            errorID:MEDIA_LOAD_FAILED,
            message:OSMFStrings.MEDIA_LOAD_FAILED
        }, {
            errorID:PLUGIN_VERSION_INVALID,
            message:OSMFStrings.PLUGIN_VERSION_INVALID
        }, {
            errorID:PLUGIN_IMPLEMENTATION_INVALID,
            message:OSMFStrings.PLUGIN_IMPLEMENTATION_INVALID
        }, {
            errorID:SOUND_PLAY_FAILED,
            message:OSMFStrings.SOUND_PLAY_FAILED
        }, {
            errorID:NETCONNECTION_REJECTED,
            message:OSMFStrings.NETCONNECTION_REJECTED
        }, {
            errorID:NETCONNECTION_APPLICATION_INVALID,
            message:OSMFStrings.NETCONNECTION_APPLICATION_INVALID
        }, {
            errorID:NETCONNECTION_FAILED,
            message:OSMFStrings.NETCONNECTION_FAILED
        }, {
            errorID:NETCONNECTION_TIMEOUT,
            message:OSMFStrings.NETCONNECTION_TIMEOUT
        }, {
            errorID:NETSTREAM_PLAY_FAILED,
            message:OSMFStrings.NETSTREAM_PLAY_FAILED
        }, {
            errorID:NETSTREAM_STREAM_NOT_FOUND,
            message:OSMFStrings.NETSTREAM_STREAM_NOT_FOUND
        }, {
            errorID:NETSTREAM_FILE_STRUCTURE_INVALID,
            message:OSMFStrings.NETSTREAM_FILE_STRUCTURE_INVALID
        }, {
            errorID:NETSTREAM_NO_SUPPORTED_TRACK_FOUND,
            message:OSMFStrings.NETSTREAM_NO_SUPPORTED_TRACK_FOUND
        }, {
            errorID:DRM_SYSTEM_UPDATE_ERROR,
            message:OSMFStrings.DRM_SYSTEM_UPDATE_ERROR
        }, {
            errorID:DVRCAST_SUBSCRIBE_FAILED,
            message:OSMFStrings.DVRCAST_SUBSCRIBE_FAILED
        }, {
            errorID:DVRCAST_CONTENT_OFFLINE,
            message:OSMFStrings.DVRCAST_CONTENT_OFFLINE
        }, {
            errorID:DVRCAST_STREAM_INFO_RETRIEVAL_FAILED,
            message:OSMFStrings.DVRCAST_STREAM_INFO_RETRIEVAL_FAILED
        }, {
            errorID:F4M_FILE_INVALID,
            message:OSMFStrings.F4M_FILE_INVALID
        }];

        static function getMessageForErrorID(errorID:int):String{
            var _local2:String = "";
            var _local3:int;
            while (_local3 < errorMap.length) {
                if (errorMap[_local3].errorID == errorID){
                    _local2 = OSMFStrings.getString(errorMap[_local3].message);
                    break;
                };
                _local3++;
            };
            return (_local2);
        }

    }
}//package org.osmf.events 
﻿package org.osmf.events {
    import flash.events.*;

    public class MediaPlayerStateChangeEvent extends Event {

        public static const MEDIA_PLAYER_STATE_CHANGE:String = "mediaPlayerStateChange";

        private var _state:String;

        public function MediaPlayerStateChangeEvent(type:String, bubbles:Boolean=false, cancelable:Boolean=false, state:String=null){
            super(type, bubbles, cancelable);
            this._state = state;
        }
        public function get state():String{
            return (this._state);
        }
        override public function clone():Event{
            return (new MediaPlayerStateChangeEvent(type, bubbles, cancelable, this._state));
        }

    }
}//package org.osmf.events 
﻿package org.osmf.events {
    import flash.events.*;

    public class DynamicStreamEvent extends Event {

        public static const SWITCHING_CHANGE:String = "switchingChange";
        public static const NUM_DYNAMIC_STREAMS_CHANGE:String = "numDynamicStreamsChange";
        public static const AUTO_SWITCH_CHANGE:String = "autoSwitchChange";

        private var _switching:Boolean;
        private var _autoSwitch:Boolean;

        public function DynamicStreamEvent(type:String, bubbles:Boolean=false, cancelable:Boolean=false, switching:Boolean=false, autoSwitch:Boolean=false){
            super(type, bubbles, cancelable);
            this._switching = switching;
            this._autoSwitch = autoSwitch;
        }
        public function get switching():Boolean{
            return (this._switching);
        }
        public function get autoSwitch():Boolean{
            return (this._autoSwitch);
        }
        override public function clone():Event{
            return (new DynamicStreamEvent(type, bubbles, cancelable, this._switching, this._autoSwitch));
        }

    }
}//package org.osmf.events 
﻿package org.osmf.events {
    import org.osmf.media.*;
    import flash.events.*;

    public class MediaFactoryEvent extends Event {

        public static const PLUGIN_LOAD:String = "pluginLoad";
        public static const PLUGIN_LOAD_ERROR:String = "pluginLoadError";
        public static const MEDIA_ELEMENT_CREATE:String = "mediaElementCreate";

        private var _resource:MediaResourceBase;
        private var _mediaElement:MediaElement;

        public function MediaFactoryEvent(type:String, bubbles:Boolean=false, cancelable:Boolean=false, resource:MediaResourceBase=null, mediaElement:MediaElement=null){
            super(type, bubbles, cancelable);
            this._resource = resource;
            this._mediaElement = mediaElement;
        }
        public function get resource():MediaResourceBase{
            return (this._resource);
        }
        public function get mediaElement():MediaElement{
            return (this._mediaElement);
        }
        override public function clone():Event{
            return (new MediaFactoryEvent(type, bubbles, cancelable, this._resource, this._mediaElement));
        }

    }
}//package org.osmf.events 
﻿package org.osmf.events {
    import flash.events.*;
    import org.osmf.net.httpstreaming.*;
    import org.osmf.net.httpstreaming.flv.*;

    public class HTTPStreamingEvent extends Event {

        public static const TRANSITION:String = "transition";
        public static const TRANSITION_COMPLETE:String = "transitionComplete";
        public static const BEGIN_FRAGMENT:String = "beginFragment";
        public static const END_FRAGMENT:String = "endFragment";
        public static const DOWNLOAD_COMPLETE:String = "downloadComplete";
        public static const DOWNLOAD_ERROR:String = "downloadError";
        public static const DOWNLOAD_SKIP:String = "downloadSkip";
        public static const DOWNLOAD_CONTINUE:String = "downloadContinue";
        public static const DOWNLOAD_PROGRESS:String = "downloadProgress";
        public static const FRAGMENT_DURATION:String = "fragmentDuration";
        public static const FILE_ERROR:String = "fileError";
        public static const INDEX_ERROR:String = "indexError";
        public static const SCRIPT_DATA:String = "scriptData";
        public static const ACTION_NEEDED:String = "actionNeeded";
        public static const RUN_ALGORITHM:String = "runAlgorithm";

        private var _fragmentDuration:Number;
        private var _scriptDataObject:FLVTagScriptDataObject;
        private var _scriptDataMode:String;
        private var _url:String;
        private var _bytesDownloaded:uint;
        private var _reason:String;
        private var _downloader:HTTPStreamDownloader;

        public function HTTPStreamingEvent(type:String, bubbles:Boolean=false, cancelable:Boolean=false, fragmentDuration:Number=0, scriptDataObject:FLVTagScriptDataObject=null, scriptDataMode:String="normal", url:String=null, bytesDownloaded:uint=0, reason:String="normal", downloader:HTTPStreamDownloader=null){
            super(type, bubbles, cancelable);
            this._fragmentDuration = fragmentDuration;
            this._scriptDataObject = scriptDataObject;
            this._scriptDataMode = scriptDataMode;
            this._url = url;
            this._bytesDownloaded = bytesDownloaded;
            this._reason = reason;
            this._downloader = downloader;
        }
        public function get fragmentDuration():Number{
            return (this._fragmentDuration);
        }
        public function get scriptDataObject():FLVTagScriptDataObject{
            return (this._scriptDataObject);
        }
        public function get scriptDataMode():String{
            return (this._scriptDataMode);
        }
        public function get url():String{
            return (this._url);
        }
        public function get bytesDownloaded():uint{
            return (this._bytesDownloaded);
        }
        public function get reason():String{
            return (this._reason);
        }
        public function get downloader():HTTPStreamDownloader{
            return (this._downloader);
        }
        override public function clone():Event{
            return (new HTTPStreamingEvent(type, bubbles, cancelable, this.fragmentDuration, this.scriptDataObject, this.scriptDataMode, this._url, this._bytesDownloaded, this._reason, this._downloader));
        }

    }
}//package org.osmf.events 
﻿package org.osmf.events {
    import flash.events.*;

    public class LoadEvent extends Event {

        public static const LOAD_STATE_CHANGE:String = "loadStateChange";
        public static const BYTES_LOADED_CHANGE:String = "bytesLoadedChange";
        public static const BYTES_TOTAL_CHANGE:String = "bytesTotalChange";

        private var _loadState:String;
        private var _bytes:Number;

        public function LoadEvent(type:String, bubbles:Boolean=false, cancelable:Boolean=false, loadState:String=null, bytes:Number=NaN){
            super(type, bubbles, cancelable);
            this._loadState = loadState;
            this._bytes = bytes;
        }
        override public function clone():Event{
            return (new LoadEvent(type, bubbles, cancelable, this.loadState, this.bytes));
        }
        public function get loadState():String{
            return (this._loadState);
        }
        public function get bytes():Number{
            return (this._bytes);
        }

    }
}//package org.osmf.events 
﻿package org.osmf.events {
    import flash.events.*;
    import org.osmf.net.httpstreaming.f4f.*;
    import org.osmf.net.httpstreaming.flv.*;

    public class HTTPStreamingFileHandlerEvent extends HTTPStreamingEvent {

        public static const NOTIFY_BOOTSTRAP_BOX:String = "notifyBootstrapBox";

        private var _abst:AdobeBootstrapBox;

        public function HTTPStreamingFileHandlerEvent(type:String, bubbles:Boolean=false, cancelable:Boolean=false, fragmentDuration:Number=0, scriptDataObject:FLVTagScriptDataObject=null, scriptDataMode:String="normal", abst:AdobeBootstrapBox=null){
            super(type, bubbles, cancelable, fragmentDuration, scriptDataObject, scriptDataMode);
            this._abst = abst;
        }
        public function get bootstrapBox():AdobeBootstrapBox{
            return (this._abst);
        }
        override public function clone():Event{
            return (new HTTPStreamingFileHandlerEvent(type, bubbles, cancelable, fragmentDuration, scriptDataObject, scriptDataMode, this.bootstrapBox));
        }

    }
}//package org.osmf.events 
﻿package org.osmf.events {
    import flash.events.*;

    public class BufferEvent extends Event {

        public static const BUFFERING_CHANGE:String = "bufferingChange";
        public static const BUFFER_TIME_CHANGE:String = "bufferTimeChange";

        private var _buffering:Boolean;
        private var _bufferTime:Number;

        public function BufferEvent(type:String, bubbles:Boolean=false, cancelable:Boolean=false, buffering:Boolean=false, bufferTime:Number=NaN){
            super(type, bubbles, cancelable);
            this._buffering = buffering;
            this._bufferTime = bufferTime;
        }
        public function get buffering():Boolean{
            return (this._buffering);
        }
        public function get bufferTime():Number{
            return (this._bufferTime);
        }
        override public function clone():Event{
            return (new BufferEvent(type, bubbles, cancelable, this._buffering, this._bufferTime));
        }

    }
}//package org.osmf.events 
﻿package org.osmf.events {
    import org.osmf.media.*;
    import flash.events.*;

    public class SerialElementEvent extends Event {

        public static const CURRENT_CHILD_CHANGE:String = "currentChildChange";

        private var _currentChild:MediaElement;

        public function SerialElementEvent(type:String, bubbles:Boolean=false, cancelable:Boolean=false, currentChild:MediaElement=null){
            super(type, bubbles, cancelable);
            this._currentChild = currentChild;
        }
        public function get currentChild():MediaElement{
            return (this._currentChild);
        }
        override public function clone():Event{
            return (new SerialElementEvent(type, bubbles, cancelable, this._currentChild));
        }

    }
}//package org.osmf.events 
﻿package org.osmf.events {
    import flash.events.*;

    public class MediaPlayerCapabilityChangeEvent extends Event {

        public static const CAN_PLAY_CHANGE:String = "canPlayChange";
        public static const CAN_SEEK_CHANGE:String = "canSeekChange";
        public static const TEMPORAL_CHANGE:String = "temporalChange";
        public static const HAS_AUDIO_CHANGE:String = "hasAudioChange";
        public static const HAS_ALTERNATIVE_AUDIO_CHANGE:String = "hasAlternativeAudioChange";
        public static const IS_DYNAMIC_STREAM_CHANGE:String = "isDynamicStreamChange";
        public static const CAN_LOAD_CHANGE:String = "canLoadChange";
        public static const CAN_BUFFER_CHANGE:String = "canBufferChange";
        public static const HAS_DRM_CHANGE:String = "hasDRMChange";
        public static const HAS_DISPLAY_OBJECT_CHANGE:String = "hasDisplayObjectChange";

        private var _enabled:Boolean;

        public function MediaPlayerCapabilityChangeEvent(type:String, bubbles:Boolean=false, cancelable:Boolean=false, enabled:Boolean=false){
            super(type, bubbles, cancelable);
            this._enabled = enabled;
        }
        public function get enabled():Boolean{
            return (this._enabled);
        }
        override public function clone():Event{
            return (new MediaPlayerCapabilityChangeEvent(type, bubbles, cancelable, this._enabled));
        }

    }
}//package org.osmf.events 
﻿package org.osmf.events {
    import flash.display.*;
    import flash.events.*;

    public class DisplayObjectEvent extends Event {

        public static const DISPLAY_OBJECT_CHANGE:String = "displayObjectChange";
        public static const MEDIA_SIZE_CHANGE:String = "mediaSizeChange";

        private var _oldDisplayObject:DisplayObject;
        private var _newDisplayObject:DisplayObject;
        private var _oldWidth:Number;
        private var _oldHeight:Number;
        private var _newWidth:Number;
        private var _newHeight:Number;

        public function DisplayObjectEvent(type:String, bubbles:Boolean=false, cancelable:Boolean=false, oldDisplayObject:DisplayObject=null, newDisplayObject:DisplayObject=null, oldWidth:Number=NaN, oldHeight:Number=NaN, newWidth:Number=NaN, newHeight:Number=NaN){
            super(type, bubbles, cancelable);
            this._oldDisplayObject = oldDisplayObject;
            this._newDisplayObject = newDisplayObject;
            this._oldWidth = oldWidth;
            this._oldHeight = oldHeight;
            this._newWidth = newWidth;
            this._newHeight = newHeight;
        }
        public function get oldDisplayObject():DisplayObject{
            return (this._oldDisplayObject);
        }
        public function get newDisplayObject():DisplayObject{
            return (this._newDisplayObject);
        }
        public function get oldWidth():Number{
            return (this._oldWidth);
        }
        public function get oldHeight():Number{
            return (this._oldHeight);
        }
        public function get newWidth():Number{
            return (this._newWidth);
        }
        public function get newHeight():Number{
            return (this._newHeight);
        }
        override public function clone():Event{
            return (new DisplayObjectEvent(type, bubbles, cancelable, this._oldDisplayObject, this._newDisplayObject, this._oldWidth, this._oldHeight, this._newWidth, this._newHeight));
        }

    }
}//package org.osmf.events 
﻿package org.osmf.events {
    import flash.events.*;
    import org.osmf.net.qos.*;

    public class QoSInfoEvent extends Event {

        public static const QOS_UPDATE:String = "qosUpdate";

        private var _qosInfo:QoSInfo = null;

        public function QoSInfoEvent(type:String, bubbles:Boolean=false, cancelable:Boolean=false, qosInfo:QoSInfo=null){
            super(type, bubbles, cancelable);
            this._qosInfo = qosInfo;
        }
        public function get qosInfo():QoSInfo{
            return (this._qosInfo);
        }
        override public function clone():Event{
            return (new QoSInfoEvent(type, bubbles, cancelable, this._qosInfo));
        }

    }
}//package org.osmf.events 
﻿package org.osmf.events {
    import org.osmf.utils.*;

    public final class MetricErrorCodes {

        public static const INVALID_METRIC_TYPE:int = 1;
        private static const errorMap:Array = [{
            errorID:INVALID_METRIC_TYPE,
            message:OSMFStrings.METRIC_NOT_FOUND
        }];

        static function getMessageForErrorID(errorID:int):String{
            var _local2:String = "";
            var _local3:int;
            while (_local3 < errorMap.length) {
                if (errorMap[_local3].errorID == errorID){
                    _local2 = OSMFStrings.getString(errorMap[_local3].message);
                    break;
                };
                _local3++;
            };
            return (_local2);
        }

    }
}//package org.osmf.events 
﻿package org.osmf.events {
    import flash.events.*;

    public class ParseEvent extends Event {

        public static const PARSE_COMPLETE:String = "parseComplete";
        public static const PARSE_ERROR:String = "parseError";

        public var data:Object;

        public function ParseEvent(type:String, bubbles:Boolean=false, cancelable:Boolean=false, data:Object=null){
            this.data = data;
            super(type, bubbles, cancelable);
        }
        override public function clone():Event{
            return (new ParseEvent(this.type, this.bubbles, this.cancelable, this.data));
        }

    }
}//package org.osmf.events 
﻿package org.osmf.events {
    import flash.events.*;

    public class TimeEvent extends Event {

        public static const CURRENT_TIME_CHANGE:String = "currentTimeChange";
        public static const DURATION_CHANGE:String = "durationChange";
        public static const COMPLETE:String = "complete";

        private var _time:Number;

        public function TimeEvent(type:String, bubbles:Boolean=false, cancelable:Boolean=false, time:Number=NaN){
            super(type, bubbles, cancelable);
            this._time = time;
        }
        public function get time():Number{
            return (this._time);
        }
        override public function clone():Event{
            return (new TimeEvent(type, bubbles, cancelable, this.time));
        }

    }
}//package org.osmf.events 
﻿package org.osmf.events {
    import flash.events.*;

    public class SeekEvent extends Event {

        public static const SEEKING_CHANGE:String = "seekingChange";

        private var _seeking:Boolean = false;
        private var _time:Number;

        public function SeekEvent(type:String, bubbles:Boolean=false, cancelable:Boolean=false, seeking:Boolean=false, time:Number=NaN){
            super(type, bubbles, cancelable);
            this._seeking = seeking;
            this._time = time;
        }
        public function get seeking():Boolean{
            return (this._seeking);
        }
        public function get time():Number{
            return (this._time);
        }
        override public function clone():Event{
            return (new SeekEvent(type, bubbles, cancelable, this._seeking, this._time));
        }

    }
}//package org.osmf.events 
﻿package org.osmf.events {
    import flash.events.*;
    import org.osmf.metadata.*;

    public class MediaElementEvent extends Event {

        public static const TRAIT_ADD:String = "traitAdd";
        public static const TRAIT_REMOVE:String = "traitRemove";
        public static const METADATA_ADD:String = "metadataAdd";
        public static const METADATA_REMOVE:String = "metadataRemove";

        private var _traitType:String;
        private var _namespaceURL:String;
        private var _metadata:Metadata;

        public function MediaElementEvent(type:String, bubbles:Boolean=false, cancelable:Boolean=false, traitType:String=null, namespaceURL:String=null, metadata:Metadata=null){
            super(type, bubbles, cancelable);
            this._traitType = traitType;
            this._namespaceURL = namespaceURL;
            this._metadata = metadata;
        }
        override public function clone():Event{
            return (new MediaElementEvent(type, bubbles, cancelable, this.traitType, this.namespaceURL, this.metadata));
        }
        public function get traitType():String{
            return (this._traitType);
        }
        public function get namespaceURL():String{
            return (this._namespaceURL);
        }
        public function get metadata():Metadata{
            return (this._metadata);
        }

    }
}//package org.osmf.events 
﻿package org.osmf.events {
    import org.osmf.media.*;
    import flash.events.*;
    import flash.net.*;

    public class NetConnectionFactoryEvent extends Event {

        public static const CREATION_COMPLETE:String = "creationComplete";
        public static const CREATION_ERROR:String = "creationError";

        private var _netConnection:NetConnection;
        private var _resource:URLResource;
        private var _mediaError:MediaError;

        public function NetConnectionFactoryEvent(type:String, bubbles:Boolean=false, cancelable:Boolean=false, netConnection:NetConnection=null, resource:URLResource=null, mediaError:MediaError=null){
            super(type, bubbles, cancelable);
            this._netConnection = netConnection;
            this._resource = resource;
            this._mediaError = mediaError;
        }
        public function get netConnection():NetConnection{
            return (this._netConnection);
        }
        public function get resource():URLResource{
            return (this._resource);
        }
        public function get mediaError():MediaError{
            return (this._mediaError);
        }
        override public function clone():Event{
            return (new NetConnectionFactoryEvent(type, bubbles, cancelable, this._netConnection, this._resource, this._mediaError));
        }

    }
}//package org.osmf.events 
﻿package org.osmf.events {
    import org.osmf.containers.*;
    import flash.events.*;

    public class ContainerChangeEvent extends Event {

        public static const CONTAINER_CHANGE:String = "containerChange";

        private var _oldContainer:IMediaContainer;
        private var _newContainer:IMediaContainer;

        public function ContainerChangeEvent(type:String, bubbles:Boolean=false, cancelable:Boolean=false, oldContainer:IMediaContainer=null, newContainer:IMediaContainer=null){
            super(type, bubbles, cancelable);
            this._oldContainer = oldContainer;
            this._newContainer = newContainer;
        }
        public function get oldContainer():IMediaContainer{
            return (this._oldContainer);
        }
        public function get newContainer():IMediaContainer{
            return (this._newContainer);
        }
        override public function clone():Event{
            return (new ContainerChangeEvent(type, bubbles, cancelable, this._oldContainer, this._newContainer));
        }

    }
}//package org.osmf.events 
﻿package org.osmf.events {
    import flash.events.*;

    public class AudioEvent extends Event {

        public static const VOLUME_CHANGE:String = "volumeChange";
        public static const MUTED_CHANGE:String = "mutedChange";
        public static const PAN_CHANGE:String = "panChange";

        private var _muted:Boolean;
        private var _volume:Number;
        private var _pan:Number;

        public function AudioEvent(type:String, bubbles:Boolean, cancelable:Boolean, muted:Boolean=false, volume:Number=NaN, pan:Number=NaN){
            super(type, bubbles, cancelable);
            this._muted = muted;
            this._volume = volume;
            this._pan = pan;
        }
        public function get muted():Boolean{
            return (this._muted);
        }
        public function get volume():Number{
            return (this._volume);
        }
        public function get pan():Number{
            return (this._pan);
        }
        override public function clone():Event{
            return (new AudioEvent(type, bubbles, cancelable, this._muted, this._volume, this._pan));
        }

    }
}//package org.osmf.events 
﻿package org.osmf.events {
    import flash.events.*;

    public class MediaErrorEvent extends Event {

        public static const MEDIA_ERROR:String = "mediaError";

        private var _error:MediaError;

        public function MediaErrorEvent(type:String, bubbles:Boolean=false, cancelable:Boolean=false, error:MediaError=null){
            super(type, bubbles, cancelable);
            this._error = error;
        }
        override public function clone():Event{
            return (new MediaErrorEvent(type, bubbles, cancelable, this.error));
        }
        public function get error():MediaError{
            return (this._error);
        }

    }
}//package org.osmf.events 
﻿package org.osmf.events {
    import flash.events.*;

    public class AlternativeAudioEvent extends Event {

        public static const AUDIO_SWITCHING_CHANGE:String = "audioSwitchingChange";
        public static const NUM_ALTERNATIVE_AUDIO_STREAMS_CHANGE:String = "numAlternativeAudioStreamsChange";

        private var _switching:Boolean;

        public function AlternativeAudioEvent(type:String, bubbles:Boolean=false, cancelable:Boolean=false, switching:Boolean=false){
            super(type, bubbles, cancelable);
            this._switching = switching;
        }
        public function get switching():Boolean{
            return (this._switching);
        }
        override public function clone():Event{
            return (new AlternativeAudioEvent(type, bubbles, cancelable, this.switching));
        }

    }
}//package org.osmf.events 
﻿package org.osmf.events {
    import flash.events.*;
    import flash.net.*;
    import org.osmf.net.httpstreaming.flv.*;

    public class HTTPStreamingIndexHandlerEvent extends HTTPStreamingEvent {

        public static const INDEX_READY:String = "indexReady";
        public static const RATES_READY:String = "ratesReady";
        public static const REQUEST_LOAD_INDEX:String = "requestLoadIndex";

        private var _streamNames:Array;
        private var _rates:Array;
        private var _request:URLRequest;
        private var _requestContext:Object;
        private var _binaryData:Boolean;
        private var _live:Boolean;
        private var _offset:Number;

        public function HTTPStreamingIndexHandlerEvent(type:String, bubbles:Boolean=false, cancelable:Boolean=false, live:Boolean=false, offset:Number=NaN, streamNames:Array=null, rates:Array=null, request:URLRequest=null, requestContext:Object=null, binaryData:Boolean=true, fragmentDuration:Number=0, scriptDataObject:FLVTagScriptDataObject=null, scriptDataMode:String="normal"){
            super(type, bubbles, cancelable, fragmentDuration, scriptDataObject, scriptDataMode);
            this._live = live;
            this._offset = offset;
            this._streamNames = streamNames;
            this._rates = rates;
            this._request = request;
            this._requestContext = requestContext;
            this._binaryData = binaryData;
        }
        public function get live():Boolean{
            return (this._live);
        }
        public function get offset():Number{
            return (this._offset);
        }
        public function get streamNames():Array{
            return (this._streamNames);
        }
        public function get rates():Array{
            return (this._rates);
        }
        public function get request():URLRequest{
            return (this._request);
        }
        public function get requestContext():Object{
            return (this._requestContext);
        }
        public function get binaryData():Boolean{
            return (this._binaryData);
        }
        override public function clone():Event{
            return (new HTTPStreamingIndexHandlerEvent(type, bubbles, cancelable, this.live, this.offset, this.streamNames, this.rates, this.request, this.requestContext, this.binaryData, fragmentDuration, scriptDataObject, scriptDataMode));
        }

    }
}//package org.osmf.events 
﻿package org.osmf.events {

    public class MediaError extends Error {

        private var _detail:String;

        public function MediaError(errorID:int, detail:String=null){
            super(this.getMessageForErrorID(errorID), errorID);
            this._detail = detail;
        }
        public function get detail():String{
            return (this._detail);
        }
        protected function getMessageForErrorID(errorID:int):String{
            return (MediaErrorCodes.getMessageForErrorID(errorID));
        }

    }
}//package org.osmf.events 
﻿package org.osmf.events {

    public class HTTPStreamingEventReason {

        public static const NORMAL:String = "normal";
        public static const BEST_EFFORT:String = "bestEffort";
        public static const TIMEOUT:String = "timeout";

    }
}//package org.osmf.events 
﻿package org.osmf.events {
    import flash.events.*;
    import org.osmf.traits.*;

    public class LoaderEvent extends Event {

        public static const LOAD_STATE_CHANGE:String = "loadStateChange";

        private var _loader:LoaderBase;
        private var _loadTrait:LoadTrait;
        private var _oldState:String;
        private var _newState:String;

        public function LoaderEvent(type:String, bubbles:Boolean=false, cancelable:Boolean=false, loader:LoaderBase=null, loadTrait:LoadTrait=null, oldState:String=null, newState:String=null){
            super(type, bubbles, cancelable);
            this._loader = loader;
            this._loadTrait = loadTrait;
            this._oldState = oldState;
            this._newState = newState;
        }
        public function get loader():LoaderBase{
            return (this._loader);
        }
        public function get loadTrait():LoadTrait{
            return (this._loadTrait);
        }
        public function get oldState():String{
            return (this._oldState);
        }
        public function get newState():String{
            return (this._newState);
        }
        override public function clone():Event{
            return (new LoaderEvent(type, bubbles, cancelable, this.loader, this.loadTrait, this.oldState, this.newState));
        }

    }
}//package org.osmf.events 
﻿package org.osmf.events {
    import flash.events.*;

    public class MetadataEvent extends Event {

        public static const VALUE_ADD:String = "valueAdd";
        public static const VALUE_REMOVE:String = "valueRemove";
        public static const VALUE_CHANGE:String = "valueChange";

        private var _key:String;
        private var _value;
        private var _oldValue;

        public function MetadataEvent(type:String, bubbles:Boolean=false, cancelable:Boolean=false, key:String=null, value=null, oldValue=null){
            super(type, bubbles, cancelable);
            this._key = key;
            this._value = value;
            this._oldValue = oldValue;
        }
        public function get key():String{
            return (this._key);
        }
        public function get value(){
            return (this._value);
        }
        public function get oldValue(){
            return (this._oldValue);
        }
        override public function clone():Event{
            return (new MetadataEvent(type, bubbles, cancelable, this._key, this._value, this._oldValue));
        }

    }
}//package org.osmf.events 
﻿package org.osmf.events {

    public class MetricError extends Error {

        private var _detail:String;

        public function MetricError(errorID:int, detail:String=null){
            super(this.getMessageForErrorID(errorID), errorID);
            this._detail = detail;
        }
        public function get detail():String{
            return (this._detail);
        }
        protected function getMessageForErrorID(errorID:int):String{
            return (MetricErrorCodes.getMessageForErrorID(errorID));
        }

    }
}//package org.osmf.events 
﻿package org.osmf.events {
    import flash.events.*;

    public class DVREvent extends Event {

        public static const IS_RECORDING_CHANGE:String = "isRecordingChange";

        public function DVREvent(type:String, bubbles:Boolean=false, cancelable:Boolean=false){
            super(type, bubbles, cancelable);
        }
        override public function clone():Event{
            return (new DVREvent(type, bubbles, cancelable));
        }

    }
}//package org.osmf.events 
﻿package org.osmf.events {
    import org.osmf.media.*;
    import flash.events.*;

    public class PluginManagerEvent extends Event {

        public static const PLUGIN_LOAD:String = "pluginLoad";
        public static const PLUGIN_LOAD_ERROR:String = "pluginLoadError";

        private var _resource:MediaResourceBase;

        public function PluginManagerEvent(type:String, bubbles:Boolean=false, cancelable:Boolean=false, resource:MediaResourceBase=null){
            super(type, bubbles, cancelable);
            this._resource = resource;
        }
        public function get resource():MediaResourceBase{
            return (this._resource);
        }
        override public function clone():Event{
            return (new PluginManagerEvent(type, bubbles, cancelable, this._resource));
        }

    }
}//package org.osmf.events 
﻿package org.osmf.events {
    import flash.events.*;

    public class PlayEvent extends Event {

        public static const CAN_PAUSE_CHANGE:String = "canPauseChange";
        public static const PLAY_STATE_CHANGE:String = "playStateChange";
        public static const LIVE_STALL:String = "liveStall";
        public static const LIVE_RESUME:String = "liveResume";

        private var _playState:String;
        private var _canPause:Boolean;

        public function PlayEvent(type:String, bubbles:Boolean=false, cancelable:Boolean=false, playState:String=null, canPause:Boolean=false){
            super(type, bubbles, cancelable);
            this._playState = playState;
            this._canPause = canPause;
        }
        override public function clone():Event{
            return (new PlayEvent(type, bubbles, cancelable, this.playState, this.canPause));
        }
        public function get playState():String{
            return (this._playState);
        }
        public function get canPause():Boolean{
            return (this._canPause);
        }

    }
}//package org.osmf.events 
﻿package org.osmf.events {
    import flash.events.*;

    public class DRMEvent extends Event {

        public static const DRM_STATE_CHANGE:String = "drmStateChange";

        private var _drmState:String;
        private var _startDate:Date;
        private var _endDate:Date;
        private var _period:Number;
        private var _serverURL:String;
        private var _token:Object;
        private var _mediaError:MediaError;

        public function DRMEvent(type:String, state:String, bubbles:Boolean=false, cancelable:Boolean=false, start:Date=null, end:Date=null, period:Number=0, serverURL:String=null, token:Object=null, mediaError:MediaError=null){
            super(type, bubbles, cancelable);
            this._drmState = state;
            this._token = token;
            this._mediaError = mediaError;
            this._startDate = start;
            this._endDate = end;
            this._period = period;
            this._serverURL = serverURL;
        }
        public function get token():Object{
            return (this._token);
        }
        public function get mediaError():MediaError{
            return (this._mediaError);
        }
        public function get startDate():Date{
            return (this._startDate);
        }
        public function get endDate():Date{
            return (this._endDate);
        }
        public function get period():Number{
            return (this._period);
        }
        public function get drmState():String{
            return (this._drmState);
        }
        public function get serverURL():String{
            return (this._serverURL);
        }
        override public function clone():Event{
            return (new DRMEvent(type, this._drmState, bubbles, cancelable, this._startDate, this._endDate, this._period, this._serverURL, this._token, this._mediaError));
        }

    }
}//package org.osmf.events 
﻿package org.osmf.utils {
    import flash.system.*;

    public final class OSMFSettings {

        public static var enableStageVideo:Boolean = true;
        public static var hdsMinimumBufferTime:Number = 4;
        public static var hdsAdditionalBufferTime:Number = 2;
        public static var hdsBytesProcessingLimit:Number = 102400;
        public static var hdsBytesReadingLimit:Number = 102400;
        public static var hdsMainTimerInterval:int = 25;
        public static var hdsLiveStallTolerance:Number = 15;
        public static var hdsDefaultFragmentsThreshold:uint = 5;
        public static var hdsMinimumBootstrapRefreshInterval:uint = 2000;
        public static var hdsDVRLiveOffset:Number = 4;
        public static var hdsPureLiveOffset:Number = 5;
        public static var f4mParseTimeout:Number = 30000;
        public static var hdsMaximumRetries:Number = 5;
        public static var hdsTimeoutAdjustmentOnRetry:Number = 4000;
        public static var hdsFragmentDownloadTimeout:Number = 4000;
        public static var hdsIndexDownloadTimeout:Number = 4000;

        public static function get supportsStageVideo():Boolean{
            return (runtimeSupportsStageVideo(Capabilities.version));
        }
        static function runtimeSupportsStageVideo(runtimeVersion:String):Boolean{
            if (runtimeVersion == null){
                return (false);
            };
            var _local2:Array = runtimeVersion.split(" ");
            if (_local2.length < 2){
                return (false);
            };
            var _local3:String = _local2[0];
            var _local4:Array = _local2[1].split(",");
            if (_local4.length < 2){
                return (false);
            };
            var _local5:Number = parseInt(_local4[0]);
            var _local6:Number = parseInt(_local4[1]);
            return ((((_local5 > 10)) || ((((_local5 == 10)) && ((_local6 >= 2))))));
        }

    }
}//package org.osmf.utils 
﻿package org.osmf.utils {

    public class DateUtil {

        public static function parseW3CDTF(str:String):Date{
            var finalDate:* = null;
            var dateStr:* = null;
            var timeStr:* = null;
            var dateArr:* = null;
            var year:* = NaN;
            var month:* = NaN;
            var date:* = NaN;
            var multiplier:* = NaN;
            var offsetHours:* = NaN;
            var offsetMinutes:* = NaN;
            var offsetStr:* = null;
            var timeArr:* = null;
            var hour:* = NaN;
            var minutes:* = NaN;
            var secondsArr:* = null;
            var seconds:* = NaN;
            var milliseconds:* = NaN;
            var utc:* = NaN;
            var offset:* = NaN;
            var eStr:* = null;
            var str:* = str;
            try {
                dateStr = str.substring(0, str.indexOf("T"));
                timeStr = str.substring((str.indexOf("T") + 1), str.length);
                dateArr = dateStr.split("-");
                year = Number(dateArr.shift());
                month = Number(dateArr.shift());
                date = Number(dateArr.shift());
                if (timeStr.indexOf("Z") != -1){
                    multiplier = 1;
                    offsetHours = 0;
                    offsetMinutes = 0;
                    timeStr = timeStr.replace("Z", "");
                } else {
                    if (timeStr.indexOf("+") != -1){
                        multiplier = 1;
                        offsetStr = timeStr.substring((timeStr.indexOf("+") + 1), timeStr.length);
                        offsetHours = Number(offsetStr.substring(0, offsetStr.indexOf(":")));
                        offsetMinutes = Number(offsetStr.substring((offsetStr.indexOf(":") + 1), offsetStr.length));
                        timeStr = timeStr.substring(0, timeStr.indexOf("+"));
                    } else {
                        multiplier = -1;
                        offsetStr = timeStr.substring((timeStr.indexOf("-") + 1), timeStr.length);
                        offsetHours = Number(offsetStr.substring(0, offsetStr.indexOf(":")));
                        offsetMinutes = Number(offsetStr.substring((offsetStr.indexOf(":") + 1), offsetStr.length));
                        timeStr = timeStr.substring(0, timeStr.indexOf("-"));
                    };
                };
                timeArr = timeStr.split(":");
                hour = Number(timeArr.shift());
                minutes = Number(timeArr.shift());
                secondsArr = ((timeArr.length)>0) ? String(timeArr.shift()).split(".") : null;
                seconds = ((((!((secondsArr == null))) && ((secondsArr.length > 0)))) ? Number(secondsArr.shift()) : 0);
                milliseconds = ((((!((secondsArr == null))) && ((secondsArr.length > 0)))) ? Number(secondsArr.shift()) : 0);
                utc = Date.UTC(year, (month - 1), date, hour, minutes, seconds, milliseconds);
                offset = (((offsetHours * 3600000) + (offsetMinutes * 60000)) * multiplier);
                finalDate = new Date((utc - offset));
                if (finalDate.toString() == "Invalid Date"){
                    throw (new Error("This date does not conform to W3CDTF."));
                };
            } catch(e:Error) {
                eStr = (("Unable to parse the string [" + str) + "] into a date. ");
                eStr = (eStr + ("The internal error was: " + e.toString()));
                throw (new Error(eStr));
            };
            return (finalDate);
        }

    }
}//package org.osmf.utils 
﻿package org.osmf.utils {

    public class URL {

        private var _rawUrl:String;
        private var _protocol:String;
        private var _userInfo:String;
        private var _host:String;
        private var _port:String;
        private var _path:String;
        private var _query:String;
        private var _fragment:String;

        public function URL(url:String){
            this._rawUrl = url;
            this._protocol = "";
            this._userInfo = "";
            this._host = "";
            this._port = "";
            this._path = "";
            this._query = "";
            this._fragment = "";
            if (((!((this._rawUrl == null))) && ((this._rawUrl.length > 0)))){
                this._rawUrl = this._rawUrl.replace(/^\s+|\s+$/g, "");
                this.parseUrl();
            };
        }
        public static function isAbsoluteURL(url:String):Boolean{
            var _local2:URL = new URL(url);
            return (_local2.absolute);
        }
        public static function getRootUrl(url:String):String{
            var _local2:String = url.substr(0, url.lastIndexOf("/"));
            return (_local2);
        }
        public static function normalizeRootURL(url:String):String{
            if (((!((url == null))) && (!((url.charAt((url.length - 1)) == "/"))))){
                return ((url + "/"));
            };
            return (url);
        }
        public static function normalizeRelativeURL(url:String):String{
            if (url.charAt(0) == "/"){
                return (url.substr(1));
            };
            return (url);
        }
        public static function normalizePathForURL(url:String, removeFilePart:Boolean):String{
            var _local5:String;
            var _local6:int;
            var _local3:String = url;
            var _local4:URL = new URL(url);
            if (_local4.absolute){
                _local3 = ((_local4.protocol + "://") + _local4.host);
                if (((!((_local4.port == null))) && ((_local4.port.length > 0)))){
                    _local3 = (_local3 + (":" + _local4.port));
                };
                _local5 = _local4.path;
                if (((!((_local5 == null))) && ((_local5.length > 0)))){
                    if (removeFilePart){
                        _local6 = _local5.lastIndexOf("/");
                        _local5 = _local5.substr(0, (_local6 + 1));
                    };
                    _local3 = (_local3 + ("/" + _local5));
                };
            };
            return (URL.normalizeRootURL(_local3));
        }

        public function get rawUrl():String{
            return (this._rawUrl);
        }
        public function get protocol():String{
            return (this._protocol);
        }
        public function set protocol(value:String):void{
            if (value != null){
                this._protocol = value.replace(/:\/?\/?$/, "");
                this._protocol = this._protocol.toLowerCase();
            };
        }
        public function get userInfo():String{
            return (this._userInfo);
        }
        public function set userInfo(value:String):void{
            if (value != null){
                this._userInfo = value.replace(/@$/, "");
            };
        }
        public function get host():String{
            return (this._host);
        }
        public function set host(value:String):void{
            this._host = value;
        }
        public function get port():String{
            return (this._port);
        }
        public function set port(value:String):void{
            if (value != null){
                this._port = value.replace(/(:)/, "");
            };
        }
        public function get path():String{
            return (this._path);
        }
        public function set path(value:String):void{
            if (value != null){
                this._path = value.replace(/^\//, "");
            };
        }
        public function get query():String{
            return (this._query);
        }
        public function set query(value:String):void{
            if (value != null){
                this._query = value.replace(/^\?/, "");
            };
        }
        public function get fragment():String{
            return (this._fragment);
        }
        public function set fragment(value:String):void{
            if (value != null){
                this._fragment = value.replace(/^#/, "");
            };
        }
        public function toString():String{
            return (this._rawUrl);
        }
        public function getParamValue(param:String):String{
            if (this._query == null){
                return ("");
            };
            var _local2:RegExp = new RegExp((("[/?&]*" + param) + "=([^&#]*)"), "i");
            var _local3:Array = this._query.match(_local2);
            var _local4:String = ((_local3)==null) ? "" : _local3[1];
            return (_local4);
        }
        public function get absolute():Boolean{
            return (!((this.protocol == "")));
        }
        public function get extension():String{
            var _local1:int = this.path.lastIndexOf("/");
            var _local2:int = this.path.lastIndexOf(".");
            if (((!((_local2 == -1))) && ((_local2 > _local1)))){
                return (this.path.substr((_local2 + 1)));
            };
            return ("");
        }
        private function parseUrl():void{
            var _local1:RegExp;
            var _local2:Array;
            var _local3:String;
            var _local4:RegExp;
            var _local5:Array;
            var _local6:String;
            if ((((this._rawUrl == null)) || ((this._rawUrl.length == 0)))){
                return;
            };
            if ((((this._rawUrl.search(/:\//) == -1)) && (!((this._rawUrl.indexOf(":") == (this._rawUrl.length - 1)))))){
                this.path = this._rawUrl;
            } else {
                _local1 = /^(rtmp|rtmp[tse]|rtmpte)(:\/[^\/])/i;
                _local2 = this._rawUrl.match(_local1);
                _local3 = this._rawUrl;
                if (_local2 != null){
                    _local3 = this._rawUrl.replace(/:\//, "://localhost/");
                };
                _local4 = /^([a-z+\w\+\.\-]+:\/?\/?)?([^\/?#]*)?(\/[^?#]*)?(\?[^#]*)?(\#.*)?/i;
                _local5 = _local3.match(_local4);
                if (_local5 != null){
                    this.protocol = _local5[1];
                    _local6 = _local5[2];
                    this.path = _local5[3];
                    this.query = _local5[4];
                    this.fragment = _local5[5];
                    _local4 = /^([!-~]+@)?([^\/?#:]*)(:[\d]*)?/i;
                    _local5 = _local6.match(_local4);
                    if (_local5 != null){
                        this.userInfo = _local5[1];
                        this.host = _local5[2];
                        this.port = _local5[3];
                    };
                };
            };
        }

    }
}//package org.osmf.utils 
﻿package org.osmf.utils {
    import flash.utils.*;

    public class OSMFStrings {

        public static const COMPOSITE_TRAIT_NOT_FOUND:String = "compositeTraitNotFound";
        public static const INVALID_PARAM:String = "invalidParam";
        public static const NULL_PARAM:String = "nullParam";
        public static const FUNCTION_MUST_BE_OVERRIDDEN:String = "functionMustBeOverridden";
        public static const ALREADY_ADDED:String = "alreadyAdded";
        public static const UNSUPPORTED_MEDIA_ELEMENT_TYPE:String = "unsupportedMediaElementType";
        public static const TRAIT_INSTANCE_ALREADY_ADDED:String = "traitInstanceAlreadyAdded";
        public static const TRAIT_RESOLVER_ALREADY_ADDED:String = "traitResolverAlreadyAdded";
        public static const CAPABILITY_NOT_SUPPORTED:String = "capabilityNotSupported";
        public static const MEDIA_LOAD_FAILED:String = "mediaLoadFailed";
        public static const MUST_SET_LOADER:String = "mustSetLoader";
        public static const LOADER_CANT_HANDLE_RESOURCE:String = "loaderCantHandleResource";
        public static const PAUSE_NOT_SUPPORTED:String = "pauseNotSupported";
        public static const ALREADY_READY:String = "alreadyReady";
        public static const ALREADY_LOADING:String = "alreadyLoading";
        public static const ALREADY_UNLOADED:String = "alreadyUnloaded";
        public static const ALREADY_UNLOADING:String = "alreadyUnloading";
        public static const INVALID_LAYOUT_RENDERER_CONSTRUCTOR:String = "invalidLayoutRendererConstructor";
        public static const ILLEGAL_CONSTRUCTOR_INVOCATION:String = "illegalConstructorInvocation";
        public static const DIRECT_DISPLAY_LIST_MOD_ERROR:String = "directDisplayListModError";
        public static const NULL_SCRIPT_PATH:String = "nullScriptPath";
        public static const STREAMSWITCH_INVALID_INDEX:String = "streamSwitchInvalidIndex";
        public static const ALTERNATIVEAUDIO_INVALID_INDEX:String = "alternativeAudioInvalidIndex";
        public static const STREAMSWITCH_STREAM_NOT_IN_MANUAL_MODE:String = "streamSwitchStreamNotInManualMode";
        public static const DVR_MAXIMUM_RPC_ATTEMPTS:String = "dvrMaximumRPCAttempts";
        public static const DVR_UNEXPECTED_SERVER_RESPONSE:String = "dvrUnexpectedServerResponse";
        public static const F4M_PARSE_PROFILE_MISSING:String = "f4mProfileMissing";
        public static const F4M_PARSE_MEDIA_URL_MISSING:String = "f4mMediaURLMissing";
        public static const F4M_PARSE_BITRATE_MISSING:String = "f4mBitrateMissing";
        public static const F4M_PARSE_VALUE_MISSING:String = "f4mValueMissing";
        public static const F4M_PARSE_ERROR:String = "f4mParseError";
        public static const IO_ERROR:String = "ioError";
        public static const SECURITY_ERROR:String = "securityError";
        public static const ASYNC_ERROR:String = "asyncError";
        public static const ARGUMENT_ERROR:String = "argumentError";
        public static const URL_SCHEME_INVALID:String = "urlSchemeInvalid";
        public static const HTTP_GET_FAILED:String = "httpGetFailed";
        public static const PLUGIN_VERSION_INVALID:String = "pluginVersionInvalid";
        public static const PLUGIN_IMPLEMENTATION_INVALID:String = "pluginImplementationInvalid";
        public static const SOUND_PLAY_FAILED:String = "soundPlayFailed";
        public static const NETCONNECTION_REJECTED:String = "netConnectionRejected";
        public static const NETCONNECTION_APPLICATION_INVALID:String = "netConnectionApplicationInvalid";
        public static const NETCONNECTION_FAILED:String = "netConnectionFailed";
        public static const NETCONNECTION_TIMEOUT:String = "netConnectionTimeout";
        public static const NETSTREAM_PLAY_FAILED:String = "netStreamPlayFailed";
        public static const NETSTREAM_STREAM_NOT_FOUND:String = "netStreamStreamNotFound";
        public static const NETSTREAM_FILE_STRUCTURE_INVALID:String = "netStreamFileStructureInvalid";
        public static const NETSTREAM_NO_SUPPORTED_TRACK_FOUND:String = "netStreamNoSupportedTrackFound";
        public static const DRM_SYSTEM_UPDATE_ERROR:String = "drmSystemUpdateError";
        public static const DVRCAST_SUBSCRIBE_FAILED:String = "dvrCastSubscribeFailed";
        public static const DVRCAST_CONTENT_OFFLINE:String = "dvrCastContentOffline";
        public static const DVRCAST_STREAM_INFO_RETRIEVAL_FAILED:String = "dvrCastStreamInfoRetrievalFailed";
        public static const MULTICAST_PARAMETER_INVALID:String = "multicastParameterInvalid";
        public static const MULTICAST_NOT_SUPPORT_MBR:String = "multicastNotSupportMBR";
        public static const F4M_FILE_INVALID:String = "f4MFileINVALID";
        public static const F4M_MEDIA_MISSING:String = "f4mMediaMissing";
        public static const METRIC_NOT_FOUND:String = "metricNotFound";
        public static const METRIC_FACTORY_NULL:String = "metricFactoryNull";
        public static const METRIC_ALREADY_EXISTS:String = "metricAlreadyExists";
        public static const NETSTREAM_LIVE_STALL:String = "netStreamLiveStall";
        public static const NETSTREAM_LIVE_RESUME:String = "netStreamLiveResume";
        private static const resourceDict:Dictionary = new Dictionary();
        public static const DRM_METADATA_NOT_SET:String = "drmMetadataNotSet";

        private static var _resourceStringFunction:Function = defaultResourceStringFunction;

        public static function getString(key:String, params:Array=null):String{
            return (resourceStringFunction(key, params));
        }
        public static function get resourceStringFunction():Function{
            return (_resourceStringFunction);
        }
        public static function set resourceStringFunction(value:Function):void{
            _resourceStringFunction = value;
        }
        private static function defaultResourceStringFunction(resourceName:String, params:Array=null):String{
            var _local3:String = ((resourceDict.hasOwnProperty(resourceName)) ? String(resourceDict[resourceName]) : null);
            if (_local3 == null){
                _local3 = String(resourceDict["missingStringResource"]);
                params = [resourceName];
            };
            if (params){
                _local3 = substitute(_local3, params);
            };
            return (_local3);
        }
        private static function substitute(value:String, ... _args):String{
            var _local4:int;
            var _local5:Array;
            var _local6:int;
            var _local3:String = "";
            if (value != null){
                _local3 = value;
                _local4 = _args.length;
                if ((((_local4 == 1)) && ((_args[0] is Array)))){
                    _local5 = (_args[0] as Array);
                    _local4 = _local5.length;
                } else {
                    _local5 = _args;
                };
                _local6 = 0;
                while (_local6 < _local4) {
                    _local3 = _local3.replace(new RegExp((("\\{" + _local6) + "\\}"), "g"), _local5[_local6]);
                    _local6++;
                };
            };
            return (_local3);
        }

        resourceDict[COMPOSITE_TRAIT_NOT_FOUND] = "There is no composite trait for the given trait type";
        resourceDict[INVALID_PARAM] = "Invalid parameter passed to method";
        resourceDict[NULL_PARAM] = "Unexpected null parameter passed to method";
        resourceDict[FUNCTION_MUST_BE_OVERRIDDEN] = "Function must be overridden";
        resourceDict[ALREADY_ADDED] = "Child has already been added";
        resourceDict[UNSUPPORTED_MEDIA_ELEMENT_TYPE] = "The specified media element type is not supported";
        resourceDict[TRAIT_INSTANCE_ALREADY_ADDED] = "An instance of this trait class has already been added to this MediaElement";
        resourceDict[TRAIT_RESOLVER_ALREADY_ADDED] = "A trait resolver for the specified trait type has already been added to this MediaElement";
        resourceDict[CAPABILITY_NOT_SUPPORTED] = "The specified capability is not currently supported";
        resourceDict[MEDIA_LOAD_FAILED] = "The loading of a MediaElement failed";
        resourceDict[MUST_SET_LOADER] = "Must set LoaderBase on a LoadTrait before calling load or unload";
        resourceDict[LOADER_CANT_HANDLE_RESOURCE] = "LoaderBase unable to handle the given MediaResourceBase";
        resourceDict[PAUSE_NOT_SUPPORTED] = "PlayTrait.pause cannot be invoked when canPause is false";
        resourceDict[ALREADY_READY] = "Loader - attempt to load an already loaded object";
        resourceDict[ALREADY_LOADING] = "Loader - attempt to load a loading object";
        resourceDict[ALREADY_UNLOADED] = "Loader - attempt to unload an already unloaded object";
        resourceDict[ALREADY_UNLOADING] = "Loader - attempt to unload a unloading object";
        resourceDict[INVALID_LAYOUT_RENDERER_CONSTRUCTOR] = "Unable to construct LayoutRenderer implementation";
        resourceDict[ILLEGAL_CONSTRUCTOR_INVOCATION] = "Use the static getInstance method to obtain a class instance";
        resourceDict[DIRECT_DISPLAY_LIST_MOD_ERROR] = "The direct addition or removal of display objects onto a MediaContainer is prohibited.";
        resourceDict[NULL_SCRIPT_PATH] = "Operation requires a valid script path";
        resourceDict[STREAMSWITCH_INVALID_INDEX] = "Dynamic Stream Switching - Invalid index requested";
        resourceDict[STREAMSWITCH_STREAM_NOT_IN_MANUAL_MODE] = "Dynamic Stream Switching - stream is not in manual mode";
        resourceDict[ALTERNATIVEAUDIO_INVALID_INDEX] = "Alternative Audio Source Changing - Invalid index requested";
        resourceDict[DRM_METADATA_NOT_SET] = "Metadata not set on DRMServices";
        resourceDict[DVR_MAXIMUM_RPC_ATTEMPTS] = "Maximum DVRGetStreamInfo RPC attempts (%i) reached";
        resourceDict[DVR_UNEXPECTED_SERVER_RESPONSE] = "Unexpected server response: ";
        resourceDict[F4M_PARSE_PROFILE_MISSING] = "Profile missing from Bootstrap info tag";
        resourceDict[F4M_PARSE_MEDIA_URL_MISSING] = "URL missing from Media tag";
        resourceDict[F4M_PARSE_BITRATE_MISSING] = "Bitrate missing from Media tag";
        resourceDict[F4M_PARSE_VALUE_MISSING] = "Value must be non-null";
        resourceDict[F4M_PARSE_ERROR] = "Error parsing f4m file";
        resourceDict[IO_ERROR] = "I/O error when loading media";
        resourceDict[SECURITY_ERROR] = "Security error when loading media";
        resourceDict[ASYNC_ERROR] = "Async error when loading media";
        resourceDict[ARGUMENT_ERROR] = "Argument error when loading media";
        resourceDict[URL_SCHEME_INVALID] = "Invalid URL scheme";
        resourceDict[HTTP_GET_FAILED] = "HTTP GET failed due to a Client Error (4xx Status Code)";
        resourceDict[PLUGIN_VERSION_INVALID] = "Plugin failed to load due to version mismatch";
        resourceDict[PLUGIN_IMPLEMENTATION_INVALID] = "Plugin failed to load due to improper or missing implementation of PluginInfo";
        resourceDict[SOUND_PLAY_FAILED] = "Playback failed due to no sound channels being available";
        resourceDict[NETCONNECTION_REJECTED] = "Connection attempt rejected by FMS server";
        resourceDict[NETCONNECTION_APPLICATION_INVALID] = "Attempting to connect to an invalid FMS application";
        resourceDict[NETCONNECTION_FAILED] = "All NetConnection attempts failed";
        resourceDict[NETCONNECTION_TIMEOUT] = "Timed-out trying to establish a NetConnection, or timed out due to an idle NetConnection";
        resourceDict[NETSTREAM_PLAY_FAILED] = "Playback failed";
        resourceDict[NETSTREAM_STREAM_NOT_FOUND] = "Stream not found";
        resourceDict[NETSTREAM_FILE_STRUCTURE_INVALID] = "File has invalid structure";
        resourceDict[NETSTREAM_NO_SUPPORTED_TRACK_FOUND] = "No supported track found";
        resourceDict[DRM_SYSTEM_UPDATE_ERROR] = "The update of the DRM subsystem failed";
        resourceDict[DVRCAST_SUBSCRIBE_FAILED] = "DVRCast subscribe failed";
        resourceDict[DVRCAST_CONTENT_OFFLINE] = "DVRCast content is offline and unavailable";
        resourceDict[DVRCAST_STREAM_INFO_RETRIEVAL_FAILED] = "Unable to retrieve DVRCast stream info";
        resourceDict[MULTICAST_PARAMETER_INVALID] = "The groupspec or streamName is null or empty but not both";
        resourceDict[MULTICAST_NOT_SUPPORT_MBR] = "Multicast does not support MBR";
        resourceDict[F4M_FILE_INVALID] = "The F4M document contains errors";
        resourceDict[F4M_MEDIA_MISSING] = "The F4M document doesn't contain media informations.";
        resourceDict[METRIC_ALREADY_EXISTS] = "The metric already exists.";
        resourceDict[METRIC_FACTORY_NULL] = "The metric factory was not set.";
        resourceDict[METRIC_NOT_FOUND] = "The metric was not found.";
        resourceDict[NETSTREAM_LIVE_STALL] = "Live playback stalled.";
        resourceDict[NETSTREAM_LIVE_RESUME] = "Live playback resumed.";
        resourceDict["missingStringResource"] = "No string for resource {0}";
    }
}//package org.osmf.utils 
﻿package org.osmf.utils {

    public class TimeUtil {

        public static function parseTime(value:String):Number{
            var _local4:int;
            var _local2 = 0;
            var _local3:Array = value.split(":");
            if (_local3.length > 1){
                _local2 = (_local3[0] * 3600);
                _local2 = (_local2 + (_local3[1] * 60));
                _local2 = (_local2 + Number(_local3[2]));
            } else {
                _local4 = 0;
                switch (value.charAt((value.length - 1))){
                    case "h":
                        _local4 = 3600;
                        break;
                    case "m":
                        _local4 = 60;
                        break;
                    case "s":
                        _local4 = 1;
                        break;
                };
                if (_local4){
                    _local2 = (Number(value.substr(0, (value.length - 1))) * _local4);
                } else {
                    _local2 = Number(value);
                };
            };
            return (_local2);
        }
        public static function formatAsTimeCode(sec:Number):String{
            var _local2:Number = Math.floor((sec / 3600));
            _local2 = ((isNaN(_local2)) ? 0 : _local2);
            var _local3:Number = Math.floor(((sec % 3600) / 60));
            _local3 = ((isNaN(_local3)) ? 0 : _local3);
            var _local4:Number = Math.floor(((sec % 3600) % 60));
            _local4 = ((isNaN(_local4)) ? 0 : _local4);
            return ((((((_local2)==0) ? "" : ((_local2)<10) ? (("0" + _local2.toString()) + ":") : (_local2.toString() + ":") + ((_local3)<10) ? ("0" + _local3.toString()) : _local3.toString()) + ":") + ((_local4)<10) ? ("0" + _local4.toString()) : _local4.toString()));
        }

    }
}//package org.osmf.utils 
﻿package org.osmf.utils {

    public class Version {

        private static const FIELD_SEPARATOR:String = ".";
        private static const _major:String = "2";
        private static const _minor:String = "0";
        private static const _build_number:String = "2494";

        public static function get version():String{
            return (((_major + FIELD_SEPARATOR) + _minor));
        }
        public static function get lastAPICompatibleVersion():String{
            return ("1.0");
        }
        public static function get FLASH_10_1():Boolean{
            return (true);
        }
        public static function get LOGGING():Boolean{
            return (false);
        }
        public static function get buildNumber():String{
            return (_build_number);
        }

    }
}//package org.osmf.utils 
﻿package org.osmf.utils {
    import flash.utils.*;

    public class Base64Decoder {

        private static const ESCAPE_CHAR_CODE:Number = 61;
        private static const inverse:Array = [64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 62, 64, 64, 64, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 64, 64, 64, 64, 64, 64, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 64, 64, 64, 64, 64, 64, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64];

        private var count:int = 0;
        private var data:ByteArray;
        private var filled:int = 0;
        private var work:Array;

        public function Base64Decoder(){
            this.work = [0, 0, 0, 0];
            super();
            this.data = new ByteArray();
        }
        private static function copyByteArray(source:ByteArray, destination:ByteArray, length:uint=0):void{
            var _local4:int = source.position;
            source.position = 0;
            destination.position = 0;
            var _local5:uint;
            while ((((source.bytesAvailable > 0)) && ((_local5 < length)))) {
                destination.writeByte(source.readByte());
                _local5++;
            };
            source.position = _local4;
            destination.position = 0;
        }

        public function decode(encoded:String):void{
            var _local3:Number;
            var _local2:uint;
            for (;_local2 < encoded.length;_local2++) {
                _local3 = encoded.charCodeAt(_local2);
                if (_local3 == ESCAPE_CHAR_CODE){
                    var _local4 = this.count++;
                    this.work[_local4] = -1;
                } else {
                    if (inverse[_local3] != 64){
                        _local4 = this.count++;
                        this.work[_local4] = inverse[_local3];
                    } else {
                        continue;
                    };
                };
                if (this.count == 4){
                    this.count = 0;
                    this.data.writeByte(((this.work[0] << 2) | ((this.work[1] & 0xFF) >> 4)));
                    this.filled++;
                    //unresolved if
                    this.data.writeByte(((this.work[1] << 4) | ((this.work[2] & 0xFF) >> 2)));
                    this.filled++;
                    //unresolved if
                    this.data.writeByte(((this.work[2] << 6) | this.work[3]));
                    this.filled++;
                };
            };
        }
        public function drain():ByteArray{
            var _local1:ByteArray = new ByteArray();
            copyByteArray(this.data, _local1, this.filled);
            this.filled = 0;
            return (_local1);
        }

    }
}//package org.osmf.utils 
﻿package org.osmf.net {
    import flash.net.*;
    import org.osmf.traits.*;
    import org.osmf.utils.*;

    public class NetStreamAlternativeAudioTrait extends AlternativeAudioTrait {

        private var _netStream:NetStream;
        private var _streamingResource:StreamingURLResource;
        private var _transitionInProgress:Boolean = false;
        private var _activeTransitionIndex:int = -1;
        private var _activeTransitionStreamName:String = null;
        private var _lastTransitionIndex:int = -2;
        private var _lastTransitionStreamName:String = null;

        public function NetStreamAlternativeAudioTrait(netStream:NetStream, streamingResource:StreamingURLResource){
            super(streamingResource.alternativeAudioStreamItems.length);
            this._streamingResource = streamingResource;
            this._netStream = netStream;
            if (((!((this._netStream == null))) && (!((this._netStream.client == null))))){
                NetClient(netStream.client).addHandler(NetStreamCodes.ON_PLAY_STATUS, this.onPlayStatus);
            };
        }
        override public function dispose():void{
            this._netStream = null;
            this._streamingResource = null;
        }
        override public function getItemForIndex(index:int):StreamingItem{
            if ((((index <= INVALID_TRANSITION_INDEX)) || ((index >= numAlternativeAudioStreams)))){
                throw (new RangeError(OSMFStrings.getString(OSMFStrings.ALTERNATIVEAUDIO_INVALID_INDEX)));
            };
            if (index == DEFAULT_TRANSITION_INDEX){
                return (null);
            };
            return (this._streamingResource.alternativeAudioStreamItems[index]);
        }
        override protected function endSwitching(index:int):void{
            if (switching){
                this.executeSwitching(_indexToSwitchTo);
            };
            super.endSwitching(index);
        }
        protected function executeSwitching(indexToSwitchTo:int):void{
            var _local2:Object;
            var _local3:NetStreamPlayOptions;
            if (this._lastTransitionIndex != indexToSwitchTo){
                this._activeTransitionIndex = indexToSwitchTo;
                if (this._activeTransitionIndex > DEFAULT_TRANSITION_INDEX){
                    this._activeTransitionStreamName = this._streamingResource.alternativeAudioStreamItems[this._activeTransitionIndex].streamName;
                } else {
                    this._activeTransitionStreamName = null;
                };
                this._transitionInProgress = true;
                _local2 = NetStreamUtils.getPlayArgsForResource(this._streamingResource);
                _local3 = new NetStreamPlayOptions();
                _local3.start = _local2.start;
                _local3.len = _local2.len;
                _local3.streamName = this._activeTransitionStreamName;
                _local3.oldStreamName = this.prepareStreamName(this._lastTransitionStreamName);
                _local3.transition = NetStreamPlayTransitions.SWAP;
                this._netStream.play2(_local3);
            };
        }
        private function onPlayStatus(info:Object):void{
            switch (info.code){
                case NetStreamCodes.NETSTREAM_PLAY_TRANSITION_COMPLETE:
                    if (((this._transitionInProgress) && ((this._activeTransitionIndex > INVALID_TRANSITION_INDEX)))){
                        this._lastTransitionIndex = this._activeTransitionIndex;
                        this._lastTransitionStreamName = this._activeTransitionStreamName;
                        this._transitionInProgress = false;
                        this._activeTransitionIndex = INVALID_TRANSITION_INDEX;
                        this._activeTransitionStreamName = null;
                        setSwitching(false, this._lastTransitionIndex);
                    };
                    break;
            };
        }
        private function prepareStreamName(value:String):String{
            if (((!((value == null))) && ((value.indexOf("?") >= 0)))){
                return (value.substr(0, value.indexOf("?")));
            };
            return (value);
        }

    }
}//package org.osmf.net 
﻿package org.osmf.net {
    import org.osmf.media.*;

    public class StreamingXMLResource extends MediaResourceBase {

        private var _manifest:String;
        private var _url:String;
        private var _clipStartTime:Number;
        private var _clipEndTime:Number;

        public function StreamingXMLResource(manifest:String, baseURL:String=null, clipStartTime:Number=NaN, clipEndTime:Number=NaN){
            var _local5:XML;
            var _local6:Namespace;
            var _local7:String;
            super();
            this._manifest = manifest;
            if (baseURL != null){
                this._url = baseURL;
            } else {
                _local5 = new XML(manifest);
                _local6 = _local5.namespace();
                _local7 = _local5._local6::baseURL.text();
                if (_local7 != null){
                    this._url = _local7;
                } else {
                    throw (new Error("The baseURL was not specified neither via the baseURL parameter, nor via the manifest <baseURL> tag."));
                };
            };
            if (this._url != null){
                if (this._url.charAt((this._url.length - 1)) != "/"){
                    this._url = (this._url + "/");
                };
                this._url = (this._url + "manifest.f4m");
            };
            this._clipStartTime = clipStartTime;
            this._clipEndTime = clipEndTime;
        }
        public function get clipStartTime():Number{
            return (this._clipStartTime);
        }
        public function set clipStartTime(value:Number):void{
            this._clipStartTime = value;
        }
        public function get clipEndTime():Number{
            return (this._clipEndTime);
        }
        public function set clipEndTime(value:Number):void{
            this._clipEndTime = value;
        }
        public function get manifest():String{
            return (this._manifest);
        }
        public function get url():String{
            return (this._url);
        }

    }
}//package org.osmf.net 
﻿package org.osmf.net {

    public class StreamingItem {

        private var _type:String = null;
        private var _streamName:String = null;
        private var _bitrate:Number;
        private var _info:Object = null;

        public function StreamingItem(type:String, streamName:String, bitrate:Number=0, info:Object=null){
            this._type = type;
            this._streamName = streamName;
            this._bitrate = bitrate;
            this._info = ((info)==null) ? new Object() : info;
        }
        public function get type():String{
            return (this._type);
        }
        public function get streamName():String{
            return (this._streamName);
        }
        public function get bitrate():Number{
            return (this._bitrate);
        }
        public function get info():Object{
            return (this._info);
        }

    }
}//package org.osmf.net 
﻿package org.osmf.net {
    import org.osmf.traits.*;

    public class ModifiableTimeTrait extends TimeTrait {

        public function ModifiableTimeTrait(duration:Number=NaN){
            super(duration);
        }
        public function set duration(value:Number):void{
            super.setDuration(value);
        }

    }
}//package org.osmf.net 
﻿package org.osmf.net {
    import flash.utils.*;

    public dynamic class NetClient extends Proxy {

        private var handlers:Dictionary;

        public function NetClient(){
            this.handlers = new Dictionary();
            super();
        }
        public function addHandler(name:String, handler:Function, priority:int=0):void{
            var _local5:Boolean;
            var _local6:int;
            var _local7:Object;
            var _local4:Array = ((this.handlers.hasOwnProperty(name)) ? this.handlers[name] : this.handlers[name] = []);
            if (_local4.indexOf(handler) == -1){
                _local5 = false;
                priority = Math.max(0, priority);
                if (priority > 0){
                    _local6 = 0;
                    while (_local6 < _local4.length) {
                        _local7 = _local4[_local6];
                        if (_local7.priority < priority){
                            _local4.splice(_local6, 0, {
                                handler:handler,
                                priority:priority
                            });
                            _local5 = true;
                            break;
                        };
                        _local6++;
                    };
                };
                if (!_local5){
                    _local4.push({
                        handler:handler,
                        priority:priority
                    });
                };
            };
        }
        public function removeHandler(name:String, handler:Function):void{
            var _local3:Array;
            var _local4:int;
            var _local5:Object;
            if (this.handlers.hasOwnProperty(name)){
                _local3 = this.handlers[name];
                _local4 = 0;
                while (_local4 < _local3.length) {
                    _local5 = _local3[_local4];
                    if (_local5.handler == handler){
                        _local3.splice(_local4, 1);
                        break;
                    };
                    _local4++;
                };
            };
        }
        override "http://www.adobe.com/2006/actionscript/flash/proxy"?? function callProperty(methodName, ... _args){
            return (this.invokeHandlers(methodName, _args));
        }
        override "http://www.adobe.com/2006/actionscript/flash/proxy"?? function getProperty(name){
            var result:* = undefined;
            var name:* = name;
            if (this.handlers.hasOwnProperty(name)){
                result = function (){
                    return (invokeHandlers(arguments.callee.name, arguments));
                };
                result.name = name;
            };
            return (result);
        }
        override "http://www.adobe.com/2006/actionscript/flash/proxy"?? function hasProperty(name):Boolean{
            return (this.handlers.hasOwnProperty(name));
        }
        private function invokeHandlers(name:String, args:Array){
            var _local3:Array;
            var _local4:Array;
            var _local5:Object;
            if (this.handlers.hasOwnProperty(name)){
                _local3 = [];
                _local4 = this.handlers[name];
                for each (_local5 in _local4) {
                    _local3.push(_local5.handler.apply(null, args));
                };
            };
            return (_local3);
        }

    }
}//package org.osmf.net 
﻿package org.osmf.net.metrics {
    import org.osmf.utils.*;

    public class MetricFactoryItem {

        private var _type:String;
        private var _metricCreationFunction:Function;

        public function MetricFactoryItem(type:String, metricCreationFunction:Function){
            if ((((type == null)) || ((metricCreationFunction == null)))){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.INVALID_PARAM)));
            };
            this._type = type;
            this._metricCreationFunction = metricCreationFunction;
        }
        public function get type():String{
            return (this._type);
        }
        public function get metricCreationFunction():Function{
            return (this._metricCreationFunction);
        }

    }
}//package org.osmf.net.metrics 
﻿package org.osmf.net.metrics {
    import org.osmf.net.qos.*;

    public class BufferLengthMetric extends MetricBase {

        public function BufferLengthMetric(qosInfoHistory:QoSInfoHistory){
            super(qosInfoHistory, MetricType.BUFFER_LENGTH);
        }
        override protected function getValueForced():MetricValue{
            var _local1:QoSInfo = qosInfoHistory.getLatestQoSInfo();
            if (((!(isNaN(_local1.bufferLength))) && ((_local1.bufferLength >= 0)))){
                return (new MetricValue(_local1.bufferLength, true));
            };
            return (new MetricValue(undefined, false));
        }

    }
}//package org.osmf.net.metrics 
﻿package org.osmf.net.metrics {
    import __AS3__.vec.*;
    import flash.errors.*;
    import org.osmf.net.qos.*;

    public class MetricBase {

        private var _type:String = null;
        private var lastMachineTime:Number = NaN;
        private var lastValue:MetricValue;
        private var _qosInfoHistory:QoSInfoHistory;

        public function MetricBase(qosInfoHistory:QoSInfoHistory, type:String){
            if (qosInfoHistory == null){
                throw (new ArgumentError("qosInfoHistory cannot be null."));
            };
            this._qosInfoHistory = qosInfoHistory;
            this._type = type;
            this.lastValue = new MetricValue(undefined, false);
        }
        public function get type():String{
            return (this._type);
        }
        final public function get value():MetricValue{
            return (this.getValue());
        }
        function getValue():MetricValue{
            var _local1:Vector.<QoSInfo> = this._qosInfoHistory.getHistory();
            if (_local1.length > 0){
                if (_local1[0].timestamp != this.lastMachineTime){
                    this.lastValue = this.getValueForced();
                    this.lastMachineTime = _local1[0].timestamp;
                };
                return (this.lastValue);
            };
            return (new MetricValue(undefined, false));
        }
        protected function getValueForced():MetricValue{
            throw (new IllegalOperationError("The getValueForced() method must be overridden by the derived class."));
        }
        protected function get qosInfoHistory():QoSInfoHistory{
            return (this._qosInfoHistory);
        }

    }
}//package org.osmf.net.metrics 
﻿package org.osmf.net.metrics {
    import org.osmf.net.*;
    import __AS3__.vec.*;
    import org.osmf.net.qos.*;

    public class BandwidthMetric extends MetricBase {

        private var _weights:Vector.<Number>;

        public function BandwidthMetric(qosInfoHistory:QoSInfoHistory, weights:Vector.<Number>){
            super(qosInfoHistory, MetricType.BANDWIDTH);
            ABRUtils.validateWeights(weights);
            this._weights = weights.slice();
        }
        public function get weights():Vector.<Number>{
            return (this._weights);
        }
        override protected function getValueForced():MetricValue{
            var _local5:FragmentDetails;
            var _local6:Number;
            var _local1:Vector.<QoSInfo> = qosInfoHistory.getHistory(this._weights.length);
            var _local2 = 0;
            var _local3 = 0;
            var _local4:uint;
            while (_local4 < _local1.length) {
                _local5 = _local1[_local4].lastDownloadedFragmentDetails;
                _local6 = (_local5.size / _local5.downloadDuration);
                _local2 = (_local2 + (_local6 * this._weights[_local4]));
                _local3 = (_local3 + this._weights[_local4]);
                _local4++;
            };
            _local2 = (_local2 / _local3);
            return (new MetricValue(_local2, true));
        }

    }
}//package org.osmf.net.metrics 
﻿package org.osmf.net.metrics {
    import org.osmf.net.qos.*;

    public class FPSMetric extends MetricBase {

        public function FPSMetric(qosInfoHistory:QoSInfoHistory){
            super(qosInfoHistory, MetricType.FPS);
        }
        override protected function getValueForced():MetricValue{
            var _local1:QoSInfo = qosInfoHistory.getLatestQoSInfo();
            if (((isNaN(_local1.maxFPS)) || ((_local1.maxFPS == 0)))){
                return (new MetricValue(undefined, false));
            };
            return (new MetricValue(_local1.maxFPS, true));
        }

    }
}//package org.osmf.net.metrics 
﻿package org.osmf.net.metrics {
    import __AS3__.vec.*;
    import org.osmf.net.qos.*;

    public class CurrentStatusMetric extends MetricBase {

        public function CurrentStatusMetric(qosInfoHistory:QoSInfoHistory){
            super(qosInfoHistory, MetricType.CURRENT_STATUS);
        }
        override protected function getValueForced():MetricValue{
            var _local1:QoSInfo = qosInfoHistory.getLatestQoSInfo();
            var _local2:Vector.<uint> = new Vector.<uint>();
            _local2.push(_local1.currentIndex);
            _local2.push(_local1.actualIndex);
            return (new MetricValue(_local2, true));
        }

    }
}//package org.osmf.net.metrics 
﻿package org.osmf.net.metrics {
    import __AS3__.vec.*;
    import org.osmf.net.qos.*;

    public class RecentSwitchMetric extends MetricBase {

        public function RecentSwitchMetric(qosInfoHistory:QoSInfoHistory){
            super(qosInfoHistory, MetricType.RECENT_SWITCH);
        }
        override protected function getValueForced():MetricValue{
            var _local3:FragmentDetails;
            var _local4:FragmentDetails;
            var _local1:Vector.<QoSInfo> = qosInfoHistory.getHistory(2);
            var _local2:int;
            if (_local1.length >= 2){
                _local3 = _local1[0].lastDownloadedFragmentDetails;
                _local4 = _local1[1].lastDownloadedFragmentDetails;
                if ((((_local3 == null)) || ((_local4 == null)))){
                    return (new MetricValue(undefined, false));
                };
                _local2 = (_local3.index - _local4.index);
            } else {
                return (new MetricValue(undefined, false));
            };
            return (new MetricValue(_local2, true));
        }

    }
}//package org.osmf.net.metrics 
﻿package org.osmf.net.metrics {
    import __AS3__.vec.*;
    import org.osmf.net.qos.*;

    public class DefaultMetricFactory extends MetricFactory {

        public function DefaultMetricFactory(qosInfoHistory:QoSInfoHistory){
            super(qosInfoHistory);
            this.init();
        }
        private function init():void{
            addItem(new MetricFactoryItem(MetricType.ACTUAL_BITRATE, function (qosInfoHistory:QoSInfoHistory, maxFragments:uint=5):MetricBase{
                return (new ActualBitrateMetric(qosInfoHistory, maxFragments));
            }));
            addItem(new MetricFactoryItem(MetricType.FRAGMENT_COUNT, function (qosInfoHistory:QoSInfoHistory):MetricBase{
                return (new FragmentCountMetric(qosInfoHistory));
            }));
            addItem(new MetricFactoryItem(MetricType.AVAILABLE_QUALITY_LEVELS, function (qosInfoHistory:QoSInfoHistory):MetricBase{
                return (new AvailableQualityLevelsMetric(qosInfoHistory));
            }));
            addItem(new MetricFactoryItem(MetricType.CURRENT_STATUS, function (qosInfoHistory:QoSInfoHistory):MetricBase{
                return (new CurrentStatusMetric(qosInfoHistory));
            }));
            addItem(new MetricFactoryItem(MetricType.BANDWIDTH, function (qosInfoHistory:QoSInfoHistory, weights:Vector.<Number>):MetricBase{
                return (new BandwidthMetric(qosInfoHistory, weights));
            }));
            addItem(new MetricFactoryItem(MetricType.FPS, function (qosInfoHistory:QoSInfoHistory):MetricBase{
                return (new FPSMetric(qosInfoHistory));
            }));
            addItem(new MetricFactoryItem(MetricType.DROPPED_FPS, function (qosInfoHistory:QoSInfoHistory, desiredSampleLength:Number=10):MetricBase{
                return (new DroppedFPSMetric(qosInfoHistory, desiredSampleLength));
            }));
            addItem(new MetricFactoryItem(MetricType.BUFFER_OCCUPATION_RATIO, function (qosInfoHistory:QoSInfoHistory):MetricBase{
                return (new BufferOccupationRatioMetric(qosInfoHistory));
            }));
            addItem(new MetricFactoryItem(MetricType.BUFFER_LENGTH, function (qosInfoHistory:QoSInfoHistory):MetricBase{
                return (new BufferLengthMetric(qosInfoHistory));
            }));
            addItem(new MetricFactoryItem(MetricType.BUFFER_FRAGMENTS, function (qosInfoHistory:QoSInfoHistory):MetricBase{
                return (new BufferFragmentsMetric(qosInfoHistory));
            }));
            addItem(new MetricFactoryItem(MetricType.EMPTY_BUFFER, function (qosInfoHistory:QoSInfoHistory):MetricBase{
                return (new EmptyBufferMetric(qosInfoHistory));
            }));
            addItem(new MetricFactoryItem(MetricType.RECENT_SWITCH, function (qosInfoHistory:QoSInfoHistory):MetricBase{
                return (new RecentSwitchMetric(qosInfoHistory));
            }));
        }

    }
}//package org.osmf.net.metrics 
﻿package org.osmf.net.metrics {
    import flash.utils.*;
    import __AS3__.vec.*;

    public class MetricRepository {

        private var metrics:Dictionary;
        private var lastKey:String;
        private var lastKeyByteArray:ByteArray;
        private var _metricFactory:MetricFactory = null;

        public function MetricRepository(metricFactory:MetricFactory){
            this.metrics = new Dictionary();
            if (metricFactory == null){
                throw (new ArgumentError("The metricFactory should not be null!"));
            };
            this._metricFactory = metricFactory;
        }
        public function get metricFactory():MetricFactory{
            return (this._metricFactory);
        }
        public function getMetric(type:String, ... _args):MetricBase{
            var _local5:Array;
            var _local6:MetricBase;
            var _local3:int = getTimer();
            var _local4:Array = _args.slice();
            _local4.splice(0, 0, type);
            if (this.metrics[type] == null){
                this.metrics[type] = new Vector.<Array>();
            };
            for each (_local5 in this.metrics[type]) {
                if (this.match(_local5.slice(1), _local4)){
                    return (_local5[0]);
                };
            };
            _local6 = this._metricFactory.buildMetric.apply(null, _local4);
            _local4.splice(0, 0, _local6);
            this.metrics[type].push(_local4);
            return (_local6);
        }
        private function match(a, b):Boolean{
            var _local3:uint;
            if (a == b){
                return (true);
            };
            if ((((a == null)) && ((b == null)))){
                return (true);
            };
            if ((((((((a is Number)) && ((b is Number)))) && (isNaN(a)))) && (isNaN(b)))){
                return (true);
            };
            if (((((this.isVector(a)) && (this.isVector(b)))) || ((((a is Array)) && ((b is Array)))))){
                if (a.length != b.length){
                    return (false);
                };
                _local3 = 0;
                while (_local3 < a.length) {
                    if (!this.match(a[_local3], b[_local3])){
                        return (false);
                    };
                    _local3++;
                };
                return (true);
            };
            return (false);
        }
        private function isVector(object:Object):Boolean{
            var _local2:String = getQualifiedClassName(object);
            return ((_local2.indexOf("__AS3__.vec::Vector.") === 0));
        }

    }
}//package org.osmf.net.metrics 
﻿package org.osmf.net.metrics {
    import org.osmf.net.qos.*;

    public class AvailableQualityLevelsMetric extends MetricBase {

        public function AvailableQualityLevelsMetric(qosInfoHistory:QoSInfoHistory){
            super(qosInfoHistory, MetricType.AVAILABLE_QUALITY_LEVELS);
        }
        override protected function getValueForced():MetricValue{
            var _local1:QoSInfo = qosInfoHistory.getHistory(1)[0];
            return (new MetricValue(_local1.availableQualityLevels, true));
        }

    }
}//package org.osmf.net.metrics 
﻿package org.osmf.net.metrics {
    import org.osmf.net.qos.*;

    public class EmptyBufferMetric extends MetricBase {

        public function EmptyBufferMetric(qosInfoHistory:QoSInfoHistory){
            super(qosInfoHistory, MetricType.EMPTY_BUFFER);
        }
        override protected function getValueForced():MetricValue{
            var _local1:QoSInfo = qosInfoHistory.getLatestQoSInfo();
            return (new MetricValue(_local1.emptyBufferOccurred, true));
        }

    }
}//package org.osmf.net.metrics 
﻿package org.osmf.net.metrics {
    import __AS3__.vec.*;
    import org.osmf.net.qos.*;

    public class BufferFragmentsMetric extends MetricBase {

        public function BufferFragmentsMetric(qosInfoHistory:QoSInfoHistory){
            super(qosInfoHistory, MetricType.BUFFER_FRAGMENTS);
        }
        override protected function getValueForced():MetricValue{
            var _local5:QoSInfo;
            var _local1:Vector.<QoSInfo> = qosInfoHistory.getHistory();
            var _local2:Number = _local1[0].bufferLength;
            if (((isNaN(_local2)) || ((_local2 < 0)))){
                return (new MetricValue(undefined, false));
            };
            var _local3 = 0;
            var _local4 = 0;
            while (_local4 < _local1.length) {
                _local5 = _local1[_local4];
                _local3 = (_local3 + _local5.lastDownloadedFragmentDetails.playDuration);
                //unresolved if
                _local4++;
            };
            return (new MetricValue(_local4, true));
        }

    }
}//package org.osmf.net.metrics 
﻿package org.osmf.net.metrics {
    import org.osmf.events.*;
    import flash.utils.*;
    import org.osmf.utils.*;
    import __AS3__.vec.*;
    import org.osmf.net.qos.*;

    public class MetricFactory {

        private var items:Dictionary;
        private var _numItems:Number;
        private var _qosInfoHistory:QoSInfoHistory;

        public function MetricFactory(qosInfoHistory:QoSInfoHistory){
            this._qosInfoHistory = qosInfoHistory;
            this.items = new Dictionary();
            this._numItems = 0;
        }
        public function addItem(item:MetricFactoryItem):void{
            if ((((item == null)) || ((item.type == null)))){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.INVALID_PARAM)));
            };
            if (this.items[item.type] == null){
                this._numItems++;
            };
            this.items[item.type] = item;
        }
        public function removeItem(item:MetricFactoryItem):void{
            if ((((item == null)) || ((item.type == null)))){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.INVALID_PARAM)));
            };
            if (this.items[item.type] != null){
                this._numItems--;
            };
            this.items[item.type] = null;
        }
        public function getItems():Vector.<MetricFactoryItem>{
            var _local2:MetricFactoryItem;
            var _local1:Vector.<MetricFactoryItem> = new Vector.<MetricFactoryItem>();
            for each (_local2 in this.items) {
                _local1.push(_local2);
            };
            return (_local1);
        }
        public function getItem(type:String):MetricFactoryItem{
            return (this.items[type]);
        }
        public function get numItems():Number{
            return (this._numItems);
        }
        public function buildMetric(type:String, ... _args):MetricBase{
            if (this.items[type] == null){
                throw (new MetricError(MetricErrorCodes.INVALID_METRIC_TYPE));
            };
            var _local3:MetricFactoryItem = (this.items[type] as MetricFactoryItem);
            _args.splice(0, 0, this._qosInfoHistory);
            return (_local3.metricCreationFunction.apply(null, _args));
        }

    }
}//package org.osmf.net.metrics 
﻿package org.osmf.net.metrics {

    public class MetricValue {

        private var _value;
        private var _valid:Boolean;

        public function MetricValue(value, valid:Boolean=true){
            this._value = value;
            this._valid = valid;
        }
        public function get value(){
            return (this._value);
        }
        public function get valid():Boolean{
            return (this._valid);
        }

    }
}//package org.osmf.net.metrics 
﻿package org.osmf.net.metrics {

    public final class MetricType {

        public static const FRAGMENT_COUNT:String = "org.osmf.net.metrics.fragmentCount";
        public static const BANDWIDTH:String = "org.osmf.net.metrics.bandwidth";
        public static const AVAILABLE_QUALITY_LEVELS:String = "org.osmf.net.metrics.availableQualityLevels";
        public static const CURRENT_STATUS:String = "org.osmf.net.metrics.currentStatus";
        public static const ACTUAL_BITRATE:String = "org.osmf.net.metrics.actualBitrate";
        public static const FPS:String = "org.osmf.net.metrics.fps";
        public static const DROPPED_FPS:String = "org.osmf.net.metrics.droppedFPS";
        public static const BUFFER_OCCUPATION_RATIO:String = "org.osmf.net.metrics.bufferOccupationRatio";
        public static const BUFFER_LENGTH:String = "org.osmf.net.metrics.bufferLength";
        public static const BUFFER_FRAGMENTS:String = "org.osmf.net.metrics.bufferFragments";
        public static const EMPTY_BUFFER:String = "org.osmf.net.metrics.emptyBuffer";
        public static const RECENT_SWITCH:String = "org.osmf.net.metrics.recentSwitch";

    }
}//package org.osmf.net.metrics 
﻿package org.osmf.net.metrics {
    import org.osmf.net.qos.*;

    public class BufferOccupationRatioMetric extends MetricBase {

        public function BufferOccupationRatioMetric(qosInfoHistory:QoSInfoHistory){
            super(qosInfoHistory, MetricType.BUFFER_OCCUPATION_RATIO);
        }
        override protected function getValueForced():MetricValue{
            var _local1:QoSInfo = qosInfoHistory.getLatestQoSInfo();
            if (((((((!(isNaN(_local1.bufferLength))) && (!(isNaN(_local1.bufferTime))))) && ((_local1.bufferTime > 0)))) && ((_local1.bufferLength >= 0)))){
                return (new MetricValue((_local1.bufferLength / _local1.bufferTime), true));
            };
            return (new MetricValue(undefined, false));
        }

    }
}//package org.osmf.net.metrics 
﻿package org.osmf.net.metrics {
    import org.osmf.net.qos.*;

    public class FragmentCountMetric extends MetricBase {

        public function FragmentCountMetric(qosInfoHistory:QoSInfoHistory){
            super(qosInfoHistory, MetricType.FRAGMENT_COUNT);
        }
        override protected function getValueForced():MetricValue{
            return (new MetricValue(qosInfoHistory.length, true));
        }

    }
}//package org.osmf.net.metrics 
﻿package org.osmf.net.metrics {
    import __AS3__.vec.*;
    import org.osmf.net.qos.*;

    public class ActualBitrateMetric extends MetricBase {

        private var _maxFragments:uint;

        public function ActualBitrateMetric(qosInfoHistory:QoSInfoHistory, maxFragments:uint=5){
            super(qosInfoHistory, MetricType.ACTUAL_BITRATE);
            this.maxFragments = maxFragments;
        }
        public function get maxFragments():uint{
            return (this._maxFragments);
        }
        public function set maxFragments(value:uint):void{
            if (value < 1){
                throw (new ArgumentError("Invalid value for 'maxFragments'."));
            };
            this._maxFragments = value;
        }
        override protected function getValueForced():MetricValue{
            var _local5:QoSInfo;
            var _local7:FragmentDetails;
            var _local1:Vector.<QoSInfo> = qosInfoHistory.getHistory(this._maxFragments);
            var _local2:int = _local1[0].actualIndex;
            var _local3 = 0;
            var _local4 = 0;
            for each (_local5 in _local1) {
                if (_local5.lastDownloadedFragmentDetails.index == _local2){
                    _local7 = _local5.lastDownloadedFragmentDetails;
                    _local3 = (_local3 + _local7.size);
                    _local4 = (_local4 + _local7.playDuration);
                };
            };
            if (_local4 == 0){
                return (new MetricValue(undefined, false));
            };
            var _local6:Number = (((_local3 / _local4) * 8) / 1000);
            return (new MetricValue(_local6, true));
        }

    }
}//package org.osmf.net.metrics 
﻿package org.osmf.net.metrics {
    import __AS3__.vec.*;
    import org.osmf.net.qos.*;

    public class DroppedFPSMetric extends MetricBase {

        private static const MINIMUM_CONTINUOUS_PLAYBACK_DURATION:Number = 1;
        private static const MINIMUM_TOTAL_PLAYBACK_DURATION:Number = 2;

        private var _desiredSampleLength:Number = 10;

        public function DroppedFPSMetric(qosInfoHistory:QoSInfoHistory, desiredSampleLength:Number=10){
            super(qosInfoHistory, MetricType.DROPPED_FPS);
            this.desiredSampleLength = desiredSampleLength;
        }
        public function get desiredSampleLength():Number{
            return (this._desiredSampleLength);
        }
        public function set desiredSampleLength(value:Number):void{
            if (((isNaN(value)) || ((value < 0)))){
                throw (new ArgumentError("Invalid desiredSampleLength"));
            };
            this._desiredSampleLength = value;
        }
        override protected function getValueForced():MetricValue{
            var _local6:Vector.<PlaybackDetails>;
            var _local7:PlaybackDetails;
            var _local1:Vector.<QoSInfo> = qosInfoHistory.getHistory();
            var _local2 = 0;
            var _local3 = 0;
            var _local4:uint = _local1[0].currentIndex;
            var _local5:uint;
            while (_local5 < _local1.length) {
                _local6 = _local1[_local5].playbackDetailsRecord;
                for each (_local7 in _local6) {
                    if ((((_local7.duration < 0)) || ((_local7.droppedFrames < 0)))){
                        return (new MetricValue(undefined, false));
                    };
                    if ((((_local7.index == _local4)) && ((_local7.duration >= MINIMUM_CONTINUOUS_PLAYBACK_DURATION)))){
                        _local2 = (_local2 + _local7.duration);
                        _local3 = (_local3 + _local7.droppedFrames);
                        break;
                    };
                };
                //unresolved if
                _local5++;
            };
            if (_local2 < MINIMUM_TOTAL_PLAYBACK_DURATION){
                return (new MetricValue(undefined, false));
            };
            return (new MetricValue((_local3 / _local2), true));
        }

    }
}//package org.osmf.net.metrics 
﻿package org.osmf.net {
    import __AS3__.vec.*;

    public class ABRUtils {

        public static function validateWeights(weights:Vector.<Number>, desiredLength:int=-1):void{
            var _local4:Number;
            if (weights == null){
                throw (new ArgumentError("The weights vector is null."));
            };
            if ((((desiredLength > -1)) && (!((weights.length == desiredLength))))){
                throw (new ArgumentError("Invalid number of weights."));
            };
            var _local3:Boolean;
            for each (_local4 in weights) {
                if (((isNaN(_local4)) || ((_local4 < 0)))){
                    throw (new ArgumentError("Invalid weight in weights Vector."));
                };
                if (_local4 > 0){
                    _local3 = true;
                };
            };
            if (!_local3){
                throw (new ArgumentError("At least one weight must be greater than 0."));
            };
        }
        public static function roundNumber(value:Number):Number{
            if (isNaN(value)){
                return (value);
            };
            return ((Math.round((value * 1000)) / 1000));
        }

    }
}//package org.osmf.net 
﻿package org.osmf.net {
    import org.osmf.media.*;
    import flash.events.*;
    import flash.net.*;
    import org.osmf.utils.*;
    import flash.errors.*;

    public class NetConnectionFactoryBase extends EventDispatcher {

        public function create(resource:URLResource):void{
            throw (new IllegalOperationError(OSMFStrings.getString(OSMFStrings.FUNCTION_MUST_BE_OVERRIDDEN)));
        }
        public function closeNetConnection(netConnection:NetConnection):void{
            netConnection.close();
        }

    }
}//package org.osmf.net 
﻿package org.osmf.net {
    import org.osmf.media.*;
    import flash.utils.*;
    import __AS3__.vec.*;

    public class StreamingURLResource extends URLResource {

        private var _streamType:String;
        private var _clipStartTime:Number;
        private var _clipEndTime:Number;
        private var _connectionArguments:Vector.<Object>;
        private var _drmContentData:ByteArray;
        private var _urlIncludesFMSApplicationInstance:Boolean = false;
        private var _alternativeAudioStreamItems:Vector.<StreamingItem> = null;

        public function StreamingURLResource(url:String, streamType:String=null, clipStartTime:Number=NaN, clipEndTime:Number=NaN, connectionArguments:Vector.<Object>=null, urlIncludesFMSApplicationInstance:Boolean=false, drmContentData:ByteArray=null){
            this._streamType = ((streamType) || (StreamType.RECORDED));
            this._clipStartTime = clipStartTime;
            this._clipEndTime = clipEndTime;
            this._urlIncludesFMSApplicationInstance = urlIncludesFMSApplicationInstance;
            this._drmContentData = drmContentData;
            this._connectionArguments = connectionArguments;
            super(url);
        }
        public function get streamType():String{
            return (this._streamType);
        }
        public function set streamType(value:String):void{
            this._streamType = value;
        }
        public function get clipStartTime():Number{
            return (this._clipStartTime);
        }
        public function set clipStartTime(value:Number):void{
            this._clipStartTime = value;
        }
        public function get clipEndTime():Number{
            return (this._clipEndTime);
        }
        public function set clipEndTime(value:Number):void{
            this._clipEndTime = value;
        }
        public function get connectionArguments():Vector.<Object>{
            return (this._connectionArguments);
        }
        public function set connectionArguments(value:Vector.<Object>):void{
            this._connectionArguments = value;
        }
        public function get drmContentData():ByteArray{
            return (this._drmContentData);
        }
        public function set drmContentData(value:ByteArray):void{
            this._drmContentData = value;
        }
        public function get urlIncludesFMSApplicationInstance():Boolean{
            return (this._urlIncludesFMSApplicationInstance);
        }
        public function set urlIncludesFMSApplicationInstance(value:Boolean):void{
            this._urlIncludesFMSApplicationInstance = value;
        }
        public function get alternativeAudioStreamItems():Vector.<StreamingItem>{
            if (this._alternativeAudioStreamItems == null){
                this._alternativeAudioStreamItems = new Vector.<StreamingItem>();
            };
            return (this._alternativeAudioStreamItems);
        }
        public function set alternativeAudioStreamItems(value:Vector.<StreamingItem>):void{
            this._alternativeAudioStreamItems = value;
        }

    }
}//package org.osmf.net 
﻿package org.osmf.net.rules {

    public final class RuleType {

        public static const BANDWIDTH:String = "org.osmf.net.rules.bandwidth";
        public static const DROPPED_FPS:String = "org.osmf.net.rules.droppedFPS";
        public static const BUFFER_BANDWIDTH:String = "org.osmf.net.rules.bufferBandwidth";
        public static const EMPTY_BUFFER:String = "org.osmf.net.rules.emptyBuffer";
        public static const AFTER_UP_SWITCH_BUFFER_BANDWIDTH:String = "org.osmf.net.rules.afterUpSwitchBufferBandwidth";

    }
}//package org.osmf.net.rules 
﻿package org.osmf.net.rules {
    import __AS3__.vec.*;
    import org.osmf.net.metrics.*;
    import org.osmf.net.qos.*;

    public class RuleUtils {

        public static function computeActualBitrate(actualBitrateMetric:MetricBase, availableQualityLevelsMetric:MetricBase, currentStatusMetric:MetricBase):Number{
            var _local5:MetricValue;
            var _local6:MetricValue;
            var _local7:uint;
            var _local8:Vector.<QualityLevel>;
            var _local4:MetricValue = actualBitrateMetric.value;
            if (_local4.valid){
                return ((_local4.value as Number));
            };
            _local5 = availableQualityLevelsMetric.value;
            _local6 = currentStatusMetric.value;
            if (((!(_local5.valid)) || (!(_local6.valid)))){
                return (Number.NaN);
            };
            _local7 = (_local6.value as Vector.<uint>)[1];
            _local8 = (_local5.value as Vector.<QualityLevel>);
            return (_local8[_local7].bitrate);
        }

    }
}//package org.osmf.net.rules 
﻿package org.osmf.net.rules {
    import org.osmf.net.metrics.*;

    public class EmptyBufferRule extends RuleBase {

        private var _scaleDownFactor:Number;
        private var emptyBufferInterruptionMetric:MetricBase;
        private var actualBitrateMetric:MetricBase;
        private var currentStatusMetric:MetricBase;
        private var availableQualityLevelsMetric:MetricBase;

        public function EmptyBufferRule(metricRepository:MetricRepository, scaleDownFactor:Number){
            super(metricRepository);
            this.scaleDownFactor = scaleDownFactor;
        }
        public function get scaleDownFactor():Number{
            return (this._scaleDownFactor);
        }
        public function set scaleDownFactor(value:Number):void{
            if (((((isNaN(value)) || ((value < 0)))) || ((value > 1)))){
                throw (new ArgumentError("Invalid scaleDownFactor"));
            };
            this._scaleDownFactor = value;
        }
        override public function getRecommendation():Recommendation{
            if (this.emptyBufferInterruptionMetric == null){
                this.emptyBufferInterruptionMetric = metricRepository.getMetric(MetricType.EMPTY_BUFFER);
            };
            var _local1:MetricValue = this.emptyBufferInterruptionMetric.value;
            if (((!(_local1.valid)) || ((_local1.value == false)))){
                return (new Recommendation(RuleType.EMPTY_BUFFER, 0, 0));
            };
            if (this.actualBitrateMetric == null){
                this.actualBitrateMetric = metricRepository.getMetric(MetricType.ACTUAL_BITRATE);
            };
            if (this.availableQualityLevelsMetric == null){
                this.availableQualityLevelsMetric = metricRepository.getMetric(MetricType.AVAILABLE_QUALITY_LEVELS);
            };
            if (this.currentStatusMetric == null){
                this.currentStatusMetric = metricRepository.getMetric(MetricType.CURRENT_STATUS);
            };
            var _local2:Number = RuleUtils.computeActualBitrate(this.actualBitrateMetric, this.availableQualityLevelsMetric, this.currentStatusMetric);
            if (isNaN(_local2)){
                return (new Recommendation(RuleType.EMPTY_BUFFER, 0, 1));
            };
            var _local3:Number = (_local2 * this.scaleDownFactor);
            return (new Recommendation(RuleType.EMPTY_BUFFER, _local3, 1));
        }

    }
}//package org.osmf.net.rules 
﻿package org.osmf.net.rules {

    public class Recommendation {

        private var _ruleType:String;
        private var _bitrate:Number;
        private var _confidence:Number;

        public function Recommendation(ruleType:String, bitrate:Number, confidence:Number){
            if (ruleType == null){
                throw (new ArgumentError("ruleType cannot be null."));
            };
            if (((((isNaN(confidence)) || ((confidence < 0)))) || ((confidence > 1)))){
                throw (new ArgumentError("Invalid confidence!"));
            };
            if (((isNaN(bitrate)) || ((bitrate < 0)))){
                throw (new ArgumentError("Invalid bitrate!"));
            };
            this._ruleType = ruleType;
            this._bitrate = bitrate;
            this._confidence = confidence;
        }
        public function get ruleType():String{
            return (this._ruleType);
        }
        public function get bitrate():Number{
            return (this._bitrate);
        }
        public function get confidence():Number{
            return (this._confidence);
        }

    }
}//package org.osmf.net.rules 
﻿package org.osmf.net.rules {
    import __AS3__.vec.*;
    import org.osmf.net.metrics.*;

    public class DroppedFPSRule extends RuleBase {

        private var _minimumFPS:Number;
        private var _maximumDroppedFPSRatio:Number;
        private var _desiredSampleLength:Number;
        private var actualBitrateMetric:MetricBase;
        private var currentStatusMetric:MetricBase;
        private var availableQualityLevelsMetric:MetricBase;
        private var fpsMetric:MetricBase;
        private var droppedFPSMetric:MetricBase;

        public function DroppedFPSRule(metricRepository:MetricRepository, desiredSampleLength:Number, maximumDroppedFPSRatio:Number){
            super(metricRepository);
            this.desiredSampleLength = desiredSampleLength;
            this.maximumDroppedFPSRatio = maximumDroppedFPSRatio;
        }
        public function get desiredSampleLength():Number{
            return (this._desiredSampleLength);
        }
        public function set desiredSampleLength(value:Number):void{
            if (((isNaN(value)) || ((value <= 0)))){
                throw (new ArgumentError("Invalid desiredSampleLength"));
            };
            this._desiredSampleLength = value;
        }
        public function get maximumDroppedFPSRatio():Number{
            return (this._maximumDroppedFPSRatio);
        }
        public function set maximumDroppedFPSRatio(value:Number):void{
            if (((((isNaN(value)) || ((value < 0)))) || ((value > 1)))){
                throw (new ArgumentError("Invalid maximumDroppedFPSRatio"));
            };
            this._maximumDroppedFPSRatio = value;
        }
        override public function getRecommendation():Recommendation{
            if (this.actualBitrateMetric == null){
                this.actualBitrateMetric = metricRepository.getMetric(MetricType.ACTUAL_BITRATE);
            };
            if (this.currentStatusMetric == null){
                this.currentStatusMetric = metricRepository.getMetric(MetricType.CURRENT_STATUS);
            };
            var _local1:MetricValue = this.actualBitrateMetric.value;
            var _local2:MetricValue = this.currentStatusMetric.value;
            if (!_local2.valid){
                return (new Recommendation(RuleType.DROPPED_FPS, 0, 0));
            };
            var _local3:uint = (_local2.value as Vector.<uint>)[0];
            var _local4:uint = (_local2.value as Vector.<uint>)[1];
            if (_local3 != _local4){
                return (new Recommendation(RuleType.DROPPED_FPS, 0, 0));
            };
            if (this.availableQualityLevelsMetric == null){
                this.availableQualityLevelsMetric = metricRepository.getMetric(MetricType.AVAILABLE_QUALITY_LEVELS);
            };
            var _local5:Number = RuleUtils.computeActualBitrate(this.actualBitrateMetric, this.availableQualityLevelsMetric, this.currentStatusMetric);
            if (isNaN(_local5)){
                return (new Recommendation(RuleType.DROPPED_FPS, 0, 0));
            };
            if (this.fpsMetric == null){
                this.fpsMetric = metricRepository.getMetric(MetricType.FPS);
            };
            if (this.droppedFPSMetric == null){
                this.droppedFPSMetric = metricRepository.getMetric(MetricType.DROPPED_FPS, this._desiredSampleLength);
            };
            var _local6:MetricValue = this.fpsMetric.value;
            var _local7:MetricValue = this.droppedFPSMetric.value;
            if (((!(_local6.valid)) || (!(_local7.valid)))){
                return (new Recommendation(RuleType.DROPPED_FPS, 0, 0));
            };
            var _local8:Number = _local7.value;
            var _local9:Number = _local6.value;
            if (_local8 > _local9){
                _local8 = _local9;
            };
            var _local10:Number = (_local5 * (1 - (_local8 / _local9)));
            var _local11 = 0;
            if ((((this._maximumDroppedFPSRatio == 0)) && ((_local8 == 0)))){
                return (new Recommendation(RuleType.DROPPED_FPS, 0, 0));
            };
            if ((_local8 / _local9) > this._maximumDroppedFPSRatio){
                _local11 = 1;
            } else {
                _local11 = (_local8 / (_local9 * this._maximumDroppedFPSRatio));
            };
            return (new Recommendation(RuleType.DROPPED_FPS, _local10, _local11));
        }

    }
}//package org.osmf.net.rules 
﻿package org.osmf.net.rules {
    import __AS3__.vec.*;
    import org.osmf.net.metrics.*;

    public class BufferBandwidthRule extends BandwidthRule {

        private var _bufferFragmentsThreshold:Number;
        private var actualBitrateMetric:MetricBase;
        private var bufferFragmentsMetric:MetricBase;
        private var currentStatusMetric:MetricBase;
        private var availableQualityLevelsMetric:MetricBase;

        public function BufferBandwidthRule(metricRepository:MetricRepository, weights:Vector.<Number>, bufferFragmentsThreshold:Number){
            super(metricRepository, weights);
            this.bufferFragmentsThreshold = bufferFragmentsThreshold;
        }
        public function get bufferFragmentsThreshold():Number{
            return (this._bufferFragmentsThreshold);
        }
        public function set bufferFragmentsThreshold(value:Number):void{
            if (((isNaN(value)) || ((value < 0)))){
                throw (new ArgumentError("Invalid bufferLengthThreshold"));
            };
            this._bufferFragmentsThreshold = value;
        }
        override public function getRecommendation():Recommendation{
            var _local4:Number;
            var _local5:MetricValue;
            var _local6:Number;
            var _local1:Recommendation = super.getRecommendation();
            var _local2:Number = _local1.bitrate;
            var _local3:Number = _local1.confidence;
            _local1 = null;
            if (_local3 > 0){
                if (this.actualBitrateMetric == null){
                    this.actualBitrateMetric = metricRepository.getMetric(MetricType.ACTUAL_BITRATE);
                };
                if (this.availableQualityLevelsMetric == null){
                    this.availableQualityLevelsMetric = metricRepository.getMetric(MetricType.AVAILABLE_QUALITY_LEVELS);
                };
                if (this.currentStatusMetric == null){
                    this.currentStatusMetric = metricRepository.getMetric(MetricType.CURRENT_STATUS);
                };
                _local4 = RuleUtils.computeActualBitrate(this.actualBitrateMetric, this.availableQualityLevelsMetric, this.currentStatusMetric);
                if (isNaN(_local4)){
                    return (new Recommendation(RuleType.BUFFER_BANDWIDTH, 0, 0));
                };
                if (_local2 < _local4){
                    if (this.bufferFragmentsMetric == null){
                        this.bufferFragmentsMetric = metricRepository.getMetric(MetricType.BUFFER_FRAGMENTS);
                    };
                    _local5 = this.bufferFragmentsMetric.value;
                    if (_local5.valid){
                        _local6 = _local5.value;
                        if (_local6 > this._bufferFragmentsThreshold){
                            _local2 = _local4;
                        };
                    };
                };
            };
            return (new Recommendation(RuleType.BUFFER_BANDWIDTH, _local2, _local3));
        }

    }
}//package org.osmf.net.rules 
﻿package org.osmf.net.rules {
    import flash.errors.*;
    import org.osmf.net.metrics.*;

    public class RuleBase {

        protected var _metricRepository:MetricRepository;

        public function RuleBase(metricRepository:MetricRepository){
            this._metricRepository = metricRepository;
        }
        public function get metricRepository():MetricRepository{
            return (this._metricRepository);
        }
        public function getRecommendation():Recommendation{
            throw (new IllegalOperationError("The getRecommendation() method must be overridden by the derived class."));
        }

    }
}//package org.osmf.net.rules 
﻿package org.osmf.net.rules {
    import org.osmf.net.*;
    import __AS3__.vec.*;
    import org.osmf.net.metrics.*;

    public class BandwidthRule extends RuleBase {

        private var _weights:Vector.<Number>;
        private var bandwidthMetric:MetricBase;
        private var fragmentCountMetric:MetricBase;

        public function BandwidthRule(metricRepository:MetricRepository, weights:Vector.<Number>){
            super(metricRepository);
            ABRUtils.validateWeights(weights);
            this._weights = weights.slice();
        }
        public function get weights():Vector.<Number>{
            return (this._weights);
        }
        override public function getRecommendation():Recommendation{
            if (this.bandwidthMetric == null){
                this.bandwidthMetric = _metricRepository.getMetric(MetricType.BANDWIDTH, this._weights);
            };
            if (this.fragmentCountMetric == null){
                this.fragmentCountMetric = _metricRepository.getMetric(MetricType.FRAGMENT_COUNT);
            };
            if (((!(this.bandwidthMetric.value.valid)) || (!(this.fragmentCountMetric.value.valid)))){
                return (new Recommendation(RuleType.BANDWIDTH, 0, 0));
            };
            var _local1:Number = (((this.bandwidthMetric.value.value as Number) / 1000) * 8);
            var _local2:uint = (this.fragmentCountMetric.value.value as uint);
            if (_local2 > this._weights.length){
                _local2 = this._weights.length;
            };
            var _local3 = 0;
            var _local4 = 0;
            var _local5:uint;
            while (_local5 < this._weights.length) {
                _local4 = (_local4 + this._weights[_local5]);
                if (_local5 < _local2){
                    _local3 = (_local3 + this._weights[_local5]);
                };
                _local5++;
            };
            _local3 = (_local3 / _local4);
            return (new Recommendation(RuleType.BANDWIDTH, _local1, _local3));
        }

    }
}//package org.osmf.net.rules 
﻿package org.osmf.net.rules {
    import __AS3__.vec.*;
    import org.osmf.net.metrics.*;

    public class AfterUpSwitchBufferBandwidthRule extends BufferBandwidthRule {

        private var _minBandwidthToBitrateRatio:Number;
        private var upSwitchMetric:MetricBase;
        private var actualBitrateMetric:MetricBase;
        private var availableQualityLevelsMetric:MetricBase;
        private var currentStatusMetric:MetricBase;

        public function AfterUpSwitchBufferBandwidthRule(metricRepository:MetricRepository, bufferFragmentsThreshold:Number, minBandwidthToBitrateRatio:Number){
            super(metricRepository, new <Number>[1], bufferFragmentsThreshold);
            this.minBandwidthToBitrateRatio = minBandwidthToBitrateRatio;
        }
        public function get minBandwidthToBitrateRatio():Number{
            return (this._minBandwidthToBitrateRatio);
        }
        public function set minBandwidthToBitrateRatio(value:Number):void{
            if (((isNaN(value)) || ((value < 0)))){
                throw (new ArgumentError("Invalid value for minBandwidthToBitrateRatio"));
            };
            this._minBandwidthToBitrateRatio = value;
        }
        override public function getRecommendation():Recommendation{
            if (this.upSwitchMetric == null){
                this.upSwitchMetric = metricRepository.getMetric(MetricType.RECENT_SWITCH);
            };
            var _local1:MetricValue = this.upSwitchMetric.value;
            if (((!(_local1.valid)) || (((_local1.value as int) <= 0)))){
                return (new Recommendation(RuleType.AFTER_UP_SWITCH_BUFFER_BANDWIDTH, 0, 0));
            };
            var _local2:Recommendation = super.getRecommendation();
            if (_local2.confidence == 0){
                return (new Recommendation(RuleType.AFTER_UP_SWITCH_BUFFER_BANDWIDTH, 0, 0));
            };
            var _local3:Number = _local2.bitrate;
            if (this.actualBitrateMetric == null){
                this.actualBitrateMetric = metricRepository.getMetric(MetricType.ACTUAL_BITRATE);
            };
            if (this.availableQualityLevelsMetric == null){
                this.availableQualityLevelsMetric = metricRepository.getMetric(MetricType.AVAILABLE_QUALITY_LEVELS);
            };
            if (this.currentStatusMetric == null){
                this.currentStatusMetric = metricRepository.getMetric(MetricType.CURRENT_STATUS);
            };
            var _local4:Number = RuleUtils.computeActualBitrate(this.actualBitrateMetric, this.availableQualityLevelsMetric, this.currentStatusMetric);
            if (isNaN(_local4)){
                return (new Recommendation(RuleType.AFTER_UP_SWITCH_BUFFER_BANDWIDTH, 0, 0));
            };
            var _local5 = 0;
            if ((_local3 / _local4) < this.minBandwidthToBitrateRatio){
                _local5 = 1;
            };
            return (new Recommendation(RuleType.AFTER_UP_SWITCH_BUFFER_BANDWIDTH, _local3, _local5));
        }

    }
}//package org.osmf.net.rules 
﻿package org.osmf.net.dvr {
    import org.osmf.media.*;
    import org.osmf.events.*;
    import flash.events.*;
    import flash.utils.*;
    import flash.net.*;
    import org.osmf.traits.*;
    import org.osmf.utils.*;
    import flash.errors.*;
    import org.osmf.net.dvr.*;

    class DVRCastDVRTrait extends DVRTrait {

        private var connection:NetConnection;
        private var stream:NetStream;
        private var streamInfo:DVRCastStreamInfo;
        private var recordingInfo:DVRCastRecordingInfo;
        private var streamInfoUpdateTimer:Timer;
        private var streamInfoRetriever:DVRCastStreamInfoRetriever;
        private var offset:Number;

        public function DVRCastDVRTrait(connection:NetConnection, stream:NetStream, resource:MediaResourceBase){
            if (((!((connection == null))) && (!((stream == null))))){
                this.stream = stream;
                this.streamInfo = (resource.getMetadataValue(DVRCastConstants.STREAM_INFO_KEY) as DVRCastStreamInfo);
                this.recordingInfo = (resource.getMetadataValue(DVRCastConstants.RECORDING_INFO_KEY) as DVRCastRecordingInfo);
                this.streamInfoRetriever = new DVRCastStreamInfoRetriever(connection, this.streamInfo.streamName);
                this.streamInfoRetriever.addEventListener(Event.COMPLETE, this.onStreamInfoRetrieverComplete);
                this.streamInfoUpdateTimer = new Timer(DVRCastConstants.STREAM_INFO_UPDATE_DELAY);
                this.streamInfoUpdateTimer.addEventListener(TimerEvent.TIMER, this.onStreamInfoUpdateTimer);
                this.streamInfoUpdateTimer.start();
                super(this.streamInfo.isRecording);
                this.updateProperties();
            } else {
                throw (new IllegalOperationError(OSMFStrings.getString(OSMFStrings.NULL_PARAM)));
            };
        }
        override protected function isRecordingChangeStart(value:Boolean):void{
            if (value){
                this.recordingInfo.startDuration = this.streamInfo.currentLength;
                this.recordingInfo.startTime = new Date();
            };
        }
        private function updateProperties():void{
            setIsRecording(this.streamInfo.isRecording);
        }
        private function onStreamInfoUpdateTimer(event:TimerEvent):void{
            this.streamInfoRetriever.retrieve();
        }
        private function onStreamInfoRetrieverComplete(event:Event):void{
            if (this.streamInfoRetriever.streamInfo != null){
                this.streamInfo.readFromDVRCastStreamInfo(this.streamInfoRetriever.streamInfo);
                this.updateProperties();
            } else {
                dispatchEvent(new MediaErrorEvent(MediaErrorEvent.MEDIA_ERROR, false, false, new MediaError(MediaErrorCodes.DVRCAST_STREAM_INFO_RETRIEVAL_FAILED)));
            };
        }

    }
}//package org.osmf.net.dvr 
﻿package org.osmf.net.dvr {
    import org.osmf.media.*;
    import flash.net.*;

    public class DVRCastNetStream extends NetStream {

        private var recordingInfo:DVRCastRecordingInfo;

        public function DVRCastNetStream(connection:NetConnection, resource:MediaResourceBase){
            super(connection);
            this.recordingInfo = (resource.getMetadataValue(DVRCastConstants.RECORDING_INFO_KEY) as DVRCastRecordingInfo);
        }
        override public function play(... _args):void{
            super.play(_args[0], this.recordingInfo.startOffset, -1);
        }
        override public function play2(param:NetStreamPlayOptions):void{
            if (param){
                param.start = this.recordingInfo.startOffset;
                param.len = -1;
            };
            super.play2(param);
        }

    }
}//package org.osmf.net.dvr 
﻿package org.osmf.net.dvr {
    import org.osmf.media.*;
    import org.osmf.events.*;
    import flash.events.*;
    import flash.utils.*;
    import flash.net.*;
    import org.osmf.traits.*;
    import org.osmf.utils.*;
    import flash.errors.*;
    import org.osmf.net.dvr.*;

    class DVRCastTimeTrait extends TimeTrait {

        private var durationUpdateTimer:Timer;
        private var oldDuration:Number;
        private var stream:NetStream;
        private var streamInfo:DVRCastStreamInfo;
        private var recordingInfo:DVRCastRecordingInfo;

        public function DVRCastTimeTrait(connection:NetConnection, stream:NetStream, resource:MediaResourceBase){
            super(NaN);
            if ((((connection == null)) || ((stream == null)))){
                throw (new IllegalOperationError(OSMFStrings.getString(OSMFStrings.NULL_PARAM)));
            };
            this.stream = stream;
            stream.addEventListener(NetStatusEvent.NET_STATUS, this.onNetStatus);
            this.durationUpdateTimer = new Timer(DVRCastConstants.LOCAL_DURATION_UPDATE_INTERVAL);
            this.durationUpdateTimer.addEventListener(TimerEvent.TIMER, this.onDurationUpdateTimer);
            this.durationUpdateTimer.start();
            this.streamInfo = (resource.getMetadataValue(DVRCastConstants.STREAM_INFO_KEY) as DVRCastStreamInfo);
            this.recordingInfo = (resource.getMetadataValue(DVRCastConstants.RECORDING_INFO_KEY) as DVRCastRecordingInfo);
        }
        override public function get duration():Number{
            var _local1:Number;
            if (this.streamInfo.isRecording){
                _local1 = ((this.recordingInfo.startDuration - this.recordingInfo.startOffset) + ((new Date().time - this.recordingInfo.startTime.time) / 1000));
            } else {
                _local1 = (this.streamInfo.currentLength - this.recordingInfo.startOffset);
            };
            _local1 = ((isNaN(_local1)) ? NaN : Math.max(0, _local1));
            return (_local1);
        }
        override public function get currentTime():Number{
            return (this.stream.time);
        }
        private function onDurationUpdateTimer(event:TimerEvent):void{
            var _local2:Number = this.duration;
            if (_local2 != this.oldDuration){
                this.oldDuration = _local2;
                dispatchEvent(new TimeEvent(TimeEvent.DURATION_CHANGE, false, false, _local2));
            };
        }
        private function onNetStatus(event:NetStatusEvent):void{
            if (event.info.code == "NetStream.Play.Stop"){
                if (this.durationUpdateTimer){
                    this.durationUpdateTimer.stop();
                };
                signalComplete();
            };
        }

    }
}//package org.osmf.net.dvr 
﻿package org.osmf.net.dvr {
    import org.osmf.utils.*;
    import flash.errors.*;

    public class DVRCastStreamInfo {

        public var callTime:Date;
        public var offline:Boolean;
        public var beginOffset:Number;
        public var endOffset:Number;
        public var windowDuration:Number;
        public var recordingStart:Date;
        public var recordingEnd:Date;
        public var isRecording:Boolean;
        public var streamName:String;
        public var lastUpdate:Date;
        public var currentLength:Number;
        public var maxLength:Number;

        public function DVRCastStreamInfo(value:Object):void{
            this.readFromDynamicObject(value);
        }
        public function readFromDynamicObject(value:Object):void{
            var value:* = value;
            try {
                this.callTime = value.callTime;
                this.offline = value.offline;
                this.beginOffset = value.begOffset;
                this.endOffset = value.endOffset;
                this.windowDuration = value.windowDuration;
                this.recordingStart = value.startRec;
                this.recordingEnd = value.stopRec;
                this.isRecording = value.isRec;
                this.streamName = value.streamName;
                this.lastUpdate = value.lastUpdate;
                this.currentLength = value.currLen;
                this.maxLength = value.maxLen;
            } catch(e:Error) {
                throw (new IllegalOperationError(OSMFStrings.getString(OSMFStrings.INVALID_PARAM)));
            };
        }
        public function readFromDVRCastStreamInfo(value:DVRCastStreamInfo):void{
            var value:* = value;
            try {
                this.callTime = value.callTime;
                this.offline = value.offline;
                this.beginOffset = value.beginOffset;
                this.endOffset = value.endOffset;
                this.windowDuration = value.windowDuration;
                this.recordingStart = value.recordingStart;
                this.recordingEnd = value.recordingEnd;
                this.isRecording = value.isRecording;
                this.streamName = value.streamName;
                this.lastUpdate = value.lastUpdate;
                this.currentLength = value.currentLength;
                this.maxLength = value.maxLength;
            } catch(e:Error) {
                throw (new IllegalOperationError(OSMFStrings.getString(OSMFStrings.INVALID_PARAM)));
            };
        }
        public function toString():String{
            return (((((((((((((((((((((((("callTime: " + this.callTime) + "\noffline: ") + this.offline) + "\nbeginOffset: ") + this.beginOffset) + "\nendOffset: ") + this.endOffset) + "\nwindowDuration: ") + this.windowDuration) + "\nrecordingStart: ") + this.recordingStart) + "\nrecordingEnd: ") + this.recordingEnd) + "\nisRecording: ") + this.isRecording) + "\nstreamName: ") + this.streamName) + "\nlastUpdate: ") + this.lastUpdate) + "\ncurrentLength: ") + this.currentLength) + "\nmaxLength: ") + this.maxLength));
        }

    }
}//package org.osmf.net.dvr 
﻿package org.osmf.net.dvr {
    import org.osmf.media.*;
    import flash.net.*;
    import org.osmf.traits.*;
    import org.osmf.net.*;
    import org.osmf.net.rtmpstreaming.*;

    public class DVRCastNetLoader extends RTMPDynamicStreamingNetLoader {

        public function DVRCastNetLoader(factory:DVRCastNetConnectionFactory=null){
            if (factory == null){
                factory = new DVRCastNetConnectionFactory();
            };
            super(factory);
        }
        override public function canHandleResource(resource:MediaResourceBase):Boolean{
            var _local2:Boolean;
            var _local3:StreamingURLResource;
            if (super.canHandleResource(resource)){
                _local3 = (resource as StreamingURLResource);
                if (_local3 != null){
                    _local2 = (((_local3.streamType == StreamType.DVR)) && (NetStreamUtils.isRTMPStream(_local3.url)));
                };
            };
            return (_local2);
        }
        override protected function createNetStream(connection:NetConnection, resource:URLResource):NetStream{
            return (new DVRCastNetStream(connection, resource));
        }
        override protected function processFinishLoading(loadTrait:NetStreamLoadTrait):void{
            loadTrait.setTrait(new DVRCastDVRTrait(loadTrait.connection, loadTrait.netStream, loadTrait.resource));
            loadTrait.setTrait(new DVRCastTimeTrait(loadTrait.connection, loadTrait.netStream, loadTrait.resource));
            updateLoadTrait(loadTrait, LoadState.READY);
        }

    }
}//package org.osmf.net.dvr 
﻿package org.osmf.net.dvr {
    import org.osmf.media.*;
    import org.osmf.events.*;
    import flash.events.*;
    import flash.utils.*;
    import flash.net.*;
    import org.osmf.net.*;
    import __AS3__.vec.*;

    public class DVRCastNetConnectionFactory extends NetConnectionFactoryBase {

        private var innerFactory:NetConnectionFactoryBase;
        private var subscribedStreams:Dictionary;

        public function DVRCastNetConnectionFactory(factory:NetConnectionFactoryBase=null){
            this.subscribedStreams = new Dictionary();
            this.innerFactory = ((factory) || (new NetConnectionFactory()));
            this.innerFactory.addEventListener(NetConnectionFactoryEvent.CREATION_COMPLETE, this.onCreationComplete);
            this.innerFactory.addEventListener(NetConnectionFactoryEvent.CREATION_ERROR, this.onCreationError);
            super();
        }
        override public function create(resource:URLResource):void{
            this.innerFactory.create(resource);
        }
        override public function closeNetConnection(netConnection:NetConnection):void{
            var _local2:String = this.subscribedStreams[netConnection];
            if (_local2 != null){
                netConnection.call(DVRCastConstants.RPC_UNSUBSCRIBE, null, _local2);
                delete this.subscribedStreams[netConnection];
            };
            this.innerFactory.closeNetConnection(netConnection);
        }
        private function onCreationComplete(event:NetConnectionFactoryEvent):void{
            var urlResource:* = null;
            var netConnection:* = null;
            var streamNames:* = null;
            var totalRpcSubscribeInvocation:* = 0;
            var streamingResource:* = null;
            var onStreamSubscriptionResult:* = null;
            var onStreamInfoRetrieverComplete:* = null;
            var onServerCallError:* = null;
            var items:* = null;
            var i:* = 0;
            var event:* = event;
            onStreamSubscriptionResult = function (result:Object):void{
                var _local2:DVRCastStreamInfoRetriever;
                totalRpcSubscribeInvocation--;
                if (totalRpcSubscribeInvocation <= 0){
                    _local2 = new DVRCastStreamInfoRetriever(netConnection, streamNames[0]);
                    _local2.addEventListener(Event.COMPLETE, onStreamInfoRetrieverComplete);
                    _local2.retrieve();
                };
            };
            onStreamInfoRetrieverComplete = function (event:Event):void{
                var _local3:DVRCastRecordingInfo;
                var _local2:DVRCastStreamInfoRetriever = (event.target as DVRCastStreamInfoRetriever);
                removeEventListener(NetConnectionFactoryEvent.CREATION_COMPLETE, onCreationComplete);
                if (_local2.streamInfo != null){
                    if (_local2.streamInfo.offline == true){
                        dispatchEvent(new NetConnectionFactoryEvent(NetConnectionFactoryEvent.CREATION_ERROR, false, false, netConnection, urlResource, new MediaError(MediaErrorCodes.DVRCAST_CONTENT_OFFLINE)));
                        i = 0;
                        while (i < streamNames.length) {
                            netConnection.call(DVRCastConstants.RPC_UNSUBSCRIBE, null, streamNames[i]);
                            i++;
                        };
                        netConnection = null;
                    } else {
                        _local3 = new DVRCastRecordingInfo();
                        _local3.startDuration = _local2.streamInfo.currentLength;
                        _local3.startOffset = calculateOffset(_local2.streamInfo);
                        _local3.startTime = new Date();
                        streamingResource.addMetadataValue(DVRCastConstants.STREAM_INFO_KEY, _local2.streamInfo);
                        streamingResource.addMetadataValue(DVRCastConstants.RECORDING_INFO_KEY, _local3);
                        subscribedStreams[netConnection] = streamNames[0];
                        dispatchEvent(new NetConnectionFactoryEvent(NetConnectionFactoryEvent.CREATION_COMPLETE, false, false, netConnection, urlResource));
                    };
                } else {
                    onServerCallError(_local2.error);
                };
            };
            onServerCallError = function (error:Object):void{
                dispatchEvent(new NetConnectionFactoryEvent(NetConnectionFactoryEvent.CREATION_ERROR, false, false, netConnection, urlResource, new MediaError(MediaErrorCodes.DVRCAST_SUBSCRIBE_FAILED, ((error) ? error.message : ""))));
            };
            urlResource = (event.resource as URLResource);
            netConnection = event.netConnection;
            streamNames = new Vector.<String>();
            totalRpcSubscribeInvocation = 0;
            event.stopImmediatePropagation();
            streamingResource = (urlResource as StreamingURLResource);
            var urlIncludesFMSApplicationInstance:* = ((streamingResource) ? streamingResource.urlIncludesFMSApplicationInstance : false);
            var dynamicResource:* = (streamingResource as DynamicStreamingResource);
            if (dynamicResource != null){
                items = dynamicResource.streamItems;
                totalRpcSubscribeInvocation = items.length;
                i = 0;
                while (i < items.length) {
                    streamNames.push(items[i].streamName);
                    i = (i + 1);
                };
            } else {
                totalRpcSubscribeInvocation = 1;
                streamNames.push(NetStreamUtils.getStreamNameFromURL(urlResource.url, urlIncludesFMSApplicationInstance));
            };
            var responder:* = new TestableResponder(onStreamSubscriptionResult, onServerCallError);
            i = 0;
            while (i < streamNames.length) {
                event.netConnection.call(DVRCastConstants.RPC_SUBSCRIBE, responder, streamNames[i]);
                i = (i + 1);
            };
        }
        private function onCreationError(event:NetConnectionFactoryEvent):void{
            dispatchEvent(event.clone());
        }
        private function calculateOffset(streamInfo:DVRCastStreamInfo):Number{
            return (DVRUtils.calculateOffset(streamInfo.beginOffset, streamInfo.endOffset, streamInfo.currentLength));
        }

    }
}//package org.osmf.net.dvr 
﻿package org.osmf.net.dvr {

    public class DVRUtils {

        public static function calculateOffset(beginOffset:Number, endOffset:Number, currentDuration:Number):Number{
            var _local4 = 0;
            if (endOffset != 0){
                if (currentDuration > endOffset){
                    _local4 = (currentDuration - endOffset);
                } else {
                    _local4 = Math.min(beginOffset, currentDuration);
                };
            } else {
                if (beginOffset != 0){
                    _local4 = Math.min(beginOffset, currentDuration);
                };
            };
            return (_local4);
        }

    }
}//package org.osmf.net.dvr 
﻿package org.osmf.net.dvr {

    public class DVRCastConstants {

        public static const RPC_GET_STREAM_INFO:String = "DVRGetStreamInfo";
        public static const RPC_SUBSCRIBE:String = "DVRSubscribe";
        public static const RPC_UNSUBSCRIBE:String = "DVRUnsubscribe";
        public static const RESULT_GET_STREAM_INFO_SUCCESS:String = "NetStream.DVRStreamInfo.Success";
        public static const RESULT_GET_STREAM_INFO_RETRY:String = "NetStream.DVRStreamInfo.Retry";
        public static const STREAM_INFO_KEY:String = "http://www.osmf.org/dvrCast/1.0/streamInfo";
        public static const RECORDING_INFO_KEY:String = "http://www.osmf.org/dvrCast/1.0/recordingInfo";
        public static const STREAM_INFO_UPDATE_DELAY:Number = 3000;
        public static const LOCAL_DURATION_UPDATE_INTERVAL:Number = 500;
        public static const LIVE_POSITION_SEEK_DELAY:Number = 1.5;

    }
}//package org.osmf.net.dvr 
﻿package org.osmf.net.dvr {
    import flash.events.*;
    import flash.utils.*;
    import flash.net.*;
    import org.osmf.utils.*;
    import flash.errors.*;
    import org.osmf.net.dvr.*;

    class DVRCastStreamInfoRetriever extends EventDispatcher {

        private var connection:NetConnection;
        private var streamName:String;
        private var retries:Number;
        private var timer:Timer;
        private var _streamInfo:DVRCastStreamInfo;
        private var _error:Object;

        public function DVRCastStreamInfoRetriever(connection:NetConnection, streamName:String){
            if ((((connection == null)) || ((streamName == null)))){
                throw (new IllegalOperationError(OSMFStrings.getString(OSMFStrings.NULL_PARAM)));
            };
            this.connection = connection;
            this.streamName = streamName;
        }
        public function get streamInfo():DVRCastStreamInfo{
            return (this._streamInfo);
        }
        public function get error():Object{
            return (this._error);
        }
        public function retrieve(retries:int=5, timeOut:Number=3):void{
            if (isNaN(this.retries)){
                retries = ((retries) || (1));
                this._streamInfo = null;
                this._error = (this._error = {message:OSMFStrings.getString(OSMFStrings.DVR_MAXIMUM_RPC_ATTEMPTS).replace("%i", retries)});
                this.retries = retries;
                this.timer = new Timer((timeOut * 1000), 1);
                this.getStreamInfo();
            };
        }
        private function getStreamInfo():void{
            var _local1:Responder = new TestableResponder(this.onGetStreamInfoResult, this.onServerCallError);
            this.retries--;
            this.connection.call(DVRCastConstants.RPC_GET_STREAM_INFO, _local1, this.streamName);
        }
        private function onGetStreamInfoResult(result:Object):void{
            if (((result) && ((result.code == DVRCastConstants.RESULT_GET_STREAM_INFO_SUCCESS)))){
                this._error = null;
                this._streamInfo = new DVRCastStreamInfo(result.data);
                this.complete();
            } else {
                if (((result) && ((result.code == DVRCastConstants.RESULT_GET_STREAM_INFO_RETRY)))){
                    if (this.retries != 0){
                        this.timer.addEventListener(TimerEvent.TIMER_COMPLETE, this.onTimerComplete);
                        this.timer.start();
                    } else {
                        this.complete();
                    };
                } else {
                    this._error = {message:(OSMFStrings.getString(OSMFStrings.DVR_UNEXPECTED_SERVER_RESPONSE) + result.code)};
                    this.complete();
                };
            };
        }
        private function onServerCallError(error:Object):void{
            this._error = error;
            this.complete();
        }
        private function onTimerComplete(event:TimerEvent):void{
            this.timer.removeEventListener(TimerEvent.TIMER_COMPLETE, this.onTimerComplete);
            this.getStreamInfo();
        }
        private function complete():void{
            this.retries = NaN;
            this.timer = null;
            dispatchEvent(new Event(Event.COMPLETE));
        }

    }
}//package org.osmf.net.dvr 
﻿package org.osmf.net.dvr {

    public class DVRCastRecordingInfo {

        public var startTime:Date = null;
        public var startDuration:Number;
        public var startOffset:Number;

    }
}//package org.osmf.net.dvr 
﻿package org.osmf.net.dvr {
    import flash.net.*;

    class TestableResponder extends Responder {

        private var _result:Function;
        private var _status:Function;

        public function TestableResponder(result:Function, status:Function=null){
            this._result = result;
            this._status = status;
            super(result, status);
        }
        function get result():Function{
            return (this._result);
        }
        function get status():Function{
            return (this._status);
        }

    }
}//package org.osmf.net.dvr 
﻿package org.osmf.net {
    import org.osmf.media.*;
    import flash.events.*;
    import flash.net.*;
    import org.osmf.traits.*;

    public class NetStreamTimeTrait extends TimeTrait {

        private var durationOffset:Number = 0;
        private var _audioDelay:Number = 0;
        private var netStream:NetStream;
        private var resource:MediaResourceBase;
        private var multicast:Boolean = false;

        public function NetStreamTimeTrait(netStream:NetStream, resource:MediaResourceBase, defaultDuration:Number=NaN){
            this.netStream = netStream;
            NetClient(netStream.client).addHandler(NetStreamCodes.ON_META_DATA, this.onMetaData);
            NetClient(netStream.client).addHandler(NetStreamCodes.ON_PLAY_STATUS, this.onPlayStatus);
            netStream.addEventListener(NetStatusEvent.NET_STATUS, this.onNetStatus, false, 0, true);
            this.resource = resource;
            if (isNaN(defaultDuration) == false){
                setDuration(defaultDuration);
            };
            var _local4:MulticastResource = (resource as MulticastResource);
            if (((((!((_local4 == null))) && (!((_local4.groupspec == null))))) && ((_local4.groupspec.length > 0)))){
                this.multicast = true;
                setDuration(Number.MAX_VALUE);
            };
        }
        override public function get currentTime():Number{
            if (this.multicast){
                return (0);
            };
            if (this.durationOffset == (duration - (this.netStream.time - this._audioDelay))){
                return (((this.netStream.time - this._audioDelay) + this.durationOffset));
            };
            return ((this.netStream.time - this._audioDelay));
        }
        private function onMetaData(value:Object):void{
            var _local2:Object = NetStreamUtils.getPlayArgsForResource(this.resource);
            this._audioDelay = ((value.hasOwnProperty("audiodelay")) ? value.audiodelay : 0);
            var _local3:Number = Math.max(0, _local2.start);
            var _local4:Number = _local2.len;
            if (_local4 == NetStreamUtils.PLAY_LEN_ARG_ALL){
                _local4 = Number.MAX_VALUE;
            };
            setDuration(Math.min(((value.duration - this._audioDelay) - _local3), _local4));
        }
        private function onPlayStatus(event:Object):void{
            switch (event.code){
                case NetStreamCodes.NETSTREAM_PLAY_COMPLETE:
                    this.signalComplete();
            };
        }
        private function onNetStatus(event:NetStatusEvent):void{
            switch (event.info.code){
                case NetStreamCodes.NETSTREAM_PLAY_STOP:
                    if (NetStreamUtils.isStreamingResource(this.resource) == false){
                        this.signalComplete();
                    };
                    break;
                case NetStreamCodes.NETSTREAM_PLAY_UNPUBLISH_NOTIFY:
                    this.signalComplete();
                    break;
            };
        }
        override protected function signalComplete():void{
            if ((this.netStream.time - this._audioDelay) != duration){
                this.durationOffset = (duration - (this.netStream.time - this._audioDelay));
            };
            super.signalComplete();
        }
        function get audioDelay():Number{
            return (this._audioDelay);
        }

    }
}//package org.osmf.net 
﻿package org.osmf.net.drm {
    import org.osmf.events.*;
    import flash.events.*;
    import flash.system.*;
    import org.osmf.traits.*;

    public class NetStreamDRMTrait extends DRMTrait {

        private var drmServices:DRMServices;

        public function NetStreamDRMTrait(){
            this.drmServices = new DRMServices();
            super();
            this.drmServices.addEventListener(DRMEvent.DRM_STATE_CHANGE, this.onStateChange);
        }
        public function set drmMetadata(value:Object):void{
            if (value != this.drmServices.drmMetadata){
                this.drmServices.drmMetadata = value;
            };
        }
        public function get drmMetadata():Object{
            return (this.drmServices.drmMetadata);
        }
        public function update(type:String):SystemUpdater{
            return (this.drmServices.update(type));
        }
        override public function authenticate(username:String=null, password:String=null):void{
            this.drmServices.authenticate(username, password);
        }
        override public function authenticateWithToken(token:Object):void{
            this.drmServices.authenticateWithToken(token);
        }
        public function inlineDRMFailed(error:MediaError):void{
            this.drmServices.inlineDRMFailed(error);
        }
        public function inlineOnVoucher(event:DRMStatusEvent):void{
            this.drmServices.inlineOnVoucher(event);
        }
        private function onStateChange(event:DRMEvent):void{
            setPeriod(event.period);
            setStartDate(event.startDate);
            setEndDate(event.endDate);
            setDrmState(event.drmState);
            dispatchEvent(new DRMEvent(DRMEvent.DRM_STATE_CHANGE, drmState, false, false, startDate, endDate, period, event.serverURL, event.token, event.mediaError));
        }

    }
}//package org.osmf.net.drm 
﻿package org.osmf.net.drm {
    import org.osmf.events.*;
    import flash.events.*;
    import flash.utils.*;
    import flash.system.*;
    import org.osmf.traits.*;
    import org.osmf.utils.*;
    import flash.errors.*;
    import org.osmf.net.drm.*;
    import flash.net.drm.*;

    class DRMServices extends EventDispatcher {

        private static const DRM_AUTHENTICATION_FAILED:int = 3301;
        private static const DRM_NEEDS_AUTHENTICATION:int = 3330;
        private static const DRM_CONTENT_NOT_YET_VALID:int = 3331;
        private static const DRM_IS_INCOGNITO_MODE:int = 3365;

        private static var updater:SystemUpdater;

        private var _drmState:String = "uninitialized";
        private var lastToken:ByteArray;
        private var drmContentData:DRMContentData;
        private var voucher:DRMVoucher;
        private var drmManager:DRMManager;

        public function DRMServices(){
            this.drmManager = DRMManager.getDRMManager();
        }
        public static function convertToken(token:Object):ByteArray{
            var _local3:String;
            var _local2:ByteArray;
            if (token != null){
                _local2 = (token as ByteArray);
                if (_local2 == null){
                    _local3 = token.toString();
                    if (((!((_local3 == null))) && ((_local3.length > 0)))){
                        _local2 = new ByteArray();
                        _local2.writeUTFBytes(_local3);
                        _local2.position = 0;
                    };
                };
            };
            return (_local2);
        }

        public function get drmState():String{
            return (this._drmState);
        }
        public function set drmMetadata(value:Object):void{
            var onComplete:* = null;
            var value:* = value;
            this.lastToken = null;
            if ((value is DRMContentData)){
                this.drmContentData = (value as DRMContentData);
                this.retrieveVoucher();
            } else {
                try {
                    this.drmContentData = new DRMContentData((value as ByteArray));
                    this.retrieveVoucher();
                } catch(argError:ArgumentError) {
                    updateDRMState(DRMState.AUTHENTICATION_ERROR, new MediaError(argError.errorID, "DRMContentData invalid"));
                } catch(error:IllegalOperationError) {
                    onComplete = function (event:Event):void{
                        updater.removeEventListener(Event.COMPLETE, onComplete);
                        drmMetadata = value;
                    };
                    update(SystemUpdaterType.DRM);
                    updater.addEventListener(Event.COMPLETE, onComplete);
                };
            };
        }
        public function get drmMetadata():Object{
            return (this.drmContentData);
        }
        public function authenticate(username:String=null, password:String=null):void{
            if (this.drmContentData == null){
                throw (new IllegalOperationError(OSMFStrings.getString(OSMFStrings.DRM_METADATA_NOT_SET)));
            };
            this.drmManager.addEventListener(DRMAuthenticationErrorEvent.AUTHENTICATION_ERROR, this.authError);
            this.drmManager.addEventListener(DRMAuthenticationCompleteEvent.AUTHENTICATION_COMPLETE, this.authComplete);
            if ((((password == null)) && ((username == null)))){
                this.retrieveVoucher();
            } else {
                this.drmManager.authenticate(this.drmContentData.serverURL, this.drmContentData.domain, username, password);
            };
        }
        public function authenticateWithToken(token:Object):void{
            if (this.drmContentData == null){
                throw (new IllegalOperationError(OSMFStrings.getString(OSMFStrings.DRM_METADATA_NOT_SET)));
            };
            this.drmManager.setAuthenticationToken(this.drmContentData.serverURL, this.drmContentData.domain, convertToken(token));
            this.retrieveVoucher();
        }
        public function get startDate():Date{
            if (this.voucher != null){
                return (((this.voucher.playbackTimeWindow) ? this.voucher.playbackTimeWindow.startDate : this.voucher.voucherStartDate));
            };
            return (null);
        }
        public function get endDate():Date{
            if (this.voucher != null){
                return (((this.voucher.playbackTimeWindow) ? this.voucher.playbackTimeWindow.endDate : this.voucher.voucherEndDate));
            };
            return (null);
        }
        public function get period():Number{
            if (this.voucher != null){
                return (((this.voucher.playbackTimeWindow) ? this.voucher.playbackTimeWindow.period : ((((this.voucher.voucherEndDate) && (this.voucher.voucherStartDate))) ? ((this.voucher.voucherEndDate.time - this.voucher.voucherStartDate.time) / 1000) : 0)));
            };
            return (NaN);
        }
        public function inlineDRMFailed(error:MediaError):void{
            this.updateDRMState(DRMState.AUTHENTICATION_ERROR, error);
        }
        public function inlineOnVoucher(event:DRMStatusEvent):void{
            this.drmContentData = event.contentData;
            this.onVoucherLoaded(event);
        }
        public function update(type:String):SystemUpdater{
            this.updateDRMState(DRMState.DRM_SYSTEM_UPDATING);
            if (updater == null){
                updater = new SystemUpdater();
                this.toggleErrorListeners(updater, true);
                updater.update(type);
            } else {
                this.toggleErrorListeners(updater, true);
            };
            return (updater);
        }
        private function retrieveVoucher():void{
            this.updateDRMState(DRMState.AUTHENTICATING);
            this.drmManager.addEventListener(DRMErrorEvent.DRM_ERROR, this.onDRMError);
            this.drmManager.addEventListener(DRMStatusEvent.DRM_STATUS, this.onVoucherLoaded);
            this.drmManager.loadVoucher(this.drmContentData, LoadVoucherSetting.ALLOW_SERVER);
        }
        private function onVoucherLoaded(event:DRMStatusEvent):void{
            var _local2:Date;
            if (event.contentData == this.drmContentData){
                _local2 = new Date();
                if (((event.voucher) && ((((((event.voucher.voucherEndDate == null)) || ((event.voucher.voucherEndDate.time >= _local2.time)))) && ((((event.voucher.voucherStartDate == null)) || ((event.voucher.voucherStartDate.time <= _local2.time)))))))){
                    this.voucher = event.voucher;
                    this.removeEventListeners();
                    if (this.voucher.playbackTimeWindow == null){
                        this.updateDRMState(DRMState.AUTHENTICATION_COMPLETE, null, this.voucher.voucherStartDate, this.voucher.voucherEndDate, this.period, this.lastToken);
                    } else {
                        this.updateDRMState(DRMState.AUTHENTICATION_COMPLETE, null, this.voucher.playbackTimeWindow.startDate, this.voucher.playbackTimeWindow.endDate, this.voucher.playbackTimeWindow.period, this.lastToken);
                    };
                } else {
                    this.forceRefreshVoucher();
                };
            };
        }
        private function forceRefreshVoucher():void{
            this.drmManager.loadVoucher(this.drmContentData, LoadVoucherSetting.FORCE_REFRESH);
        }
        private function onDRMError(event:DRMErrorEvent):void{
            switch (event.errorID){
                case 3365:
                case 3322:
                case 3466:
                    try {
                        if (this.drmManager.hasOwnProperty("resetDRMVouchers")){
                            var _local2 = this.drmManager;
                            _local2["resetDRMVouchers"]();
                        };
                    } catch(e:Error) {
                    };
                    if (event.errorID == 3322){
                        throw (new Error("http://helpx.adobe.com/adobe-access/kb/error-3321.html", -3322));
                    };
                    if (event.errorID == 3365){
                        throw (new Error("Detected incognito mode for DRM", -3365));
                    };
                    break;
            };
            if (event.contentData == this.drmContentData){
                switch (event.errorID){
                    case DRM_CONTENT_NOT_YET_VALID:
                        this.forceRefreshVoucher();
                        break;
                    case DRM_NEEDS_AUTHENTICATION:
                        this.updateDRMState(DRMState.AUTHENTICATION_NEEDED, null, null, null, 0, null, event.contentData.serverURL);
                        break;
                        this.removeEventListeners();
                        this.updateDRMState(DRMState.AUTHENTICATION_ERROR, new MediaError(event.errorID, event.text));
                };
            };
        }
        private function removeEventListeners():void{
            this.drmManager.removeEventListener(DRMErrorEvent.DRM_ERROR, this.onDRMError);
            this.drmManager.removeEventListener(DRMStatusEvent.DRM_STATUS, this.onVoucherLoaded);
        }
        private function authComplete(event:DRMAuthenticationCompleteEvent):void{
            this.drmManager.removeEventListener(DRMAuthenticationErrorEvent.AUTHENTICATION_ERROR, this.authError);
            this.drmManager.removeEventListener(DRMAuthenticationCompleteEvent.AUTHENTICATION_COMPLETE, this.authComplete);
            this.lastToken = event.token;
            this.retrieveVoucher();
        }
        private function authError(event:DRMAuthenticationErrorEvent):void{
            this.drmManager.removeEventListener(DRMAuthenticationErrorEvent.AUTHENTICATION_ERROR, this.authError);
            this.drmManager.removeEventListener(DRMAuthenticationCompleteEvent.AUTHENTICATION_COMPLETE, this.authComplete);
            this.updateDRMState(DRMState.AUTHENTICATION_ERROR, new MediaError(event.errorID, event.toString()));
        }
        private function toggleErrorListeners(updater:SystemUpdater, on:Boolean):void{
            if (on){
                updater.addEventListener(Event.COMPLETE, this.onUpdateComplete);
                updater.addEventListener(Event.CANCEL, this.onUpdateComplete);
                updater.addEventListener(IOErrorEvent.IO_ERROR, this.onUpdateError);
                updater.addEventListener(SecurityErrorEvent.SECURITY_ERROR, this.onUpdateError);
                updater.addEventListener(StatusEvent.STATUS, this.onUpdateError);
            } else {
                updater.removeEventListener(Event.COMPLETE, this.onUpdateComplete);
                updater.removeEventListener(Event.CANCEL, this.onUpdateComplete);
                updater.removeEventListener(IOErrorEvent.IO_ERROR, this.onUpdateError);
                updater.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, this.onUpdateError);
                updater.removeEventListener(StatusEvent.STATUS, this.onUpdateError);
            };
        }
        private function onUpdateComplete(event:Event):void{
            this.toggleErrorListeners(updater, false);
        }
        private function onUpdateError(event:Event):void{
            this.toggleErrorListeners(updater, false);
            this.updateDRMState(DRMState.AUTHENTICATION_ERROR, new MediaError(MediaErrorCodes.DRM_SYSTEM_UPDATE_ERROR, event.toString()));
        }
        private function updateDRMState(newState:String, error:MediaError=null, start:Date=null, end:Date=null, period:Number=0, token:Object=null, prompt:String=null):void{
            this._drmState = newState;
            dispatchEvent(new DRMEvent(DRMEvent.DRM_STATE_CHANGE, newState, false, false, start, end, period, prompt, token, error));
        }

    }
}//package org.osmf.net.drm 
﻿package org.osmf.net {
    import flash.display.*;
    import flash.events.*;
    import flash.net.*;
    import org.osmf.traits.*;
    import org.osmf.media.videoClasses.*;

    public class NetStreamDisplayObjectTrait extends DisplayObjectTrait {

        private var videoSurface:VideoSurface;
        private var netStream:NetStream;

        public function NetStreamDisplayObjectTrait(netStream:NetStream, videoSurface:DisplayObject, mediaWidth:Number=0, mediaHeight:Number=0){
            super(videoSurface, mediaWidth, mediaHeight);
            this.netStream = netStream;
            this.videoSurface = (videoSurface as VideoSurface);
            NetClient(netStream.client).addHandler(NetStreamCodes.ON_META_DATA, this.onMetaData);
            if ((this.videoSurface is VideoSurface)){
                this.videoSurface.addEventListener(Event.ADDED_TO_STAGE, this.onStage);
            };
        }
        private function onStage(event:Event):void{
            this.videoSurface.removeEventListener(Event.ADDED_TO_STAGE, this.onStage);
            this.videoSurface.addEventListener(Event.ENTER_FRAME, this.onFrame);
        }
        private function onFrame(event:Event):void{
            if (((!((this.videoSurface.videoWidth == 0))) && (!((this.videoSurface.videoHeight == 0))))){
                if (((!((this.videoSurface.videoWidth == mediaWidth))) && (!((this.videoSurface.videoHeight == mediaHeight))))){
                    this.newMediaSize(this.videoSurface.videoWidth, this.videoSurface.videoHeight);
                };
                this.videoSurface.removeEventListener(Event.ENTER_FRAME, this.onFrame);
            };
        }
        private function onMetaData(info:Object):void{
            if (((((!(isNaN(info.width))) && (!(isNaN(info.height))))) && (((!((info.width == mediaWidth))) || (!((info.height == mediaHeight))))))){
                this.newMediaSize(info.width, info.height);
            };
        }
        private function newMediaSize(width:Number, height:Number):void{
            if (((((!((this.videoSurface == null))) && ((this.videoSurface.width == 0)))) && ((this.videoSurface.height == 0)))){
                this.videoSurface.width = width;
                this.videoSurface.height = height;
            };
            setMediaSize(width, height);
        }

    }
}//package org.osmf.net 
﻿package org.osmf.net {
    import flash.events.*;
    import flash.utils.*;
    import flash.net.*;
    import __AS3__.vec.*;
    import org.osmf.net.qos.*;

    public class NetStreamPlaybackDetailsRecorder {

        private static const DFPS_AFTER_TRANSITION_IGNORE_TIME:Number = 2000;

        private var _playingIndex:uint;
        private var netStream:NetStream;
        private var lastDroppedFrames:Number;
        private var lastNetStreamTime:Number;
        private var lastTransitionTime:Number = -INF;
        private var resource:DynamicStreamingResource;
        private var playbackDetailsRecord:Vector.<PlaybackDetails>;
        private var timer:Timer;
        private var seeking:Boolean = false;

        public function NetStreamPlaybackDetailsRecorder(netStream:NetStream, netClient:NetClient, resource:DynamicStreamingResource){
            this.netStream = netStream;
            this.resource = resource;
            this._playingIndex = Math.max(resource.initialIndex, 0);
            this.resetRecord();
            this.timer = new Timer(DFPS_AFTER_TRANSITION_IGNORE_TIME, 1);
            this.timer.addEventListener(TimerEvent.TIMER, this.onTimer);
            netStream.addEventListener(NetStatusEvent.NET_STATUS, this.onNetStatus);
            netClient.addHandler("onPlayStatus", this.onPlayStatus);
        }
        public function computeAndGetRecord():Vector.<PlaybackDetails>{
            if (!this.seeking){
                this.performComputation();
            };
            var _local1:Vector.<PlaybackDetails> = this.playbackDetailsRecord.slice();
            this.resetRecord();
            return (_local1);
        }
        public function get playingIndex():uint{
            return (this._playingIndex);
        }
        public function resetRecord():void{
            this.playbackDetailsRecord = new Vector.<PlaybackDetails>();
            this.lastNetStreamTime = this.netStream.time;
            this.lastDroppedFrames = this.netStream.info.droppedFrames;
        }
        private function onTimer(event:TimerEvent):void{
            this.timer.reset();
            this.lastDroppedFrames = this.netStream.info.droppedFrames;
        }
        private function performComputation():void{
            var _local6:PlaybackDetails;
            var _local7:PlaybackDetails;
            var _local1:Number = this.netStream.time;
            var _local2:Number = this.netStream.info.droppedFrames;
            if ((getTimer() - this.lastTransitionTime) < DFPS_AFTER_TRANSITION_IGNORE_TIME){
                this.lastDroppedFrames = _local2;
            };
            var _local3:Number = (_local1 - this.lastNetStreamTime);
            var _local4:Number = (_local2 - this.lastDroppedFrames);
            var _local5:Boolean;
            for each (_local6 in this.playbackDetailsRecord) {
                if (_local6.index == this._playingIndex){
                    _local5 = true;
                    _local6.duration = (_local6.duration + _local3);
                    _local6.droppedFrames = (_local6.droppedFrames + _local4);
                    break;
                };
            };
            if (!_local5){
                _local7 = new PlaybackDetails(this._playingIndex, _local3, _local4);
                this.playbackDetailsRecord.push(_local7);
            };
            this.lastNetStreamTime = _local1;
            this.lastDroppedFrames = _local2;
        }
        private function onNetStatus(event:NetStatusEvent):void{
            switch (event.info.code){
                case NetStreamCodes.NETSTREAM_SEEK_START:
                    this.performComputation();
                    this.seeking = true;
                    break;
                case NetStreamCodes.NETSTREAM_SEEK_NOTIFY:
                    this.resetRecord();
                    this.seeking = false;
                    break;
                case NetStreamCodes.NETSTREAM_PLAY_STOP:
                    this.resetRecord();
                    break;
            };
        }
        private function onPlayStatus(info:Object):void{
            var _local2:int;
            switch (info.code){
                case NetStreamCodes.NETSTREAM_PLAY_TRANSITION_COMPLETE:
                    _local2 = this.resource.indexFromName(info.details);
                    if (_local2 >= 0){
                        if (!this.seeking){
                            this.performComputation();
                        };
                        this._playingIndex = _local2;
                        this.timer.start();
                        this.lastTransitionTime = getTimer();
                    };
                    break;
            };
        }

    }
}//package org.osmf.net 
﻿package org.osmf.net {
    import flash.events.*;
    import flash.net.*;
    import org.osmf.traits.*;
    import org.osmf.media.videoClasses.*;

    public class NetStreamBufferTrait extends BufferTrait {

        private var netStream:NetStream;
        private var videoSurface:VideoSurface;

        public function NetStreamBufferTrait(netStream:NetStream, videoSurface:VideoSurface=null){
            this.netStream = netStream;
            this.videoSurface = videoSurface;
            bufferTime = netStream.bufferTime;
            netStream.addEventListener(NetStatusEvent.NET_STATUS, this.onNetStatus, false, 0, true);
        }
        override public function get bufferLength():Number{
            return (this.netStream.bufferLength);
        }
        override protected function bufferTimeChangeStart(newTime:Number):void{
            this.netStream.bufferTime = newTime;
        }
        private function onNetStatus(event:NetStatusEvent):void{
            switch (event.info.code){
                case NetStreamCodes.NETSTREAM_PLAY_START:
                case NetStreamCodes.NETSTREAM_BUFFER_EMPTY:
                    bufferTime = this.netStream.bufferTime;
                    setBuffering(true);
                    if (this.netStream.bufferTime == 0){
                        setBuffering(false);
                    };
                    if (this.bufferNotSupported){
                        setBuffering(false);
                    };
                    break;
                case NetStreamCodes.NETSTREAM_SEEK_START:
                    setBuffering(true);
                    break;
                case NetStreamCodes.NETSTREAM_BUFFER_FLUSH:
                case NetStreamCodes.NETSTREAM_BUFFER_FULL:
                    setBuffering(false);
                    break;
            };
        }
        private function get bufferNotSupported():Boolean{
            return ((((((this.netStream.bytesLoaded == 0)) && (!((this.videoSurface == null))))) && ((this.videoSurface.info.renderStatus == "accelerated"))));
        }

    }
}//package org.osmf.net 
﻿package org.osmf.net {

    class FMSHost {

        private var _host:String;
        private var _port:String;

        public function FMSHost(host:String, port:String="1935"){
            this._host = host;
            this._port = port;
        }
        public function get host():String{
            return (this._host);
        }
        public function set host(value:String):void{
            this._host = value;
        }
        public function get port():String{
            return (this._port);
        }
        public function set port(value:String):void{
            this._port = value;
        }

    }
}//package org.osmf.net 
﻿package org.osmf.net {
    import org.osmf.utils.*;
    import __AS3__.vec.*;

    public class DynamicStreamingResource extends StreamingURLResource {

        private var _streamItems:Vector.<DynamicStreamingItem>;
        private var _initialIndex:int;

        public function DynamicStreamingResource(host:String, streamType:String=null){
            super(host, streamType);
            this._initialIndex = 0;
        }
        public function get host():String{
            return (url);
        }
        public function get streamItems():Vector.<DynamicStreamingItem>{
            if (this._streamItems == null){
                this._streamItems = new Vector.<DynamicStreamingItem>();
            };
            return (this._streamItems);
        }
        public function set streamItems(value:Vector.<DynamicStreamingItem>):void{
            this._streamItems = value;
            if (value != null){
                value.sort(this.compareStreamItems);
            };
        }
        public function get initialIndex():int{
            return (this._initialIndex);
        }
        public function set initialIndex(value:int):void{
            if ((((this._streamItems == null)) || ((value >= this._streamItems.length)))){
                throw (new RangeError(OSMFStrings.getString(OSMFStrings.INVALID_PARAM)));
            };
            this._initialIndex = value;
        }
        public function indexFromName(name:String):int{
            var _local2:int;
            while (_local2 < this._streamItems.length) {
                if ((((this._streamItems[_local2].streamName.indexOf(name) == 0)) || ((this._streamItems[_local2].streamName.indexOf(("mp4:" + name)) == 0)))){
                    return (_local2);
                };
                _local2++;
            };
            return (-1);
        }
        private function compareStreamItems(a:DynamicStreamingItem, b:DynamicStreamingItem):Number{
            var _local3 = -1;
            if (a.bitrate == b.bitrate){
                _local3 = 0;
            } else {
                if (a.bitrate > b.bitrate){
                    _local3 = 1;
                };
            };
            return (_local3);
        }

    }
}//package org.osmf.net 
﻿package org.osmf.net {

    public final class StreamType {

        public static const LIVE:String = "live";
        public static const RECORDED:String = "recorded";
        public static const LIVE_OR_RECORDED:String = "liveOrRecorded";
        public static const DVR:String = "dvr";

    }
}//package org.osmf.net 
﻿package org.osmf.net {
    import org.osmf.media.*;
    import org.osmf.events.*;
    import flash.events.*;
    import flash.net.*;
    import org.osmf.traits.*;
    import org.osmf.utils.*;

    public class NetStreamPlayTrait extends PlayTrait {

        private static const NETCONNECTION_FAILURE_ERROR_CODE:int = 2154;

        private var streamStarted:Boolean;
        private var netStream:NetStream;
        private var netConnection:NetConnection;
        private var urlResource:URLResource;
        private var multicastResource:MulticastResource;
        private var reconnectStreams:Boolean;

        public function NetStreamPlayTrait(netStream:NetStream, resource:MediaResourceBase, reconnectStreams:Boolean, netConnection:NetConnection){
            if (netStream == null){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.NULL_PARAM)));
            };
            this.netStream = netStream;
            this.netConnection = netConnection;
            this.urlResource = (resource as URLResource);
            this.multicastResource = (resource as MulticastResource);
            this.reconnectStreams = reconnectStreams;
            netStream.addEventListener(NetStatusEvent.NET_STATUS, this.onNetStatus, false, 1, true);
            NetClient(netStream.client).addHandler(NetStreamCodes.ON_PLAY_STATUS, this.onPlayStatus, 1);
        }
        override protected function playStateChangeStart(newPlayState:String):void{
            var _local2:Object;
            var _local3:StreamingURLResource;
            var _local4:Boolean;
            var _local5:String;
            var _local6:Number;
            var _local7:Number;
            var _local8:DynamicStreamingResource;
            var _local9:NetStreamPlayOptions;
            if (newPlayState == PlayState.PLAYING){
                if (this.streamStarted){
                    if (this.multicastResource != null){
                        this.netStream.play(this.multicastResource.streamName, -1, -1);
                    } else {
                        this.netStream.resume();
                    };
                } else {
                    if (this.urlResource != null){
                        _local3 = (this.urlResource as StreamingURLResource);
                        _local4 = ((_local3) ? _local3.urlIncludesFMSApplicationInstance : false);
                        _local5 = NetStreamUtils.getStreamNameFromURL(this.urlResource.url, _local4);
                        _local2 = NetStreamUtils.getPlayArgsForResource(this.urlResource);
                        _local6 = _local2.start;
                        _local7 = _local2.len;
                        _local8 = (this.urlResource as DynamicStreamingResource);
                        if (_local8 != null){
                            _local9 = new NetStreamPlayOptions();
                            _local9.start = _local6;
                            _local9.len = _local7;
                            _local9.streamName = _local8.streamItems[_local8.initialIndex].streamName;
                            _local9.transition = NetStreamPlayTransitions.RESET;
                            this.doPlay2(_local9);
                        } else {
                            if (((((this.reconnectStreams) && (!((_local3 == null))))) && (NetStreamUtils.isRTMPStream(_local3.url)))){
                                _local9 = new NetStreamPlayOptions();
                                _local9.start = _local6;
                                _local9.len = _local7;
                                _local9.transition = NetStreamPlayTransitions.RESET;
                                _local9.streamName = _local5;
                                this.doPlay2(_local9);
                            } else {
                                if (((((!((this.multicastResource == null))) && (!((this.multicastResource.groupspec == null))))) && ((this.multicastResource.groupspec.length > 0)))){
                                    this.doPlay(this.multicastResource.streamName, _local6, _local7);
                                } else {
                                    this.doPlay(_local5, _local6, _local7);
                                };
                            };
                        };
                    };
                };
            } else {
                if (this.multicastResource != null){
                    this.netStream.play(false);
                } else {
                    this.netStream.pause();
                };
            };
        }
        private function onNetStatus(event:NetStatusEvent):void{
            switch (event.info.code){
                case NetStreamCodes.NETSTREAM_PLAY_FAILED:
                case NetStreamCodes.NETSTREAM_PLAY_FILESTRUCTUREINVALID:
                case NetStreamCodes.NETSTREAM_PLAY_STREAMNOTFOUND:
                case NetStreamCodes.NETSTREAM_PLAY_NOSUPPORTEDTRACKFOUND:
                case NetStreamCodes.NETSTREAM_FAILED:
                    this.netStream.pause();
                    this.streamStarted = false;
                    break;
                case NetStreamCodes.NETSTREAM_PLAY_STOP:
                    if (((!((this.urlResource == null))) && ((NetStreamUtils.isStreamingResource(this.urlResource) == false)))){
                        stop();
                    };
                    break;
                case NetStreamCodes.NETSTREAM_PLAY_LIVE_STALL:
                    dispatchEvent(new PlayEvent(PlayEvent.LIVE_STALL));
                    break;
                case NetStreamCodes.NETSTREAM_PLAY_LIVE_RESUME:
                    dispatchEvent(new PlayEvent(PlayEvent.LIVE_RESUME));
                    break;
            };
        }
        private function onPlayStatus(event:Object):void{
            switch (event.code){
                case NetStreamCodes.NETSTREAM_PLAY_COMPLETE:
                    stop();
                    break;
            };
        }
        private function doPlay(... _args):void{
            var args:* = _args;
            try {
                this.netStream.play.apply(this, args);
                this.streamStarted = true;
            } catch(error:Error) {
                streamStarted = false;
                stop();
                dispatchEvent(new MediaErrorEvent(MediaErrorEvent.MEDIA_ERROR, false, false, new MediaError(MediaErrorCodes.NETSTREAM_PLAY_FAILED)));
            };
        }
        private function doPlay2(nspo:NetStreamPlayOptions):void{
            this.netStream.play2(nspo);
            this.streamStarted = true;
        }

    }
}//package org.osmf.net 
﻿package org.osmf.net {
    import flash.events.*;

    public class NetStreamSwitchManagerBase extends EventDispatcher {

        protected var _autoSwitch:Boolean;
        protected var _maxAllowedIndex:int;

        public function NetStreamSwitchManagerBase(){
            this._autoSwitch = true;
            this._maxAllowedIndex = int.MAX_VALUE;
        }
        public function get autoSwitch():Boolean{
            return (this._autoSwitch);
        }
        public function set autoSwitch(value:Boolean):void{
            this._autoSwitch = value;
        }
        public function get currentIndex():uint{
            return (0);
        }
        public function get maxAllowedIndex():int{
            return (this._maxAllowedIndex);
        }
        public function set maxAllowedIndex(value:int):void{
            this._maxAllowedIndex = value;
        }
        public function switchTo(index:int):void{
        }

    }
}//package org.osmf.net 
﻿package org.osmf.net {

    public class PortProtocol {

        private var _port:int;
        private var _protocol:String;

        public function get port():int{
            return (this._port);
        }
        public function set port(value:int):void{
            this._port = value;
        }
        public function get protocol():String{
            return (this._protocol);
        }
        public function set protocol(value:String):void{
            this._protocol = value;
        }

    }
}//package org.osmf.net 
﻿package org.osmf.net {

    public final class NetStreamCodes {

        public static const NETSTREAM_BUFFER_EMPTY:String = "NetStream.Buffer.Empty";
        public static const NETSTREAM_BUFFER_FULL:String = "NetStream.Buffer.Full";
        public static const NETSTREAM_BUFFER_FLUSH:String = "NetStream.Buffer.Flush";
        public static const NETSTREAM_FAILED:String = "NetStream.Failed";
        public static const NETSTREAM_PLAY_START:String = "NetStream.Play.Start";
        public static const NETSTREAM_PLAY_STOP:String = "NetStream.Play.Stop";
        public static const NETSTREAM_PLAY_FAILED:String = "NetStream.Play.Failed";
        public static const NETSTREAM_PLAY_STREAMNOTFOUND:String = "NetStream.Play.StreamNotFound";
        public static const NETSTREAM_PLAY_RESET:String = "NetStream.Play.Reset";
        public static const NETSTREAM_PLAY_INSUFFICIENTBW:String = "NetStream.Play.InsufficientBW";
        public static const NETSTREAM_PLAY_FILESTRUCTUREINVALID:String = "NetStream.Play.FileStructureInvalid";
        public static const NETSTREAM_PLAY_NOSUPPORTEDTRACKFOUND:String = "NetStream.Play.NoSupportedTrackFound";
        public static const NETSTREAM_PLAY_TRANSITION:String = "NetStream.Play.Transition";
        public static const NETSTREAM_PAUSE_NOTIFY:String = "NetStream.Pause.Notify";
        public static const NETSTREAM_PLAY_PUBLISH_NOTIFY:String = "NetStream.Play.PublishNotify";
        public static const NETSTREAM_PLAY_UNPUBLISH_NOTIFY:String = "NetStream.Play.UnpublishNotify";
        public static const NETSTREAM_UNPAUSE_NOTIFY:String = "NetStream.Unpause.Notify";
        public static const NETSTREAM_SEEK_FAILED:String = "NetStream.Seek.Failed";
        public static const NETSTREAM_SEEK_INVALIDTIME:String = "NetStream.Seek.InvalidTime";
        public static const NETSTREAM_SEEK_NOTIFY:String = "NetStream.Seek.Notify";
        public static const NETSTREAM_PLAY_COMPLETE:String = "NetStream.Play.Complete";
        public static const NETSTREAM_PLAY_TRANSITION_COMPLETE:String = "NetStream.Play.TransitionComplete";
        public static const NETSTREAM_SEEK_START:String = "NetStream.Seek.Start";
        public static const NETSTREAM_PLAY_LIVE_STALL:String = "NetStream.Play.LiveStall";
        public static const NETSTREAM_PLAY_LIVE_RESUME:String = "NetStream.Play.LiveResume";
        public static const ON_META_DATA:String = "onMetaData";
        public static const ON_CUE_POINT:String = "onCuePoint";
        public static const ON_PLAY_STATUS:String = "onPlayStatus";
        public static const NETSTREAM_DRM_UPDATE:String = "DRM.UpdateNeeded";

    }
}//package org.osmf.net 
﻿package org.osmf.net {
    import org.osmf.media.*;
    import org.osmf.events.*;
    import flash.events.*;
    import flash.utils.*;
    import flash.net.*;
    import org.osmf.traits.*;
    import org.osmf.utils.*;
    import flash.errors.*;
    import org.osmf.net.httpstreaming.*;

    public class NetStreamLoadTrait extends LoadTrait {

        private var _connection:NetConnection;
        private var _switchManager:NetStreamSwitchManagerBase;
        private var traits:Dictionary;
        private var _netConnectionFactory:NetConnectionFactoryBase;
        private var isStreamingResource:Boolean;
        private var _netStream:NetStream;
        private var _netGroup:NetGroup;

        public function NetStreamLoadTrait(loader:LoaderBase, resource:MediaResourceBase){
            this.traits = new Dictionary();
            super(loader, resource);
            this.isStreamingResource = NetStreamUtils.isStreamingResource(resource);
        }
        public function get connection():NetConnection{
            return (this._connection);
        }
        public function set connection(value:NetConnection):void{
            this._connection = value;
        }
        public function get netStream():NetStream{
            return (this._netStream);
        }
        public function set netStream(value:NetStream):void{
            this._netStream = value;
        }
        public function get switchManager():NetStreamSwitchManagerBase{
            return (this._switchManager);
        }
        public function set switchManager(value:NetStreamSwitchManagerBase):void{
            this._switchManager = value;
        }
        public function setTrait(trait:MediaTraitBase):void{
            if (trait == null){
                throw (new IllegalOperationError(OSMFStrings.getString(OSMFStrings.NULL_PARAM)));
            };
            this.traits[trait.traitType] = trait;
        }
        public function getTrait(traitType:String):MediaTraitBase{
            return (this.traits[traitType]);
        }
        public function get netConnectionFactory():NetConnectionFactoryBase{
            return (this._netConnectionFactory);
        }
        public function set netConnectionFactory(value:NetConnectionFactoryBase):void{
            this._netConnectionFactory = value;
        }
        override protected function loadStateChangeStart(newState:String):void{
            if (newState == LoadState.READY){
                if (((!(this.isStreamingResource)) && ((((this.netStream.bytesTotal <= 0)) || ((this.netStream.bytesTotal == uint.MAX_VALUE)))))){
                    this.netStream.addEventListener(NetStatusEvent.NET_STATUS, this.onNetStatus);
                };
            } else {
                if (newState == LoadState.UNINITIALIZED){
                    this.netStream = null;
                    dispatchEvent(new LoadEvent(LoadEvent.BYTES_LOADED_CHANGE, false, false, null, this.bytesLoaded));
                    dispatchEvent(new LoadEvent(LoadEvent.BYTES_TOTAL_CHANGE, false, false, null, this.bytesTotal));
                };
            };
        }
        override public function get bytesLoaded():Number{
            if (((!((this.netStream == null))) && (((!(this.isStreamingResource)) || ((this.netStream is HTTPNetStream)))))){
                return (this.netStream.bytesLoaded);
            };
            return (NaN);
        }
        override public function get bytesTotal():Number{
            return (((this.isStreamingResource) ? NaN : ((this.netStream)!=null) ? this.netStream.bytesTotal : NaN));
        }
        private function onNetStatus(event:NetStatusEvent):void{
            if (((!((this.netStream == null))) && ((this.netStream.bytesTotal > 0)))){
                dispatchEvent(new LoadEvent(LoadEvent.BYTES_TOTAL_CHANGE, false, false, null, this.netStream.bytesTotal));
                this.netStream.removeEventListener(NetStatusEvent.NET_STATUS, this.onNetStatus);
            };
        }
        public function get netGroup():NetGroup{
            return (this._netGroup);
        }
        public function set netGroup(value:NetGroup):void{
            this._netGroup = value;
        }

    }
}//package org.osmf.net 
﻿package org.osmf.net {

    public class DynamicStreamingItem {

        private var _bitrate:Number;
        private var _stream:String;
        private var _width:int;
        private var _height:int;

        public function DynamicStreamingItem(streamName:String, bitrate:Number, width:int=-1, height:int=-1){
            this._stream = streamName;
            this._bitrate = bitrate;
            this._width = width;
            this._height = height;
        }
        public function get streamName():String{
            return (this._stream);
        }
        public function set streamName(value:String):void{
            this._stream = value;
        }
        public function get bitrate():Number{
            return (this._bitrate);
        }
        public function set bitrate(value:Number):void{
            this._bitrate = value;
        }
        public function get width():int{
            return (this._width);
        }
        public function set width(value:int):void{
            this._width = value;
        }
        public function get height():int{
            return (this._height);
        }
        public function set height(value:int):void{
            this._height = value;
        }

    }
}//package org.osmf.net 
﻿package org.osmf.net {
    import org.osmf.events.*;
    import flash.events.*;
    import org.osmf.utils.*;
    import __AS3__.vec.*;
    import flash.errors.*;
    import org.osmf.net.metrics.*;
    import org.osmf.net.rules.*;

    public class RuleSwitchManagerBase extends NetStreamSwitchManagerBase {

        private var _metricRepository:MetricRepository;
        private var _emergencyRules:Vector.<RuleBase> = null;
        private var switcher:NetStreamSwitcher;
        private var notifier:EventDispatcher;

        public function RuleSwitchManagerBase(notifier:EventDispatcher, switcher:NetStreamSwitcher, metricRepository:MetricRepository, emergencyRules:Vector.<RuleBase>=null, autoSwitch:Boolean=true){
            if (notifier == null){
                throw (new ArgumentError("Invalid netStream"));
            };
            if (switcher == null){
                throw (new ArgumentError("Invalid switcher"));
            };
            if (metricRepository == null){
                throw (new ArgumentError("Invalid metric repository"));
            };
            this.notifier = notifier;
            this.switcher = switcher;
            this._metricRepository = metricRepository;
            if (emergencyRules != null){
                this._emergencyRules = emergencyRules.slice();
            };
            this.autoSwitch = autoSwitch;
        }
        override public function set autoSwitch(value:Boolean):void{
            super.autoSwitch = value;
            if (value){
                this.notifier.addEventListener(HTTPStreamingEvent.RUN_ALGORITHM, this.onRunAlgorithm);
            } else {
                this.notifier.removeEventListener(HTTPStreamingEvent.RUN_ALGORITHM, this.onRunAlgorithm);
            };
        }
        public function get actualIndex():int{
            return (this.switcher.actualIndex);
        }
        public function get metricRepository():MetricRepository{
            return (this._metricRepository);
        }
        public function get emergencyRules():Vector.<RuleBase>{
            return (this._emergencyRules);
        }
        public function getNewIndex():uint{
            throw (new IllegalOperationError("The getNewIndex() function must be overriden by the subclass."));
        }
        public function getNewEmergencyIndex(maxBitrate:Number):uint{
            throw (new IllegalOperationError("The getNewEmergencyIndex() function must be overriden by the subclass."));
        }
        override public function get currentIndex():uint{
            return (this.switcher.currentIndex);
        }
        override public function switchTo(index:int):void{
            if (!_autoSwitch){
                if ((((index < 0)) || ((index > maxAllowedIndex)))){
                    throw (new RangeError(OSMFStrings.getString(OSMFStrings.STREAMSWITCH_INVALID_INDEX)));
                };
                this.switcher.switchTo(index);
            } else {
                throw (new IllegalOperationError(OSMFStrings.getString(OSMFStrings.STREAMSWITCH_STREAM_NOT_IN_MANUAL_MODE)));
            };
        }
        private function onRunAlgorithm(event:HTTPStreamingEvent):void{
            var _local3:RuleBase;
            var _local4:uint;
            var _local5:Recommendation;
            var _local2:Number = Number.POSITIVE_INFINITY;
            for each (_local3 in this._emergencyRules) {
                _local5 = _local3.getRecommendation();
                if (_local5.confidence == 1){
                    _local2 = _local5.bitrate;
                };
            };
            _local4 = 0;
            if (_local2 < Number.POSITIVE_INFINITY){
                _local4 = this.getNewEmergencyIndex(_local2);
            } else {
                _local4 = this.getNewIndex();
            };
            if (_local4 != this.switcher.actualIndex){
                _local4 = Math.min(_local4, maxAllowedIndex);
            } else {
                if (this.switcher.actualIndex > maxAllowedIndex){
                    _local4 = maxAllowedIndex;
                };
            };
            if (((!((_local4 == this.switcher.actualIndex))) && (!(this.switcher.switching)))){
                this.switcher.switchTo(_local4);
            };
        }

    }
}//package org.osmf.net 
﻿package org.osmf.net {
    import org.osmf.media.*;
    import org.osmf.utils.*;
    import org.osmf.metadata.*;

    public class NetStreamUtils {

        public static const PLAY_START_ARG_ANY:int = -2;
        public static const PLAY_START_ARG_LIVE:int = -1;
        public static const PLAY_START_ARG_RECORDED:int = 0;
        public static const PLAY_LEN_ARG_ALL:int = -1;

        public static function getStreamNameFromURL(url:String, urlIncludesFMSApplicationInstance:Boolean=false):String{
            var _local4:FMSURL;
            var _local3:String = "";
            if (url != null){
                if (isRTMPStream(url)){
                    _local4 = new FMSURL(url, urlIncludesFMSApplicationInstance);
                    _local3 = _local4.streamName;
                    if (((!((_local4.query == null))) && (!((_local4.query == ""))))){
                        _local3 = (_local3 + ("?" + _local4.query));
                    };
                } else {
                    _local3 = url;
                };
            };
            return (_local3);
        }
        public static function isStreamingResource(resource:MediaResourceBase):Boolean{
            var _local3:URLResource;
            var _local2:Boolean;
            if (resource != null){
                _local3 = (resource as URLResource);
                if (_local3 != null){
                    _local2 = NetStreamUtils.isRTMPStream(_local3.url);
                    if (_local2 == false){
                        _local2 = !((_local3.getMetadataValue(MetadataNamespaces.HTTP_STREAMING_METADATA) == null));
                    };
                };
            };
            return (_local2);
        }
        public static function isRTMPStream(url:String):Boolean{
            var _local3:URL;
            var _local4:String;
            var _local2:Boolean;
            if (url != null){
                _local3 = new URL(url);
                _local4 = _local3.protocol;
                if (((!((_local4 == null))) && ((_local4.length > 0)))){
                    _local2 = !((_local4.search(/^rtmp$|rtmp[tse]$|rtmpte$/i) == -1));
                };
            };
            return (_local2);
        }
        public static function getStreamType(resource:MediaResourceBase):String{
            var _local2:String = StreamType.RECORDED;
            var _local3:StreamingURLResource = (resource as StreamingURLResource);
            if (_local3 != null){
                _local2 = _local3.streamType;
            };
            return (_local2);
        }
        public static function getPlayArgsForResource(resource:MediaResourceBase):Object{
            var _local4:StreamingURLResource;
            var _local2:Number = PLAY_START_ARG_ANY;
            var _local3:Number = PLAY_LEN_ARG_ALL;
            switch (getStreamType(resource)){
                case StreamType.LIVE_OR_RECORDED:
                    _local2 = PLAY_START_ARG_ANY;
                    break;
                case StreamType.LIVE:
                    _local2 = PLAY_START_ARG_LIVE;
                    break;
                case StreamType.RECORDED:
                    _local2 = PLAY_START_ARG_RECORDED;
                    break;
            };
            if (((!((_local2 == PLAY_START_ARG_LIVE))) && (!((resource == null))))){
                _local4 = (resource as StreamingURLResource);
                if (((!((_local4 == null))) && (isStreamingResource(_local4)))){
                    if (!isNaN(_local4.clipStartTime)){
                        _local2 = _local4.clipStartTime;
                    };
                    if (!isNaN(_local4.clipEndTime)){
                        _local2 = Math.max(0, _local2);
                        _local3 = Math.max(0, (_local4.clipEndTime - _local2));
                    };
                };
            };
            return ({
                start:_local2,
                len:_local3
            });
        }

    }
}//package org.osmf.net 
﻿package org.osmf.net.httpstreaming {
    import flash.events.*;
    import flash.net.*;

    public class HTTPStreamRequest {

        private var _kind:String = null;
        private var _retryAfter:int = -1;
        private var _bestEffortDownloaderMonitor:IEventDispatcher = null;
        private var _urlRequest:URLRequest = null;

        public function HTTPStreamRequest(kind:String, url:String=null, retryAfter:Number=-1, bestEffortDownloaderMonitor:IEventDispatcher=null){
            this._kind = kind;
            if (url){
                this._urlRequest = new URLRequest(HTTPStreamingUtils.normalizeURL(url));
            } else {
                this._urlRequest = null;
            };
            this._retryAfter = retryAfter;
            this._bestEffortDownloaderMonitor = bestEffortDownloaderMonitor;
        }
        public function get kind():String{
            return (this._kind);
        }
        public function get retryAfter():int{
            return (this._retryAfter);
        }
        public function get bestEffortDownloaderMonitor():IEventDispatcher{
            return (this._bestEffortDownloaderMonitor);
        }
        public function get urlRequest():URLRequest{
            return (this._urlRequest);
        }
        public function get url():String{
            if (this._urlRequest == null){
                return (null);
            };
            return (this._urlRequest.url);
        }
        public function toString():String{
            var _local1:String = ("[HTTPStreamRequest kind=" + this.kind);
            switch (this.kind){
                case HTTPStreamRequestKind.BEST_EFFORT_DOWNLOAD:
                case HTTPStreamRequestKind.DOWNLOAD:
                    _local1 = (_local1 + (", url=" + this.url));
                    break;
                case HTTPStreamRequestKind.LIVE_STALL:
                case HTTPStreamRequestKind.RETRY:
                    _local1 = (_local1 + (", retryAfter=" + this.retryAfter));
                    break;
                case HTTPStreamRequestKind.DONE:
            };
            _local1 = (_local1 + "]");
            return (_local1);
        }

    }
}//package org.osmf.net.httpstreaming 
﻿package org.osmf.net.httpstreaming {
    import org.osmf.media.*;
    import org.osmf.events.*;
    import flash.events.*;
    import flash.utils.*;
    import org.osmf.utils.*;
    import __AS3__.vec.*;
    import org.osmf.net.qos.*;
    import org.osmf.net.httpstreaming.dvr.*;

    public class HTTPStreamSource implements IHTTPStreamSource, IHTTPStreamHandler {

        private var _dispatcher:IEventDispatcher = null;
        private var _resource:MediaResourceBase = null;
        private var _qosInfo:HTTPStreamHandlerQoSInfo;
        private var _downloader:HTTPStreamDownloader = null;
        private var _request:HTTPStreamRequest = null;
        private var _indexHandler:HTTPStreamingIndexHandlerBase = null;
        private var _fileHandler:HTTPStreamingFileHandlerBase = null;
        private var _indexInfo:HTTPStreamingIndexInfoBase = null;
        private var _streamName:String = null;
        private var _seekTarget:Number = -1;
        private var _didBeginSeek:Boolean = false;
        private var _didCompleteSeek:Boolean = false;
        private var _streamNames:Array = null;
        private var _qualityRates:Array = null;
        private var _numQualityLevels:int = 0;
        private var _qualityLevel:int = 0;
        private var _qualityLevelChanged:Boolean = false;
        private var _desiredQualityLevel:int = -1;
        private var _desiredQualityStreamName:String = null;
        private var _qualityAndStreamNameInSync:Boolean = false;
        private var _fragmentDuration:Number = 0;
        private var _endFragment:Boolean = false;
        private var _indexDownloaderMonitor:EventDispatcher;
        private var _indexDownloader:HTTPStreamDownloader;
        private var _currentIndexDownloadEvent:HTTPStreamingIndexHandlerEvent = null;
        private var _pendingIndexDownloadRequests:Vector.<HTTPStreamingIndexHandlerEvent>;
        private var _pendingIndexDownloadRequestsLenght:int = 0;
        private var _hasErrors:Boolean = false;
        private var _isReady:Boolean = false;
        private var _ratesAreReady:Boolean = false;
        private var _endOfStream:Boolean = false;
        private var _isLive:Boolean = false;
        private var _offset:Number = -1;
        private var _dvrInfo:DVRInfo = null;
        private var _state:String = null;
        private var _retryAfterTime:Number = -1;
        private var _bestEffortDownloadResult:String = null;
        private var _isLiveStalled:Boolean = false;

        public function HTTPStreamSource(factory:HTTPStreamingFactory, resource:MediaResourceBase, dispatcher:IEventDispatcher){
            this._indexDownloaderMonitor = new EventDispatcher();
            this._indexDownloader = new HTTPStreamDownloader();
            this._pendingIndexDownloadRequests = new Vector.<HTTPStreamingIndexHandlerEvent>();
            super();
            if (dispatcher == null){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.INVALID_PARAM)));
            };
            if (factory == null){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.INVALID_PARAM)));
            };
            if (resource == null){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.INVALID_PARAM)));
            };
            this._dispatcher = dispatcher;
            this._resource = resource;
            this._fileHandler = factory.createFileHandler(resource);
            if (this._fileHandler == null){
                throw (new ArgumentError("Null file handler in HTTPStreamSourceHandler constructor. Probably invalid factory object or resource."));
            };
            this._indexHandler = factory.createIndexHandler(resource, this._fileHandler);
            if (this._indexHandler == null){
                throw (new ArgumentError("Null index handler in HTTPStreamSourceHandler constructor. Probably invalid factory object or resource."));
            };
            this._indexInfo = factory.createIndexInfo(resource);
            this._fileHandler.addEventListener(HTTPStreamingEvent.FRAGMENT_DURATION, this.onFragmentDuration);
            this._fileHandler.addEventListener(HTTPStreamingEvent.SCRIPT_DATA, this.onScriptData);
            this._fileHandler.addEventListener(HTTPStreamingEvent.FILE_ERROR, this.onError);
            this._indexHandler.addEventListener(HTTPStreamingIndexHandlerEvent.INDEX_READY, this.onIndexReady);
            this._indexHandler.addEventListener(HTTPStreamingIndexHandlerEvent.RATES_READY, this.onRatesReady);
            this._indexHandler.addEventListener(HTTPStreamingIndexHandlerEvent.REQUEST_LOAD_INDEX, this.onRequestLoadIndex);
            this._indexHandler.addEventListener(DVRStreamInfoEvent.DVRSTREAMINFO, this.onDVRStreamInfo);
            this._indexHandler.addEventListener(HTTPStreamingEvent.FRAGMENT_DURATION, this.onFragmentDuration);
            this._indexHandler.addEventListener(HTTPStreamingEvent.SCRIPT_DATA, this.onScriptData);
            this._indexHandler.addEventListener(HTTPStreamingEvent.INDEX_ERROR, this.onError);
            this._indexHandler.addEventListener(HTTPStreamingEvent.DOWNLOAD_CONTINUE, this.onBestEffortDownloadEvent);
            this._indexHandler.addEventListener(HTTPStreamingEvent.DOWNLOAD_SKIP, this.onBestEffortDownloadEvent);
            this._indexHandler.addEventListener(HTTPStreamingEvent.DOWNLOAD_COMPLETE, this.onBestEffortDownloadEvent);
            this._indexHandler.addEventListener(HTTPStreamingEvent.DOWNLOAD_ERROR, this.onBestEffortDownloadEvent);
            this._indexDownloaderMonitor.addEventListener(HTTPStreamingEvent.DOWNLOAD_COMPLETE, this.onIndexComplete);
            this._indexDownloaderMonitor.addEventListener(HTTPStreamingEvent.DOWNLOAD_ERROR, this.onIndexError);
            this.setState(HTTPStreamingState.INIT);
        }
        public function get source():IHTTPStreamSource{
            return (this);
        }
        public function get isReady():Boolean{
            return (this._isReady);
        }
        public function get endOfStream():Boolean{
            return (this._endOfStream);
        }
        public function get hasErrors():Boolean{
            return (this._hasErrors);
        }
        public function get isLiveStalled():Boolean{
            return (this._isLiveStalled);
        }
        public function get streamName():String{
            return (this._streamName);
        }
        public function get qosInfo():HTTPStreamHandlerQoSInfo{
            return (this._qosInfo);
        }
        public function get isOpen():Boolean{
            return (!((this._streamName == null)));
        }
        public function open(streamName:String):void{
            if (this._streamName != null){
                this.close();
            };
            this._streamName = streamName;
            this._qualityAndStreamNameInSync = false;
            this._indexHandler.initialize(((this._indexInfo)!=null) ? this._indexInfo : streamName);
        }
        public function close():void{
            if (this._downloader != null){
                this._downloader.close();
            };
            this._indexHandler.dispose();
            this._endFragment = true;
            this._endOfStream = true;
            this._streamName = null;
        }
        public function seek(offset:Number):void{
            this._endOfStream = false;
            this._hasErrors = false;
            this._isLiveStalled = false;
            this._seekTarget = offset;
            this._didBeginSeek = false;
            this._didCompleteSeek = false;
            if (this._seekTarget < 0){
                if (this._dvrInfo != null){
                    this._seekTarget = Math.floor(((this._dvrInfo.startTime + this._dvrInfo.curLength) - OSMFSettings.hdsDVRLiveOffset));
                } else {
                    if (this._isLive){
                        this._seekTarget = Math.floor(this._offset);
                    } else {
                        this._seekTarget = 0;
                    };
                };
            };
            this.setState(HTTPStreamingState.SEEK);
        }
        public function getBytes():ByteArray{
            return (this.doSomeProcessingAndGetBytes());
        }
        public function getDVRInfo(streamName:Object):void{
            this._indexHandler.dvrGetStreamInfo(((this._indexInfo)!=null) ? this._indexInfo : streamName);
        }
        public function changeQualityLevel(streamName:String):void{
            var _local3:int;
            var _local2 = -1;
            if (this._streamNames != null){
                _local3 = 0;
                while (_local3 < this._streamNames.length) {
                    if (streamName == this._streamNames[_local3]){
                        _local2 = _local3;
                        break;
                    };
                    _local3++;
                };
            };
            if (_local2 == -1){
                if (this._streamNames){
                    trace(((("STREAMNAMES:\n" + this._streamNames.join("\n")) + "\nLooking for: ") + streamName));
                } else {
                    trace(("No stream names to look for " + streamName));
                };
                throw (new Error("Quality level cannot be set at this time."));
            };
            if (_local2 != this._desiredQualityLevel){
                this.beginQualityLevelChange(_local2);
            };
        }
        public function get isBestEffortFetchEnabled():Boolean{
            return (((!((this._indexHandler == null))) && (this._indexHandler.isBestEffortFetchEnabled)));
        }
        public function get fragmentDuration():Number{
            return (this._fragmentDuration);
        }
        protected function doSomeProcessingAndGetBytes():ByteArray{
            var _local3:Date;
            var _local4:Boolean;
            var _local5:Vector.<QualityLevel>;
            var _local6:String;
            var _local7:String;
            var _local8:FragmentDetails;
            var _local9:IEventDispatcher;
            var _local10:uint;
            var _local1:ByteArray;
            var _local2:IDataInput;
            switch (this._state){
                case HTTPStreamingState.INIT:
                    break;
                case HTTPStreamingState.SEEK:
                    if (this._downloader != null){
                        this._downloader.close();
                        this._fileHandler.flushFileSegment(this._downloader.getBytes());
                    };
                    this.setState(HTTPStreamingState.LOAD);
                    break;
                case HTTPStreamingState.WAIT:
                    _local3 = new Date();
                    if (_local3.getTime() > this._retryAfterTime){
                        this.setState(HTTPStreamingState.LOAD);
                    };
                    break;
                case HTTPStreamingState.LOAD:
                    if (this._qualityLevelChanged){
                        this.endQualityLevelChange();
                    };
                    this._fragmentDuration = -1;
                    this._endOfStream = false;
                    _local4 = false;
                    if (!this._didBeginSeek){
                        this._request = this._indexHandler.getFileForTime(this._seekTarget, this._qualityLevel);
                        _local4 = true;
                    } else {
                        this._request = this._indexHandler.getNextFile(this._qualityLevel);
                    };
                    this._isLiveStalled = (this._request.kind == HTTPStreamRequestKind.LIVE_STALL);
                    switch (this._request.kind){
                        case HTTPStreamRequestKind.DOWNLOAD:
                        case HTTPStreamRequestKind.BEST_EFFORT_DOWNLOAD:
                            if (_local4){
                                this._didBeginSeek = true;
                            };
                            if (this._downloader == null){
                                this._downloader = new HTTPStreamDownloader();
                            };
                            _local9 = this._dispatcher;
                            if (this._request.kind == HTTPStreamRequestKind.BEST_EFFORT_DOWNLOAD){
                                _local9 = this._request.bestEffortDownloaderMonitor;
                                this._bestEffortDownloadResult = null;
                            };
                            this._downloader.open(this._request.urlRequest, _local9, OSMFSettings.hdsFragmentDownloadTimeout);
                            this.setState(HTTPStreamingState.BEGIN_FRAGMENT);
                            break;
                        case HTTPStreamRequestKind.RETRY:
                        case HTTPStreamRequestKind.LIVE_STALL:
                            _local3 = new Date();
                            this._retryAfterTime = (_local3.getTime() + (1000 * this._request.retryAfter));
                            this.setState(HTTPStreamingState.WAIT);
                            break;
                        case HTTPStreamRequestKind.DONE:
                            this._endFragment = true;
                            this._endOfStream = true;
                            if (this._downloader != null){
                                _local1 = this._fileHandler.flushFileSegment(this._downloader.getBytes());
                            };
                            this.setState(HTTPStreamingState.STOP);
                            break;
                    };
                    break;
                case HTTPStreamingState.BEGIN_FRAGMENT:
                    if (this._request.kind == HTTPStreamRequestKind.BEST_EFFORT_DOWNLOAD){
                        if (this._bestEffortDownloadResult == null){
                            break;
                        };
                        if (this._bestEffortDownloadResult == HTTPStreamingEvent.DOWNLOAD_ERROR){
                            break;
                        };
                        if (this._bestEffortDownloadResult == HTTPStreamingEvent.DOWNLOAD_SKIP){
                            this.setState(HTTPStreamingState.LOAD);
                            break;
                        };
                        if (this._bestEffortDownloadResult != HTTPStreamingEvent.DOWNLOAD_CONTINUE){
                            break;
                        };
                        this._isLiveStalled = false;
                    };
                    this._endFragment = false;
                    this._hasErrors = false;
                    if (!this._didCompleteSeek){
                        this._fileHandler.beginProcessFile(true, this._seekTarget);
                        this._didCompleteSeek = true;
                    } else {
                        this._fileHandler.beginProcessFile(false, 0);
                    };
                    this._dispatcher.dispatchEvent(new HTTPStreamingEvent(HTTPStreamingEvent.BEGIN_FRAGMENT, false, true, NaN, null, null, this._streamName));
                    this.setState(HTTPStreamingState.READ);
                    break;
                case HTTPStreamingState.READ:
                    if (this._downloader != null){
                        _local2 = this._downloader.getBytes(this._fileHandler.inputBytesNeeded);
                        if (_local2 != null){
                            _local1 = this._fileHandler.processFileSegment(_local2);
                        } else {
                            this._endFragment = ((((((!((this._downloader == null))) && (this._downloader.isOpen))) && (this._downloader.isComplete))) && (!(this._downloader.hasData)));
                            this._hasErrors = ((!((this._downloader == null))) && (this._downloader.hasErrors));
                        };
                    };
                    if (this._state == HTTPStreamingState.READ){
                        if (this._endFragment){
                            if (this._downloader != null){
                                this._downloader.saveRemainingBytes();
                            };
                            this.setState(HTTPStreamingState.END_FRAGMENT);
                        };
                    };
                    break;
                case HTTPStreamingState.END_FRAGMENT:
                    if (this._downloader != null){
                        _local2 = this._downloader.getBytes();
                        if (_local2 != null){
                            _local1 = this._fileHandler.endProcessFile(_local2);
                        };
                    };
                    _local5 = new Vector.<QualityLevel>();
                    _local10 = 0;
                    while (_local10 < this._qualityRates.length) {
                        _local5.push(new QualityLevel(_local10, this._qualityRates[_local10], this._streamNames[_local10]));
                        _local10++;
                    };
                    _local6 = this._request.urlRequest.url;
                    _local7 = this._request.urlRequest.url.substr(_local6.lastIndexOf("Seg"));
                    _local8 = new FragmentDetails(this._downloader.downloadBytesCount, this._fragmentDuration, this._downloader.downloadDuration, this._qualityLevel, _local7);
                    this._qosInfo = new HTTPStreamHandlerQoSInfo(_local5, this._qualityLevel, _local8);
                    this._dispatcher.dispatchEvent(new HTTPStreamingEvent(HTTPStreamingEvent.END_FRAGMENT, false, true, NaN, null, null, this._streamName));
                    this.setState(HTTPStreamingState.LOAD);
                    break;
            };
            return (_local1);
        }
        protected function setState(value:String):void{
            this._state = value;
        }
        private function onDVRStreamInfo(event:DVRStreamInfoEvent):void{
            this._dvrInfo = (event.info as DVRInfo);
            this._dispatcher.dispatchEvent(event);
        }
        private function onIndexReady(event:HTTPStreamingIndexHandlerEvent):void{
            this._isReady = true;
            this._isLive = event.live;
            this._offset = event.offset;
            if (!this._qualityAndStreamNameInSync){
                this._qualityAndStreamNameInSync = true;
                this.changeQualityLevel(this._streamName);
            };
        }
        private function onRatesReady(event:HTTPStreamingIndexHandlerEvent):void{
            this._ratesAreReady = true;
            this._qualityRates = event.rates;
            this._streamNames = event.streamNames;
            this._numQualityLevels = this._qualityRates.length;
        }
        private function onRequestLoadIndex(event:HTTPStreamingIndexHandlerEvent):void{
            this._pendingIndexDownloadRequests[this._pendingIndexDownloadRequestsLenght] = event;
            this._pendingIndexDownloadRequestsLenght++;
            if (this._currentIndexDownloadEvent == null){
                this._currentIndexDownloadEvent = event;
                this._indexDownloader.open(this._currentIndexDownloadEvent.request, this._indexDownloaderMonitor, OSMFSettings.hdsIndexDownloadTimeout);
            };
        }
        private function onIndexComplete(event:HTTPStreamingEvent, isRetry:Boolean=false):void{
            var _local5:String;
            var _local3:IDataInput = this._indexDownloader.getBytes(this._indexDownloader.downloadBytesCount);
            if (!_local3){
                _local5 = ((this._request) ? this._request.url : "");
                if (!isRetry){
                    trace(("No input received on HTTPStreamSource request" + ((_local5) ? (" for:\n" + _local5) : ".")));
                    return;
                };
            };
            this._dispatcher.dispatchEvent(event);
            var _local4:ByteArray = new ByteArray();
            _local3.readBytes(_local4, 0, _local3.bytesAvailable);
            _local4.position = 0;
            this._indexHandler.processIndexData(_local4, this._currentIndexDownloadEvent.requestContext);
            this.processPendingIndexLoadingRequest();
        }
        private function onIndexError(event:HTTPStreamingEvent):void{
            if (this._indexDownloader != null){
                this._indexDownloader.close();
            };
            this._currentIndexDownloadEvent = null;
            this._dispatcher.dispatchEvent(event);
        }
        private function processPendingIndexLoadingRequest():void{
            this._pendingIndexDownloadRequests.shift();
            this._pendingIndexDownloadRequestsLenght--;
            if (this._pendingIndexDownloadRequestsLenght == 0){
                if (this._indexDownloader != null){
                    this._indexDownloader.close();
                };
                this._currentIndexDownloadEvent = null;
            } else {
                this._currentIndexDownloadEvent = this._pendingIndexDownloadRequests[0];
                this._indexDownloader.open(this._currentIndexDownloadEvent.request, this._indexDownloaderMonitor, OSMFSettings.hdsIndexDownloadTimeout);
            };
        }
        private function onFragmentDuration(event:HTTPStreamingEvent):void{
            this._fragmentDuration = event.fragmentDuration;
        }
        private function onScriptData(event:HTTPStreamingEvent):void{
            this._dispatcher.dispatchEvent(new HTTPStreamingEvent(event.type, event.bubbles, event.cancelable, event.fragmentDuration, event.scriptDataObject, event.scriptDataMode, this._streamName));
        }
        private function onError(event:HTTPStreamingEvent):void{
            this._dispatcher.dispatchEvent(event);
        }
        private function beginQualityLevelChange(level:int):void{
            this._qualityLevelChanged = true;
            this._desiredQualityLevel = level;
            this._desiredQualityStreamName = this._streamNames[this._desiredQualityLevel];
            this._dispatcher.dispatchEvent(new HTTPStreamingEvent(HTTPStreamingEvent.TRANSITION, false, false, NaN, null, null, this._desiredQualityStreamName));
        }
        private function endQualityLevelChange():void{
            this._qualityLevel = this._desiredQualityLevel;
            this._streamName = this._desiredQualityStreamName;
            this._desiredQualityLevel = -1;
            this._desiredQualityStreamName = null;
            this._qualityLevelChanged = false;
            this._dispatcher.dispatchEvent(new HTTPStreamingEvent(HTTPStreamingEvent.TRANSITION_COMPLETE, false, false, NaN, null, null, this._streamName));
        }
        private function onBestEffortDownloadEvent(event:HTTPStreamingEvent):void{
            if (event.type == HTTPStreamingEvent.DOWNLOAD_COMPLETE){
                this.forwardEventToDispatcher(event);
            } else {
                if (this._bestEffortDownloadResult != null){
                    return;
                };
                this._bestEffortDownloadResult = event.type;
                this.forwardEventToDispatcher(event);
            };
        }
        private function forwardEventToDispatcher(event:Event):void{
            if (this._dispatcher != null){
                this._dispatcher.dispatchEvent(event);
            };
        }

    }
}//package org.osmf.net.httpstreaming 
﻿package org.osmf.net.httpstreaming {
    import org.osmf.media.*;
    import org.osmf.events.*;
    import flash.net.*;
    import org.osmf.traits.*;
    import org.osmf.net.*;
    import org.osmf.metadata.*;
    import __AS3__.vec.*;
    import org.osmf.net.metrics.*;
    import org.osmf.net.rules.*;
    import org.osmf.net.qos.*;
    import org.osmf.net.httpstreaming.dvr.*;
    import org.osmf.net.httpstreaming.f4f.*;

    public class HTTPStreamingNetLoader extends NetLoader {

        protected static const BANDWIDTH_BUFFER_RULE_WEIGHTS:Vector.<Number> = new <Number>[7, 3];
;
        protected static const BANDWIDTH_BUFFER_RULE_BUFFER_FRAGMENTS_THRESHOLD:uint = 2;
        protected static const AFTER_UP_SWITCH_BANDWIDTH_BUFFER_RULE_BUFFER_FRAGMENTS_THRESHOLD:uint = 2;
        protected static const AFTER_UP_SWITCH_BANDWIDTH_BUFFER_RULE_MIN_RATIO:Number = 0.5;
        protected static const EMPTY_BUFFER_RULE_SCALE_DOWN_FACTOR:Number = 0.4;
        private static const QOS_MAX_HISTORY_LENGTH:Number = 10;

        override public function canHandleResource(resource:MediaResourceBase):Boolean{
            return (!(((resource.getMetadataValue(MetadataNamespaces.HTTP_STREAMING_METADATA) as Metadata) == null)));
        }
        override protected function createNetStream(connection:NetConnection, resource:URLResource):NetStream{
            var _local3:HTTPStreamingFactory = this.createHTTPStreamingFactory();
            var _local4:HTTPNetStream = new HTTPNetStream(connection, _local3, resource);
            return (_local4);
        }
        override protected function createNetStreamSwitchManager(connection:NetConnection, netStream:NetStream, dsResource:DynamicStreamingResource):NetStreamSwitchManagerBase{
            var _local4:QoSInfoHistory = this.createNetStreamQoSInfoHistory(netStream);
            var _local5:MetricFactory = this.createMetricFactory(_local4);
            var _local6:MetricRepository = new MetricRepository(_local5);
            var _local7:Vector.<RuleBase> = new Vector.<RuleBase>();
            var _local8:Vector.<Number> = new Vector.<Number>();
            _local7.push(new BufferBandwidthRule(_local6, BANDWIDTH_BUFFER_RULE_WEIGHTS, BANDWIDTH_BUFFER_RULE_BUFFER_FRAGMENTS_THRESHOLD));
            _local8.push(1);
            var _local9:Vector.<RuleBase> = new Vector.<RuleBase>();
            _local9.push(new DroppedFPSRule(_local6, 10, 0.1));
            _local9.push(new EmptyBufferRule(_local6, EMPTY_BUFFER_RULE_SCALE_DOWN_FACTOR));
            _local9.push(new AfterUpSwitchBufferBandwidthRule(_local6, AFTER_UP_SWITCH_BANDWIDTH_BUFFER_RULE_BUFFER_FRAGMENTS_THRESHOLD, AFTER_UP_SWITCH_BANDWIDTH_BUFFER_RULE_MIN_RATIO));
            var _local10:NetStreamSwitcher = new NetStreamSwitcher(netStream, dsResource);
            return (new DefaultHTTPStreamingSwitchManager(netStream, _local10, _local6, _local9, true, _local7, _local8));
        }
        override protected function processFinishLoading(loadTrait:NetStreamLoadTrait):void{
            var netStream:* = null;
            var onDVRStreamInfo:* = null;
            var loadTrait:* = loadTrait;
            onDVRStreamInfo = function (event:DVRStreamInfoEvent):void{
                netStream.removeEventListener(DVRStreamInfoEvent.DVRSTREAMINFO, onDVRStreamInfo);
                loadTrait.setTrait(new HTTPStreamingDVRCastDVRTrait(loadTrait.connection, netStream, (event.info as DVRInfo)));
                loadTrait.setTrait(new HTTPStreamingDVRCastTimeTrait(loadTrait.connection, netStream, (event.info as DVRInfo)));
                updateLoadTrait(loadTrait, LoadState.READY);
            };
            var resource:* = (loadTrait.resource as URLResource);
            if (!this.dvrMetadataPresent(resource)){
                updateLoadTrait(loadTrait, LoadState.READY);
                return;
            };
            netStream = (loadTrait.netStream as HTTPNetStream);
            netStream.addEventListener(DVRStreamInfoEvent.DVRSTREAMINFO, onDVRStreamInfo);
            netStream.DVRGetStreamInfo(null);
        }
        protected function createNetStreamQoSInfoHistory(netStream:NetStream):QoSInfoHistory{
            return (new QoSInfoHistory(netStream, QOS_MAX_HISTORY_LENGTH));
        }
        protected function createMetricFactory(netStreamQoSInfoHistory:QoSInfoHistory):MetricFactory{
            return (new DefaultMetricFactory(netStreamQoSInfoHistory));
        }
        protected function createHTTPStreamingFactory():HTTPStreamingFactory{
            return (new HTTPStreamingF4FFactory());
        }
        private function dvrMetadataPresent(resource:URLResource):Boolean{
            var _local2:Metadata = (resource.getMetadataValue(MetadataNamespaces.DVR_METADATA) as Metadata);
            return (!((_local2 == null)));
        }

    }
}//package org.osmf.net.httpstreaming 
﻿package org.osmf.net.httpstreaming {
    import org.osmf.events.*;
    import flash.events.*;
    import flash.utils.*;
    import org.osmf.utils.*;
    import org.osmf.net.httpstreaming.flv.*;

    public class HTTPStreamMixer extends EventDispatcher implements IHTTPStreamSource {

        private static const FILTER_NONE:uint = 0;
        private static const FILTER_VIDEO:uint = 1;
        private static const FILTER_AUDIO:uint = 2;
        private static const FILTER_DATA:uint = 4;
        private static const FILTER_ALL:uint = 0xFF;
        private static const HIGH_PRIORITY:int = 10000;

        private var _dispatcher:IEventDispatcher = null;
        private var _currentTime:uint = 0;
        private var _mediaTime:int = -1;
        private var _alternateTime:int = -1;
        private var _mediaTag:FLVTag = null;
        private var _mediaTagDataLoaded:Boolean = true;
        private var _mediaInput:ByteArray;
        private var _mediaFilterTags:uint = 0;
        private var _mediaHandler:IHTTPStreamHandler = null;
        private var _desiredMediaHandler:IHTTPStreamHandler = null;
        private var _mediaNeedsInitialization:Boolean = false;
        private var _mediaNeedsMoreData:Boolean = false;
        private var _alternateTag:FLVTag = null;
        private var _alternateTagDataLoaded:Boolean = true;
        private var _alternateInput:ByteArray;
        private var _alternateFilterTags:uint = 0;
        private var _alternateHandler:IHTTPStreamHandler = null;
        private var _desiredAlternateHandler:IHTTPStreamHandler = null;
        private var _alternateNeedsInitialization:Boolean = false;
        private var _alternateNeedsMoreData:Boolean = false;
        private var _alternateNeedsSynchronization:Boolean = true;
        private var _alternateIgnored:Boolean = false;
        private var _state:String = null;
        private var _fragmentDuration:Number = 0;

        public function HTTPStreamMixer(dispatcher:IEventDispatcher){
            this._mediaInput = new ByteArray();
            this._alternateInput = new ByteArray();
            super();
            if (dispatcher == null){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.INVALID_PARAM)));
            };
            this._dispatcher = dispatcher;
            addEventListener(DVRStreamInfoEvent.DVRSTREAMINFO, this.onDVRStreamInfo, false, HIGH_PRIORITY, true);
            addEventListener(HTTPStreamingEvent.SCRIPT_DATA, this.onScriptData, false, HIGH_PRIORITY, true);
            addEventListener(HTTPStreamingEvent.BEGIN_FRAGMENT, this.onBeginFragment, false, HIGH_PRIORITY, true);
            addEventListener(HTTPStreamingEvent.END_FRAGMENT, this.onEndFragment, false, HIGH_PRIORITY, true);
            addEventListener(HTTPStreamingEvent.TRANSITION, this.onHTTPStreamingEvent, false, HIGH_PRIORITY, true);
            addEventListener(HTTPStreamingEvent.TRANSITION_COMPLETE, this.onHTTPStreamingEvent, false, HIGH_PRIORITY, true);
            addEventListener(HTTPStreamingEvent.DOWNLOAD_ERROR, this.onHTTPStreamingEvent, false, HIGH_PRIORITY, true);
            addEventListener(HTTPStreamingEvent.FRAGMENT_DURATION, this.onFragmentDuration, false, HIGH_PRIORITY, true);
            addEventListener(HTTPStreamingEvent.DOWNLOAD_COMPLETE, this.onHTTPStreamingEvent, false, HIGH_PRIORITY, true);
            this.setState(HTTPStreamingState.INIT);
            this._alternateIgnored = true;
        }
        public function get isReady():Boolean{
            return (((!((this.video == null))) && (this.video.source.isReady)));
        }
        public function get endOfStream():Boolean{
            return (((!((this.video == null))) && (this.video.source.endOfStream)));
        }
        public function get hasErrors():Boolean{
            return (((!((this.video == null))) && (this.video.source.hasErrors)));
        }
        public function get isLiveStalled():Boolean{
            return (((((!((this.video == null))) && (!((this.video.source == null))))) && (this.video.source.isLiveStalled)));
        }
        public function close():void{
            this.setState(HTTPStreamingState.HALT);
            this.clearBuffers();
            if (this._alternateHandler != null){
                this._alternateHandler.close();
            };
            if (((!((this._desiredAlternateHandler == null))) && (!((this._desiredAlternateHandler == this._alternateHandler))))){
                this._desiredAlternateHandler.close();
            };
            if (this._mediaHandler != null){
                this._mediaHandler.close();
            };
            if (((!((this._desiredMediaHandler == null))) && (!((this._desiredMediaHandler == this._mediaHandler))))){
                this._desiredMediaHandler.close();
            };
        }
        public function seek(offset:Number):void{
            this.setState(HTTPStreamingState.SEEK);
            this.clearBuffers();
            this._currentTime = 0;
            this._alternateIgnored = (this._alternateHandler == null);
            this.updateFilters();
            if (this._mediaHandler != null){
                this._mediaHandler.source.seek(offset);
            };
            if (((!((this._desiredMediaHandler == null))) && (!((this._desiredMediaHandler == this._mediaHandler))))){
                this._desiredMediaHandler.source.seek(offset);
            };
            if (this._alternateHandler != null){
                this._alternateHandler.source.seek(offset);
            };
            if (((!((this._desiredAlternateHandler == null))) && (!((this._desiredAlternateHandler == this._alternateHandler))))){
                this._desiredAlternateHandler.source.seek(offset);
            };
        }
        public function getBytes():ByteArray{
            return (this.doSomeProcessingAndGetBytes());
        }
        public function get audio():IHTTPStreamHandler{
            return (this._desiredAlternateHandler);
        }
        public function set audio(value:IHTTPStreamHandler):void{
            if (this._desiredAlternateHandler != value){
                this._desiredAlternateHandler = value;
                this._alternateNeedsInitialization = true;
                this._dispatcher.dispatchEvent(new HTTPStreamingEvent(HTTPStreamingEvent.TRANSITION, false, false, NaN, null, null, ((this._desiredAlternateHandler)!=null) ? this._desiredAlternateHandler.streamName : null));
            };
        }
        public function get video():IHTTPStreamHandler{
            return (this._desiredMediaHandler);
        }
        public function set video(value:IHTTPStreamHandler):void{
            if (value == null){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.INVALID_PARAM)));
            };
            if (this._desiredMediaHandler != value){
                this._desiredMediaHandler = value;
                this._mediaNeedsInitialization = true;
            };
        }
        public function get fragmentDuration():Number{
            return (this._fragmentDuration);
        }
        public function get isBestEffortFetchEnabled():Boolean{
            return (((((!((this._desiredMediaHandler == null))) && (!((this._desiredMediaHandler.source == null))))) && (this._desiredMediaHandler.source.isBestEffortFetchEnabled)));
        }
        protected function doSomeProcessingAndGetBytes():ByteArray{
            var _local2:int;
            var _local3:ByteArray;
            var _local4:ByteArray;
            var _local1:ByteArray;
            switch (this._state){
                case HTTPStreamingState.INIT:
                    break;
                case HTTPStreamingState.SEEK:
                    this.setState(HTTPStreamingState.READ);
                    break;
                case HTTPStreamingState.READ:
                    _local1 = this.internalMixBytes();
                    if (_local1.length == 0){
                        _local1 = null;
                    } else {
                        _local1.position = 0;
                    };
                    if (((((this._mediaNeedsInitialization) && ((this._mediaTag == null)))) || (((this._alternateNeedsInitialization) && ((this._alternateTag == null)))))){
                        this.updateHandlers();
                        this.updateFilters();
                    };
                    if (((this._alternateNeedsSynchronization) && (((!((this._mediaTime == -1))) || (!((this._alternateTime == -1))))))){
                        this._alternateNeedsSynchronization = false;
                        if (this._alternateHandler != null){
                            _local2 = ((this._alternateTime)!=-1) ? this._alternateTime : this._mediaTime;
                            this._alternateHandler.source.seek((_local2 / 1000));
                        };
                    };
                    this._mediaNeedsMoreData = ((((!(this._mediaTagDataLoaded)) || ((this._mediaInput.bytesAvailable == 0)))) || (((!((this._mediaInput.bytesAvailable == 0))) && ((this._mediaTag == null)))));
                    this._alternateNeedsMoreData = ((((!(this._alternateTagDataLoaded)) || ((this._alternateInput.bytesAvailable == 0)))) || (((!((this._alternateInput.bytesAvailable == 0))) && ((this._alternateTag == null)))));
                    if (((this._mediaNeedsMoreData) || (this._alternateNeedsMoreData))){
                        _local3 = null;
                        if (((((((!(this._alternateIgnored)) && (this._alternateNeedsMoreData))) && (!((this._alternateHandler == null))))) && (this._alternateHandler.source.isReady))){
                            _local3 = this._alternateHandler.source.getBytes();
                            if ((((_local3 == null)) && (((this._alternateHandler.source.hasErrors) || (this._alternateHandler.source.endOfStream))))){
                                this._dispatcher.dispatchEvent(new HTTPStreamingEvent(HTTPStreamingEvent.ACTION_NEEDED, false, false, NaN, null, null, ((this._alternateHandler)!=null) ? this._alternateHandler.streamName : null));
                                this._alternateIgnored = true;
                                this.updateFilters();
                            };
                        };
                        _local4 = null;
                        if (((((this._mediaNeedsMoreData) && (!((this._mediaHandler == null))))) && (this._mediaHandler.source.isReady))){
                            _local4 = this._mediaHandler.source.getBytes();
                        };
                        if (((!((_local4 == null))) || (!((_local3 == null))))){
                            this.updateBuffers(_local4, _local3);
                        };
                    };
                    break;
            };
            return (_local1);
        }
        private function internalMixBytes():ByteArray{
            var _local1:ByteArray = new ByteArray();
            var _local2:Boolean;
            while (_local2) {
                if (this._mediaTag == null){
                    this._mediaTagDataLoaded = false;
                };
                while (((!(this._mediaTagDataLoaded)) && (this._mediaInput.bytesAvailable))) {
                    if ((((this._mediaTag == null)) && ((this._mediaInput.bytesAvailable < FLVTag.TAG_HEADER_BYTE_COUNT)))){
                        return (_local1);
                    };
                    if (this._mediaTag == null){
                        this._mediaTag = this.createTag(this._mediaInput.readByte());
                        this._mediaTag.readRemainingHeader(this._mediaInput);
                    };
                    if (!this._mediaTagDataLoaded){
                        if (this._mediaInput.bytesAvailable < (this._mediaTag.dataSize + FLVTag.PREV_TAG_BYTE_COUNT)){
                            return (_local1);
                        };
                        if (this.shouldFilterTag(this._mediaTag, this._mediaFilterTags)){
                            this._mediaInput.position = (this._mediaInput.position + (this._mediaTag.dataSize + FLVTag.PREV_TAG_BYTE_COUNT));
                            this._mediaTag = null;
                        } else {
                            this._mediaTag.readData(this._mediaInput);
                            this._mediaTag.readPrevTag(this._mediaInput);
                            this._mediaTagDataLoaded = true;
                            this.updateTimes(this._mediaTag);
                        };
                    };
                };
                if (this._alternateTag == null){
                    this._alternateTagDataLoaded = false;
                };
                while (((((!(this._alternateIgnored)) && (!(this._alternateTagDataLoaded)))) && (this._alternateInput.bytesAvailable))) {
                    if ((((this._alternateTag == null)) && ((this._alternateInput.bytesAvailable < FLVTag.TAG_HEADER_BYTE_COUNT)))){
                        return (_local1);
                    };
                    if (this._alternateTag == null){
                        this._alternateTag = this.createTag(this._alternateInput.readByte());
                        this._alternateTag.readRemainingHeader(this._alternateInput);
                    };
                    if (!this._alternateTagDataLoaded){
                        if (this._alternateInput.bytesAvailable < (this._alternateTag.dataSize + FLVTag.PREV_TAG_BYTE_COUNT)){
                            return (_local1);
                        };
                        if (this.shouldFilterTag(this._alternateTag, this._alternateFilterTags)){
                            this._alternateInput.position = (this._alternateInput.position + (this._alternateTag.dataSize + FLVTag.PREV_TAG_BYTE_COUNT));
                            this._alternateTag = null;
                        } else {
                            this._alternateTag.readData(this._alternateInput);
                            this._alternateTag.readPrevTag(this._alternateInput);
                            this._alternateTagDataLoaded = true;
                            this.updateTimes(this._alternateTag);
                        };
                    };
                };
                if (((this._mediaTagDataLoaded) || (this._alternateTagDataLoaded))){
                    if (this._alternateIgnored){
                        this._currentTime = this._mediaTag.timestamp;
                        this._mediaTag.write(_local1);
                        this._mediaTag = null;
                        _local2 = true;
                    } else {
                        if ((((this._mediaTime > -1)) || ((this._alternateTime > -1)))){
                            if (((((((!((this._alternateTag == null))) && (this._alternateTagDataLoaded))) && ((this._alternateTag.timestamp >= this._currentTime)))) && ((this._alternateTag.timestamp <= this._mediaTime)))){
                                this._currentTime = this._alternateTag.timestamp;
                                this._alternateTag.write(_local1);
                                this._alternateTag = null;
                            } else {
                                if (((((((!((this._mediaTag == null))) && (this._mediaTagDataLoaded))) && ((this._mediaTag.timestamp >= this._currentTime)))) && ((this._mediaTag.timestamp <= this._alternateTime)))){
                                    this._currentTime = this._mediaTag.timestamp;
                                    this._mediaTag.write(_local1);
                                    this._mediaTag = null;
                                };
                            };
                            _local2 = ((this._mediaInput.bytesAvailable) && (this._alternateInput.bytesAvailable));
                        } else {
                            if (((!((this._alternateTime == -1))) && (this._alternateNeedsSynchronization))){
                                this._alternateNeedsSynchronization = false;
                            };
                            _local2 = false;
                        };
                    };
                } else {
                    _local2 = false;
                };
            };
            return (_local1);
        }
        private function updateBuffers(mediaInput:IDataInput, alternateInput:IDataInput):void{
            var _local3:ByteArray = new ByteArray();
            if ((((((this._mediaTag == null)) && (!((this._mediaInput.position == 0))))) && ((this._mediaInput.bytesAvailable < (this._mediaInput.length / 2))))){
                this._mediaInput.readBytes(_local3, 0, this._mediaInput.bytesAvailable);
                this._mediaInput.clear();
                _local3.readBytes(this._mediaInput, 0, _local3.bytesAvailable);
                _local3.clear();
            };
            if ((((((this._alternateTag == null)) && (!((this._alternateInput.position == 0))))) && ((this._alternateInput.bytesAvailable < (this._alternateInput.length / 2))))){
                this._alternateInput.readBytes(_local3, 0, this._alternateInput.bytesAvailable);
                this._alternateInput.clear();
                _local3.readBytes(this._alternateInput, 0, _local3.bytesAvailable);
                _local3.clear();
            };
            if (((!((mediaInput == null))) && (mediaInput.bytesAvailable))){
                mediaInput.readBytes(this._mediaInput, this._mediaInput.length, mediaInput.bytesAvailable);
            };
            if (((!((alternateInput == null))) && (alternateInput.bytesAvailable))){
                alternateInput.readBytes(this._alternateInput, this._alternateInput.length, alternateInput.bytesAvailable);
            };
        }
        private function clearBuffers():void{
            this.clearAlternateBuffers();
            this.clearMediaBuffers();
        }
        private function clearAlternateBuffers():void{
            this._alternateTime = -1;
            this._alternateTag = null;
            this._alternateTagDataLoaded = false;
            this._alternateInput.clear();
        }
        private function clearMediaBuffers():void{
            this._mediaTime = -1;
            this._mediaTag = null;
            this._mediaTagDataLoaded = false;
            this._mediaInput.clear();
        }
        private function createTag(type:int):FLVTag{
            var _local2:FLVTag;
            switch (type){
                case FLVTag.TAG_TYPE_AUDIO:
                case FLVTag.TAG_TYPE_ENCRYPTED_AUDIO:
                    _local2 = new FLVTagAudio(type);
                    break;
                case FLVTag.TAG_TYPE_VIDEO:
                case FLVTag.TAG_TYPE_ENCRYPTED_VIDEO:
                    _local2 = new FLVTagVideo(type);
                    break;
                case FLVTag.TAG_TYPE_SCRIPTDATAOBJECT:
                case FLVTag.TAG_TYPE_ENCRYPTED_SCRIPTDATAOBJECT:
                    _local2 = new FLVTagScriptDataObject(type);
                    break;
                    _local2 = new FLVTag(type);
            };
            return (_local2);
        }
        private function shouldFilterTag(tag:FLVTag, filterTags:uint):Boolean{
            if (tag == null){
                return (true);
            };
            if (tag.timestamp < this._currentTime){
                return (true);
            };
            switch (tag.tagType){
                case FLVTag.TAG_TYPE_AUDIO:
                case FLVTag.TAG_TYPE_ENCRYPTED_AUDIO:
                    return ((((FILTER_AUDIO & filterTags)) || ((tag.timestamp < this._alternateTime))));
                case FLVTag.TAG_TYPE_VIDEO:
                case FLVTag.TAG_TYPE_ENCRYPTED_VIDEO:
                    return ((((FILTER_VIDEO & filterTags)) || ((tag.timestamp < this._mediaTime))));
                case FLVTag.TAG_TYPE_SCRIPTDATAOBJECT:
                case FLVTag.TAG_TYPE_ENCRYPTED_SCRIPTDATAOBJECT:
                    return ((((FILTER_DATA & filterTags)) || ((tag.timestamp < this._mediaTime))));
            };
            return (false);
        }
        private function updateTimes(tag:FLVTag):void{
            if (tag != null){
                if ((tag is FLVTagAudio)){
                    this._alternateTime = tag.timestamp;
                } else {
                    this._mediaTime = tag.timestamp;
                };
            };
        }
        private function updateHandlers():void{
            if (this._mediaNeedsInitialization){
                if (this._mediaHandler != this._desiredMediaHandler){
                    if (this._mediaHandler != null){
                        this._mediaHandler.close();
                        this._mediaHandler = null;
                    };
                    this._mediaHandler = this._desiredMediaHandler;
                    this.clearMediaBuffers();
                };
                this._mediaNeedsInitialization = false;
            };
            if (this._alternateNeedsInitialization){
                if (this._alternateHandler != this._desiredAlternateHandler){
                    if (this._alternateHandler != null){
                        this._alternateHandler.close();
                        this._alternateHandler = null;
                    };
                    this._alternateHandler = this._desiredAlternateHandler;
                    this.clearAlternateBuffers();
                    this._alternateNeedsSynchronization = true;
                    this._alternateIgnored = (this._alternateHandler == null);
                };
                this._alternateNeedsInitialization = false;
                this._dispatcher.dispatchEvent(new HTTPStreamingEvent(HTTPStreamingEvent.TRANSITION_COMPLETE, false, false, NaN, null, null, ((this._alternateHandler)!=null) ? this._alternateHandler.streamName : null));
            };
        }
        private function updateFilters():void{
            if (this._alternateIgnored){
                this._mediaFilterTags = FILTER_NONE;
                this._alternateFilterTags = FILTER_ALL;
            } else {
                this._mediaFilterTags = FILTER_AUDIO;
                this._alternateFilterTags = FILTER_VIDEO;
            };
        }
        private function setState(value:String):void{
            this._state = value;
        }
        private function onScriptData(event:HTTPStreamingEvent):void{
            var _local2:*;
            if (((!((this._alternateHandler == null))) && ((this._alternateHandler.streamName == event.url)))){
                _local2 = event.scriptDataObject.objects[0];
                if ((((_local2 == "onMetaData")) || ((_local2 == "onXMPData")))){
                    return;
                };
            };
            this._dispatcher.dispatchEvent(event);
        }
        private function onDVRStreamInfo(event:DVRStreamInfoEvent):void{
            this._dispatcher.dispatchEvent(event);
        }
        private function onBeginFragment(event:HTTPStreamingEvent):void{
            if (((!((this._mediaHandler == null))) && ((this._mediaHandler.streamName == event.url)))){
                if (((!((this._alternateHandler == null))) && (this._alternateIgnored))){
                    this._alternateIgnored = false;
                    this._alternateNeedsSynchronization = true;
                };
                this._dispatcher.dispatchEvent(event);
            };
        }
        private function onEndFragment(event:HTTPStreamingEvent):void{
            if (((!((this._mediaHandler == null))) && ((this._mediaHandler.streamName == event.url)))){
                this._dispatcher.dispatchEvent(event);
            };
        }
        private function onHTTPStreamingEvent(event:HTTPStreamingEvent):void{
            this._dispatcher.dispatchEvent(event);
        }
        private function onFragmentDuration(event:HTTPStreamingEvent):void{
            if (((!((this._mediaHandler == null))) && ((this._mediaHandler.streamName == event.url)))){
                this._fragmentDuration = event.fragmentDuration;
            };
        }

    }
}//package org.osmf.net.httpstreaming 
﻿package org.osmf.net.httpstreaming {

    public interface IHTTPStreamHandler {

        function get source():IHTTPStreamSource;
        function get isOpen():Boolean;
        function get streamName():String;
        function get qosInfo():HTTPStreamHandlerQoSInfo;
        function open(_arg1:String):void;
        function close():void;
        function getDVRInfo(_arg1:Object):void;
        function changeQualityLevel(_arg1:String):void;

    }
}//package org.osmf.net.httpstreaming 
﻿package org.osmf.net.httpstreaming.dvr {
    import org.osmf.events.*;
    import flash.net.*;
    import org.osmf.traits.*;
    import org.osmf.net.httpstreaming.*;

    public class HTTPStreamingDVRCastDVRTrait extends DVRTrait {

        private var _connection:NetConnection;
        private var _stream:HTTPNetStream;
        private var _dvrInfo:DVRInfo;

        public function HTTPStreamingDVRCastDVRTrait(connection:NetConnection, stream:HTTPNetStream, dvrInfo:DVRInfo){
            this._connection = connection;
            this._stream = stream;
            this._dvrInfo = dvrInfo;
            this._stream.addEventListener(DVRStreamInfoEvent.DVRSTREAMINFO, this.onDVRStreamInfo);
            super(dvrInfo.isRecording, dvrInfo.windowDuration);
        }
        private function onDVRStreamInfo(event:DVRStreamInfoEvent):void{
            this._dvrInfo = (event.info as DVRInfo);
            setIsRecording(((this._dvrInfo)==null) ? false : this._dvrInfo.isRecording);
        }

    }
}//package org.osmf.net.httpstreaming.dvr 
﻿package org.osmf.net.httpstreaming.dvr {
    import org.osmf.events.*;
    import flash.events.*;
    import flash.net.*;
    import org.osmf.traits.*;
    import org.osmf.net.*;
    import org.osmf.net.httpstreaming.*;

    public class HTTPStreamingDVRCastTimeTrait extends TimeTrait {

        private var _connection:NetConnection;
        private var _stream:HTTPNetStream;
        private var _dvrInfo:DVRInfo;

        public function HTTPStreamingDVRCastTimeTrait(connection:NetConnection, stream:HTTPNetStream, dvrInfo:DVRInfo){
            super(NaN);
            this._connection = connection;
            this._stream = stream;
            this._dvrInfo = dvrInfo;
            this._stream.addEventListener(DVRStreamInfoEvent.DVRSTREAMINFO, this.onDVRStreamInfo);
            this._stream.addEventListener(NetStatusEvent.NET_STATUS, this.onNetStatus);
            NetClient(this._stream.client).addHandler(NetStreamCodes.ON_PLAY_STATUS, this.onPlayStatus);
        }
        override public function get duration():Number{
            if (this._dvrInfo == null){
                return (NaN);
            };
            return (this._dvrInfo.curLength);
        }
        override public function get currentTime():Number{
            return (this._stream.time);
        }
        private function onDVRStreamInfo(event:DVRStreamInfoEvent):void{
            this._dvrInfo = (event.info as DVRInfo);
            setDuration(this._dvrInfo.curLength);
        }
        private function onNetStatus(event:NetStatusEvent):void{
            switch (event.info.code){
                case NetStreamCodes.NETSTREAM_PLAY_UNPUBLISH_NOTIFY:
                    signalComplete();
                    break;
            };
        }
        private function onPlayStatus(event:Object):void{
            switch (event.code){
                case NetStreamCodes.NETSTREAM_PLAY_COMPLETE:
                    signalComplete();
                    break;
            };
        }

    }
}//package org.osmf.net.httpstreaming.dvr 
﻿package org.osmf.net.httpstreaming.dvr {

    public class DVRInfo {

        public var id:String;
        public var url:String;
        public var beginOffset:uint = 0;
        public var endOffset:uint = 0;
        public var windowDuration:int = -1;
        public var offline:Boolean;
        public var isRecording:Boolean;
        public var curLength:Number;
        public var startTime:Number = NaN;

    }
}//package org.osmf.net.httpstreaming.dvr 
﻿package org.osmf.net.httpstreaming {

    class HTTPStreamingState {

        static const INIT:String = "init";
        static const LOAD:String = "load";
        static const WAIT:String = "wait";
        static const BEGIN_FRAGMENT:String = "beginFragment";
        static const END_FRAGMENT:String = "endFragment";
        static const PLAY:String = "play";
        static const READ:String = "read";
        static const SEEK:String = "seek";
        static const STOP:String = "stop";
        static const HALT:String = "halt";

    }
}//package org.osmf.net.httpstreaming 
﻿package org.osmf.net.httpstreaming {
    import org.osmf.media.*;
    import org.osmf.events.*;
    import flash.events.*;
    import flash.utils.*;
    import flash.net.*;
    import org.osmf.utils.*;
    import org.osmf.net.*;
    import __AS3__.vec.*;
    import org.osmf.net.qos.*;
    import org.osmf.net.httpstreaming.dvr.*;
    import org.osmf.net.httpstreaming.flv.*;

    public class HTTPNetStream extends NetStream {

        private static const HIGH_PRIORITY:int = 2147483647;

        private var _desiredBufferTime_Min:Number = 0;
        private var _desiredBufferTime_Max:Number = 0;
        private var _mainTimer:Timer = null;
        private var _state:String = "init";
        private var _playStreamName:String = null;
        private var _playStart:Number = -1;
        private var _playForDuration:Number = -1;
        private var _resource:URLResource = null;
        private var _factory:HTTPStreamingFactory = null;
        private var _mixer:HTTPStreamMixer = null;
        private var _videoHandler:IHTTPStreamHandler = null;
        private var _source:IHTTPStreamSource = null;
        private var _qualityLevelNeedsChanging:Boolean = false;
        private var _desiredQualityStreamName:String = null;
        private var _audioStreamNeedsChanging:Boolean = false;
        private var _desiredAudioStreamName:String = null;
        private var _seekTarget:Number = -1;
        private var _enhancedSeekTarget:Number = -1;
        private var _enhancedSeekTags:Vector.<FLVTag>;
        private var _notifyPlayStartPending:Boolean = false;
        private var _notifyPlayUnpublishPending:Boolean = false;
        private var _initialTime:Number = -1;
        private var _seekTime:Number = -1;
        private var _lastValidTimeTime:Number = 0;
        private var _initializeFLVParser:Boolean = false;
        private var _flvParser:FLVParser = null;
        private var _flvParserDone:Boolean = true;
        private var _flvParserProcessed:uint;
        private var _flvParserIsSegmentStart:Boolean = false;
        private var _insertScriptDataTags:Vector.<FLVTagScriptDataObject> = null;
        private var _fileTimeAdjustment:Number = 0;
        private var _mediaFragmentDuration:Number = 0;
        private var _dvrInfo:DVRInfo = null;
        private var _waitForDRM:Boolean = false;
        private var maxFPS:Number = 0;
        private var playbackDetailsRecorder:NetStreamPlaybackDetailsRecorder = null;
        private var lastTransitionIndex:int = -1;
        private var lastTransitionStreamURL:String = null;
        private var lastTime:Number = NaN;
        private var timeBeforeSeek:Number = NaN;
        private var seeking:Boolean = false;
        private var emptyBufferInterruptionSinceLastQoSUpdate:Boolean = false;
        private var _bytesLoaded:uint = 0;
        private var _wasSourceLiveStalled:Boolean = false;
        private var _issuedLiveStallNetStatus:Boolean = false;
        private var _wasBufferEmptied:Boolean = false;
        private var _isPlaying:Boolean = false;
        private var _isPaused:Boolean = false;
        private var _liveStallStartTime:Date;

        public function HTTPNetStream(connection:NetConnection, factory:HTTPStreamingFactory, resource:URLResource=null){
            super(connection);
            this._resource = resource;
            this._factory = factory;
            addEventListener(DVRStreamInfoEvent.DVRSTREAMINFO, this.onDVRStreamInfo);
            addEventListener(HTTPStreamingEvent.SCRIPT_DATA, this.onScriptData);
            addEventListener(HTTPStreamingEvent.BEGIN_FRAGMENT, this.onBeginFragment);
            addEventListener(HTTPStreamingEvent.END_FRAGMENT, this.onEndFragment);
            addEventListener(HTTPStreamingEvent.TRANSITION, this.onTransition);
            addEventListener(HTTPStreamingEvent.TRANSITION_COMPLETE, this.onTransitionComplete);
            addEventListener(HTTPStreamingEvent.ACTION_NEEDED, this.onActionNeeded);
            addEventListener(HTTPStreamingEvent.DOWNLOAD_ERROR, this.onDownloadError);
            addEventListener(HTTPStreamingEvent.DOWNLOAD_COMPLETE, this.onDownloadComplete);
            addEventListener(NetStatusEvent.NET_STATUS, this.onNetStatus, false, HIGH_PRIORITY, true);
            addEventListener(DRMErrorEvent.DRM_ERROR, this.onDRMError);
            addEventListener(DRMStatusEvent.DRM_STATUS, this.onDRMStatus);
            this.bufferTime = OSMFSettings.hdsMinimumBufferTime;
            this.bufferTimeMax = 0;
            this.setState(HTTPStreamingState.INIT);
            this.createSource(resource);
            this._mainTimer = new Timer(OSMFSettings.hdsMainTimerInterval);
            this._mainTimer.addEventListener(TimerEvent.TIMER, this.onMainTimer);
        }
        override public function set client(object:Object):void{
            super.client = object;
            if ((((client is NetClient)) && ((this._resource is DynamicStreamingResource)))){
                this.playbackDetailsRecorder = new NetStreamPlaybackDetailsRecorder(this, (client as NetClient), (this._resource as DynamicStreamingResource));
            };
        }
        override public function play(... _args):void{
            this.processPlayParameters(_args);
            super.play(null);
            var _local2:FLVHeader = new FLVHeader();
            var _local3:ByteArray = new ByteArray();
            _local2.write(_local3);
            this.attemptAppendBytes(_local3);
            this._mainTimer.start();
            this._initialTime = -1;
            this._seekTime = -1;
            this._isPlaying = true;
            this._isPaused = false;
            this._notifyPlayStartPending = true;
            this._notifyPlayUnpublishPending = false;
            this.changeSourceTo(this._playStreamName, this._playStart);
        }
        override public function pause():void{
            this._isPaused = true;
            super.pause();
        }
        override public function resume():void{
            this._isPaused = false;
            super.resume();
        }
        override public function play2(param:NetStreamPlayOptions):void{
            switch (param.transition){
                case NetStreamPlayTransitions.RESET:
                    this.play(param.streamName, param.start, param.len);
                    break;
                case NetStreamPlayTransitions.SWITCH:
                    this.changeQualityLevelTo(param.streamName);
                    break;
                case NetStreamPlayTransitions.SWAP:
                    this.changeAudioStreamTo(param.streamName);
                    break;
                    super.play2(param);
            };
        }
        override public function seek(offset:Number):void{
            if (offset < 0){
                offset = 0;
            };
            if (this._state != HTTPStreamingState.INIT){
                if (this._initialTime < 0){
                    this._seekTarget = (offset + 0);
                } else {
                    this._seekTarget = (offset + this._initialTime);
                };
                this.setState(HTTPStreamingState.SEEK);
                dispatchEvent(new NetStatusEvent(NetStatusEvent.NET_STATUS, false, false, {
                    code:NetStreamCodes.NETSTREAM_SEEK_START,
                    level:"status"
                }));
            };
            this._notifyPlayUnpublishPending = false;
        }
        override public function close():void{
            if (this._videoHandler != null){
                this._videoHandler.close();
            };
            if (this._mixer != null){
                this._mixer.close();
            };
            this._mainTimer.stop();
            this.notifyPlayStop();
            this.setState(HTTPStreamingState.HALT);
            super.close();
        }
        override public function set bufferTime(value:Number):void{
            super.bufferTime = value;
            this._desiredBufferTime_Min = Math.max(OSMFSettings.hdsMinimumBufferTime, value);
            this._desiredBufferTime_Max = (this._desiredBufferTime_Min + OSMFSettings.hdsAdditionalBufferTime);
        }
        override public function get time():Number{
            if ((((this._seekTime >= 0)) && ((this._initialTime >= 0)))){
                this._lastValidTimeTime = ((super.time + this._seekTime) - this._initialTime);
            };
            return (this._lastValidTimeTime);
        }
        override public function get bytesLoaded():uint{
            return (this._bytesLoaded);
        }
        public function DVRGetStreamInfo(streamName:Object):void{
            if (!this._source.isReady){
                this._videoHandler.getDVRInfo(streamName);
            };
        }
        public function get isBestEffortFetchEnabled():Boolean{
            return (((!((this._source == null))) && (this._source.isBestEffortFetchEnabled)));
        }
        private function setState(value:String):void{
            this._state = value;
        }
        private function processPlayParameters(args:Array):void{
            if (args.length < 1){
                throw (new Error("HTTPNetStream.play() requires at least one argument"));
            };
            this._playStreamName = args[0];
            this._playStart = 0;
            if (args.length >= 2){
                this._playStart = Number(args[1]);
            };
            this._playForDuration = -1;
            if (args.length >= 3){
                this._playForDuration = Number(args[2]);
            };
        }
        private function changeSourceTo(streamName:String, seekTarget:Number):void{
            this._initializeFLVParser = true;
            this._seekTarget = seekTarget;
            this._videoHandler.open(streamName);
            this.setState(HTTPStreamingState.SEEK);
        }
        private function changeQualityLevelTo(streamName:String):void{
            this._qualityLevelNeedsChanging = true;
            this._desiredQualityStreamName = streamName;
            if (((this._source.isReady) && (((!((this._videoHandler == null))) && (!((this._videoHandler.streamName == this._desiredQualityStreamName))))))){
                this._videoHandler.changeQualityLevel(this._desiredQualityStreamName);
                this._qualityLevelNeedsChanging = false;
                this._desiredQualityStreamName = null;
            };
            this._notifyPlayUnpublishPending = false;
        }
        private function changeAudioStreamTo(streamName:String):void{
            var _local2:MediaResourceBase;
            if (this._mixer == null){
                this._audioStreamNeedsChanging = false;
                this._desiredAudioStreamName = null;
                return;
            };
            this._audioStreamNeedsChanging = true;
            this._desiredAudioStreamName = streamName;
            if (((this._videoHandler.isOpen) && ((((((this._mixer.audio == null)) && (!((this._desiredAudioStreamName == null))))) || (((!((this._mixer.audio == null))) && (!((this._mixer.audio.streamName == this._desiredAudioStreamName))))))))){
                _local2 = HTTPStreamingUtils.createHTTPStreamingResource(this._resource, this._desiredAudioStreamName);
                if (_local2 != null){
                    this._mixer.audio = new HTTPStreamSource(this._factory, _local2, this._mixer);
                    this._mixer.audio.open(this._desiredAudioStreamName);
                } else {
                    this._mixer.audio = null;
                };
                this._audioStreamNeedsChanging = false;
                this._desiredAudioStreamName = null;
            };
            this._notifyPlayUnpublishPending = false;
        }
        private function onNetStatus(event:NetStatusEvent):void{
            switch (event.info.code){
                case NetStreamCodes.NETSTREAM_BUFFER_EMPTY:
                    this.emptyBufferInterruptionSinceLastQoSUpdate = true;
                    this._wasBufferEmptied = true;
                    if (this._state == HTTPStreamingState.HALT){
                        if (this._notifyPlayUnpublishPending){
                            this.notifyPlayUnpublish();
                            this._notifyPlayUnpublishPending = false;
                        };
                    };
                    break;
                case NetStreamCodes.NETSTREAM_BUFFER_FULL:
                    this._wasBufferEmptied = false;
                    break;
                case NetStreamCodes.NETSTREAM_BUFFER_FLUSH:
                    this._wasBufferEmptied = false;
                    break;
                case NetStreamCodes.NETSTREAM_PLAY_STREAMNOTFOUND:
                    this.close();
                    break;
                case NetStreamCodes.NETSTREAM_SEEK_NOTIFY:
                    if (!event.info.hasOwnProperty("sentFromHTTPNetStream")){
                        event.stopImmediatePropagation();
                    };
                    break;
            };
            if (event.info.code == NetStreamCodes.NETSTREAM_DRM_UPDATE){
                this._waitForDRM = true;
            };
        }
        private function onMainTimer(timerEvent:TimerEvent):void{
            var _local2:int;
            var _local3:Boolean;
            var _local4:Object;
            var _local5:FLVTagScriptDataObject;
            var _local6:ByteArray;
            var _local7:Object;
            var _local8:FLVTagScriptDataObject;
            var _local9:ByteArray;
            if (((this.seeking) && (!((this.time == this.timeBeforeSeek))))){
                this.seeking = false;
                this.timeBeforeSeek = Number.NaN;
                dispatchEvent(new NetStatusEvent(NetStatusEvent.NET_STATUS, false, false, {
                    code:NetStreamCodes.NETSTREAM_SEEK_NOTIFY,
                    level:"status",
                    seekPoint:this.time,
                    sentFromHTTPNetStream:true
                }));
            };
            if (currentFPS > this.maxFPS){
                this.maxFPS = currentFPS;
            };
            switch (this._state){
                case HTTPStreamingState.INIT:
                    break;
                case HTTPStreamingState.WAIT:
                    if (((!(this._waitForDRM)) && ((((this.bufferLength < this._desiredBufferTime_Min)) || (this.checkIfExtraBufferingNeeded()))))){
                        this.setState(HTTPStreamingState.PLAY);
                    };
                    break;
                case HTTPStreamingState.SEEK:
                    if (this._source.isReady){
                        this.timeBeforeSeek = this.time;
                        this.seeking = true;
                        this._flvParser = null;
                        if (this._enhancedSeekTags != null){
                            this._enhancedSeekTags.length = 0;
                            this._enhancedSeekTags = null;
                        };
                        this._enhancedSeekTarget = this._seekTarget;
                        super.seek(0);
                        appendBytesAction(NetStreamAppendBytesAction.RESET_SEEK);
                        this._wasBufferEmptied = true;
                        if (this.playbackDetailsRecorder != null){
                            if (this.playbackDetailsRecorder.playingIndex != this.lastTransitionIndex){
                                _local7 = new Object();
                                _local7.code = NetStreamCodes.NETSTREAM_PLAY_TRANSITION_COMPLETE;
                                _local7.level = "status";
                                _local7.details = this.lastTransitionStreamURL;
                                _local8 = new FLVTagScriptDataObject();
                                _local8.objects = ["onPlayStatus", _local7];
                                this.insertScriptDataTag(_local8);
                            };
                        };
                        this._seekTime = -1;
                        this._source.seek(this._seekTarget);
                        this.setState(HTTPStreamingState.WAIT);
                    };
                    break;
                case HTTPStreamingState.PLAY:
                    if (this._notifyPlayStartPending){
                        this._notifyPlayStartPending = false;
                        this.notifyPlayStart();
                    };
                    if (this._qualityLevelNeedsChanging){
                        this.changeQualityLevelTo(this._desiredQualityStreamName);
                    };
                    if (this._audioStreamNeedsChanging){
                        this.changeAudioStreamTo(this._desiredAudioStreamName);
                    };
                    _local2 = 0;
                    _local3 = true;
                    while (_local3) {
                        _local9 = this._source.getBytes();
                        this.issueLivenessEventsIfNeeded();
                        if (_local9 != null){
                            _local2 = (_local2 + this.processAndAppend(_local9));
                        };
                        if (((((!((this._state == HTTPStreamingState.PLAY))) || ((_local9 == null)))) || ((_local2 >= OSMFSettings.hdsBytesProcessingLimit)))){
                            _local3 = false;
                        };
                    };
                    if (this._state == HTTPStreamingState.PLAY){
                        if (_local2 > 0){
                            if (this._waitForDRM){
                                this.setState(HTTPStreamingState.WAIT);
                            } else {
                                if (!this.checkIfExtraBufferingNeeded()){
                                    if (this.bufferLength > this._desiredBufferTime_Max){
                                        this.setState(HTTPStreamingState.WAIT);
                                    };
                                };
                            };
                        } else {
                            if (this._source.endOfStream){
                                super.bufferTime = 0.1;
                                this.setState(HTTPStreamingState.STOP);
                            };
                        };
                    };
                    break;
                case HTTPStreamingState.STOP:
                    appendBytesAction(NetStreamAppendBytesAction.END_SEQUENCE);
                    appendBytesAction(NetStreamAppendBytesAction.RESET_SEEK);
                    _local4 = new Object();
                    _local4.code = NetStreamCodes.NETSTREAM_PLAY_COMPLETE;
                    _local4.level = "status";
                    _local5 = new FLVTagScriptDataObject();
                    _local5.objects = ["onPlayStatus", _local4];
                    _local6 = new ByteArray();
                    _local5.write(_local6);
                    this.attemptAppendBytes(_local6);
                    appendBytesAction(NetStreamAppendBytesAction.END_SEQUENCE);
                    this.setState(HTTPStreamingState.HALT);
                    break;
                case HTTPStreamingState.HALT:
                    break;
            };
        }
        private function checkIfExtraBufferingNeeded():Boolean{
            if (((((!(this._wasBufferEmptied)) || (!(this._isPlaying)))) || (this._isPaused))){
                return (false);
            };
            if (this.bufferLength > (this._desiredBufferTime_Max + 30)){
                return (false);
            };
            return (true);
        }
        private function issueLivenessEventsIfNeeded():void{
            if (((this._source.isLiveStalled) && (this._wasBufferEmptied))){
                if (!this._wasSourceLiveStalled){
                    this._wasSourceLiveStalled = true;
                    this._liveStallStartTime = new Date();
                    this._issuedLiveStallNetStatus = false;
                };
                if (this.shouldIssueLiveStallNetStatus()){
                    dispatchEvent(new NetStatusEvent(NetStatusEvent.NET_STATUS, false, false, {
                        code:NetStreamCodes.NETSTREAM_PLAY_LIVE_STALL,
                        level:"status"
                    }));
                    this._issuedLiveStallNetStatus = true;
                };
            } else {
                if (((this._wasSourceLiveStalled) && (this._issuedLiveStallNetStatus))){
                    dispatchEvent(new NetStatusEvent(NetStatusEvent.NET_STATUS, false, false, {
                        code:NetStreamCodes.NETSTREAM_PLAY_LIVE_RESUME,
                        level:"status"
                    }));
                };
                this._wasSourceLiveStalled = false;
            };
        }
        private function shouldIssueLiveStallNetStatus():Boolean{
            if (this._issuedLiveStallNetStatus){
                return (false);
            };
            if (!this._wasBufferEmptied){
                return (false);
            };
            var _local1:Number = (((this.bufferLength + Math.max(OSMFSettings.hdsLiveStallTolerance, 0)) + 1) * 1000);
            var _local2:Date = new Date();
            if (_local2.valueOf() < (this._liveStallStartTime.valueOf() + _local1)){
                return (false);
            };
            return (true);
        }
        private function onDVRStreamInfo(event:DVRStreamInfoEvent):void{
            this._dvrInfo = (event.info as DVRInfo);
            this._initialTime = this._dvrInfo.startTime;
        }
        private function onBeginFragment(event:HTTPStreamingEvent):void{
            if ((((((((this._initialTime < 0)) || ((this._seekTime < 0)))) || (this._insertScriptDataTags))) || ((this._playForDuration >= 0)))){
                if (this._flvParser == null){
                    if ((((this._enhancedSeekTarget >= 0)) || ((this._playForDuration >= 0)))){
                        this._flvParserIsSegmentStart = true;
                    };
                    this._flvParser = new FLVParser(false);
                };
                this._flvParserDone = false;
            };
        }
        private function onEndFragment(event:HTTPStreamingEvent):void{
            if (this._videoHandler == null){
                return;
            };
            var _local2:Date = new Date();
            var _local3:Number = _local2.getTime();
            var _local4:HTTPStreamHandlerQoSInfo = this._videoHandler.qosInfo;
            var _local5:Vector.<QualityLevel>;
            var _local6:uint;
            var _local7:FragmentDetails;
            if (_local4 != null){
                _local5 = _local4.availableQualityLevels;
                _local6 = _local4.actualIndex;
                _local7 = _local4.lastFragmentDetails;
            };
            var _local8:Vector.<PlaybackDetails>;
            var _local9 = -1;
            if (this.playbackDetailsRecorder != null){
                _local8 = this.playbackDetailsRecorder.computeAndGetRecord();
                _local9 = this.playbackDetailsRecorder.playingIndex;
            };
            var _local10:QoSInfo = new QoSInfo(_local3, this.time, _local5, _local9, _local6, _local7, this.maxFPS, _local8, info, bufferLength, bufferTime, this.emptyBufferInterruptionSinceLastQoSUpdate);
            dispatchEvent(new QoSInfoEvent(QoSInfoEvent.QOS_UPDATE, false, false, _local10));
            this.emptyBufferInterruptionSinceLastQoSUpdate = false;
            dispatchEvent(new HTTPStreamingEvent(HTTPStreamingEvent.RUN_ALGORITHM));
        }
        private function onTransition(event:HTTPStreamingEvent):void{
            if ((this._resource is DynamicStreamingResource)){
                this.lastTransitionIndex = (this._resource as DynamicStreamingResource).indexFromName(event.url);
                this.lastTransitionStreamURL = event.url;
            };
            dispatchEvent(new NetStatusEvent(NetStatusEvent.NET_STATUS, false, false, {
                code:NetStreamCodes.NETSTREAM_PLAY_TRANSITION,
                level:"status",
                details:event.url
            }));
        }
        private function onTransitionComplete(event:HTTPStreamingEvent):void{
            this.onActionNeeded(event);
            var _local2:Object = new Object();
            _local2.code = NetStreamCodes.NETSTREAM_PLAY_TRANSITION_COMPLETE;
            _local2.level = "status";
            _local2.details = event.url;
            var _local3:FLVTagScriptDataObject = new FLVTagScriptDataObject();
            _local3.objects = ["onPlayStatus", _local2];
            this.insertScriptDataTag(_local3);
        }
        private function onDownloadError(event:HTTPStreamingEvent):void{
            dispatchEvent(new NetStatusEvent(NetStatusEvent.NET_STATUS, false, false, {
                code:NetStreamCodes.NETSTREAM_PLAY_STREAMNOTFOUND,
                level:"error",
                details:event.url
            }));
        }
        private function onDownloadComplete(event:HTTPStreamingEvent):void{
            this._bytesLoaded = (this._bytesLoaded + event.bytesDownloaded);
        }
        private function notifyPlayStart():void{
            dispatchEvent(new NetStatusEvent(NetStatusEvent.NET_STATUS, false, false, {
                code:NetStreamCodes.NETSTREAM_PLAY_START,
                level:"status"
            }));
        }
        private function notifyPlayStop():void{
            dispatchEvent(new NetStatusEvent(NetStatusEvent.NET_STATUS, false, false, {
                code:NetStreamCodes.NETSTREAM_PLAY_STOP,
                level:"status"
            }));
        }
        private function notifyPlayUnpublish():void{
            dispatchEvent(new NetStatusEvent(NetStatusEvent.NET_STATUS, false, false, {
                code:NetStreamCodes.NETSTREAM_PLAY_UNPUBLISH_NOTIFY,
                level:"status"
            }));
        }
        private function insertScriptDataTag(tag:FLVTagScriptDataObject, first:Boolean=false):void{
            if (!this._insertScriptDataTags){
                this._insertScriptDataTags = new Vector.<FLVTagScriptDataObject>();
            };
            if (first){
                this._insertScriptDataTags.unshift(tag);
            } else {
                this._insertScriptDataTags.push(tag);
            };
        }
        private function consumeAllScriptDataTags(timestamp:Number):int{
            var _local2:int;
            var _local3:int;
            var _local4:ByteArray;
            var _local5:FLVTagScriptDataObject;
            _local3 = 0;
            while (_local3 < this._insertScriptDataTags.length) {
                _local4 = new ByteArray();
                _local5 = this._insertScriptDataTags[_local3];
                if (_local5 != null){
                    _local5.timestamp = timestamp;
                    _local5.write(_local4);
                    this.attemptAppendBytes(_local4);
                    _local2 = (_local2 + _local4.length);
                };
                _local3++;
            };
            this._insertScriptDataTags.length = 0;
            this._insertScriptDataTags = null;
            return (_local2);
        }
        private function processAndAppend(inBytes:ByteArray):uint{
            var _local2:ByteArray;
            if (((!(inBytes)) || ((inBytes.length == 0)))){
                return (0);
            };
            var _local3:uint;
            if (this._flvParser == null){
                _local2 = inBytes;
            } else {
                this._flvParserProcessed = 0;
                inBytes.position = 0;
                this._flvParser.parse(inBytes, true, this.onTag);
                _local3 = (_local3 + this._flvParserProcessed);
                if (!this._flvParserDone){
                    return (_local3);
                };
                _local2 = new ByteArray();
                this._flvParser.flush(_local2);
                this._flvParser = null;
            };
            _local3 = (_local3 + _local2.length);
            if (this._state != HTTPStreamingState.STOP){
                this.attemptAppendBytes(_local2);
            };
            return (_local3);
        }
        private function doConsumeAllScriptDataTags(timestamp:uint):void{
            if (this._insertScriptDataTags != null){
                this._flvParserProcessed = (this._flvParserProcessed + this.consumeAllScriptDataTags(timestamp));
            };
        }
        private function onTag(tag:FLVTag):Boolean{
            var _local2:int;
            var _local5:FLVTagVideo;
            var _local6:int;
            var _local7:Boolean;
            var _local8:FLVTag;
            var _local9:FLVTagVideo;
            var _local10:int;
            var _local11:int;
            var _local12:FLVTagVideo;
            var _local3:Number = ((tag.timestamp / 1000) + this._fileTimeAdjustment);
            while (_local3 < this._initialTime) {
                _local3 = (_local3 + 4294967.296);
            };
            if (this._playForDuration >= 0){
                if (this._initialTime >= 0){
                    if (_local3 > (this._initialTime + this._playForDuration)){
                        this.setState(HTTPStreamingState.STOP);
                        this._flvParserDone = true;
                        if (this._seekTime < 0){
                            this._seekTime = (this._playForDuration + this._initialTime);
                        };
                        return (false);
                    };
                };
            };
            if (this._enhancedSeekTarget < 0){
                if (this._initialTime < 0){
                    if (this._dvrInfo){
                        this._initialTime = this._dvrInfo.startTime;
                    } else {
                        this._initialTime = ((this._seekTime)>0) ? this._playStart : _local3;
                    };
                };
                if (this._seekTime < 0){
                    this._seekTime = _local3;
                };
            } else {
                if (_local3 < this._enhancedSeekTarget){
                    if (this._enhancedSeekTags == null){
                        this._enhancedSeekTags = new Vector.<FLVTag>();
                    };
                    if ((tag is FLVTagVideo)){
                        if (this._flvParserIsSegmentStart){
                            _local5 = new FLVTagVideo();
                            _local5.timestamp = tag.timestamp;
                            _local5.codecID = FLVTagVideo(tag).codecID;
                            _local5.frameType = FLVTagVideo.FRAME_TYPE_INFO;
                            _local5.infoPacketValue = FLVTagVideo.INFO_PACKET_SEEK_START;
                            this._enhancedSeekTags.push(_local5);
                            this._flvParserIsSegmentStart = false;
                        };
                        this._enhancedSeekTags.push(tag);
                    } else {
                        if ((((tag is FLVTagScriptDataObject)) || ((((tag is FLVTagAudio)) && (FLVTagAudio(tag).isCodecConfiguration))))){
                            this._enhancedSeekTags.push(tag);
                        };
                    };
                } else {
                    this.doConsumeAllScriptDataTags(tag.timestamp);
                    this._enhancedSeekTarget = -1;
                    if (this._seekTime < 0){
                        this._seekTime = _local3;
                    };
                    if (this._initialTime < 0){
                        this._initialTime = ((this._seekTime)>0) ? this._playStart : _local3;
                    };
                    if (((!((this._enhancedSeekTags == null))) && ((this._enhancedSeekTags.length > 0)))){
                        _local7 = false;
                        _local2 = 0;
                        while (_local2 < this._enhancedSeekTags.length) {
                            _local8 = this._enhancedSeekTags[_local2];
                            if (_local8.tagType == FLVTag.TAG_TYPE_VIDEO){
                                _local9 = (_local8 as FLVTagVideo);
                                if ((((_local9.codecID == FLVTagVideo.CODEC_ID_AVC)) && ((_local9.avcPacketType == FLVTagVideo.AVC_PACKET_TYPE_NALU)))){
                                    _local10 = (tag.timestamp - _local9.timestamp);
                                    _local11 = _local9.avcCompositionTimeOffset;
                                    _local11 = (_local11 - _local10);
                                    _local9.avcCompositionTimeOffset = _local11;
                                };
                                _local6 = _local9.codecID;
                                _local7 = true;
                            };
                            _local8.timestamp = tag.timestamp;
                            var _local4:ByteArray = new ByteArray();
                            _local8.write(_local4);
                            this._flvParserProcessed = (this._flvParserProcessed + _local4.length);
                            this.attemptAppendBytes(_local4);
                            _local2++;
                        };
                        if (_local7){
                            _local12 = new FLVTagVideo();
                            _local12.timestamp = tag.timestamp;
                            _local12.codecID = _local6;
                            _local12.frameType = FLVTagVideo.FRAME_TYPE_INFO;
                            _local12.infoPacketValue = FLVTagVideo.INFO_PACKET_SEEK_END;
                            _local4 = new ByteArray();
                            _local12.write(_local4);
                            this._flvParserProcessed = (this._flvParserProcessed + _local4.length);
                            this.attemptAppendBytes(_local4);
                        };
                        this._enhancedSeekTags = null;
                    };
                    _local4 = new ByteArray();
                    tag.write(_local4);
                    this._flvParserProcessed = (this._flvParserProcessed + _local4.length);
                    this.attemptAppendBytes(_local4);
                    if (this._playForDuration >= 0){
                        return (true);
                    };
                    this._flvParserDone = true;
                    return (false);
                };
                return (true);
            };
            this.doConsumeAllScriptDataTags(tag.timestamp);
            _local4 = new ByteArray();
            tag.write(_local4);
            this.attemptAppendBytes(_local4);
            this._flvParserProcessed = (this._flvParserProcessed + _local4.length);
            if (this._playForDuration >= 0){
                if ((((this._source.fragmentDuration >= 0)) && (this._flvParserIsSegmentStart))){
                    this._flvParserIsSegmentStart = false;
                    _local3 = ((tag.timestamp / 1000) + this._fileTimeAdjustment);
                    if ((_local3 + this._source.fragmentDuration) >= (this._initialTime + this._playForDuration)){
                        return (true);
                    };
                    this._flvParserDone = true;
                    return (false);
                };
                return (true);
            };
            this._flvParserDone = true;
            return (false);
        }
        private function onScriptData(event:HTTPStreamingEvent):void{
            var _local2:*;
            var _local3:*;
            if ((((event.scriptDataMode == null)) || ((event.scriptDataObject == null)))){
                return;
            };
            switch (event.scriptDataMode){
                case FLVTagScriptDataMode.NORMAL:
                    this.insertScriptDataTag(event.scriptDataObject, false);
                    break;
                case FLVTagScriptDataMode.FIRST:
                    this.insertScriptDataTag(event.scriptDataObject, true);
                    break;
                case FLVTagScriptDataMode.IMMEDIATE:
                    if (client){
                        _local2 = event.scriptDataObject.objects[0];
                        _local3 = event.scriptDataObject.objects[1];
                        if (client.hasOwnProperty(_local2)){
                            var _local4 = client;
                            _local4[_local2](_local3);
                        };
                    };
                    break;
            };
        }
        private function onActionNeeded(event:HTTPStreamingEvent):void{
            var _local2:FLVHeader;
            var _local3:ByteArray;
            if (this._mixer != null){
                appendBytesAction(NetStreamAppendBytesAction.RESET_BEGIN);
                _local2 = new FLVHeader();
                _local3 = new ByteArray();
                _local2.write(_local3);
                this.attemptAppendBytes(_local3);
            };
        }
        private function attemptAppendBytes(bytes:ByteArray):void{
            appendBytes(bytes);
        }
        protected function createSource(resource:URLResource):void{
            var _local4:HTTPStreamSource;
            var _local2:IHTTPStreamSource;
            var _local3:StreamingURLResource = (resource as StreamingURLResource);
            if ((((((_local3 == null)) || ((_local3.alternativeAudioStreamItems == null)))) || ((_local3.alternativeAudioStreamItems.length == 0)))){
                _local4 = new HTTPStreamSource(this._factory, this._resource, this);
                this._source = _local4;
                this._videoHandler = _local4;
            } else {
                this._mixer = new HTTPStreamMixer(this);
                this._mixer.video = new HTTPStreamSource(this._factory, this._resource, this._mixer);
                this._source = this._mixer;
                this._videoHandler = this._mixer.video;
            };
        }
        private function onDRMError(event:DRMErrorEvent):void{
            this._waitForDRM = true;
            this.setState(HTTPStreamingState.WAIT);
        }
        private function onDRMStatus(event:DRMStatusEvent):void{
            if (event.voucher != null){
                this._waitForDRM = false;
            };
        }

    }
}//package org.osmf.net.httpstreaming 
﻿package org.osmf.net.httpstreaming {
    import flash.events.*;
    import flash.errors.*;

    public class HTTPStreamingIndexHandlerBase extends EventDispatcher {

        public function initialize(indexInfo:Object):void{
            throw (new IllegalOperationError("The initialize() method must be overridden by the derived class."));
        }
        public function dispose():void{
            throw (new IllegalOperationError("The dispose() method must be overridden by the derived class."));
        }
        public function processIndexData(data, indexContext:Object):void{
            throw (new IllegalOperationError("The processIndexData() method must be overridden by the derived class."));
        }
        public function getFileForTime(time:Number, quality:int):HTTPStreamRequest{
            throw (new IllegalOperationError("The getFileForTime() method must be overridden by the derived class."));
        }
        public function getNextFile(quality:int):HTTPStreamRequest{
            throw (new IllegalOperationError("The getNextFile() method must be overridden by the derived class."));
        }
        public function dvrGetStreamInfo(indexInfo:Object):void{
            throw (new IllegalOperationError("The dvrGetStreamInfo() method must be overridden by the derived class."));
        }
        public function get isBestEffortFetchEnabled():Boolean{
            throw (new IllegalOperationError("The isBestEffortFetchEnabled method must be overridden by the derived class."));
        }

    }
}//package org.osmf.net.httpstreaming 
﻿package org.osmf.net.httpstreaming {
    import __AS3__.vec.*;
    import org.osmf.net.qos.*;

    public class HTTPStreamHandlerQoSInfo {

        private var _availableQualityLevels:Vector.<QualityLevel>;
        private var _actualIndex:uint;
        private var _lastFragmentDetails:FragmentDetails;

        public function HTTPStreamHandlerQoSInfo(availableQualityLevels:Vector.<QualityLevel>, actualIndex:uint, lastFragmentDetails:FragmentDetails=null){
            this._availableQualityLevels = availableQualityLevels;
            this._actualIndex = actualIndex;
            this._lastFragmentDetails = lastFragmentDetails;
        }
        public function get availableQualityLevels():Vector.<QualityLevel>{
            return (this._availableQualityLevels);
        }
        public function get actualIndex():uint{
            return (this._actualIndex);
        }
        public function get lastFragmentDetails():FragmentDetails{
            return (this._lastFragmentDetails);
        }

    }
}//package org.osmf.net.httpstreaming 
﻿package org.osmf.net.httpstreaming {
    import flash.events.*;
    import flash.utils.*;
    import flash.errors.*;

    public class HTTPStreamingFileHandlerBase extends EventDispatcher {

        public function beginProcessFile(seek:Boolean, seekTime:Number):void{
            throw (new IllegalOperationError("The beginProcessFile() method must be overridden by HttpStreamingFileHandlerBase's derived class."));
        }
        public function get inputBytesNeeded():Number{
            throw (new IllegalOperationError("The inputBytesNeeded() method must be overridden by HttpStreamingFileHandlerBase's derived class."));
        }
        public function processFileSegment(input:IDataInput):ByteArray{
            throw (new IllegalOperationError("The processFileSegment() method must be overridden by HttpStreamingFileHandlerBase's derived class."));
        }
        public function endProcessFile(input:IDataInput):ByteArray{
            throw (new IllegalOperationError("The endProcessFile() method must be overridden by HttpStreamingFileHandlerBase's derived class."));
        }
        public function flushFileSegment(input:IDataInput):ByteArray{
            throw (new IllegalOperationError("The flushFileSegment() method must be overridden by HttpStreamingFileHandlerBase's derived class."));
        }

    }
}//package org.osmf.net.httpstreaming 
﻿package org.osmf.net.httpstreaming {
    import org.osmf.events.*;
    import flash.events.*;
    import flash.utils.*;
    import flash.net.*;
    import org.osmf.utils.*;
    import org.osmf.net.httpstreaming.flv.*;

    public class HTTPStreamDownloader {

        private var _isOpen:Boolean = false;
        private var _isComplete:Boolean = false;
        private var _hasData:Boolean = false;
        private var _hasErrors:Boolean = false;
        private var _savedBytes:ByteArray = null;
        private var _urlStream:URLStream = null;
        private var _request:URLRequest = null;
        private var _dispatcher:IEventDispatcher = null;
        private var _downloadBeginDate:Date = null;
        private var _downloadEndDate:Date = null;
        private var _downloadDuration:Number = 0;
        private var _downloadBytesCount:Number = 0;
        private var _timeoutTimer:Timer = null;
        private var _timeoutInterval:Number = 1000;
        private var _currentRetry:Number = 0;

        public function get isOpen():Boolean{
            return (this._isOpen);
        }
        public function get isComplete():Boolean{
            return (this._isComplete);
        }
        public function get hasData():Boolean{
            return (this._hasData);
        }
        public function get hasErrors():Boolean{
            return (this._hasErrors);
        }
        public function get downloadDuration():Number{
            return (this._downloadDuration);
        }
        public function get downloadBytesCount():Number{
            return (this._downloadBytesCount);
        }
        public function open(request:URLRequest, dispatcher:IEventDispatcher, timeout:Number):void{
            if (((this.isOpen) || (((!((this._urlStream == null))) && (this._urlStream.connected))))){
                this.close();
            };
            if (request == null){
                throw (new ArgumentError("Null request in HTTPStreamDownloader open method."));
            };
            this._isComplete = false;
            this._hasData = false;
            this._hasErrors = false;
            this._dispatcher = dispatcher;
            if (this._savedBytes == null){
                this._savedBytes = new ByteArray();
            };
            if (this._urlStream == null){
                this._urlStream = new URLStream();
                this._urlStream.addEventListener(Event.OPEN, this.onOpen);
                this._urlStream.addEventListener(Event.COMPLETE, this.onComplete);
                this._urlStream.addEventListener(ProgressEvent.PROGRESS, this.onProgress);
                this._urlStream.addEventListener(IOErrorEvent.IO_ERROR, this.onError);
                this._urlStream.addEventListener(SecurityErrorEvent.SECURITY_ERROR, this.onError);
            };
            if ((((this._timeoutTimer == null)) && (!((timeout == -1))))){
                this._timeoutTimer = new Timer(timeout, 1);
                this._timeoutTimer.addEventListener(TimerEvent.TIMER_COMPLETE, this.onTimeout);
            };
            if (this._urlStream != null){
                this._timeoutInterval = timeout;
                this._request = request;
                this._downloadBeginDate = null;
                this._downloadBytesCount = 0;
                this.startTimeoutMonitor(this._timeoutInterval);
                this._urlStream.load(this._request);
            };
        }
        public function close(dispose:Boolean=false):void{
            this.stopTimeoutMonitor();
            this._isOpen = false;
            this._isComplete = false;
            this._hasData = false;
            this._hasErrors = false;
            this._request = null;
            if (this._timeoutTimer != null){
                this._timeoutTimer.stop();
                if (dispose){
                    this._timeoutTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, this.onTimeout);
                    this._timeoutTimer = null;
                };
            };
            if (this._urlStream != null){
                if (this._urlStream.connected){
                    this._urlStream.close();
                };
                if (dispose){
                    this._urlStream.removeEventListener(Event.OPEN, this.onOpen);
                    this._urlStream.removeEventListener(Event.COMPLETE, this.onComplete);
                    this._urlStream.removeEventListener(ProgressEvent.PROGRESS, this.onProgress);
                    this._urlStream.removeEventListener(IOErrorEvent.IO_ERROR, this.onError);
                    this._urlStream.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, this.onError);
                    this._urlStream = null;
                };
            };
            if (this._savedBytes != null){
                this._savedBytes.length = 0;
                if (dispose){
                    this._savedBytes = null;
                };
            };
        }
        public function get totalAvailableBytes():int{
            if (!this.isOpen){
                return (0);
            };
            return ((this._savedBytes.bytesAvailable + this._urlStream.bytesAvailable));
        }
        public function getBytes(numBytes:int=0):IDataInput{
            var _local3:int;
            if (((!(this.isOpen)) || ((numBytes < 0)))){
                return (null);
            };
            if (numBytes == 0){
                numBytes = 1;
            };
            var _local2:int = this.totalAvailableBytes;
            if (_local2 == 0){
                this._hasData = false;
            };
            if (_local2 < numBytes){
                return (null);
            };
            if (this._savedBytes.bytesAvailable){
                _local3 = (numBytes - this._savedBytes.bytesAvailable);
                if (_local3 > 0){
                    this._urlStream.readBytes(this._savedBytes, this._savedBytes.length, _local3);
                };
                return (this._savedBytes);
            };
            this._savedBytes.length = 0;
            return (this._urlStream);
        }
        public function clearSavedBytes():void{
            if (this._savedBytes == null){
                return;
            };
            this._savedBytes.length = 0;
            this._savedBytes.position = 0;
        }
        public function appendToSavedBytes(source:IDataInput, count:uint):void{
            if (this._savedBytes == null){
                return;
            };
            source.readBytes(this._savedBytes, this._savedBytes.length, count);
        }
        public function saveRemainingBytes():void{
            if (this._savedBytes == null){
                return;
            };
            if (((((!((this._urlStream == null))) && (this._urlStream.connected))) && (this._urlStream.bytesAvailable))){
                this._urlStream.readBytes(this._savedBytes, this._savedBytes.length);
            };
        }
        public function toString():String{
            return ("HTTPStreamSource");
        }
        private function onOpen(event:Event):void{
            this._isOpen = true;
        }
        private function onComplete(event:Event):void{
            var _local2:HTTPStreamingEvent;
            if (this._downloadBeginDate == null){
                this._downloadBeginDate = new Date();
            };
            this._downloadEndDate = new Date();
            this._downloadDuration = ((this._downloadEndDate.valueOf() - this._downloadBeginDate.valueOf()) / 1000);
            this._isComplete = true;
            this._hasErrors = false;
            if (this._dispatcher != null){
                _local2 = new HTTPStreamingEvent(HTTPStreamingEvent.DOWNLOAD_COMPLETE, false, false, 0, null, FLVTagScriptDataMode.NORMAL, this._request.url, this._downloadBytesCount, HTTPStreamingEventReason.NORMAL, this);
                this._dispatcher.dispatchEvent(_local2);
            };
        }
        private function onProgress(event:ProgressEvent):void{
            var _local2:HTTPStreamingEvent;
            if (this._downloadBeginDate == null){
                this._downloadBeginDate = new Date();
            };
            if (this._downloadBytesCount == 0){
                if (this._timeoutTimer != null){
                    this.stopTimeoutMonitor();
                };
                this._currentRetry = 0;
                this._downloadBytesCount = event.bytesTotal;
            };
            this._hasData = true;
            if (this._dispatcher != null){
                _local2 = new HTTPStreamingEvent(HTTPStreamingEvent.DOWNLOAD_PROGRESS, false, false, 0, null, FLVTagScriptDataMode.NORMAL, this._request.url, 0, HTTPStreamingEventReason.NORMAL, this);
                this._dispatcher.dispatchEvent(_local2);
            };
        }
        private function onError(event:Event):void{
            var _local2:String;
            var _local3:HTTPStreamingEvent;
            if (this._timeoutTimer != null){
                this.stopTimeoutMonitor();
            };
            if (this._downloadBeginDate == null){
                this._downloadBeginDate = new Date();
            };
            this._downloadEndDate = new Date();
            this._downloadDuration = ((this._downloadEndDate.valueOf() - this._downloadBeginDate.valueOf()) / 1000);
            this._isComplete = false;
            this._hasErrors = true;
            if (((!((this._dispatcher == null))) && (this._request))){
                _local2 = HTTPStreamingEventReason.NORMAL;
                if (event.type == Event.CANCEL){
                    _local2 = HTTPStreamingEventReason.TIMEOUT;
                };
                _local3 = new HTTPStreamingEvent(HTTPStreamingEvent.DOWNLOAD_ERROR, false, false, 0, null, FLVTagScriptDataMode.NORMAL, this._request.url, 0, _local2, this);
                this._dispatcher.dispatchEvent(_local3);
            };
        }
        private function startTimeoutMonitor(timeout:Number):void{
            if (this._timeoutTimer != null){
                if (timeout > 0){
                    this._timeoutTimer.delay = timeout;
                };
                this._timeoutTimer.reset();
                this._timeoutTimer.start();
            };
        }
        private function stopTimeoutMonitor():void{
            if (this._timeoutTimer != null){
                this._timeoutTimer.stop();
            };
        }
        private function onTimeout(event:TimerEvent):void{
            if (OSMFSettings.hdsMaximumRetries > -1){
                this._currentRetry++;
            };
            if ((((OSMFSettings.hdsMaximumRetries == -1)) || (((!((OSMFSettings.hdsMaximumRetries == -1))) && ((this._currentRetry < OSMFSettings.hdsMaximumRetries)))))){
                this.open(this._request, this._dispatcher, (this._timeoutInterval + OSMFSettings.hdsTimeoutAdjustmentOnRetry));
            } else {
                this.close();
                this.onError(new Event(Event.CANCEL));
            };
        }

    }
}//package org.osmf.net.httpstreaming 
﻿package org.osmf.net.httpstreaming {
    import org.osmf.media.*;
    import flash.utils.*;
    import org.osmf.utils.*;
    import org.osmf.net.*;
    import org.osmf.metadata.*;
    import __AS3__.vec.*;
    import org.osmf.elements.f4mClasses.*;
    import org.osmf.net.httpstreaming.dvr.*;
    import org.osmf.net.httpstreaming.f4f.*;

    public class HTTPStreamingUtils {

        public static function createHTTPStreamingMetadata(abstUrl:String, abstData:ByteArray, serverBaseUrls:Vector.<String>):Metadata{
            var _local4:Metadata = new Metadata();
            var _local5:BootstrapInfo = new BootstrapInfo();
            if (((!((abstUrl == null))) && ((abstUrl.length > 0)))){
                _local5.url = abstUrl;
            };
            _local5.data = abstData;
            _local4.addValue(MetadataNamespaces.HTTP_STREAMING_BOOTSTRAP_KEY, _local5);
            if (((!((serverBaseUrls == null))) && ((serverBaseUrls.length > 0)))){
                _local4.addValue(MetadataNamespaces.HTTP_STREAMING_SERVER_BASE_URLS_KEY, serverBaseUrls);
            };
            return (_local4);
        }
        public static function createHTTPStreamingResource(resource:MediaResourceBase, streamName:String):MediaResourceBase{
            var _local4:Object;
            var _local5:ByteArray;
            var _local6:Vector.<String>;
            if (streamName == null){
                return (null);
            };
            var _local3:BootstrapInfo;
            var _local7:Metadata = (resource.getMetadataValue(MetadataNamespaces.HTTP_STREAMING_METADATA) as Metadata);
            if (_local7 == null){
                return (null);
            };
            var _local8:Metadata = new Metadata();
            _local3 = (_local7.getValue((MetadataNamespaces.HTTP_STREAMING_BOOTSTRAP_KEY + streamName)) as BootstrapInfo);
            if (_local3 != null){
                _local8.addValue(MetadataNamespaces.HTTP_STREAMING_BOOTSTRAP_KEY, _local3);
            };
            _local4 = _local7.getValue((MetadataNamespaces.HTTP_STREAMING_STREAM_METADATA_KEY + streamName));
            if (_local4 != null){
                _local8.addValue(MetadataNamespaces.HTTP_STREAMING_STREAM_METADATA_KEY, _local4);
            };
            _local5 = (_local7.getValue((MetadataNamespaces.HTTP_STREAMING_XMP_METADATA_KEY + streamName)) as ByteArray);
            if (_local5 != null){
                _local8.addValue(MetadataNamespaces.HTTP_STREAMING_XMP_METADATA_KEY, _local5);
            };
            _local6 = (_local7.getValue(MetadataNamespaces.HTTP_STREAMING_SERVER_BASE_URLS_KEY) as Vector.<String>);
            if (_local6 != null){
                _local8.addValue(MetadataNamespaces.HTTP_STREAMING_SERVER_BASE_URLS_KEY, _local6);
            };
            var _local9:String = "";
            if (((!((_local6 == null))) && ((_local6.length > 0)))){
                _local9 = _local6[0].toString();
            };
            var _local10:String = streamName;
            if (!URL.isAbsoluteURL(_local10)){
                _local10 = (URL.normalizeRootURL(_local9) + URL.normalizeRelativeURL(_local10));
            };
            var _local11:MediaResourceBase = new StreamingURLResource(_local10);
            _local11.addMetadataValue(MetadataNamespaces.HTTP_STREAMING_METADATA, _local8);
            var _local12:DVRInfo = generateDVRInfo((resource.getMetadataValue(MetadataNamespaces.DVR_METADATA) as Metadata));
            addDVRInfoMetadataToResource(_local12, _local11);
            var _local13:BestEffortFetchInfo = generateBestEffortFetchInfo((resource.getMetadataValue(MetadataNamespaces.BEST_EFFORT_FETCH_METADATA) as Metadata));
            addBestEffortFetchInfoMetadataToResource(_local13, _local11);
            return (_local11);
        }
        public static function addDVRInfoMetadataToResource(dvrInfo:DVRInfo, resource:MediaResourceBase):void{
            if (dvrInfo == null){
                return;
            };
            var _local3:Metadata = new Metadata();
            _local3.addValue(MetadataNamespaces.HTTP_STREAMING_DVR_BEGIN_OFFSET_KEY, dvrInfo.beginOffset);
            _local3.addValue(MetadataNamespaces.HTTP_STREAMING_DVR_END_OFFSET_KEY, dvrInfo.endOffset);
            _local3.addValue(MetadataNamespaces.HTTP_STREAMING_DVR_WINDOW_DURATION_KEY, dvrInfo.windowDuration);
            _local3.addValue(MetadataNamespaces.HTTP_STREAMING_DVR_OFFLINE_KEY, dvrInfo.offline);
            _local3.addValue(MetadataNamespaces.HTTP_STREAMING_DVR_ID_KEY, dvrInfo.id);
            resource.addMetadataValue(MetadataNamespaces.DVR_METADATA, _local3);
        }
        public static function addBestEffortFetchInfoMetadataToResource(bestEffortFetchInfo:BestEffortFetchInfo, resource:MediaResourceBase):void{
            if (bestEffortFetchInfo == null){
                return;
            };
            var _local3:Metadata = new Metadata();
            _local3.addValue(MetadataNamespaces.HTTP_STREAMING_BEST_EFFORT_FETCH_MAX_FORWARD_FETCHES, bestEffortFetchInfo.maxForwardFetches);
            _local3.addValue(MetadataNamespaces.HTTP_STREAMING_BEST_EFFORT_FETCH_MAX_BACKWARD_FETCHES, bestEffortFetchInfo.maxBackwardFetches);
            _local3.addValue(MetadataNamespaces.HTTP_STREAMING_BEST_EFFORT_FETCH_SEGMENT_DURATION, bestEffortFetchInfo.segmentDuration);
            _local3.addValue(MetadataNamespaces.HTTP_STREAMING_BEST_EFFORT_FETCH_FRAGMENT_DURATION, bestEffortFetchInfo.fragmentDuration);
            resource.addMetadataValue(MetadataNamespaces.BEST_EFFORT_FETCH_METADATA, _local3);
        }
        public static function createF4FIndexInfo(resource:URLResource):HTTPStreamingF4FIndexInfo{
            var _local6:Vector.<String>;
            var _local7:Vector.<HTTPStreamingF4FStreamInfo>;
            var _local8:DVRInfo;
            var _local9:BestEffortFetchInfo;
            var _local2:HTTPStreamingF4FIndexInfo;
            var _local3:Metadata = (resource.getMetadataValue(MetadataNamespaces.HTTP_STREAMING_METADATA) as Metadata);
            var _local4:Metadata = (resource.getMetadataValue(MetadataNamespaces.DVR_METADATA) as Metadata);
            var _local5:Metadata = (resource.getMetadataValue(MetadataNamespaces.BEST_EFFORT_FETCH_METADATA) as Metadata);
            if (_local3 != null){
                _local6 = (_local3.getValue(MetadataNamespaces.HTTP_STREAMING_SERVER_BASE_URLS_KEY) as Vector.<String>);
                _local7 = generateStreamInfos(resource);
                _local8 = generateDVRInfo(_local4);
                _local9 = generateBestEffortFetchInfo(_local5);
                _local2 = new HTTPStreamingF4FIndexInfo(((((!((_local6 == null))) && ((_local6.length > 0)))) ? _local6[0] : null), _local7, _local8, _local9);
            };
            return (_local2);
        }
        public static function normalizeURL(url:String):String{
            var _local4:String;
            var _local7:int;
            var _local2:String = "";
            var _local3:String = "";
            if (url.indexOf("http://") == 0){
                _local3 = "http://";
            } else {
                if (url.indexOf("https://") == 0){
                    _local3 = "https://";
                };
            };
            if (_local3.length > 0){
                _local4 = url.substr(_local3.length);
            } else {
                _local4 = url;
            };
            var _local5:Array = _local4.split("/");
            var _local6:int = _local5.indexOf("..");
            while (_local6 >= 0) {
                _local5.splice((_local6 - 1), 2);
                _local6 = _local5.indexOf("..");
            };
            _local2 = _local3;
            if (_local5.length > 0){
                _local7 = 0;
                while (_local7 < _local5.length) {
                    if (_local7 != 0){
                        _local2 = (_local2 + "/");
                    };
                    _local2 = (_local2 + (_local5[_local7] as String));
                    _local7++;
                };
            };
            return (_local2);
        }
        private static function generateDVRInfo(metadata:Metadata):DVRInfo{
            if (metadata == null){
                return (null);
            };
            var _local2:DVRInfo = new DVRInfo();
            _local2.id = "";
            _local2.beginOffset = NaN;
            _local2.endOffset = NaN;
            _local2.windowDuration = NaN;
            _local2.offline = false;
            if (metadata.getValue(MetadataNamespaces.HTTP_STREAMING_DVR_ID_KEY) != null){
                _local2.id = (metadata.getValue(MetadataNamespaces.HTTP_STREAMING_DVR_ID_KEY) as String);
            };
            if (metadata.getValue(MetadataNamespaces.HTTP_STREAMING_DVR_BEGIN_OFFSET_KEY) != null){
                _local2.beginOffset = (metadata.getValue(MetadataNamespaces.HTTP_STREAMING_DVR_BEGIN_OFFSET_KEY) as uint);
            };
            if (metadata.getValue(MetadataNamespaces.HTTP_STREAMING_DVR_END_OFFSET_KEY) != null){
                _local2.endOffset = (metadata.getValue(MetadataNamespaces.HTTP_STREAMING_DVR_END_OFFSET_KEY) as uint);
            };
            if (metadata.getValue(MetadataNamespaces.HTTP_STREAMING_DVR_WINDOW_DURATION_KEY) != null){
                _local2.windowDuration = (metadata.getValue(MetadataNamespaces.HTTP_STREAMING_DVR_WINDOW_DURATION_KEY) as int);
            };
            if (metadata.getValue(MetadataNamespaces.HTTP_STREAMING_DVR_OFFLINE_KEY) != null){
                _local2.offline = (metadata.getValue(MetadataNamespaces.HTTP_STREAMING_DVR_OFFLINE_KEY) as Boolean);
            };
            return (_local2);
        }
        private static function generateBestEffortFetchInfo(metadata:Metadata):BestEffortFetchInfo{
            if (metadata == null){
                return (null);
            };
            var _local2:BestEffortFetchInfo = new BestEffortFetchInfo();
            if (metadata.getValue(MetadataNamespaces.HTTP_STREAMING_BEST_EFFORT_FETCH_MAX_FORWARD_FETCHES) != null){
                _local2.maxForwardFetches = (metadata.getValue(MetadataNamespaces.HTTP_STREAMING_BEST_EFFORT_FETCH_MAX_FORWARD_FETCHES) as uint);
            };
            if (metadata.getValue(MetadataNamespaces.HTTP_STREAMING_BEST_EFFORT_FETCH_MAX_BACKWARD_FETCHES) != null){
                _local2.maxBackwardFetches = (metadata.getValue(MetadataNamespaces.HTTP_STREAMING_BEST_EFFORT_FETCH_MAX_BACKWARD_FETCHES) as uint);
            };
            if (metadata.getValue(MetadataNamespaces.HTTP_STREAMING_BEST_EFFORT_FETCH_SEGMENT_DURATION) != null){
                _local2.segmentDuration = (metadata.getValue(MetadataNamespaces.HTTP_STREAMING_BEST_EFFORT_FETCH_SEGMENT_DURATION) as uint);
            };
            if (metadata.getValue(MetadataNamespaces.HTTP_STREAMING_BEST_EFFORT_FETCH_FRAGMENT_DURATION) != null){
                _local2.fragmentDuration = (metadata.getValue(MetadataNamespaces.HTTP_STREAMING_BEST_EFFORT_FETCH_FRAGMENT_DURATION) as uint);
            };
            return (_local2);
        }
        private static function generateStreamInfos(resource:URLResource):Vector.<HTTPStreamingF4FStreamInfo>{
            var _local8:Object;
            var _local9:ByteArray;
            var _local10:DynamicStreamingItem;
            var _local11:String;
            var _local2:Vector.<HTTPStreamingF4FStreamInfo> = new Vector.<HTTPStreamingF4FStreamInfo>();
            var _local3:Metadata = (resource.getMetadataValue(MetadataNamespaces.DRM_METADATA) as Metadata);
            var _local4:Metadata = (resource.getMetadataValue(MetadataNamespaces.HTTP_STREAMING_METADATA) as Metadata);
            var _local5:ByteArray;
            var _local6:BootstrapInfo;
            var _local7:DynamicStreamingResource = (resource as DynamicStreamingResource);
            if (_local7 != null){
                for each (_local10 in _local7.streamItems) {
                    _local5 = null;
                    _local6 = null;
                    _local8 = null;
                    _local9 = null;
                    if (_local3 != null){
                        _local5 = (_local3.getValue((MetadataNamespaces.DRM_ADDITIONAL_HEADER_KEY + _local10.streamName)) as ByteArray);
                    };
                    if (_local4 != null){
                        _local6 = (_local4.getValue((MetadataNamespaces.HTTP_STREAMING_BOOTSTRAP_KEY + _local10.streamName)) as BootstrapInfo);
                        _local8 = _local4.getValue((MetadataNamespaces.HTTP_STREAMING_STREAM_METADATA_KEY + _local10.streamName));
                        _local9 = (_local4.getValue((MetadataNamespaces.HTTP_STREAMING_XMP_METADATA_KEY + _local10.streamName)) as ByteArray);
                    };
                    _local2.push(new HTTPStreamingF4FStreamInfo(_local6, _local10.streamName, _local10.bitrate, _local5, _local8, _local9));
                };
            } else {
                if (_local3 != null){
                    _local5 = (_local3.getValue(MetadataNamespaces.DRM_ADDITIONAL_HEADER_KEY) as ByteArray);
                };
                if (_local4 != null){
                    _local6 = (_local4.getValue(MetadataNamespaces.HTTP_STREAMING_BOOTSTRAP_KEY) as BootstrapInfo);
                    _local8 = _local4.getValue(MetadataNamespaces.HTTP_STREAMING_STREAM_METADATA_KEY);
                    _local9 = (_local4.getValue(MetadataNamespaces.HTTP_STREAMING_XMP_METADATA_KEY) as ByteArray);
                };
                _local11 = resource.url;
                _local2.push(new HTTPStreamingF4FStreamInfo(_local6, _local11, NaN, _local5, _local8, _local9));
            };
            return (_local2);
        }

    }
}//package org.osmf.net.httpstreaming 
﻿package org.osmf.net.httpstreaming {

    public class HTTPStreamingIndexInfoBase {

    }
}//package org.osmf.net.httpstreaming 
﻿package org.osmf.net.httpstreaming {
    import flash.events.*;
    import org.osmf.net.*;
    import __AS3__.vec.*;
    import org.osmf.net.metrics.*;
    import org.osmf.net.rules.*;
    import org.osmf.net.qos.*;

    public class DefaultHTTPStreamingSwitchManager extends RuleSwitchManagerBase {

        private static const ACTUAL_BITRATE_MAX_FRAGMENTS:uint = 10;

        private var _minReliability:Number;
        private var _maxReliabilityRecordSize:uint;
        private var _minReliabilityRecordSize:uint;
        private var _normalRuleWeights:Vector.<Number>;
        private var _climbFactor:Number;
        private var _maxUpSwitchLimit:int;
        private var _maxDownSwitchLimit:int;
        private var decisionHistory:Vector.<Switch>;
        private var availableQualityLevelsMetric:MetricBase;
        private var actualBitrateMetric:MetricBase;
        private var _normalRules:Vector.<RuleBase>;

        public function DefaultHTTPStreamingSwitchManager(notifier:EventDispatcher, switcher:NetStreamSwitcher, metricRepository:MetricRepository, emergencyRules:Vector.<RuleBase>=null, autoSwitch:Boolean=true, normalRules:Vector.<RuleBase>=null, normalRuleWeights:Vector.<Number>=null, minReliability:Number=0.85, minReliabilityRecordSize:uint=5, maxReliabilityRecordSize:uint=30, climbFactor:Number=0.9, maxUpSwitchLimit:int=1, maxDownSwitchLimit:int=2){
            super(notifier, switcher, metricRepository, emergencyRules, autoSwitch);
            this.setNormalRules(normalRules);
            this.normalRuleWeights = normalRuleWeights;
            this.minReliability = minReliability;
            this.minReliabilityRecordSize = minReliabilityRecordSize;
            this.maxReliabilityRecordSize = maxReliabilityRecordSize;
            this.climbFactor = climbFactor;
            this.maxUpSwitchLimit = maxUpSwitchLimit;
            this.maxDownSwitchLimit = maxDownSwitchLimit;
            this.decisionHistory = new Vector.<Switch>();
            this.pushToHistory(currentIndex);
            this.availableQualityLevelsMetric = metricRepository.getMetric(MetricType.AVAILABLE_QUALITY_LEVELS);
            this.actualBitrateMetric = metricRepository.getMetric(MetricType.ACTUAL_BITRATE, ACTUAL_BITRATE_MAX_FRAGMENTS);
        }
        public function get normalRules():Vector.<RuleBase>{
            return (this._normalRules);
        }
        public function get normalRuleWeights():Vector.<Number>{
            return (this._normalRuleWeights);
        }
        public function set normalRuleWeights(value:Vector.<Number>):void{
            ABRUtils.validateWeights(value, this.normalRules.length);
            this._normalRuleWeights = value.slice();
        }
        public function get minReliability():Number{
            return (this._minReliability);
        }
        public function set minReliability(value:Number):void{
            if (((((isNaN(value)) || ((value < 0)))) || ((value > 1)))){
                throw (new ArgumentError("The minReliability must be a number between 0 and 1."));
            };
            this._minReliability = value;
        }
        public function get minReliabilityRecordSize():uint{
            return (this._minReliabilityRecordSize);
        }
        public function set minReliabilityRecordSize(value:uint):void{
            if (value < 2){
                throw (new ArgumentError("The minReliabilityRecordSize must be equal or greater than 2."));
            };
            this._minReliabilityRecordSize = value;
        }
        public function get maxReliabilityRecordSize():uint{
            return (this._maxReliabilityRecordSize);
        }
        public function set maxReliabilityRecordSize(value:uint):void{
            if (value < this.minReliabilityRecordSize){
                this._maxReliabilityRecordSize = this.minReliabilityRecordSize;
            } else {
                this._maxReliabilityRecordSize = value;
            };
        }
        public function get climbFactor():Number{
            return (this._climbFactor);
        }
        public function set climbFactor(value:Number):void{
            if (((isNaN(value)) || ((value <= 0)))){
                throw (new ArgumentError("The climbFactor must be a number greater than 0."));
            };
            this._climbFactor = value;
        }
        public function get maxUpSwitchLimit():int{
            return (this._maxUpSwitchLimit);
        }
        public function set maxUpSwitchLimit(value:int):void{
            if (value < 1){
                this._maxUpSwitchLimit = -1;
            } else {
                this._maxUpSwitchLimit = value;
            };
        }
        public function get maxDownSwitchLimit():int{
            return (this._maxDownSwitchLimit);
        }
        public function set maxDownSwitchLimit(value:int):void{
            if (value < 1){
                this._maxDownSwitchLimit = -1;
            } else {
                this._maxDownSwitchLimit = value;
            };
        }
        public function getCurrentReliability(index:uint):Number{
            var _local2:uint;
            var _local3:uint;
            var _local4:uint;
            while (_local4 < (this.decisionHistory.length - 1)) {
                if (this.decisionHistory[_local4].index == index){
                    _local3++;
                    if (this.decisionHistory[(_local4 + 1)].index < this.decisionHistory[_local4].index){
                        if (this.decisionHistory[(_local4 + 1)].emergency == true){
                            return (0);
                        };
                        _local2++;
                    };
                };
                _local4++;
            };
            if (this.decisionHistory.length < this._minReliabilityRecordSize){
                return (Number.NaN);
            };
            if (_local3 == 0){
                return (Number.NaN);
            };
            if (_local2 == 0){
                return (1);
            };
            return ((1 - ((_local2 * _local2) / (_local3 * Math.floor((this.decisionHistory.length / 2))))));
        }
        override public function getNewIndex():uint{
            var _local2:QualityLevel;
            var _local8:Recommendation;
            var _local9:Number;
            var _local10:Number;
            var _local11:Number;
            var _local1:uint;
            var _local3 = 0;
            var _local4 = 0;
            var _local5:MetricValue = this.availableQualityLevelsMetric.value;
            if (!_local5.valid){
                throw (new Error("The available quality levels metric should always be valid"));
            };
            var _local6:Vector.<QualityLevel> = _local5.value;
            var _local7:uint;
            while (_local7 < this.normalRules.length) {
                _local8 = this.normalRules[_local7].getRecommendation();
                _local9 = (_local8.confidence * this.normalRuleWeights[_local7]);
                _local3 = (_local3 + (_local8.bitrate * _local9));
                _local4 = (_local4 + _local9);
                _local7++;
            };
            if (_local4 == 0){
                _local1 = actualIndex;
            } else {
                _local10 = (_local3 / _local4);
                _local11 = this.getCurrentActualBitrate();
                if (_local10 > _local11){
                    _local10 = (_local11 + (this._climbFactor * (_local10 - _local11)));
                };
                _local1 = this.getMaxIndex(_local10);
            };
            this.pushToHistory(_local1);
            return (_local1);
        }
        override public function getNewEmergencyIndex(maxBitrate:Number):uint{
            var _local2:uint = this.getMaxIndex(maxBitrate, true);
            this.pushToHistory(_local2, (_local2 < actualIndex));
            return (_local2);
        }
        protected function setNormalRules(value:Vector.<RuleBase>):void{
            if ((((value == null)) || ((value.length == 0)))){
                throw (new ArgumentError("You must provide at least one normal rule"));
            };
            this._normalRules = value.slice();
        }
        protected function getMaxIndex(maxBitrate:Number, emergencyFlag:Boolean=false):uint{
            var _local8:QualityLevel;
            var _local3:MetricValue = this.availableQualityLevelsMetric.value;
            if (!_local3.valid){
                throw (new Error("The available quality levels metric should always be valid"));
            };
            var _local4:Vector.<QualityLevel> = _local3.value;
            var _local5:QualityLevel = _local4[0];
            var _local6:uint;
            while (_local6 < _local4.length) {
                _local8 = _local4[_local6];
                if ((((((_local8.bitrate > _local5.bitrate)) && ((_local8.bitrate <= maxBitrate)))) && (this.isReliable(_local8.index)))){
                    _local5 = _local8;
                };
                _local6++;
            };
            var _local7:uint = _local5.index;
            if (((!(emergencyFlag)) && (!((_local7 == actualIndex))))){
                if (_local7 > actualIndex){
                    if (this.maxUpSwitchLimit > 0){
                        while (((((((_local7 - actualIndex) > this.maxUpSwitchLimit)) || (!(this.isReliable(_local7))))) && ((_local7 > actualIndex)))) {
                            _local7--;
                        };
                    };
                } else {
                    if (this.maxDownSwitchLimit > 0){
                        while (((((((actualIndex - _local7) > this.maxDownSwitchLimit)) || (!(this.isReliable(_local7))))) && ((_local7 < actualIndex)))) {
                            _local7++;
                        };
                    };
                };
                _local5 = _local4[_local7];
            };
            return (_local5.index);
        }
        protected function isReliable(index:uint):Boolean{
            var _local2:Number = this.getCurrentReliability(index);
            if (isNaN(_local2)){
                return (true);
            };
            return ((_local2 > this._minReliability));
        }
        private function getCurrentActualBitrate():Number{
            var _local5:QualityLevel;
            var _local1 = 0;
            var _local2:MetricValue = this.availableQualityLevelsMetric.value;
            if (!_local2.valid){
                throw (new Error("The available quality levels metric should always be valid"));
            };
            var _local3:Vector.<QualityLevel> = _local2.value;
            var _local4:MetricValue = this.actualBitrateMetric.value;
            if (_local4.valid){
                _local1 = (_local4.value as Number);
            } else {
                for each (_local5 in _local3) {
                    if (_local5.index == actualIndex){
                        _local1 = _local5.bitrate;
                    };
                };
            };
            return (_local1);
        }
        private function pushToHistory(index:uint, emergency:Boolean=false):void{
            var _local3:Switch = new Switch();
            _local3.index = index;
            _local3.emergency = emergency;
            this.decisionHistory.push(_local3);
            if (this.decisionHistory.length > this._maxReliabilityRecordSize){
                this.decisionHistory.shift();
            };
        }

    }
}//package org.osmf.net.httpstreaming 

class Switch {

    public var index:uint = 0;
    public var emergency:Boolean = false;

    public function Switch(){
    }
}
﻿package org.osmf.net.httpstreaming.f4f {

    class FragmentDurationPair {

        private var _firstFragment:uint;
        private var _duration:uint;
        private var _durationAccrued:Number;
        private var _discontinuityIndicator:uint = 0;

        public function get firstFragment():uint{
            return (this._firstFragment);
        }
        public function set firstFragment(value:uint):void{
            this._firstFragment = value;
        }
        public function get duration():uint{
            return (this._duration);
        }
        public function set duration(value:uint):void{
            this._duration = value;
        }
        public function get durationAccrued():Number{
            return (this._durationAccrued);
        }
        public function set durationAccrued(value:Number):void{
            this._durationAccrued = value;
        }
        public function get discontinuityIndicator():uint{
            return (this._discontinuityIndicator);
        }
        public function set discontinuityIndicator(value:uint):void{
            this._discontinuityIndicator = value;
        }

    }
}//package org.osmf.net.httpstreaming.f4f 
﻿package org.osmf.net.httpstreaming.f4f {
    import __AS3__.vec.*;

    public class AdobeBootstrapBox extends FullBox {

        private var _bootstrapVersion:uint;
        private var _profile:uint;
        private var _live:Boolean;
        private var _update:Boolean;
        private var _timeScale:uint;
        private var _currentMediaTime:Number;
        private var _smpteTimeCodeOffset:Number;
        private var _movieIdentifier:String;
        private var _serverEntryCount:uint;
        private var _serverBaseURLs:Vector.<String>;
        private var _qualitySegmentURLModifiers:Vector.<String>;
        private var _drmData:String;
        private var _metadata:String;
        private var _segmentRunTables:Vector.<AdobeSegmentRunTable>;
        private var _fragmentRunTables:Vector.<AdobeFragmentRunTable>;

        public function get bootstrapVersion():uint{
            return (this._bootstrapVersion);
        }
        public function set bootstrapVersion(value:uint):void{
            this._bootstrapVersion = value;
        }
        public function get profile():uint{
            return (this._profile);
        }
        public function set profile(value:uint):void{
            this._profile = value;
        }
        public function get live():Boolean{
            return (this._live);
        }
        public function set live(value:Boolean):void{
            this._live = value;
        }
        public function get update():Boolean{
            return (this._update);
        }
        public function set update(value:Boolean):void{
            this._update = value;
        }
        public function get timeScale():uint{
            return (this._timeScale);
        }
        public function set timeScale(value:uint):void{
            this._timeScale = value;
        }
        public function get currentMediaTime():Number{
            return (this._currentMediaTime);
        }
        public function set currentMediaTime(value:Number):void{
            this._currentMediaTime = value;
        }
        public function get smpteTimeCodeOffset():Number{
            return (this._smpteTimeCodeOffset);
        }
        public function set smpteTimeCodeOffset(value:Number):void{
            this._smpteTimeCodeOffset = value;
        }
        public function get movieIdentifier():String{
            return (this._movieIdentifier);
        }
        public function set movieIdentifier(value:String):void{
            this._movieIdentifier = value;
        }
        public function get serverBaseURLs():Vector.<String>{
            return (this._serverBaseURLs);
        }
        public function set serverBaseURLs(value:Vector.<String>):void{
            this._serverBaseURLs = value;
        }
        public function get qualitySegmentURLModifiers():Vector.<String>{
            return (this._qualitySegmentURLModifiers);
        }
        public function set qualitySegmentURLModifiers(value:Vector.<String>):void{
            this._qualitySegmentURLModifiers = value;
        }
        public function get drmData():String{
            return (this._drmData);
        }
        public function set drmData(value:String):void{
            this._drmData = value;
        }
        public function get metadata():String{
            return (this._metadata);
        }
        public function set metadata(value:String):void{
            this._metadata = value;
        }
        public function get segmentRunTables():Vector.<AdobeSegmentRunTable>{
            return (this._segmentRunTables);
        }
        public function set segmentRunTables(value:Vector.<AdobeSegmentRunTable>):void{
            this._segmentRunTables = value;
        }
        public function get fragmentRunTables():Vector.<AdobeFragmentRunTable>{
            return (this._fragmentRunTables);
        }
        public function set fragmentRunTables(value:Vector.<AdobeFragmentRunTable>):void{
            var _local2:AdobeFragmentRunTable;
            this._fragmentRunTables = value;
            if (((!((value == null))) && ((value.length > 0)))){
                _local2 = value[(value.length - 1)];
                _local2.adjustEndEntryDurationAccrued(this._currentMediaTime);
            };
        }
        public function findSegmentId(fragmentId:uint):uint{
            return (this._segmentRunTables[0].findSegmentIdByFragmentId(fragmentId));
        }
        public function get totalFragments():uint{
            var _local1:AdobeFragmentRunTable = this._fragmentRunTables[(this._fragmentRunTables.length - 1)];
            var _local2:Vector.<FragmentDurationPair> = _local1.fragmentDurationPairs;
            var _local3:FragmentDurationPair = _local2[(_local2.length - 1)];
            if (_local3.duration == 0){
                _local3 = _local2[(_local2.length - 2)];
            };
            var _local4:Number = (this._currentMediaTime - _local3.durationAccrued);
            var _local5:uint = ((_local4)<=0) ? 0 : (_local4 / _local3.duration);
            return (((_local3.firstFragment + _local5) - 1));
        }
        public function get totalDuration():uint{
            if ((((this._fragmentRunTables == null)) || ((this._fragmentRunTables.length < 1)))){
                return (0);
            };
            if (this.live){
                return (uint.MAX_VALUE);
            };
            var _local1:AdobeFragmentRunTable = this._fragmentRunTables[0];
            return ((this._currentMediaTime - _local1.fragmentDurationPairs[0].durationAccrued));
        }
        public function contentComplete():Boolean{
            var _local1:AdobeFragmentRunTable = this._fragmentRunTables[(this._fragmentRunTables.length - 1)];
            return (_local1.tableComplete());
        }

    }
}//package org.osmf.net.httpstreaming.f4f 
﻿package org.osmf.net.httpstreaming.f4f {
    import flash.utils.*;

    class MediaDataBox extends Box {

        private var _data:ByteArray;

        public function get data():ByteArray{
            return (this._data);
        }
        public function set data(value:ByteArray):void{
            this._data = value;
        }

    }
}//package org.osmf.net.httpstreaming.f4f 
﻿package org.osmf.net.httpstreaming.f4f {
    import flash.utils.*;
    import org.osmf.elements.f4mClasses.*;

    public class HTTPStreamingF4FStreamInfo {

        private var _streamName:String;
        private var _bitrate:Number;
        private var _bootstrap:BootstrapInfo;
        private var _additionalHeader:ByteArray;
        private var _streamMetadata:Object;
        private var _xmpMetadata:ByteArray;

        public function HTTPStreamingF4FStreamInfo(bootstrap:BootstrapInfo, streamName:String, bitrate:Number, additionalHeader:ByteArray, streamMetadata:Object, xmpMetadata:ByteArray){
            this._streamName = streamName;
            this._bitrate = bitrate;
            this._additionalHeader = additionalHeader;
            this._bootstrap = bootstrap;
            this._streamMetadata = streamMetadata;
            this._xmpMetadata = xmpMetadata;
        }
        public function get streamName():String{
            return (this._streamName);
        }
        public function get bitrate():Number{
            return (this._bitrate);
        }
        public function get additionalHeader():ByteArray{
            return (this._additionalHeader);
        }
        public function get bootstrapInfo():BootstrapInfo{
            return (this._bootstrap);
        }
        public function get streamMetadata():Object{
            return (this._streamMetadata);
        }
        public function get xmpMetadata():ByteArray{
            return (this._xmpMetadata);
        }

    }
}//package org.osmf.net.httpstreaming.f4f 
﻿package org.osmf.net.httpstreaming.f4f {
    import org.osmf.events.*;
    import flash.events.*;
    import flash.utils.*;
    import flash.net.*;
    import org.osmf.utils.*;
    import __AS3__.vec.*;
    import org.osmf.net.httpstreaming.*;
    import org.osmf.net.dvr.*;
    import org.osmf.elements.f4mClasses.*;
    import org.osmf.net.httpstreaming.dvr.*;
    import org.osmf.net.httpstreaming.flv.*;

    public class HTTPStreamingF4FIndexHandler extends HTTPStreamingIndexHandlerBase {

        public static const DEFAULT_FRAGMENTS_THRESHOLD:uint = 5;
        private static const BEST_EFFORT_STATE_OFF:String = "off";
        private static const BEST_EFFORT_STATE_PLAY:String = "play";
        private static const BEST_EFFORT_STATE_SEEK_BACKWARD:String = "seekBackward";
        private static const BEST_EFFORT_STATE_SEEK_FORWARD:String = "seekForward";
        private static const BEST_EFFORT_PLAY_SITUAUTION_NORMAL:String = "normal";
        private static const BEST_EFFORT_PLAY_SITUAUTION_DROPOUT:String = "dropout";
        private static const BEST_EFFORT_PLAY_SITUAUTION_LIVENESS:String = "liveness";
        private static const BEST_EFFORT_PLAY_SITUAUTION_DONE:String = "done";

        private var _currentQuality:int = -1;
        private var _currentAdditionalHeader:ByteArray = null;
        private var _currentFAI:FragmentAccessInformation = null;
        private var _pureLiveOffset:Number = NaN;
        private var _f4fIndexInfo:HTTPStreamingF4FIndexInfo = null;
        private var _bootstrapBoxes:Vector.<AdobeBootstrapBox> = null;
        private var _bootstrapBoxesURLs:Vector.<String> = null;
        private var _streamInfos:Vector.<HTTPStreamingF4FStreamInfo> = null;
        private var _streamNames:Array = null;
        private var _streamQualityRates:Array = null;
        private var _serverBaseURL:String = null;
        private var _delay:Number = 0.05;
        private var _indexUpdating:Boolean = false;
        private var _pendingIndexLoads:int = 0;
        private var _pendingIndexUpdates:int = 0;
        private var _pendingIndexUrls:Object;
        private var _invokedFromDvrGetStreamInfo:Boolean = false;
        private var playInProgress:Boolean;
        private var bootstrapUpdateTimer:Timer;
        private var bootstrapUpdateInterval:Number = 4000;
        private var _bestEffortInited:Boolean = false;
        private var _bestEffortEnabled:Boolean = false;
        private var _bestEffortState:String = "off";
        private var _bestEffortSeekTime:Number = 0;
        private var _bestEffortDownloaderMonitor:EventDispatcher;
        private var _bestEffortFailedFetches:uint = 0;
        private var _bestEffortDownloadReply:String = null;
        private var _bestEffortNeedsToFireFragmentDuration:Boolean = false;
        private var _bestEffortF4FHandler:HTTPStreamingF4FFileHandler;
        private var _bestEffortSeekBuffer:ByteArray;
        private var _bestEffortNotifyBootstrapBoxInfo:Object = null;
        private var _bestEffortLivenessRestartPoint:uint = 0;
        private var _bestEffortLastGoodFragmentDownloadTime:Date = null;

        public function HTTPStreamingF4FIndexHandler(fileHandler:HTTPStreamingFileHandlerBase, fragmentsThreshold:uint=5){
            this._pendingIndexUrls = new Object();
            this._bestEffortDownloaderMonitor = new EventDispatcher();
            this._bestEffortF4FHandler = new HTTPStreamingF4FFileHandler();
            this._bestEffortSeekBuffer = new ByteArray();
            super();
            fileHandler.addEventListener(HTTPStreamingFileHandlerEvent.NOTIFY_BOOTSTRAP_BOX, this.onBootstrapBox);
            this._bestEffortF4FHandler.addEventListener(HTTPStreamingFileHandlerEvent.NOTIFY_BOOTSTRAP_BOX, this.onBestEffortF4FHandlerNotifyBootstrapBox);
        }
        override public function dvrGetStreamInfo(indexInfo:Object):void{
            this._invokedFromDvrGetStreamInfo = true;
            this.playInProgress = false;
            this.initialize(indexInfo);
        }
        override public function initialize(indexInfo:Object):void{
            var _local2:AdobeBootstrapBox;
            var _local5:HTTPStreamingF4FStreamInfo;
            var _local6:BootstrapInfo;
            this._f4fIndexInfo = (indexInfo as HTTPStreamingF4FIndexInfo);
            if ((((((this._f4fIndexInfo == null)) || ((this._f4fIndexInfo.streamInfos == null)))) || ((this._f4fIndexInfo.streamInfos.length <= 0)))){
                dispatchEvent(new HTTPStreamingEvent(HTTPStreamingEvent.INDEX_ERROR));
                return;
            };
            this._indexUpdating = false;
            this._pendingIndexLoads = 0;
            this._pendingIndexUpdates = 0;
            this._pendingIndexUrls = new Object();
            this.playInProgress = false;
            this._pureLiveOffset = NaN;
            this._serverBaseURL = this._f4fIndexInfo.serverBaseURL;
            this._streamInfos = this._f4fIndexInfo.streamInfos;
            var _local3:int = this._streamInfos.length;
            this._streamQualityRates = [];
            this._streamNames = [];
            this._bootstrapBoxesURLs = new Vector.<String>(_local3);
            this._bootstrapBoxes = new Vector.<AdobeBootstrapBox>(_local3);
            var _local4:int;
            while (_local4 < _local3) {
                _local5 = this._streamInfos[_local4];
                if (_local5 != null){
                    this._streamQualityRates[_local4] = _local5.bitrate;
                    this._streamNames[_local4] = _local5.streamName;
                    _local6 = _local5.bootstrapInfo;
                    if ((((_local6 == null)) || ((((_local6.url == null)) && ((_local6.data == null)))))){
                        dispatchEvent(new HTTPStreamingEvent(HTTPStreamingEvent.INDEX_ERROR));
                        return;
                    };
                    if (_local6.data != null){
                        _local2 = this.processBootstrapData(_local6.data, _local4);
                        if (_local2 == null){
                            dispatchEvent(new HTTPStreamingEvent(HTTPStreamingEvent.INDEX_ERROR));
                            return;
                        };
                        this._bootstrapBoxes[_local4] = _local2;
                    } else {
                        this._bootstrapBoxesURLs[_local4] = HTTPStreamingUtils.normalizeURL(_local6.url);
                        this._pendingIndexLoads++;
                        this.dispatchIndexLoadRequest(_local4);
                    };
                };
                _local4++;
            };
            if (this._pendingIndexLoads == 0){
                this.notifyRatesReady();
                this.notifyIndexReady(0);
            };
        }
        override public function dispose():void{
            this.destroyBootstrapUpdateTimer();
        }
        override public function processIndexData(data, indexContext:Object):void{
            var _local5:String;
            var _local3:int = (indexContext as int);
            var _local4:AdobeBootstrapBox = this.processBootstrapData(data, _local3);
            if (_local4 == null){
                dispatchEvent(new HTTPStreamingEvent(HTTPStreamingEvent.INDEX_ERROR));
                return;
            };
            if (!this._indexUpdating){
                this._pendingIndexLoads--;
            } else {
                this._pendingIndexUpdates--;
                _local5 = this._bootstrapBoxesURLs[_local3];
                if (((!((_local5 == null))) && (this._pendingIndexUrls.hasOwnProperty(_local5)))){
                    this._pendingIndexUrls[_local5].active = false;
                };
                if (this._pendingIndexUpdates == 0){
                    this._indexUpdating = false;
                };
            };
            this.updateBootstrapBox(_local3, _local4, true);
            if ((((this._pendingIndexLoads == 0)) && (!(this._indexUpdating)))){
                this.notifyRatesReady();
                this.notifyIndexReady(_local3);
            };
        }
        override public function getFileForTime(time:Number, quality:int):HTTPStreamRequest{
            var _local4:HTTPStreamRequest;
            if ((((((quality < 0)) || ((quality >= this._streamInfos.length)))) || ((time < 0)))){
                return (new HTTPStreamRequest(HTTPStreamRequestKind.DONE));
            };
            this._bestEffortState = BEST_EFFORT_STATE_OFF;
            var _local3:AdobeBootstrapBox = this._bootstrapBoxes[quality];
            if (_local3 == null){
                return (new HTTPStreamRequest(HTTPStreamRequestKind.DONE));
            };
            if (((!(this.playInProgress)) && (this.isStopped(_local3)))){
                this.destroyBootstrapUpdateTimer();
                return (new HTTPStreamRequest(HTTPStreamRequestKind.DONE));
            };
            this.updateMetadata(quality);
            var _local5:Number = (time * _local3.timeScale);
            if (this._bestEffortEnabled){
                _local4 = this.getFirstRequestForBestEffortSeek(_local5, quality, _local3);
            } else {
                _local4 = this.getSeekRequestForNormalFetch(_local5, quality, _local3);
            };
            return (_local4);
        }
        private function getSeekRequestForNormalFetch(desiredTime:Number, quality:int, bootstrapBox:AdobeBootstrapBox):HTTPStreamRequest{
            var _local4:HTTPStreamRequest;
            var _local5:Boolean;
            var _local6:Number = bootstrapBox.currentMediaTime;
            var _local7:Boolean = bootstrapBox.contentComplete();
            var _local8:AdobeFragmentRunTable = this.getFragmentRunTable(bootstrapBox);
            if (desiredTime <= _local6){
                if (_local8 != null){
                    this._currentFAI = _local8.findFragmentIdByTime(desiredTime, _local6, ((_local7) ? false : bootstrapBox.live));
                };
                if ((((this._currentFAI == null)) || (this.fragmentOverflow(bootstrapBox, this._currentFAI.fragId)))){
                    if (((!(bootstrapBox.live)) || (_local7))){
                        return (new HTTPStreamRequest(HTTPStreamRequestKind.DONE));
                    };
                    return (this.initiateLivenessFailure(quality));
                };
                return (this.initiateNormalDownload(bootstrapBox, quality));
            };
            if (bootstrapBox.live){
                return (this.initiateBootstrapRefresh(quality));
            };
            return (new HTTPStreamRequest(HTTPStreamRequestKind.DONE));
        }
        override public function getNextFile(quality:int):HTTPStreamRequest{
            if ((((quality < 0)) || ((quality >= this._streamInfos.length)))){
                return (new HTTPStreamRequest(HTTPStreamRequestKind.DONE));
            };
            var _local2:AdobeBootstrapBox = this._bootstrapBoxes[quality];
            if (_local2 == null){
                return (new HTTPStreamRequest(HTTPStreamRequestKind.DONE));
            };
            if (((!(this.playInProgress)) && (this.isStopped(_local2)))){
                this.destroyBootstrapUpdateTimer();
                return (new HTTPStreamRequest(HTTPStreamRequestKind.DONE));
            };
            this.updateMetadata(quality);
            var _local3:HTTPStreamRequest;
            if (this._bestEffortEnabled){
                if ((((this._bestEffortState == BEST_EFFORT_STATE_OFF)) || ((this._bestEffortState == BEST_EFFORT_STATE_PLAY)))){
                    _local3 = this.getNextRequestForBestEffortPlay(quality, _local2);
                } else {
                    _local3 = this.getNextRequestForBestEffortSeek(quality, _local2);
                };
            } else {
                _local3 = this.getNextRequestForNormalPlay(quality, _local2);
            };
            return (_local3);
        }
        private function getNextRequestForNormalPlay(quality:int, bootstrapBox:AdobeBootstrapBox):HTTPStreamRequest{
            var _local3:HTTPStreamRequest;
            var _local4:Number = bootstrapBox.currentMediaTime;
            var _local5:Boolean = bootstrapBox.contentComplete();
            var _local6:FragmentAccessInformation = this._currentFAI;
            var _local7:AdobeFragmentRunTable = this.getFragmentRunTable(bootstrapBox);
            if (_local6 == null){
                this._currentFAI = null;
            };
            if (_local7 != null){
                this._currentFAI = _local7.validateFragment((_local6.fragId + 1), _local4, ((_local5) ? false : bootstrapBox.live));
            };
            if ((((this._currentFAI == null)) || (this.fragmentOverflow(bootstrapBox, this._currentFAI.fragId)))){
                this._currentFAI = _local6;
                if (((!(bootstrapBox.live)) || (_local5))){
                    return (new HTTPStreamRequest(HTTPStreamRequestKind.DONE));
                };
                this._currentFAI = _local6;
                return (this.initiateLivenessFailure(quality));
            };
            return (this.initiateNormalDownload(bootstrapBox, quality));
        }
        private function initiateLivenessFailure(quality:int):HTTPStreamRequest{
            var _local2:Number;
            this.adjustDelay();
            this.refreshBootstrapBox(quality);
            if (this._bestEffortEnabled){
                _local2 = Math.max(((this._f4fIndexInfo.bestEffortFetchInfo.fragmentDuration / 2) / 1000), 1);
            } else {
                _local2 = this._delay;
            };
            return (new HTTPStreamRequest(HTTPStreamRequestKind.LIVE_STALL, null, _local2));
        }
        private function initiateBootstrapRefresh(quality:int):HTTPStreamRequest{
            this.adjustDelay();
            this.refreshBootstrapBox(quality);
            return (new HTTPStreamRequest(HTTPStreamRequestKind.RETRY, null, this._delay));
        }
        private function initiateNormalDownload(bootstrapBox:AdobeBootstrapBox, quality:int):HTTPStreamRequest{
            this.stopListeningToBestEffortDownload();
            this._bestEffortLivenessRestartPoint = this._currentFAI.fragId;
            this._bestEffortLastGoodFragmentDownloadTime = new Date();
            this.playInProgress = true;
            this.updateQuality(quality);
            this.notifyFragmentDuration((this._currentFAI.fragDuration / bootstrapBox.timeScale));
            return (new HTTPStreamRequest(HTTPStreamRequestKind.DOWNLOAD, this.getFragmentUrl(quality, this._currentFAI)));
        }
        private function fragmentOverflow(bootstrapBox:AdobeBootstrapBox, fragId:uint):Boolean{
            var _local3:AdobeFragmentRunTable = bootstrapBox.fragmentRunTables[0];
            var _local4:FragmentDurationPair = _local3.fragmentDurationPairs[0];
            var _local5:AdobeSegmentRunTable = bootstrapBox.segmentRunTables[0];
            return ((((_local5 == null)) || ((((_local5.totalFragments + _local4.firstFragment) - 1) < fragId))));
        }
        private function isStopped(bootstrapBox:AdobeBootstrapBox):Boolean{
            var _local3:AdobeFragmentRunTable;
            var _local2:Boolean;
            if (this._f4fIndexInfo.dvrInfo != null){
                _local2 = this._f4fIndexInfo.dvrInfo.offline;
            } else {
                if (((!((bootstrapBox == null))) && (bootstrapBox.live))){
                    _local3 = this.getFragmentRunTable(bootstrapBox);
                    if (_local3 != null){
                        _local2 = _local3.tableComplete();
                    };
                };
            };
            return (_local2);
        }
        private function getFragmentUrl(quality:int, fragment:FragmentAccessInformation):String{
            var _local3:AdobeBootstrapBox = this._bootstrapBoxes[quality];
            var _local4:AdobeFragmentRunTable = this.getFragmentRunTable(_local3);
            var _local5:FragmentDurationPair = _local4.fragmentDurationPairs[0];
            var _local6:uint = _local3.findSegmentId(((fragment.fragId - _local5.firstFragment) + 1));
            return (this.constructFragmentRequest(this._serverBaseURL, this._streamNames[quality], _local6, fragment.fragId));
        }
        protected function constructFragmentRequest(serverBaseURL:String, streamName:String, segmentId:uint, fragmentId:uint):String{
            var _local5:String = "";
            if (((!((streamName == null))) && (!((streamName.indexOf("http") == 0))))){
                _local5 = (serverBaseURL + "/");
            };
            _local5 = (_local5 + streamName);
            var _local6:URL = new URL(_local5);
            new URL(_local5).path = (_local6.path + ((("Seg" + segmentId) + "-Frag") + fragmentId));
            _local5 = ((_local6.protocol + "://") + _local6.host);
            if (((!((_local6.port == null))) && ((_local6.port.length > 0)))){
                _local5 = (_local5 + (":" + _local6.port));
            };
            _local5 = (_local5 + ("/" + _local6.path));
            if (((!((_local6.query == null))) && ((_local6.query.length > 0)))){
                _local5 = (_local5 + ("?" + _local6.query));
            };
            if (((!((_local6.fragment == null))) && ((_local6.fragment.length > 0)))){
                _local5 = (_local5 + ("#" + _local6.fragment));
            };
            return (_local5);
        }
        private function getFragmentRunTable(bootstrapBox:AdobeBootstrapBox):AdobeFragmentRunTable{
            if (bootstrapBox == null){
                return (null);
            };
            return (bootstrapBox.fragmentRunTables[0]);
        }
        private function adjustDelay():void{
            if (this._delay < 1){
                this._delay = (this._delay * 2);
                if (this._delay > 1){
                    this._delay = 1;
                };
            };
        }
        private function refreshBootstrapBox(quality:uint):void{
            var _local7:Date;
            var _local2:String = this._bootstrapBoxesURLs[quality];
            if (_local2 == null){
                return;
            };
            var _local3:Object;
            if (this._pendingIndexUrls.hasOwnProperty(_local2)){
                _local3 = this._pendingIndexUrls[_local2];
            } else {
                _local3 = new Object();
                _local3["active"] = false;
                _local3["date"] = null;
                this._pendingIndexUrls[_local2] = _local3;
            };
            var _local4:Boolean = _local3.active;
            var _local5:Date = new Date();
            var _local6 = 0;
            if (((!(_local4)) && ((OSMFSettings.hdsMinimumBootstrapRefreshInterval > 0)))){
                _local7 = _local3["date"];
                _local6 = Number.MAX_VALUE;
                if (_local7 != null){
                    _local6 = (_local5.valueOf() - _local7.valueOf());
                };
                _local4 = (_local6 < OSMFSettings.hdsMinimumBootstrapRefreshInterval);
            };
            if (!_local4){
                this._pendingIndexUrls[_local2].date = _local5;
                this._pendingIndexUrls[_local2].active = true;
                this._pendingIndexUpdates++;
                this._indexUpdating = true;
                this.dispatchIndexLoadRequest(quality);
            };
        }
        private function updateBootstrapBox(quality:int, bootstrapBox:AdobeBootstrapBox, sourceIsIndex:Boolean):void{
            if (this.shouldAcceptBootstrapBox(quality, bootstrapBox, sourceIsIndex)){
                this._bootstrapBoxes[quality] = bootstrapBox;
                this._delay = 0.05;
                if (quality == this._currentQuality){
                    this.dispatchDVRStreamInfo(bootstrapBox);
                };
            };
        }
        private function shouldAcceptBootstrapBox(quality:int, newBootstrap:AdobeBootstrapBox, sourceIsIndex:Boolean):Boolean{
            var _local7:AdobeFragmentRunTable;
            var _local8:AdobeSegmentRunTable;
            var _local9:uint;
            var _local10:uint;
            var _local4:AdobeBootstrapBox = this._bootstrapBoxes[quality];
            if ((((((newBootstrap == null)) || ((newBootstrap.fragmentRunTables.length == 0)))) || ((newBootstrap.segmentRunTables.length == 0)))){
                return (false);
            };
            var _local5:AdobeFragmentRunTable = newBootstrap.fragmentRunTables[0];
            var _local6:AdobeSegmentRunTable = newBootstrap.segmentRunTables[0];
            if ((((_local5 == null)) || ((_local6 == null)))){
                return (false);
            };
            if (_local5.firstFragmentId == 0){
                return (false);
            };
            if (_local4 == null){
                return (true);
            };
            if (_local4.live != newBootstrap.live){
                return (false);
            };
            if (!_local4.live){
                if (newBootstrap.version != _local4.version){
                    return ((newBootstrap.version > _local4.version));
                };
                return ((newBootstrap.currentMediaTime > _local4.currentMediaTime));
            };
            if (!sourceIsIndex){
                return (false);
            };
            _local7 = _local4.fragmentRunTables[0];
            _local8 = _local4.segmentRunTables[0];
            if (newBootstrap.currentMediaTime != _local4.currentMediaTime){
                return ((newBootstrap.currentMediaTime > _local4.currentMediaTime));
            };
            if (_local5.firstFragmentId != _local7.firstFragmentId){
                return ((_local5.firstFragmentId < _local7.firstFragmentId));
            };
            _local9 = _local5.countGapFragments();
            _local10 = _local7.countGapFragments();
            if (_local9 != _local10){
                return ((_local9 < _local10));
            };
            if (((newBootstrap.contentComplete()) && (!(_local4.contentComplete())))){
                return (true);
            };
            return (false);
        }
        private function processBootstrapData(data, indexContext:Object):AdobeBootstrapBox{
            var boxes:* = null;
            var data:* = data;
            var indexContext:* = indexContext;
            var parser:* = new BoxParser();
            data.position = 0;
            parser.init(data);
            try {
                boxes = parser.getBoxes();
            } catch(e:Error) {
                boxes = null;
            };
            if ((((boxes == null)) || ((boxes.length < 1)))){
                return (null);
            };
            var bootstrapBox:* = (boxes[0] as AdobeBootstrapBox);
            if (bootstrapBox == null){
                return (null);
            };
            if ((((this._serverBaseURL == null)) || ((this._serverBaseURL.length <= 0)))){
                if ((((bootstrapBox.serverBaseURLs == null)) || ((bootstrapBox.serverBaseURLs.length <= 0)))){
                    return (null);
                };
                this._serverBaseURL = bootstrapBox.serverBaseURLs[0];
            };
            return (bootstrapBox);
        }
        private function updateQuality(quality:int):void{
            var _local2:ByteArray;
            var _local3:ByteArray;
            if (quality != this._currentQuality){
                _local2 = this._currentAdditionalHeader;
                _local3 = this._streamInfos[quality].additionalHeader;
                this._currentQuality = quality;
                this._currentAdditionalHeader = _local3;
                if (((!((_local3 == null))) && (!((_local3 == _local2))))){
                    this.dispatchAdditionalHeader(_local3);
                };
            };
        }
        private function updateMetadata(quality:int):void{
            var _local2:AdobeBootstrapBox;
            if (quality != this._currentQuality){
                _local2 = this._bootstrapBoxes[quality];
                if (_local2 != null){
                    this.notifyTotalDuration((_local2.totalDuration / _local2.timeScale), quality);
                };
            };
        }
        private function dispatchAdditionalHeader(additionalHeader:ByteArray):void{
            var _local2:FLVTagScriptDataObject = new FLVTagScriptDataObject();
            _local2.data = additionalHeader;
            dispatchEvent(new HTTPStreamingEvent(HTTPStreamingEvent.SCRIPT_DATA, false, false, 0, _local2, FLVTagScriptDataMode.FIRST));
        }
        private function dispatchDVRStreamInfo(bootstrapBox:AdobeBootstrapBox):void{
            var _local4:Number;
            var _local5:Number;
            var _local6:Number;
            var _local7:Number;
            var _local2:AdobeFragmentRunTable = this.getFragmentRunTable(bootstrapBox);
            var _local3:DVRInfo = this._f4fIndexInfo.dvrInfo;
            if (_local3 != null){
                _local3.isRecording = !(_local2.tableComplete());
                _local4 = (bootstrapBox.totalDuration / bootstrapBox.timeScale);
                _local5 = (bootstrapBox.currentMediaTime / bootstrapBox.timeScale);
                if (isNaN(_local3.startTime)){
                    if (!_local3.isRecording){
                        _local3.startTime = 0;
                    } else {
                        _local6 = (((((_local3.beginOffset < 0)) || (isNaN(_local3.beginOffset)))) ? 0 : _local3.beginOffset);
                        _local7 = (((((_local3.endOffset < 0)) || (isNaN(_local3.endOffset)))) ? 0 : _local3.endOffset);
                        _local3.startTime = DVRUtils.calculateOffset(_local6, _local7, _local4);
                    };
                    _local3.startTime = (_local3.startTime + (_local2.fragmentDurationPairs[0].durationAccrued / bootstrapBox.timeScale));
                    if (_local3.startTime > _local5){
                        _local3.startTime = _local5;
                    };
                };
                _local3.curLength = (_local5 - _local3.startTime);
                if (((!((_local3.windowDuration == -1))) && ((_local3.curLength > _local3.windowDuration)))){
                    _local3.startTime = (_local3.startTime + (_local3.curLength - _local3.windowDuration));
                    _local3.curLength = _local3.windowDuration;
                };
                dispatchEvent(new DVRStreamInfoEvent(DVRStreamInfoEvent.DVRSTREAMINFO, false, false, _local3));
            };
        }
        private function dispatchIndexLoadRequest(quality:int):void{
            dispatchEvent(new HTTPStreamingIndexHandlerEvent(HTTPStreamingIndexHandlerEvent.REQUEST_LOAD_INDEX, false, false, false, NaN, null, null, new URLRequest(this._bootstrapBoxesURLs[quality]), quality, true));
        }
        private function notifyRatesReady():void{
            dispatchEvent(new HTTPStreamingIndexHandlerEvent(HTTPStreamingIndexHandlerEvent.RATES_READY, false, false, false, NaN, this._streamNames, this._streamQualityRates));
        }
        private function notifyIndexReady(quality:int):void{
            var _local2:AdobeBootstrapBox = this._bootstrapBoxes[quality];
            var _local3:AdobeFragmentRunTable = this.getFragmentRunTable(_local2);
            if (!this._bestEffortInited){
                this._bestEffortEnabled = ((!((this._f4fIndexInfo.bestEffortFetchInfo == null))) && (_local2.live));
                this._bestEffortInited = true;
            };
            this.dispatchDVRStreamInfo(_local2);
            if (!this._invokedFromDvrGetStreamInfo){
                if (((((_local2.live) && ((this._f4fIndexInfo.dvrInfo == null)))) && (isNaN(this._pureLiveOffset)))){
                    this._pureLiveOffset = (_local2.currentMediaTime - (OSMFSettings.hdsPureLiveOffset * _local2.timeScale));
                    if (this._pureLiveOffset < 0){
                        this._pureLiveOffset = NaN;
                    } else {
                        this._pureLiveOffset = (this._pureLiveOffset / _local2.timeScale);
                    };
                };
                if (((((_local2.live) && (!((this._f4fIndexInfo.dvrInfo == null))))) && (!((this._f4fIndexInfo.dvrInfo.windowDuration == -1))))){
                    this.initializeBootstrapUpdateTimer();
                };
                if (_local3.tableComplete()){
                    this.destroyBootstrapUpdateTimer();
                };
                dispatchEvent(new HTTPStreamingIndexHandlerEvent(HTTPStreamingIndexHandlerEvent.INDEX_READY, false, false, _local2.live, this._pureLiveOffset));
            };
            this._invokedFromDvrGetStreamInfo = false;
        }
        private function notifyTotalDuration(duration:Number, quality:int):void{
            var _local3:Object = this._streamInfos[quality].streamMetadata;
            if (_local3 == null){
                _local3 = new Object();
            };
            _local3.duration = duration;
            var _local4:FLVTagScriptDataObject = new FLVTagScriptDataObject();
            _local4.objects = ["onMetaData", _local3];
            dispatchEvent(new HTTPStreamingEvent(HTTPStreamingEvent.SCRIPT_DATA, false, false, 0, _local4, FLVTagScriptDataMode.IMMEDIATE));
        }
        private function notifyFragmentDuration(duration:Number):void{
            this.bootstrapUpdateInterval = (duration * 1000);
            if (this.bootstrapUpdateInterval < OSMFSettings.hdsMinimumBootstrapRefreshInterval){
                this.bootstrapUpdateInterval = OSMFSettings.hdsMinimumBootstrapRefreshInterval;
            };
            dispatchEvent(new HTTPStreamingEvent(HTTPStreamingEvent.FRAGMENT_DURATION, false, false, duration, null, null));
        }
        private function initializeBootstrapUpdateTimer():void{
            if (this.bootstrapUpdateTimer == null){
                this.bootstrapUpdateTimer = new Timer(this.bootstrapUpdateInterval);
                this.bootstrapUpdateTimer.addEventListener(TimerEvent.TIMER, this.onBootstrapUpdateTimer);
                this.bootstrapUpdateTimer.start();
            };
        }
        private function destroyBootstrapUpdateTimer():void{
            if (this.bootstrapUpdateTimer != null){
                this.bootstrapUpdateTimer.removeEventListener(TimerEvent.TIMER, this.onBootstrapUpdateTimer);
                this.bootstrapUpdateTimer = null;
            };
        }
        private function onBootstrapBox(event:HTTPStreamingFileHandlerEvent):void{
            this.updateBootstrapBox(this._currentQuality, event.bootstrapBox, false);
            this.notifyFragmentDurationForBestEffort(event.bootstrapBox);
        }
        private function onBootstrapUpdateTimer(event:TimerEvent):void{
            if (this._currentQuality != -1){
                this.refreshBootstrapBox(this._currentQuality);
                this.bootstrapUpdateTimer.delay = this.bootstrapUpdateInterval;
            };
        }
        private function getFirstRequestForBestEffortSeek(desiredTime:Number, quality:int, bootstrapBox:AdobeBootstrapBox):HTTPStreamRequest{
            this.bestEffortLog(("Initiating best effort seek " + desiredTime));
            this._bestEffortState = BEST_EFFORT_STATE_SEEK_BACKWARD;
            this._bestEffortSeekTime = desiredTime;
            this._bestEffortFailedFetches = 0;
            this._bestEffortLastGoodFragmentDownloadTime = null;
            return (this.getNextRequestForBestEffortSeek(quality, bootstrapBox));
        }
        private function getNextRequestForBestEffortSeek(quality:int, bootstrapBox:AdobeBootstrapBox):HTTPStreamRequest{
            var _local3:AdobeFragmentRunTable = this.getFragmentRunTable(bootstrapBox);
            if (_local3 == null){
                this.bestEffortLog("Best effort done because the bootstrap box was invalid");
                return (new HTTPStreamRequest(HTTPStreamRequestKind.DONE));
            };
            this.stopListeningToBestEffortDownload();
            this._currentFAI = null;
            var _local4:uint = this.doBestEffortSeek(bootstrapBox, _local3);
            if (_local4 != 0){
                this.bestEffortLog(("Best effort seek fetch for fragment " + _local4));
                this._bestEffortF4FHandler.beginProcessFile(true, this._bestEffortSeekTime);
                this._bestEffortSeekBuffer.length = 0;
                this._bestEffortSeekBuffer.position = 0;
                return (this.initiateBestEffortRequest(_local4, quality));
            };
            this._bestEffortState = BEST_EFFORT_STATE_OFF;
            this._currentFAI = _local3.getFragmentWithTimeGreq(this._bestEffortSeekTime);
            if (this._currentFAI == null){
                this.bestEffortLog("Best effort done because there were no bootstrap entries");
                this._bestEffortState = BEST_EFFORT_STATE_OFF;
                this._bestEffortLivenessRestartPoint = (Math.max(this.guessFragmentIdForTime(this._bestEffortSeekTime), 1) - 1);
                this._currentFAI = new FragmentAccessInformation();
                this._currentFAI.fragId = this._bestEffortLivenessRestartPoint;
                return (this.getNextFile(quality));
            };
            this.bestEffortLog(("Normal seek request for fragment " + this._currentFAI.fragId));
            return (this.initiateNormalDownload(bootstrapBox, quality));
        }
        private function guessFragmentIdForTime(time:Number):uint{
            return ((uint(Math.floor((time / this._f4fIndexInfo.bestEffortFetchInfo.fragmentDuration))) + 1));
        }
        private function doBestEffortSeek(bootstrapBox:AdobeBootstrapBox, frt:AdobeFragmentRunTable):uint{
            var _local5:Number;
            var _local6:uint;
            if (this._bestEffortSeekTime >= bootstrapBox.currentMediaTime){
                this.bestEffortLog("Seek time greter than current media time.");
                return (0);
            };
            if (!frt.isTimeInGap(this._bestEffortSeekTime, this._f4fIndexInfo.bestEffortFetchInfo.fragmentDuration)){
                this.bestEffortLog("Found seek time in FRT");
                return (0);
            };
            var _local3:FragmentAccessInformation = frt.getFragmentWithIdGreq(0);
            if (_local3 != null){
                _local5 = (_local3.fragmentEndTime - _local3.fragDuration);
                if (this._bestEffortSeekTime < _local5){
                    this.bestEffortLog("Seek time before first bootstrap entry time.");
                    return (0);
                };
            };
            if (this._bestEffortState == BEST_EFFORT_STATE_SEEK_BACKWARD){
                _local6 = this.doBestEffortSeekBackward(frt);
                if (_local6 != 0){
                    return (_local6);
                };
                this._bestEffortState = BEST_EFFORT_STATE_SEEK_FORWARD;
                this._bestEffortFailedFetches = 0;
            };
            var _local4:uint = this.doBestEffortSeekForward(frt);
            if (_local4 != 0){
                return (_local4);
            };
            return (0);
        }
        private function doBestEffortSeekBackward(frt:AdobeFragmentRunTable):uint{
            if (this._bestEffortFailedFetches >= this._f4fIndexInfo.bestEffortFetchInfo.maxBackwardFetches){
                this.bestEffortLog("Best effort seek backward failing due to too many failures");
                return (0);
            };
            var _local2:uint = this.guessFragmentIdForTime(this._bestEffortSeekTime);
            if (_local2 <= (this._bestEffortFailedFetches + 1)){
                this.bestEffortLog("Best effort seek backward hit fragment 0");
                return (0);
            };
            var _local3:uint = (_local2 - (this._bestEffortFailedFetches + 1));
            if (!frt.isFragmentInGap(_local3)){
                this.bestEffortLog(("Best effort seek backward hit an existing fragment " + _local3));
                return (0);
            };
            this.bestEffortLog(("Best effort seek backward fetch " + _local3));
            return (_local3);
        }
        private function doBestEffortSeekForward(frt:AdobeFragmentRunTable):uint{
            if (this._bestEffortFailedFetches >= this._f4fIndexInfo.bestEffortFetchInfo.maxForwardFetches){
                this.bestEffortLog("Best effort seek failing due to too many failures");
                return (0);
            };
            var _local2:uint = (this.guessFragmentIdForTime(this._bestEffortSeekTime) + this._bestEffortFailedFetches);
            if (!frt.isFragmentInGap(_local2)){
                this.bestEffortLog(("Best effort seek forward hit an existing fragment " + _local2));
                return (0);
            };
            this.bestEffortLog(("Best effort seek forward fetch " + _local2));
            return (_local2);
        }
        private function getNextRequestForBestEffortPlay(quality:int, bootstrapBox:AdobeBootstrapBox):HTTPStreamRequest{
            var _local8:String;
            var _local9:Date;
            var _local10:Number;
            var _local11:FragmentAccessInformation;
            var _local3:AdobeFragmentRunTable = this.getFragmentRunTable(bootstrapBox);
            if ((((((((((this._currentFAI == null)) || ((_local3 == null)))) || ((bootstrapBox == null)))) || ((bootstrapBox.segmentRunTables.length < 1)))) || ((bootstrapBox.segmentRunTables[0].segmentFragmentPairs.length < 1)))){
                this.bestEffortLog("Best effort in a weird state.");
                return (new HTTPStreamRequest(HTTPStreamRequestKind.DONE));
            };
            var _local4:AdobeSegmentRunTable = bootstrapBox.segmentRunTables[0];
            var _local5:uint = (this._currentFAI.fragId + 1);
            var _local6:uint = _local3.firstFragmentId;
            if (_local6 == 0){
                this.bestEffortLog("Best effort in a weird state.");
                return (new HTTPStreamRequest(HTTPStreamRequestKind.DONE));
            };
            var _local7:uint = (_local6 + _local4.totalFragments);
            if (_local5 >= _local7){
                if (bootstrapBox.contentComplete()){
                    _local8 = BEST_EFFORT_PLAY_SITUAUTION_DONE;
                } else {
                    _local8 = BEST_EFFORT_PLAY_SITUAUTION_LIVENESS;
                };
            } else {
                if (_local3.isFragmentInGap(_local5)){
                    _local8 = BEST_EFFORT_PLAY_SITUAUTION_DROPOUT;
                } else {
                    _local8 = BEST_EFFORT_PLAY_SITUAUTION_NORMAL;
                };
            };
            if ((((_local8 == BEST_EFFORT_PLAY_SITUAUTION_DROPOUT)) || ((_local8 == BEST_EFFORT_PLAY_SITUAUTION_LIVENESS)))){
                this.bestEffortLog(("Best effort in " + _local8));
                if ((((_local8 == BEST_EFFORT_PLAY_SITUAUTION_LIVENESS)) && (!((this._bestEffortLastGoodFragmentDownloadTime == null))))){
                    _local9 = new Date();
                    _local10 = (this._bestEffortLastGoodFragmentDownloadTime.valueOf() + Math.max(this._f4fIndexInfo.bestEffortFetchInfo.fragmentDuration, 1000));
                    if (_local9.valueOf() < _local10){
                        return (this.initiateBootstrapRefresh(quality));
                    };
                };
                if (this._bestEffortState == BEST_EFFORT_STATE_OFF){
                    this.bestEffortLog("Best effort play start");
                    this._bestEffortState = BEST_EFFORT_STATE_PLAY;
                    this._bestEffortFailedFetches = 0;
                };
                if (this._bestEffortFailedFetches < this._f4fIndexInfo.bestEffortFetchInfo.maxForwardFetches){
                    return (this.initiateBestEffortRequest(_local5, quality));
                };
                this.bestEffortLog("Best effort play failing due to too many failures");
            };
            if (_local8 == BEST_EFFORT_PLAY_SITUAUTION_LIVENESS){
                this.bestEffortLog("Best effort in liveness");
                this._bestEffortState = BEST_EFFORT_STATE_OFF;
                this._currentFAI.fragId = this._bestEffortLivenessRestartPoint;
                return (this.initiateLivenessFailure(quality));
            };
            if (_local8 == BEST_EFFORT_PLAY_SITUAUTION_DONE){
                this.bestEffortLog("Best effort done");
                return (new HTTPStreamRequest(HTTPStreamRequestKind.DONE));
            };
            _local11 = this._currentFAI;
            this._currentFAI = _local3.getFragmentWithIdGreq(_local5);
            if (this._currentFAI == null){
                this._currentFAI = _local11;
                this.bestEffortLog("Best effort done because there were no bootstrap entries");
                return (this.initiateBootstrapRefresh(quality));
            };
            this._bestEffortState = BEST_EFFORT_STATE_OFF;
            this.bestEffortLog(("Normal play request for fragment " + this._currentFAI.fragId));
            return (this.initiateNormalDownload(bootstrapBox, quality));
        }
        private function initiateBestEffortRequest(nextFragmentId:uint, quality:int):HTTPStreamRequest{
            this.stopListeningToBestEffortDownload();
            this._currentFAI = new FragmentAccessInformation();
            this._currentFAI.fragId = nextFragmentId;
            this._currentFAI.fragDuration = 0;
            this._currentFAI.fragmentEndTime = 0;
            this.playInProgress = true;
            this.updateQuality(quality);
            this.bootstrapUpdateInterval = OSMFSettings.hdsMinimumBootstrapRefreshInterval;
            var _local3:uint = uint(Math.ceil((Number(nextFragmentId) / (this._f4fIndexInfo.bestEffortFetchInfo.segmentDuration / this._f4fIndexInfo.bestEffortFetchInfo.fragmentDuration))));
            var _local4:String = this.constructFragmentRequest(this._serverBaseURL, this._streamNames[quality], _local3, nextFragmentId);
            this.bestEffortLog(((((("Best effort fetch for fragment " + nextFragmentId) + " with url ") + _local4) + ". State is ") + this._bestEffortState));
            this._bestEffortDownloadReply = null;
            this._bestEffortNeedsToFireFragmentDuration = false;
            this._bestEffortDownloaderMonitor = new EventDispatcher();
            this._bestEffortDownloaderMonitor.addEventListener(HTTPStreamingEvent.DOWNLOAD_COMPLETE, this.onBestEffortDownloadComplete);
            this._bestEffortDownloaderMonitor.addEventListener(HTTPStreamingEvent.DOWNLOAD_ERROR, this.onBestEffortDownloadError);
            var _local5:HTTPStreamRequest = new HTTPStreamRequest(HTTPStreamRequestKind.BEST_EFFORT_DOWNLOAD, _local4, -1, this._bestEffortDownloaderMonitor);
            this.adjustDelay();
            this.refreshBootstrapBox(quality);
            return (_local5);
        }
        private function stopListeningToBestEffortDownload():void{
            if (this._bestEffortDownloaderMonitor != null){
                this._bestEffortDownloaderMonitor.removeEventListener(HTTPStreamingEvent.DOWNLOAD_COMPLETE, this.onBestEffortDownloadComplete);
                this._bestEffortDownloaderMonitor.removeEventListener(HTTPStreamingEvent.DOWNLOAD_ERROR, this.onBestEffortDownloadError);
                this._bestEffortDownloaderMonitor = null;
            };
        }
        private function bufferAndParseDownloadedBestEffortBytes(url:String, downloader:HTTPStreamDownloader):void{
            var downloaderAvailableBytes:* = 0;
            var downloadInput:* = null;
            var url:* = url;
            var downloader:* = downloader;
            if (this._bestEffortDownloadReply != null){
                return;
            };
            this._bestEffortNotifyBootstrapBoxInfo = {
                downloader:downloader,
                url:url
            };
            try {
                downloaderAvailableBytes = downloader.totalAvailableBytes;
                if (downloaderAvailableBytes > 0){
                    downloadInput = downloader.getBytes(downloaderAvailableBytes);
                    if (downloadInput != null){
                        downloadInput.readBytes(this._bestEffortSeekBuffer, this._bestEffortSeekBuffer.length, downloaderAvailableBytes);
                    };
                    while ((((((this._bestEffortF4FHandler.inputBytesNeeded > 0)) && ((this._bestEffortF4FHandler.inputBytesNeeded <= this._bestEffortSeekBuffer.bytesAvailable)))) && ((this._bestEffortDownloadReply == null)))) {
                        this._bestEffortF4FHandler.processFileSegment(this._bestEffortSeekBuffer);
                    };
                    if (this._bestEffortDownloadReply == HTTPStreamingEvent.DOWNLOAD_CONTINUE){
                        downloader.clearSavedBytes();
                        this._bestEffortSeekBuffer.position = 0;
                        downloader.appendToSavedBytes(this._bestEffortSeekBuffer, this._bestEffortSeekBuffer.length);
                        this._bestEffortSeekBuffer.length = 0;
                    };
                };
            } finally {
                this._bestEffortNotifyBootstrapBoxInfo = null;
            };
        }
        private function onBestEffortF4FHandlerNotifyBootstrapBox(event:HTTPStreamingFileHandlerEvent):void{
            var _local2:String = (this._bestEffortNotifyBootstrapBoxInfo.url as String);
            var _local3:HTTPStreamDownloader = (this._bestEffortNotifyBootstrapBoxInfo.downloader as HTTPStreamDownloader);
            if (this._bestEffortDownloadReply != null){
                this.bestEffortLog("Best effort found a bootstrap box in the downloaded fragment, but we already replied.");
                return;
            };
            var _local4:AdobeBootstrapBox = event.bootstrapBox;
            var _local5:AdobeFragmentRunTable = this.getFragmentRunTable(_local4);
            if (_local5 == null){
                this.bestEffortLog("Best effort download contained an invalid bootstrap box.");
                this.skipBestEffortFetch(_local2, _local3);
                return;
            };
            if (_local5.fragmentDurationPairs.length != 1){
                this.bestEffortLog("Best effort download has an FRT with more than 1 entry.");
                this.skipBestEffortFetch(_local2, _local3);
                return;
            };
            var _local6:FragmentDurationPair = _local5.fragmentDurationPairs[0];
            if (_local6.duration == 0){
                this.bestEffortLog("Best effort download FDP was a discontinuity.");
                this.skipBestEffortFetch(_local2, _local3);
                return;
            };
            var _local7:Number = (_local6.durationAccrued + _local6.duration);
            if (this._bestEffortSeekTime < _local7){
                this.bestEffortLog("Best effort found the desired time within the downloaded fragment.");
                this.continueBestEffortFetch(_local2, _local3);
            } else {
                this.bestEffortLog("Best effort didn't find the desired time within the downloaded fragment.");
                this.skipBestEffortFetch(_local2, _local3);
                this._bestEffortState = BEST_EFFORT_STATE_SEEK_FORWARD;
                this._bestEffortFailedFetches = 0;
            };
        }
        private function onBestEffortDownloadComplete(event:HTTPStreamingEvent):void{
            if ((((this._bestEffortDownloaderMonitor == null)) || (!((this._bestEffortDownloaderMonitor == (event.target as IEventDispatcher)))))){
                return;
            };
            this.bestEffortLog("Best effort download complete");
            this.stopListeningToBestEffortDownload();
            var _local2:HTTPStreamingEvent = new HTTPStreamingEvent(event.type, event.bubbles, event.cancelable, event.fragmentDuration, event.scriptDataObject, event.scriptDataMode, event.url, event.bytesDownloaded, HTTPStreamingEventReason.BEST_EFFORT, event.downloader);
            dispatchEvent(_local2);
            if (this._bestEffortDownloadReply != null){
                return;
            };
            switch (this._bestEffortState){
                case BEST_EFFORT_STATE_PLAY:
                case BEST_EFFORT_STATE_SEEK_FORWARD:
                    this.continueBestEffortFetch(event.url, event.downloader);
                    break;
                case BEST_EFFORT_STATE_SEEK_BACKWARD:
                    this.bufferAndParseDownloadedBestEffortBytes(event.url, event.downloader);
                    if (this._bestEffortDownloadReply == null){
                        this.skipBestEffortFetch(event.url, event.downloader);
                    };
                    break;
                    this.bestEffortLog((("Best effort download complete received while in unexpected state (" + this._bestEffortState) + ")"));
            };
        }
        private function onBestEffortDownloadError(event:HTTPStreamingEvent):void{
            if ((((this._bestEffortDownloaderMonitor == null)) || (!((this._bestEffortDownloaderMonitor == (event.target as IEventDispatcher)))))){
                return;
            };
            this.stopListeningToBestEffortDownload();
            if (this._bestEffortDownloadReply != null){
                this.bestEffortLog("Best effort download error after we already decided to skip or continue.");
                dispatchEvent(event);
            } else {
                if (event.reason == HTTPStreamingEventReason.TIMEOUT){
                    this.bestEffortLog("Best effort download timed out");
                    dispatchEvent(event);
                } else {
                    this.bestEffortLog("Best effort download error.");
                    this._bestEffortFailedFetches++;
                    this.skipBestEffortFetch(event.url, event.downloader);
                };
            };
        }
        private function skipBestEffortFetch(url:String, downloader:HTTPStreamDownloader):void{
            if (this._bestEffortDownloadReply != null){
                this.bestEffortLog(("Best effort wanted to skip fragment, but we're already replied with " + this._bestEffortDownloadReply));
                return;
            };
            this.bestEffortLog("Best effort skipping fragment.");
            var _local3:HTTPStreamingEvent = new HTTPStreamingEvent(HTTPStreamingEvent.DOWNLOAD_SKIP, false, false, 0, null, FLVTagScriptDataMode.NORMAL, url, 0, HTTPStreamingEventReason.BEST_EFFORT, downloader);
            dispatchEvent(_local3);
            this._bestEffortDownloadReply = HTTPStreamingEvent.DOWNLOAD_SKIP;
            this._bestEffortNeedsToFireFragmentDuration = false;
        }
        private function continueBestEffortFetch(url:String, downloader:HTTPStreamDownloader):void{
            if (this._bestEffortDownloadReply != null){
                this.bestEffortLog(("Best effort wanted to continue, but we're already replied with " + this._bestEffortDownloadReply));
                return;
            };
            this.bestEffortLog("Best effort received a desirable fragment.");
            var _local3:HTTPStreamingEvent = new HTTPStreamingEvent(HTTPStreamingEvent.DOWNLOAD_CONTINUE, false, false, 0, null, FLVTagScriptDataMode.NORMAL, url, 0, HTTPStreamingEventReason.BEST_EFFORT, downloader);
            this._bestEffortLivenessRestartPoint = this._currentFAI.fragId;
            this._bestEffortLastGoodFragmentDownloadTime = new Date();
            dispatchEvent(_local3);
            this._bestEffortDownloadReply = HTTPStreamingEvent.DOWNLOAD_CONTINUE;
            this._bestEffortNeedsToFireFragmentDuration = true;
            this._bestEffortState = BEST_EFFORT_STATE_OFF;
        }
        private function errorBestEffortFetch(url:String, downloader:HTTPStreamDownloader):void{
            this.bestEffortLog("Best effort fetch error.");
            var _local3:HTTPStreamingEvent = new HTTPStreamingEvent(HTTPStreamingEvent.DOWNLOAD_ERROR, false, false, 0, null, FLVTagScriptDataMode.NORMAL, url, 0, HTTPStreamingEventReason.BEST_EFFORT, downloader);
            dispatchEvent(_local3);
            this._bestEffortDownloadReply = HTTPStreamingEvent.DOWNLOAD_ERROR;
            this._bestEffortNeedsToFireFragmentDuration = false;
        }
        private function notifyFragmentDurationForBestEffort(bootstrapBox:AdobeBootstrapBox):void{
            if (((!(this._bestEffortNeedsToFireFragmentDuration)) || ((bootstrapBox == null)))){
                return;
            };
            this._bestEffortNeedsToFireFragmentDuration = false;
            var _local2:AdobeFragmentRunTable = this.getFragmentRunTable(bootstrapBox);
            if (_local2 == null){
                return;
            };
            var _local3:Number = _local2.getFragmentDuration(this._currentFAI.fragId);
            if (_local3 == 0){
                return;
            };
            this.bestEffortLog("Best effort fetch firing the fragment duration.");
            dispatchEvent(new HTTPStreamingEvent(HTTPStreamingEvent.FRAGMENT_DURATION, false, false, (_local3 / bootstrapBox.timeScale), null, null));
        }
        private function bestEffortLog(s:String):void{
        }
        override public function get isBestEffortFetchEnabled():Boolean{
            return (this._bestEffortEnabled);
        }

    }
}//package org.osmf.net.httpstreaming.f4f 
﻿package org.osmf.net.httpstreaming.f4f {
    import org.osmf.media.*;
    import org.osmf.net.httpstreaming.*;

    public class HTTPStreamingF4FFactory extends HTTPStreamingFactory {

        override public function createFileHandler(resource:MediaResourceBase):HTTPStreamingFileHandlerBase{
            return (new HTTPStreamingF4FFileHandler());
        }
        override public function createIndexHandler(resource:MediaResourceBase, fileHandler:HTTPStreamingFileHandlerBase):HTTPStreamingIndexHandlerBase{
            return (new HTTPStreamingF4FIndexHandler(fileHandler));
        }
        override public function createIndexInfo(resource:MediaResourceBase):HTTPStreamingIndexInfoBase{
            return (HTTPStreamingUtils.createF4FIndexInfo((resource as URLResource)));
        }

    }
}//package org.osmf.net.httpstreaming.f4f 
﻿package org.osmf.net.httpstreaming.f4f {

    class FullBox extends Box {

        private var _version:uint;
        private var _flags:uint;

        public function get version():uint{
            return (this._version);
        }
        public function set version(value:uint):void{
            this._version = value;
        }
        public function get flags():uint{
            return (this._flags);
        }
        public function set flags(value:uint):void{
            this._flags = value;
        }

    }
}//package org.osmf.net.httpstreaming.f4f 
﻿package org.osmf.net.httpstreaming.f4f {
    import __AS3__.vec.*;
    import org.osmf.net.httpstreaming.f4f.*;

    class AdobeFragmentRandomAccessBox extends FullBox {

        private var _timeScale:uint;
        private var _localRandomAccessEntries:Vector.<LocalRandomAccessEntry>;
        private var _globalRandomAccessEntries:Vector.<GlobalRandomAccessEntry>;

        public function get timeScale():uint{
            return (this._timeScale);
        }
        public function set timeScale(value:uint):void{
            this._timeScale = value;
        }
        public function get localRandomAccessEntries():Vector.<LocalRandomAccessEntry>{
            return (this._localRandomAccessEntries);
        }
        public function set localRandomAccessEntries(value:Vector.<LocalRandomAccessEntry>):void{
            this._localRandomAccessEntries = value;
        }
        public function get globalRandomAccessEntries():Vector.<GlobalRandomAccessEntry>{
            return (this._globalRandomAccessEntries);
        }
        public function set globalRandomAccessEntries(value:Vector.<GlobalRandomAccessEntry>):void{
            this._globalRandomAccessEntries = value;
        }
        public function findNearestKeyFrameOffset(seekToTime:Number):LocalRandomAccessEntry{
            var _local3:LocalRandomAccessEntry;
            var _local2:int = (this._localRandomAccessEntries.length - 1);
            while (_local2 >= 0) {
                _local3 = this._localRandomAccessEntries[_local2];
                if (_local3.time <= seekToTime){
                    return (_local3);
                };
                _local2--;
            };
            return (null);
        }

    }
}//package org.osmf.net.httpstreaming.f4f 
﻿package org.osmf.net.httpstreaming.f4f {
    import __AS3__.vec.*;
    import org.osmf.net.httpstreaming.*;
    import org.osmf.elements.f4mClasses.*;
    import org.osmf.net.httpstreaming.dvr.*;

    public class HTTPStreamingF4FIndexInfo extends HTTPStreamingIndexInfoBase {

        private var _serverBaseURL:String;
        private var _dvrInfo:DVRInfo;
        private var _befInfo:BestEffortFetchInfo;
        private var _streamInfos:Vector.<HTTPStreamingF4FStreamInfo>;

        public function HTTPStreamingF4FIndexInfo(serverBaseURL:String=null, streamInfos:Vector.<HTTPStreamingF4FStreamInfo>=null, dvrInfo:DVRInfo=null, befInfo:BestEffortFetchInfo=null){
            this._serverBaseURL = serverBaseURL;
            this._streamInfos = streamInfos;
            this._dvrInfo = dvrInfo;
            this._befInfo = befInfo;
        }
        public function get serverBaseURL():String{
            return (this._serverBaseURL);
        }
        public function get streamInfos():Vector.<HTTPStreamingF4FStreamInfo>{
            return (this._streamInfos);
        }
        public function get dvrInfo():DVRInfo{
            return (this._dvrInfo);
        }
        public function get bestEffortFetchInfo():BestEffortFetchInfo{
            return (this._befInfo);
        }

    }
}//package org.osmf.net.httpstreaming.f4f 
﻿package org.osmf.net.httpstreaming.f4f {
    import org.osmf.events.*;
    import flash.utils.*;
    import org.osmf.utils.*;
    import org.osmf.net.httpstreaming.*;

    public class HTTPStreamingF4FFileHandler extends HTTPStreamingFileHandlerBase {

        private var _afra:AdobeFragmentRandomAccessBox;
        private var _ba:ByteArray;
        private var _boxInfoPending:Boolean;
        private var _bytesNeeded:uint;
        private var _bytesReadSinceAfraStart:uint;
        private var _countingReadBytes:Boolean;
        private var _mdatBytesPending:uint;
        private var _nextBox:BoxInfo;
        private var _parser:BoxParser;
        private var _seekToTime:Number;
        private var _mdatBytesOffset:Number;
        private var _processRequestWasSeek:Boolean = false;

        public function HTTPStreamingF4FFileHandler(){
            this._parser = new BoxParser();
            super();
        }
        override public function beginProcessFile(seek:Boolean, seekTime:Number):void{
            this._processRequestWasSeek = seek;
            this._seekToTime = ((seek) ? seekTime : 0);
            this._bytesNeeded = (((F4FConstants.FIELD_SIZE_LENGTH + F4FConstants.FIELD_TYPE_LENGTH) + F4FConstants.FIELD_LARGE_SIZE_LENGTH) + F4FConstants.FIELD_EXTENDED_TYPE_LENGTH);
            this._bytesReadSinceAfraStart = 0;
            this._countingReadBytes = false;
            this._boxInfoPending = true;
            this._nextBox = null;
        }
        override public function get inputBytesNeeded():Number{
            return (this._bytesNeeded);
        }
        override public function processFileSegment(input:IDataInput):ByteArray{
            var _local4:uint;
            var _local5:AdobeBootstrapBox;
            if (input.bytesAvailable < this._bytesNeeded){
                return (null);
            };
            var _local2:ByteArray;
            var _local3:Number = (F4FConstants.FIELD_SIZE_LENGTH + F4FConstants.FIELD_TYPE_LENGTH);
            if (this._boxInfoPending){
                this._ba = new ByteArray();
                input.readBytes(this._ba, 0, _local3);
                if (this._countingReadBytes){
                    this._bytesReadSinceAfraStart = (this._bytesReadSinceAfraStart + _local3);
                };
                this._parser.init(this._ba);
                this._nextBox = this._parser.getNextBoxInfo();
                if (this._nextBox.size == F4FConstants.FLAG_USE_LARGE_SIZE){
                    _local3 = (_local3 + F4FConstants.FIELD_LARGE_SIZE_LENGTH);
                    this._ba.position = 0;
                    input.readBytes(this._ba, 0, F4FConstants.FIELD_LARGE_SIZE_LENGTH);
                    if (this._countingReadBytes){
                        this._bytesReadSinceAfraStart = (this._bytesReadSinceAfraStart + F4FConstants.FIELD_LARGE_SIZE_LENGTH);
                    };
                    this._nextBox.size = this._parser.readLongUIntToNumber();
                };
                this._boxInfoPending = false;
                if (this._nextBox.type == F4FConstants.BOX_TYPE_MDAT){
                    this._bytesNeeded = 0;
                    this._mdatBytesPending = (this._nextBox.size - _local3);
                } else {
                    this._bytesNeeded = (this._nextBox.size - _local3);
                    this._mdatBytesPending = 0;
                    if (this._nextBox.type == F4FConstants.BOX_TYPE_AFRA){
                        this._bytesReadSinceAfraStart = _local3;
                        this._countingReadBytes = true;
                    };
                };
            } else {
                if (this._bytesNeeded > 0){
                    _local4 = this._ba.position;
                    input.readBytes(this._ba, this._ba.length, (this._nextBox.size - _local3));
                    if (this._countingReadBytes){
                        this._bytesReadSinceAfraStart = (this._bytesReadSinceAfraStart + (this._nextBox.size - _local3));
                    };
                    this._ba.position = _local4;
                    if (this._nextBox.type == F4FConstants.BOX_TYPE_ABST){
                        _local5 = this._parser.readAdobeBootstrapBox(this._nextBox);
                        if (_local5 != null){
                            dispatchEvent(new HTTPStreamingFileHandlerEvent(HTTPStreamingFileHandlerEvent.NOTIFY_BOOTSTRAP_BOX, false, false, 0, null, null, _local5));
                        };
                    } else {
                        if (this._nextBox.type == F4FConstants.BOX_TYPE_AFRA){
                            this._afra = this._parser.readFragmentRandomAccessBox(this._nextBox);
                            this.processSeekToTime();
                        } else {
                            if (this._nextBox.type == F4FConstants.BOX_TYPE_MOOF){
                            };
                        };
                    };
                    this._bytesNeeded = (((F4FConstants.FIELD_SIZE_LENGTH + F4FConstants.FIELD_TYPE_LENGTH) + F4FConstants.FIELD_LARGE_SIZE_LENGTH) + F4FConstants.FIELD_EXTENDED_TYPE_LENGTH);
                    this._boxInfoPending = true;
                    this._nextBox = null;
                } else {
                    _local2 = this.getMDATBytes(input, false);
                };
            };
            return (_local2);
        }
        override public function endProcessFile(input:IDataInput):ByteArray{
            if (this._bytesNeeded > 0){
                dispatchEvent(new HTTPStreamingEvent(HTTPStreamingEvent.FILE_ERROR, false, false, 0, null, null));
            };
            return (this.getMDATBytes(input, true));
        }
        override public function flushFileSegment(input:IDataInput):ByteArray{
            return (null);
        }
        private function getMDATBytes(input:IDataInput, endOfFile:Boolean):ByteArray{
            var _local3:ByteArray;
            var _local4:uint;
            if (input == null){
                return (null);
            };
            this.skipSeekBytes(input);
            if (this._mdatBytesPending > 0){
                _local4 = ((this._mdatBytesPending)<input.bytesAvailable) ? this._mdatBytesPending : input.bytesAvailable;
                if (((!(endOfFile)) && ((_local4 > OSMFSettings.hdsBytesReadingLimit)))){
                    _local4 = OSMFSettings.hdsBytesReadingLimit;
                };
                _local3 = new ByteArray();
                this._mdatBytesPending = (this._mdatBytesPending - _local4);
                input.readBytes(_local3, 0, _local4);
            };
            return (_local3);
        }
        private function skipSeekBytes(input:IDataInput):void{
            var _local2:uint;
            var _local3:ByteArray;
            if (this._bytesReadSinceAfraStart < this._mdatBytesOffset){
                _local2 = (this._mdatBytesOffset - this._bytesReadSinceAfraStart);
                if (input.bytesAvailable < _local2){
                    _local2 = input.bytesAvailable;
                };
                _local3 = new ByteArray();
                input.readBytes(_local3, 0, _local2);
                this._bytesReadSinceAfraStart = (this._bytesReadSinceAfraStart + _local2);
                this._mdatBytesPending = (this._mdatBytesPending - _local2);
            };
        }
        private function processSeekToTime():void{
            var _local1 = 0;
            var _local2:LocalRandomAccessEntry;
            if (this._seekToTime <= 0){
                this._mdatBytesOffset = 0;
            } else {
                _local2 = this.getMDATBytesOffset(this._seekToTime);
                if (_local2 != null){
                    this._mdatBytesOffset = _local2.offset;
                    _local1 = _local2.time;
                } else {
                    this._mdatBytesOffset = 0;
                };
            };
        }
        private function getMDATBytesOffset(seekToTime:Number):LocalRandomAccessEntry{
            return (((isNaN(seekToTime)) ? null : this._afra.findNearestKeyFrameOffset((seekToTime * this._afra.timeScale))));
        }

    }
}//package org.osmf.net.httpstreaming.f4f 
﻿package org.osmf.net.httpstreaming.f4f {

    class FragmentAccessInformation {

        public var fragId:uint;
        public var fragmentEndTime:Number;
        public var fragDuration:uint;

    }
}//package org.osmf.net.httpstreaming.f4f 
﻿package org.osmf.net.httpstreaming.f4f {

    class Box {

        private var _size:Number;
        private var _type:String;
        private var _boxLength:uint;

        public function get size():Number{
            return (this._size);
        }
        public function set size(value:Number):void{
            this._size = value;
        }
        public function get type():String{
            return (this._type);
        }
        public function set type(value:String):void{
            this._type = value;
        }
        public function get boxLength():uint{
            return (this._boxLength);
        }
        public function set boxLength(value:uint):void{
            this._boxLength = value;
        }

    }
}//package org.osmf.net.httpstreaming.f4f 
﻿package org.osmf.net.httpstreaming.f4f {

    class SegmentFragmentPair {

        private var _firstSegment:uint;
        private var _fragmentsPerSegment:uint;
        private var _fragmentsAccrued:uint;

        public function SegmentFragmentPair(firstSegment:uint, fragmentsPerSegment:uint){
            this._firstSegment = firstSegment;
            this._fragmentsPerSegment = fragmentsPerSegment;
        }
        public function get firstSegment():uint{
            return (this._firstSegment);
        }
        public function get fragmentsPerSegment():uint{
            return (this._fragmentsPerSegment);
        }
        public function set fragmentsAccrued(v:uint):void{
            this._fragmentsAccrued = v;
        }
        public function get fragmentsAccrued():uint{
            return (this._fragmentsAccrued);
        }

    }
}//package org.osmf.net.httpstreaming.f4f 
﻿package org.osmf.net.httpstreaming.f4f {
    import __AS3__.vec.*;
    import org.osmf.net.httpstreaming.f4f.*;

    class AdobeSegmentRunTable extends FullBox {

        private var _qualitySegmentURLModifiers:Vector.<String>;
        private var _segmentFragmentPairs:Vector.<SegmentFragmentPair>;

        public function AdobeSegmentRunTable(){
            this._segmentFragmentPairs = new Vector.<SegmentFragmentPair>();
        }
        public function get qualitySegmentURLModifiers():Vector.<String>{
            return (this._qualitySegmentURLModifiers);
        }
        public function set qualitySegmentURLModifiers(value:Vector.<String>):void{
            this._qualitySegmentURLModifiers = value;
        }
        public function get segmentFragmentPairs():Vector.<SegmentFragmentPair>{
            return (this._segmentFragmentPairs);
        }
        public function addSegmentFragmentPair(sfp:SegmentFragmentPair):void{
            var _local2:SegmentFragmentPair = ((this._segmentFragmentPairs.length)<=0) ? null : this._segmentFragmentPairs[(this._segmentFragmentPairs.length - 1)];
            var _local3:uint;
            if (_local2 != null){
                _local3 = (_local2.fragmentsAccrued + ((sfp.firstSegment - _local2.firstSegment) * _local2.fragmentsPerSegment));
            };
            sfp.fragmentsAccrued = _local3;
            this._segmentFragmentPairs.push(sfp);
        }
        public function findSegmentIdByFragmentId(fragmentId:uint):uint{
            var _local2:SegmentFragmentPair;
            if (fragmentId < 1){
                return (0);
            };
            var _local3:uint = 1;
            while (_local3 < this._segmentFragmentPairs.length) {
                _local2 = this._segmentFragmentPairs[_local3];
                if (_local2.fragmentsAccrued >= fragmentId){
                    return (this.calculateSegmentId(this._segmentFragmentPairs[(_local3 - 1)], fragmentId));
                };
                _local3++;
            };
            return (this.calculateSegmentId(this._segmentFragmentPairs[(this._segmentFragmentPairs.length - 1)], fragmentId));
        }
        public function get totalFragments():uint{
            return ((this._segmentFragmentPairs[(this._segmentFragmentPairs.length - 1)].fragmentsPerSegment + this._segmentFragmentPairs[(this._segmentFragmentPairs.length - 1)].fragmentsAccrued));
        }
        private function calculateSegmentId(sfp:SegmentFragmentPair, fragmentId:uint):uint{
            return ((sfp.firstSegment + int((((fragmentId - sfp.fragmentsAccrued) - 1) / sfp.fragmentsPerSegment))));
        }

    }
}//package org.osmf.net.httpstreaming.f4f 
﻿package org.osmf.net.httpstreaming.f4f {

    class F4FConstants {

        static const BOX_TYPE_UUID:String = "uuid";
        static const BOX_TYPE_ABST:String = "abst";
        static const BOX_TYPE_ASRT:String = "asrt";
        static const BOX_TYPE_AFRT:String = "afrt";
        static const BOX_TYPE_AFRA:String = "afra";
        static const BOX_TYPE_MDAT:String = "mdat";
        static const BOX_TYPE_MOOF:String = "moof";
        static const EXTENDED_TYPE:String = "uuid";
        static const FIELD_SIZE_LENGTH:uint = 4;
        static const FIELD_TYPE_LENGTH:uint = 4;
        static const FIELD_LARGE_SIZE_LENGTH:uint = 8;
        static const FIELD_EXTENDED_TYPE_LENGTH:uint = 16;
        static const FLAG_USE_LARGE_SIZE:uint = 1;

    }
}//package org.osmf.net.httpstreaming.f4f 
﻿package org.osmf.net.httpstreaming.f4f {

    class GlobalRandomAccessEntry {

        private var _time:Number;
        private var _segment:uint;
        private var _fragment:uint;
        private var _afraOffset:Number;
        private var _offsetFromAfra:Number;

        public function get time():Number{
            return (this._time);
        }
        public function set time(value:Number):void{
            this._time = value;
        }
        public function get segment():uint{
            return (this._segment);
        }
        public function set segment(value:uint):void{
            this._segment = value;
        }
        public function get fragment():uint{
            return (this._fragment);
        }
        public function set fragment(value:uint):void{
            this._fragment = value;
        }
        public function get afraOffset():Number{
            return (this._afraOffset);
        }
        public function set afraOffset(value:Number):void{
            this._afraOffset = value;
        }
        public function get offsetFromAfra():Number{
            return (this._offsetFromAfra);
        }
        public function set offsetFromAfra(value:Number):void{
            this._offsetFromAfra = value;
        }

    }
}//package org.osmf.net.httpstreaming.f4f 
﻿package org.osmf.net.httpstreaming.f4f {
    import __AS3__.vec.*;
    import org.osmf.net.httpstreaming.f4f.*;

    class AdobeFragmentRunTable extends FullBox {

        private var _timeScale:uint;
        private var _qualitySegmentURLModifiers:Vector.<String>;
        private var _fragmentDurationPairs:Vector.<FragmentDurationPair>;

        public function AdobeFragmentRunTable(){
            this._fragmentDurationPairs = new Vector.<FragmentDurationPair>();
        }
        public function get timeScale():uint{
            return (this._timeScale);
        }
        public function set timeScale(value:uint):void{
            this._timeScale = value;
        }
        public function get qualitySegmentURLModifiers():Vector.<String>{
            return (this._qualitySegmentURLModifiers);
        }
        public function set qualitySegmentURLModifiers(value:Vector.<String>):void{
            this._qualitySegmentURLModifiers = value;
        }
        public function get fragmentDurationPairs():Vector.<FragmentDurationPair>{
            return (this._fragmentDurationPairs);
        }
        public function addFragmentDurationPair(fdp:FragmentDurationPair):void{
            this._fragmentDurationPairs.push(fdp);
        }
        public function findFragmentIdByTime(time:Number, totalDuration:Number, live:Boolean=false):FragmentAccessInformation{
            if (this._fragmentDurationPairs.length <= 0){
                return (null);
            };
            var _local4:FragmentDurationPair;
            var _local5:uint = 1;
            while (_local5 < this._fragmentDurationPairs.length) {
                _local4 = this._fragmentDurationPairs[_local5];
                if (_local4.durationAccrued >= time){
                    return (this.validateFragment(this.calculateFragmentId(this._fragmentDurationPairs[(_local5 - 1)], time), totalDuration, live));
                };
                _local5++;
            };
            return (this.validateFragment(this.calculateFragmentId(this._fragmentDurationPairs[(this._fragmentDurationPairs.length - 1)], time), totalDuration, live));
        }
        public function validateFragment(fragId:uint, totalDuration:Number, live:Boolean=false):FragmentAccessInformation{
            var _local7:FragmentDurationPair;
            var _local8:FragmentDurationPair;
            var _local9:Number;
            var _local10:Number;
            var _local11:Number;
            var _local12:FragmentDurationPair;
            var _local4:uint = (this._fragmentDurationPairs.length - 1);
            var _local5:FragmentAccessInformation;
            var _local6:uint;
            while (_local6 < _local4) {
                _local7 = this._fragmentDurationPairs[_local6];
                _local8 = this._fragmentDurationPairs[(_local6 + 1)];
                if ((((_local7.firstFragment <= fragId)) && ((fragId < _local8.firstFragment)))){
                    if (_local7.duration <= 0){
                        _local5 = this.getNextValidFragment((_local6 + 1), totalDuration);
                    } else {
                        _local5 = new FragmentAccessInformation();
                        _local5.fragId = fragId;
                        _local5.fragDuration = _local7.duration;
                        _local5.fragmentEndTime = (_local7.durationAccrued + (_local7.duration * ((fragId - _local7.firstFragment) + 1)));
                    };
                    break;
                };
                if ((((_local7.firstFragment <= fragId)) && (this.endOfStreamEntry(_local8)))){
                    if (_local7.duration > 0){
                        _local9 = (totalDuration - _local7.durationAccrued);
                        _local10 = (((fragId - _local7.firstFragment) + 1) * _local7.duration);
                        _local11 = ((fragId - _local7.firstFragment) * _local7.duration);
                        if (_local9 > _local11){
                            if (((!(live)) || ((((_local11 + _local7.duration) + _local7.durationAccrued) <= totalDuration)))){
                                _local5 = new FragmentAccessInformation();
                                _local5.fragId = fragId;
                                _local5.fragDuration = _local7.duration;
                                if (_local9 >= _local10){
                                    _local5.fragmentEndTime = (_local7.durationAccrued + _local10);
                                } else {
                                    _local5.fragmentEndTime = (_local7.durationAccrued + _local9);
                                };
                                break;
                            };
                        };
                    };
                };
                _local6++;
            };
            if (_local5 == null){
                _local12 = this._fragmentDurationPairs[_local4];
                if ((((_local12.duration > 0)) && ((fragId >= _local12.firstFragment)))){
                    _local9 = (totalDuration - _local12.durationAccrued);
                    _local10 = (((fragId - _local12.firstFragment) + 1) * _local12.duration);
                    _local11 = ((fragId - _local12.firstFragment) * _local12.duration);
                    if (_local9 > _local11){
                        if (((!(live)) || ((((_local11 + _local12.duration) + _local12.durationAccrued) <= totalDuration)))){
                            _local5 = new FragmentAccessInformation();
                            _local5.fragId = fragId;
                            _local5.fragDuration = _local12.duration;
                            if (_local9 >= _local10){
                                _local5.fragmentEndTime = (_local12.durationAccrued + _local10);
                            } else {
                                _local5.fragmentEndTime = (_local12.durationAccrued + _local9);
                            };
                        };
                    };
                };
            };
            return (_local5);
        }
        private function getNextValidFragment(startIdx:uint, totalDuration:Number):FragmentAccessInformation{
            var _local5:FragmentDurationPair;
            var _local3:FragmentAccessInformation;
            var _local4:uint = startIdx;
            while (_local4 < this._fragmentDurationPairs.length) {
                _local5 = this._fragmentDurationPairs[_local4];
                if (_local5.duration > 0){
                    _local3 = new FragmentAccessInformation();
                    _local3.fragId = _local5.firstFragment;
                    _local3.fragDuration = _local5.duration;
                    _local3.fragmentEndTime = (_local5.durationAccrued + _local5.duration);
                    break;
                };
                _local4++;
            };
            return (_local3);
        }
        private function endOfStreamEntry(fdp:FragmentDurationPair):Boolean{
            return ((((fdp.duration == 0)) && ((fdp.discontinuityIndicator == 0))));
        }
        public function fragmentsLeft(fragId:uint, currentMediaTime:Number):uint{
            if ((((this._fragmentDurationPairs == null)) || ((this._fragmentDurationPairs.length == 0)))){
                return (0);
            };
            var _local3:FragmentDurationPair = (this._fragmentDurationPairs[(this.fragmentDurationPairs.length - 1)] as FragmentDurationPair);
            var _local4:uint = (((((currentMediaTime - _local3.durationAccrued) / _local3.duration) + _local3.firstFragment) - fragId) - 1);
            return (_local4);
        }
        public function tableComplete():Boolean{
            if ((((this._fragmentDurationPairs == null)) || ((this._fragmentDurationPairs.length <= 0)))){
                return (false);
            };
            var _local1:FragmentDurationPair = (this._fragmentDurationPairs[(this.fragmentDurationPairs.length - 1)] as FragmentDurationPair);
            return ((((_local1.duration == 0)) && ((_local1.discontinuityIndicator == 0))));
        }
        public function adjustEndEntryDurationAccrued(value:Number):void{
            var _local2:FragmentDurationPair = this._fragmentDurationPairs[(this._fragmentDurationPairs.length - 1)];
            if (_local2.duration == 0){
                _local2.durationAccrued = value;
            };
        }
        public function getFragmentDuration(fragId:uint):Number{
            var _local2:FragmentDurationPair;
            var _local3:uint;
            while ((((_local3 < this._fragmentDurationPairs.length)) && ((this._fragmentDurationPairs[_local3].firstFragment <= fragId)))) {
                _local3++;
            };
            if (_local3){
                return (this._fragmentDurationPairs[(_local3 - 1)].duration);
            };
            return (0);
        }
        private function findNextValidFragmentDurationPair(index:uint):FragmentDurationPair{
            var _local3:FragmentDurationPair;
            var _local2:uint = index;
            while (_local2 < this._fragmentDurationPairs.length) {
                _local3 = this._fragmentDurationPairs[_local2];
                if (_local3.duration > 0){
                    return (_local3);
                };
                _local2++;
            };
            return (null);
        }
        private function findPrevValidFragmentDurationPair(index:uint):FragmentDurationPair{
            var _local3:FragmentDurationPair;
            var _local2:uint = index;
            if (_local2 > this._fragmentDurationPairs.length){
                _local2 = this._fragmentDurationPairs.length;
            };
            while (_local2 > 0) {
                _local3 = this._fragmentDurationPairs[(_local2 - 1)];
                if (_local3.duration > 0){
                    return (_local3);
                };
                _local2--;
            };
            return (null);
        }
        private function calculateFragmentId(fdp:FragmentDurationPair, time:Number):uint{
            if (fdp.duration <= 0){
                return (fdp.firstFragment);
            };
            var _local3:Number = (time - fdp.durationAccrued);
            return ((fdp.firstFragment + uint((_local3 / fdp.duration))));
        }
        public function get firstFragmentId():uint{
            var _local1:FragmentDurationPair = this.findNextValidFragmentDurationPair(0);
            if (_local1 == null){
                return (0);
            };
            return (_local1.firstFragment);
        }
        public function isFragmentInGap(fragmentId:uint):Boolean{
            var inGap:* = false;
            var fragmentId:* = fragmentId;
            inGap = false;
            this.forEachGap(function (opt:Object):Boolean{
                var _local2:FragmentDurationPair = (opt.fdp as FragmentDurationPair);
                var _local3:FragmentDurationPair = (opt.nextFdp as FragmentDurationPair);
                var _local4:Number = _local2.firstFragment;
                var _local5:Number = _local3.firstFragment;
                if ((((_local4 <= fragmentId)) && ((fragmentId < _local5)))){
                    inGap = true;
                };
                return (!(inGap));
            });
            return (inGap);
        }
        public function isTimeInGap(time:Number, fragmentInterval:uint):Boolean{
            var inGap:* = false;
            var time:* = time;
            var fragmentInterval:* = fragmentInterval;
            inGap = false;
            this.forEachGap(function (opt:Object):Boolean{
                var _local2:FragmentDurationPair = (opt.fdp as FragmentDurationPair);
                var _local3:FragmentDurationPair = (opt.prevFdp as FragmentDurationPair);
                var _local4:FragmentDurationPair = (opt.nextFdp as FragmentDurationPair);
                var _local5:Number = (_local3.durationAccrued + (_local3.duration * (_local2.firstFragment - _local3.firstFragment)));
                var _local6:Number = _local4.durationAccrued;
                var _local7:Number = ((Math.max(_local2.firstFragment, 1) - 1) * fragmentInterval);
                var _local8:Number = ((Math.max(_local4.firstFragment, (_local2.firstFragment + 1), 1) - 1) * fragmentInterval);
                var _local9:Number = Math.min(_local5, _local7);
                var _local10:Number = Math.max(_local6, _local8);
                if ((((_local9 <= time)) && ((time < _local10)))){
                    inGap = true;
                };
                return (!(inGap));
            });
            return (inGap);
        }
        public function countGapFragments():uint{
            var count:* = 0;
            count = 0;
            this.forEachGap(function (opt:Object):void{
                var _local2:FragmentDurationPair = (opt.fdp as FragmentDurationPair);
                var _local3:FragmentDurationPair = (opt.nextFdp as FragmentDurationPair);
                var _local4:Number = _local2.firstFragment;
                var _local5:Number = uint(Math.max(_local3.firstFragment, _local4));
                count = (count + (_local5 - _local4));
            });
            return (count);
        }
        private function forEachGap(f:Function):void{
            var _local3:FragmentDurationPair;
            var _local4:FragmentDurationPair;
            var _local5:FragmentDurationPair;
            var _local6:Boolean;
            if (this._fragmentDurationPairs.length <= 0){
                return;
            };
            var _local2:uint;
            while (_local2 < this._fragmentDurationPairs.length) {
                _local3 = this._fragmentDurationPairs[_local2];
                if (!((!((_local3.duration == 0))) || (!((_local3.discontinuityIndicator == 2))))){
                    _local4 = this.findPrevValidFragmentDurationPair(_local2);
                    if (!(((_local4 == null)) || ((_local4.firstFragment > _local3.firstFragment)))){
                        _local5 = this.findNextValidFragmentDurationPair((_local2 + 1));
                        if (!(((_local5 == null)) || ((_local3.firstFragment > _local5.firstFragment)))){
                            _local6 = f({
                                fdp:_local3,
                                prevFdp:_local4,
                                nextFdp:_local5
                            });
                            if (!_local6){
                                return;
                            };
                        };
                    };
                };
                _local2++;
            };
        }
        public function getFragmentWithIdGreq(fragmentId:uint):FragmentAccessInformation{
            var fragmentId:* = fragmentId;
            var desiredFdp:* = null;
            var desiredFragmentId:* = 0;
            this.forEachInterval(function (opt:Object):Boolean{
                var _local2:FragmentDurationPair = (opt.fdp as FragmentDurationPair);
                var _local3:Boolean = (opt.isLast as Boolean);
                var _local4:uint = (opt.startFragmentId as uint);
                var _local5:uint = (opt.endFragmentId as uint);
                if (fragmentId < _local4){
                    desiredFdp = _local2;
                    desiredFragmentId = _local4;
                    return (false);
                };
                if (_local3){
                    desiredFdp = _local2;
                    desiredFragmentId = fragmentId;
                    return (false);
                };
                if (fragmentId < _local5){
                    desiredFdp = _local2;
                    desiredFragmentId = fragmentId;
                    return (false);
                };
                return (true);
            });
            if (desiredFdp == null){
                return (null);
            };
            if (desiredFragmentId < desiredFdp.firstFragment){
                desiredFragmentId = desiredFdp.firstFragment;
            };
            var fai:* = new FragmentAccessInformation();
            fai.fragId = desiredFragmentId;
            fai.fragDuration = desiredFdp.duration;
            fai.fragmentEndTime = (desiredFdp.durationAccrued + (((desiredFragmentId - desiredFdp.firstFragment) + 1) * desiredFdp.duration));
            return (fai);
        }
        public function getFragmentWithTimeGreq(fragmentTime:Number):FragmentAccessInformation{
            var fragmentTime:* = fragmentTime;
            var desiredFdp:* = null;
            var desiredFragmentStartTime:* = 0;
            this.forEachInterval(function (opt:Object):Boolean{
                var _local2:FragmentDurationPair = (opt.fdp as FragmentDurationPair);
                var _local3:Boolean = (opt.isLast as Boolean);
                var _local4:Number = (opt.startTime as Number);
                var _local5:Number = (opt.endTime as Number);
                if (fragmentTime < _local4){
                    desiredFdp = _local2;
                    desiredFragmentStartTime = _local4;
                    return (false);
                };
                if (_local3){
                    desiredFdp = _local2;
                    desiredFragmentStartTime = fragmentTime;
                    return (false);
                };
                if (fragmentTime < _local5){
                    desiredFdp = _local2;
                    desiredFragmentStartTime = fragmentTime;
                    return (false);
                };
                return (true);
            });
            if (desiredFdp == null){
                return (null);
            };
            var desiredFragmentId:* = this.calculateFragmentId(desiredFdp, desiredFragmentStartTime);
            var fai:* = new FragmentAccessInformation();
            fai.fragId = desiredFragmentId;
            fai.fragDuration = desiredFdp.duration;
            fai.fragmentEndTime = (desiredFdp.durationAccrued + (((desiredFragmentId - desiredFdp.firstFragment) + 1) * desiredFdp.duration));
            return (fai);
        }
        private function forEachInterval(f:Function):void{
            var _local3:FragmentDurationPair;
            var _local4:uint;
            var _local5:Number;
            var _local6:Boolean;
            var _local7:uint;
            var _local8:uint;
            var _local9:Number;
            var _local10:Boolean;
            var _local2:uint;
            while (_local2 < this._fragmentDurationPairs.length) {
                _local3 = this._fragmentDurationPairs[_local2];
                if (_local3.duration != 0){
                    _local4 = _local3.firstFragment;
                    _local5 = _local3.durationAccrued;
                    _local6 = true;
                    _local7 = (_local2 + 1);
                    while (_local7 < this._fragmentDurationPairs.length) {
                        if (((((((!((this._fragmentDurationPairs[_local7].duration == 0))) || ((this._fragmentDurationPairs[_local7].discontinuityIndicator == 1)))) || ((this._fragmentDurationPairs[_local7].discontinuityIndicator == 2)))) || ((this._fragmentDurationPairs[_local7].discontinuityIndicator == 3)))){
                            _local6 = false;
                            break;
                        };
                        _local7++;
                    };
                    if (_local6){
                        _local8 = 0;
                        _local9 = Number.NaN;
                    } else {
                        _local8 = this._fragmentDurationPairs[_local7].firstFragment;
                        //unresolved if
                        _local9 = (_local5 + ((_local8 - _local4) * _local3.duration));
                    };
                    _local10 = f({
                        fdp:_local3,
                        isLast:_local6,
                        startFragmentId:_local4,
                        endFragmentId:_local8,
                        startTime:_local5,
                        endTime:_local9
                    });
                    if (((!(_local10)) || (_local6))){
                        return;
                    };
                };
                _local2++;
            };
        }

    }
}//package org.osmf.net.httpstreaming.f4f 
﻿package org.osmf.net.httpstreaming.f4f {

    class BoxInfo {

        private var _size:Number;
        private var _type:String;

        public function BoxInfo(size:Number, type:String){
            this._size = size;
            this._type = type;
        }
        public function get size():Number{
            return (this._size);
        }
        public function set size(value:Number):void{
            this._size = value;
        }
        public function get type():String{
            return (this._type);
        }

    }
}//package org.osmf.net.httpstreaming.f4f 
﻿package org.osmf.net.httpstreaming.f4f {

    class LocalRandomAccessEntry {

        private var _time:Number;
        private var _offset:Number;

        public function get time():Number{
            return (this._time);
        }
        public function set time(value:Number):void{
            this._time = value;
        }
        public function get offset():Number{
            return (this._offset);
        }
        public function set offset(value:Number):void{
            this._offset = value;
        }

    }
}//package org.osmf.net.httpstreaming.f4f 
﻿package org.osmf.net.httpstreaming.f4f {
    import flash.events.*;
    import flash.utils.*;
    import __AS3__.vec.*;
    import flash.errors.*;
    import org.osmf.net.httpstreaming.f4f.*;

    class BoxParser extends EventDispatcher {

        private static const FULL_BOX_FIELD_FLAGS_LENGTH:uint = 3;
        private static const AFRA_MASK_LONG_ID:uint = 128;
        private static const AFRA_MASK_LONG_OFFSET:uint = 64;
        private static const AFRA_MASK_GLOBAL_ENTRIES:uint = 32;

        private var _ba:ByteArray;

        public function BoxParser(){
            this._ba = null;
        }
        public function init(ba:ByteArray):void{
            this._ba = ba;
            this._ba.position = 0;
        }
        public function getNextBoxInfo():BoxInfo{
            if ((((this._ba == null)) || ((this._ba.bytesAvailable < (F4FConstants.FIELD_SIZE_LENGTH + F4FConstants.FIELD_TYPE_LENGTH))))){
                return (null);
            };
            var _local1:Number = this._ba.readUnsignedInt();
            var _local2:String = this._ba.readUTFBytes(F4FConstants.FIELD_TYPE_LENGTH);
            return (new BoxInfo(_local1, _local2));
        }
        public function getBoxes():Vector.<Box>{
            var _local3:AdobeBootstrapBox;
            var _local4:AdobeFragmentRandomAccessBox;
            var _local5:MediaDataBox;
            var _local1:Vector.<Box> = new Vector.<Box>();
            var _local2:BoxInfo = this.getNextBoxInfo();
            while (_local2 != null) {
                if (_local2.type == F4FConstants.BOX_TYPE_ABST){
                    _local3 = new AdobeBootstrapBox();
                    this.parseAdobeBootstrapBox(_local2, _local3);
                    _local1.push(_local3);
                } else {
                    if (_local2.type == F4FConstants.BOX_TYPE_AFRA){
                        _local4 = new AdobeFragmentRandomAccessBox();
                        this.parseAdobeFragmentRandomAccessBox(_local2, _local4);
                        _local1.push(_local4);
                    } else {
                        if (_local2.type == F4FConstants.BOX_TYPE_MDAT){
                            _local5 = new MediaDataBox();
                            this.parseMediaDataBox(_local2, _local5);
                            _local1.push(_local5);
                        } else {
                            this._ba.position = ((this._ba.position + _local2.size) - (F4FConstants.FIELD_SIZE_LENGTH + F4FConstants.FIELD_TYPE_LENGTH));
                        };
                    };
                };
                _local2 = this.getNextBoxInfo();
                //unresolved if
            };
            return (_local1);
        }
        public function readFragmentRandomAccessBox(bi:BoxInfo):AdobeFragmentRandomAccessBox{
            var _local2:AdobeFragmentRandomAccessBox = new AdobeFragmentRandomAccessBox();
            this.parseAdobeFragmentRandomAccessBox(bi, _local2);
            return (_local2);
        }
        public function readAdobeBootstrapBox(bi:BoxInfo):AdobeBootstrapBox{
            var _local2:AdobeBootstrapBox = new AdobeBootstrapBox();
            this.parseAdobeBootstrapBox(bi, _local2);
            return (_local2);
        }
        function readLongUIntToNumber():Number{
            if ((((this._ba == null)) || ((this._ba.bytesAvailable < 8)))){
                throw (new IllegalOperationError("not enough length for readLongUIntToNumer"));
            };
            var _local1:Number = this._ba.readUnsignedInt();
            _local1 = (_local1 * 4294967296);
            _local1 = (_local1 + this._ba.readUnsignedInt());
            return (_local1);
        }
        private function readUnsignedInt():uint{
            if ((((this._ba == null)) || ((this._ba.bytesAvailable < 4)))){
                throw (new IllegalOperationError("not enough length for readUnsignedInt"));
            };
            return (this._ba.readUnsignedInt());
        }
        private function readBytes(bytes:ByteArray, offset:uint=0, length:uint=0):void{
            if ((((this._ba == null)) || ((this._ba.bytesAvailable < length)))){
                throw (new IllegalOperationError(("not enough length for readBytes: " + length)));
            };
            return (this._ba.readBytes(bytes, offset, length));
        }
        private function readUnsignedByte():uint{
            if ((((this._ba == null)) || ((this._ba.bytesAvailable < 1)))){
                throw (new IllegalOperationError("not enough length for readUnsingedByte"));
            };
            return (this._ba.readUnsignedByte());
        }
        private function readBytesToUint(length:uint):uint{
            var _local4:uint;
            if ((((this._ba == null)) || ((this._ba.bytesAvailable < length)))){
                throw (new IllegalOperationError("not enough length for readUnsingedByte"));
            };
            if (length > 4){
                throw (new IllegalOperationError("number of bytes to read must be equal or less than 4"));
            };
            var _local2:uint;
            var _local3:uint;
            while (_local3 < length) {
                _local2 = (_local2 << 8);
                _local4 = this._ba.readUnsignedByte();
                _local2 = (_local2 + _local4);
                _local3++;
            };
            return (_local2);
        }
        private function readString():String{
            var _local3:uint;
            var _local1:uint = this._ba.position;
            while (this._ba.position < this._ba.length) {
                _local3 = this._ba.readByte();
                //unresolved if
            };
            var _local2:uint = (this._ba.position - _local1);
            this._ba.position = _local1;
            return (this._ba.readUTFBytes(_local2));
        }
        private function parseBox(boxInfo:BoxInfo, box:Box):void{
            var _local5:ByteArray;
            var _local3:Number = boxInfo.size;
            var _local4:uint = (F4FConstants.FIELD_SIZE_LENGTH + F4FConstants.FIELD_TYPE_LENGTH);
            if (boxInfo.size == F4FConstants.FLAG_USE_LARGE_SIZE){
                _local3 = this.readLongUIntToNumber();
                _local4 = (_local4 + F4FConstants.FIELD_LARGE_SIZE_LENGTH);
            };
            if (boxInfo.type == F4FConstants.EXTENDED_TYPE){
                _local5 = new ByteArray();
                this.readBytes(_local5, 0, F4FConstants.FIELD_EXTENDED_TYPE_LENGTH);
                _local4 = (_local4 + F4FConstants.FIELD_EXTENDED_TYPE_LENGTH);
            };
            box.size = _local3;
            box.type = boxInfo.type;
            box.boxLength = _local4;
        }
        private function parseFullBox(boxInfo:BoxInfo, fullBox:FullBox):void{
            this.parseBox(boxInfo, fullBox);
            fullBox.version = this.readUnsignedByte();
            fullBox.flags = this.readBytesToUint(FULL_BOX_FIELD_FLAGS_LENGTH);
        }
        private function parseAdobeBootstrapBox(boxInfo:BoxInfo, abst:AdobeBootstrapBox):void{
            var _local13:AdobeSegmentRunTable;
            var _local14:AdobeFragmentRunTable;
            this.parseFullBox(boxInfo, abst);
            abst.bootstrapVersion = this.readUnsignedInt();
            var _local3:uint = this.readUnsignedByte();
            abst.profile = (_local3 >> 6);
            abst.live = ((_local3 & 32) == 32);
            abst.update = ((_local3 & 1) == 1);
            abst.timeScale = this.readUnsignedInt();
            abst.currentMediaTime = this.readLongUIntToNumber();
            abst.smpteTimeCodeOffset = this.readLongUIntToNumber();
            abst.movieIdentifier = this.readString();
            var _local4:uint = this.readUnsignedByte();
            var _local5:Vector.<String> = new Vector.<String>();
            var _local6:int;
            while (_local6 < _local4) {
                _local5.push(this.readString());
                _local6++;
            };
            abst.serverBaseURLs = _local5;
            var _local7:uint = this.readUnsignedByte();
            var _local8:Vector.<String> = new Vector.<String>();
            _local6 = 0;
            while (_local6 < _local7) {
                _local8.push(this.readString());
                _local6++;
            };
            abst.qualitySegmentURLModifiers = _local8;
            abst.drmData = this.readString();
            abst.metadata = this.readString();
            var _local9:uint = this.readUnsignedByte();
            var _local10:Vector.<AdobeSegmentRunTable> = new Vector.<AdobeSegmentRunTable>();
            _local6 = 0;
            while (_local6 < _local9) {
                boxInfo = this.getNextBoxInfo();
                if (boxInfo.type == F4FConstants.BOX_TYPE_ASRT){
                    _local13 = new AdobeSegmentRunTable();
                    this.parseAdobeSegmentRunTable(boxInfo, _local13);
                    _local10.push(_local13);
                } else {
                    throw (new IllegalOperationError(("Unexpected data structure: " + boxInfo.type)));
                };
                _local6++;
            };
            abst.segmentRunTables = _local10;
            var _local11:uint = this.readUnsignedByte();
            var _local12:Vector.<AdobeFragmentRunTable> = new Vector.<AdobeFragmentRunTable>();
            _local6 = 0;
            while (_local6 < _local11) {
                boxInfo = this.getNextBoxInfo();
                if (boxInfo.type == F4FConstants.BOX_TYPE_AFRT){
                    _local14 = new AdobeFragmentRunTable();
                    this.parseAdobeFragmentRunTable(boxInfo, _local14);
                    _local12.push(_local14);
                } else {
                    throw (new IllegalOperationError(("Unexpected data structure: " + boxInfo.type)));
                };
                _local6++;
            };
            abst.fragmentRunTables = _local12;
        }
        private function parseAdobeSegmentRunTable(boxInfo:BoxInfo, asrt:AdobeSegmentRunTable):void{
            this.parseFullBox(boxInfo, asrt);
            var _local3:uint = this.readUnsignedByte();
            var _local4:Vector.<String> = new Vector.<String>();
            var _local5:uint;
            while (_local5 < _local3) {
                _local4.push(this.readString());
                _local5++;
            };
            asrt.qualitySegmentURLModifiers = _local4;
            var _local6:uint = this.readUnsignedInt();
            _local5 = 0;
            while (_local5 < _local6) {
                asrt.addSegmentFragmentPair(new SegmentFragmentPair(this.readUnsignedInt(), this.readUnsignedInt()));
                _local5++;
            };
        }
        private function parseAdobeFragmentRunTable(boxInfo:BoxInfo, afrt:AdobeFragmentRunTable):void{
            var _local7:FragmentDurationPair;
            this.parseFullBox(boxInfo, afrt);
            afrt.timeScale = this.readUnsignedInt();
            var _local3:uint = this.readUnsignedByte();
            var _local4:Vector.<String> = new Vector.<String>();
            var _local5:uint;
            while (_local5 < _local3) {
                _local4.push(this.readString());
                _local5++;
            };
            afrt.qualitySegmentURLModifiers = _local4;
            var _local6:uint = this.readUnsignedInt();
            _local5 = 0;
            while (_local5 < _local6) {
                _local7 = new FragmentDurationPair();
                this.parseFragmentDurationPair(_local7);
                afrt.addFragmentDurationPair(_local7);
                _local5++;
            };
        }
        private function parseFragmentDurationPair(fdp:FragmentDurationPair):void{
            fdp.firstFragment = this.readUnsignedInt();
            fdp.durationAccrued = this.readLongUIntToNumber();
            fdp.duration = this.readUnsignedInt();
            if (fdp.duration == 0){
                fdp.discontinuityIndicator = this.readUnsignedByte();
            };
        }
        private function parseAdobeFragmentRandomAccessBox(boxInfo:BoxInfo, afra:AdobeFragmentRandomAccessBox):void{
            var _local11:LocalRandomAccessEntry;
            var _local12:GlobalRandomAccessEntry;
            this.parseFullBox(boxInfo, afra);
            var _local3:uint = this.readBytesToUint(1);
            var _local4 = ((_local3 & AFRA_MASK_LONG_ID) > 0);
            var _local5 = ((_local3 & AFRA_MASK_LONG_OFFSET) > 0);
            var _local6 = ((_local3 & AFRA_MASK_GLOBAL_ENTRIES) > 0);
            afra.timeScale = this.readUnsignedInt();
            var _local7:uint = this.readUnsignedInt();
            var _local8:Vector.<LocalRandomAccessEntry> = new Vector.<LocalRandomAccessEntry>();
            var _local9:uint;
            while (_local9 < _local7) {
                _local11 = new LocalRandomAccessEntry();
                this.parseLocalRandomAccessEntry(_local11, _local5);
                _local8.push(_local11);
                _local9++;
            };
            afra.localRandomAccessEntries = _local8;
            var _local10:Vector.<GlobalRandomAccessEntry> = new Vector.<GlobalRandomAccessEntry>();
            if (_local6){
                _local7 = this.readUnsignedInt();
                _local9 = 0;
                while (_local9 < _local7) {
                    _local12 = new GlobalRandomAccessEntry();
                    this.parseGlobalRandomAccessEntry(_local12, _local4, _local5);
                    _local10.push(_local12);
                    _local9++;
                };
            };
            afra.globalRandomAccessEntries = _local10;
        }
        private function parseLocalRandomAccessEntry(lrae:LocalRandomAccessEntry, longOffsetFields:Boolean):void{
            lrae.time = this.readLongUIntToNumber();
            if (longOffsetFields){
                lrae.offset = this.readLongUIntToNumber();
            } else {
                lrae.offset = this.readUnsignedInt();
            };
        }
        private function parseGlobalRandomAccessEntry(grae:GlobalRandomAccessEntry, longIdFields:Boolean, longOffsetFields:Boolean):void{
            grae.time = this.readLongUIntToNumber();
            if (longIdFields){
                grae.segment = this.readUnsignedInt();
                grae.fragment = this.readUnsignedInt();
            } else {
                grae.segment = this.readBytesToUint(2);
                grae.fragment = this.readBytesToUint(2);
            };
            if (longOffsetFields){
                grae.afraOffset = this.readLongUIntToNumber();
                grae.offsetFromAfra = this.readLongUIntToNumber();
            } else {
                grae.afraOffset = this.readUnsignedInt();
                grae.offsetFromAfra = this.readUnsignedInt();
            };
        }
        private function parseMediaDataBox(boxInfo:BoxInfo, mdat:MediaDataBox):void{
            this.parseBox(boxInfo, mdat);
            var _local3:ByteArray = new ByteArray();
            this.readBytes(_local3, 0, (mdat.size - mdat.boxLength));
            mdat.data = _local3;
        }

    }
}//package org.osmf.net.httpstreaming.f4f 
﻿package org.osmf.net.httpstreaming {

    public class HTTPStreamRequestKind {

        public static const RETRY:String = "retry";
        public static const DOWNLOAD:String = "download";
        public static const BEST_EFFORT_DOWNLOAD:String = "bestEffortDownload";
        public static const LIVE_STALL:String = "liveStall";
        public static const DONE:String = "done";

    }
}//package org.osmf.net.httpstreaming 
﻿package org.osmf.net.httpstreaming.flv {

    public class FLVTagScriptDataMode {

        public static const NORMAL:String = "normal";
        public static const FIRST:String = "first";
        public static const IMMEDIATE:String = "immediate";

    }
}//package org.osmf.net.httpstreaming.flv 
﻿package org.osmf.net.httpstreaming.flv {
    import flash.utils.*;

    public class FLVHeader {

        public static const MIN_FILE_HEADER_BYTE_COUNT:int = 9;

        private var _hasVideoTags:Boolean = true;
        private var _hasAudioTags:Boolean = true;
        private var offset:uint;

        public function FLVHeader(input:IDataInput=null){
            if (input != null){
                this.readHeader(input);
                this.readRest(input);
            };
        }
        public function get hasAudioTags():Boolean{
            return (this._hasAudioTags);
        }
        public function set hasAudioTags(value:Boolean):void{
            this._hasAudioTags = value;
        }
        public function get hasVideoTags():Boolean{
            return (this._hasVideoTags);
        }
        public function set hasVideoTags(value:Boolean):void{
            this._hasVideoTags = value;
        }
        public function write(output:IDataOutput):void{
            output.writeByte(70);
            output.writeByte(76);
            output.writeByte(86);
            output.writeByte(1);
            var _local2:uint;
            if (this._hasAudioTags){
                _local2 = (_local2 | 4);
            };
            if (this._hasVideoTags){
                _local2 = (_local2 | 1);
            };
            output.writeByte(_local2);
            var _local3:uint = MIN_FILE_HEADER_BYTE_COUNT;
            output.writeUnsignedInt(_local3);
            var _local4:uint;
            output.writeUnsignedInt(_local4);
        }
        function readHeader(input:IDataInput):void{
            if (input.bytesAvailable < MIN_FILE_HEADER_BYTE_COUNT){
                throw (new Error("FLVHeader() input too short"));
            };
            if (input.readByte() != 70){
                throw (new Error("FLVHeader readHeader() Signature[0] not 'F'"));
            };
            if (input.readByte() != 76){
                throw (new Error("FLVHeader readHeader() Signature[1] not 'L'"));
            };
            if (input.readByte() != 86){
                throw (new Error("FLVHeader readHeader() Signature[2] not 'V'"));
            };
            if (input.readByte() != 1){
                throw (new Error("FLVHeader readHeader() Version not 0x01"));
            };
            var _local2:int = input.readByte();
            this._hasAudioTags = (((_local2 & 4)) ? true : false);
            this._hasVideoTags = (((_local2 & 1)) ? true : false);
            this.offset = input.readUnsignedInt();
            if (this.offset < MIN_FILE_HEADER_BYTE_COUNT){
                throw (new Error("FLVHeader() offset smaller than minimum"));
            };
        }
        function readRest(input:IDataInput):void{
            var _local2:ByteArray;
            if (this.offset > MIN_FILE_HEADER_BYTE_COUNT){
                if ((this.offset - MIN_FILE_HEADER_BYTE_COUNT) < (input.bytesAvailable - FLVTag.PREV_TAG_BYTE_COUNT)){
                    throw (new Error("FLVHeader() input too short for nonstandard offset"));
                };
                _local2 = new ByteArray();
                input.readBytes(_local2, 0, (this.offset - MIN_FILE_HEADER_BYTE_COUNT));
            };
            if (input.bytesAvailable < FLVTag.PREV_TAG_BYTE_COUNT){
                throw (new Error("FLVHeader() input too short for previousTagSize0"));
            };
            input.readUnsignedInt();
        }
        function get restBytesNeeded():int{
            return ((FLVTag.PREV_TAG_BYTE_COUNT + (this.offset - MIN_FILE_HEADER_BYTE_COUNT)));
        }

    }
}//package org.osmf.net.httpstreaming.flv 
﻿package org.osmf.net.httpstreaming.flv {

    class FLVParserState {

        static const FILE_HEADER:String = "fileHeader";
        static const FILE_HEADER_REST:String = "fileHeaderRest";
        static const TYPE:String = "type";
        static const HEADER:String = "header";
        static const DATA:String = "data";
        static const PREV_TAG:String = "prevTag";

    }
}//package org.osmf.net.httpstreaming.flv 
﻿package org.osmf.net.httpstreaming.flv {
    import flash.net.*;

    public class FLVTagScriptDataObject extends FLVTag {

        public function FLVTagScriptDataObject(type:int=18){
            super(type);
        }
        public function get objects():Array{
            var _local1:Array = new Array();
            bytes.position = TAG_HEADER_BYTE_COUNT;
            while (bytes.bytesAvailable) {
                _local1.push(bytes.readObject());
            };
            return (_local1);
        }
        public function set objects(array:Array):void{
            var _local2:Object;
            bytes.objectEncoding = ObjectEncoding.AMF0;
            bytes.length = TAG_HEADER_BYTE_COUNT;
            bytes.position = TAG_HEADER_BYTE_COUNT;
            for each (_local2 in array) {
                bytes.writeObject(_local2);
            };
            dataSize = (bytes.length - TAG_HEADER_BYTE_COUNT);
        }

    }
}//package org.osmf.net.httpstreaming.flv 
﻿package org.osmf.net.httpstreaming.flv {
    import flash.utils.*;

    public class FLVTag {

        public static const TAG_TYPE_AUDIO:int = 8;
        public static const TAG_TYPE_VIDEO:int = 9;
        public static const TAG_TYPE_SCRIPTDATAOBJECT:int = 18;
        public static const TAG_FLAG_ENCRYPTED:int = 32;
        public static const TAG_TYPE_ENCRYPTED_AUDIO:int = 40;
        public static const TAG_TYPE_ENCRYPTED_VIDEO:int = 41;
        public static const TAG_TYPE_ENCRYPTED_SCRIPTDATAOBJECT:int = 50;
        public static const TAG_HEADER_BYTE_COUNT:int = 11;
        public static const PREV_TAG_BYTE_COUNT:int = 4;

        protected var bytes:ByteArray = null;

        public function FLVTag(type:int){
            this.bytes = new ByteArray();
            this.bytes.length = TAG_HEADER_BYTE_COUNT;
            this.bytes[0] = type;
        }
        public function read(input:IDataInput):void{
            this.readType(input);
            this.readRemainingHeader(input);
            this.readData(input);
            this.readPrevTag(input);
        }
        public function readType(input:IDataInput):void{
            if (input.bytesAvailable < 1){
                throw (new Error("FLVTag.readType() input too short"));
            };
            input.readBytes(this.bytes, 0, 1);
        }
        public function readRemaining(input:IDataInput):void{
            this.readRemainingHeader(input);
            this.readData(input);
            this.readPrevTag(input);
        }
        public function readRemainingHeader(input:IDataInput):void{
            if (input.bytesAvailable < 10){
                throw (new Error("FLVTag.readHeader() input too short"));
            };
            input.readBytes(this.bytes, 1, (TAG_HEADER_BYTE_COUNT - 1));
        }
        public function readData(input:IDataInput):void{
            if (this.dataSize > 0){
                if (input.bytesAvailable < this.dataSize){
                    throw (new Error("FLVTag().readData input shorter than dataSize"));
                };
                input.readBytes(this.bytes, TAG_HEADER_BYTE_COUNT, this.dataSize);
            };
        }
        public function readPrevTag(input:IDataInput):void{
            if (input.bytesAvailable < 4){
                throw (new Error("FLVTag.readPrevTag() input too short"));
            };
            input.readUnsignedInt();
        }
        public function write(output:IDataOutput):void{
            output.writeBytes(this.bytes, 0, (TAG_HEADER_BYTE_COUNT + this.dataSize));
            output.writeUnsignedInt((TAG_HEADER_BYTE_COUNT + this.dataSize));
        }
        public function get tagType():uint{
            return (this.bytes[0]);
        }
        public function set tagType(value:uint):void{
            this.bytes[0] = value;
        }
        public function get isEncrpted():Boolean{
            return ((((this.bytes[0] & TAG_FLAG_ENCRYPTED)) ? true : false));
        }
        public function get dataSize():uint{
            return ((((this.bytes[1] << 16) | (this.bytes[2] << 8)) | this.bytes[3]));
        }
        public function set dataSize(value:uint):void{
            this.bytes[1] = ((value >> 16) & 0xFF);
            this.bytes[2] = ((value >> 8) & 0xFF);
            this.bytes[3] = (value & 0xFF);
            this.bytes.length = (TAG_HEADER_BYTE_COUNT + value);
        }
        public function get timestamp():uint{
            return (((((this.bytes[7] << 24) | (this.bytes[4] << 16)) | (this.bytes[5] << 8)) | this.bytes[6]));
        }
        public function set timestamp(value:uint):void{
            this.bytes[7] = ((value >> 24) & 0xFF);
            this.bytes[4] = ((value >> 16) & 0xFF);
            this.bytes[5] = ((value >> 8) & 0xFF);
            this.bytes[6] = (value & 0xFF);
        }
        public function get data():ByteArray{
            var _local1:ByteArray = new ByteArray();
            _local1.writeBytes(this.bytes, TAG_HEADER_BYTE_COUNT, this.dataSize);
            return (_local1);
        }
        public function set data(value:ByteArray):void{
            this.bytes.length = (TAG_HEADER_BYTE_COUNT + value.length);
            this.bytes.position = TAG_HEADER_BYTE_COUNT;
            this.bytes.writeBytes(value, 0, value.length);
            this.dataSize = value.length;
        }

    }
}//package org.osmf.net.httpstreaming.flv 
﻿package org.osmf.net.httpstreaming.flv {
    import flash.utils.*;

    public class FLVTagVideo extends FLVTag {

        public static const FRAME_TYPE_KEYFRAME:int = 1;
        public static const FRAME_TYPE_INTER:int = 2;
        public static const FRAME_TYPE_DISPOSABLE_INTER:int = 3;
        public static const FRAME_TYPE_GENERATED_KEYFRAME:int = 4;
        public static const FRAME_TYPE_INFO:int = 5;
        public static const CODEC_ID_JPEG:int = 1;
        public static const CODEC_ID_SORENSON:int = 2;
        public static const CODEC_ID_SCREEN:int = 3;
        public static const CODEC_ID_VP6:int = 4;
        public static const CODEC_ID_VP6_ALPHA:int = 5;
        public static const CODEC_ID_SCREEN_V2:int = 6;
        public static const CODEC_ID_AVC:int = 7;
        public static const AVC_PACKET_TYPE_SEQUENCE_HEADER:int = 0;
        public static const AVC_PACKET_TYPE_NALU:int = 1;
        public static const AVC_PACKET_TYPE_END_OF_SEQUENCE:int = 2;
        public static const INFO_PACKET_SEEK_START:int = 0;
        public static const INFO_PACKET_SEEK_END:int = 1;

        public function FLVTagVideo(type:int=9){
            super(type);
        }
        public function get frameType():int{
            return (((bytes[(TAG_HEADER_BYTE_COUNT + 0)] >> 4) & 15));
        }
        public function set frameType(value:int):void{
            bytes[(TAG_HEADER_BYTE_COUNT + 0)] = (bytes[(TAG_HEADER_BYTE_COUNT + 0)] & 15);
            bytes[(TAG_HEADER_BYTE_COUNT + 0)] = (bytes[(TAG_HEADER_BYTE_COUNT + 0)] | ((value & 15) << 4));
        }
        public function get codecID():int{
            return ((bytes[(TAG_HEADER_BYTE_COUNT + 0)] & 15));
        }
        public function set codecID(value:int):void{
            bytes[(TAG_HEADER_BYTE_COUNT + 0)] = (bytes[(TAG_HEADER_BYTE_COUNT + 0)] & 240);
            bytes[(TAG_HEADER_BYTE_COUNT + 0)] = (bytes[(TAG_HEADER_BYTE_COUNT + 0)] | (value & 15));
        }
        public function get infoPacketValue():int{
            if (this.frameType != FRAME_TYPE_INFO){
                throw (new Error("get infoPacketValue() not permitted unless frameType is FRAME_TYPE_INFO"));
            };
            return (bytes[(TAG_HEADER_BYTE_COUNT + 1)]);
        }
        public function set infoPacketValue(value:int):void{
            if (this.frameType != FRAME_TYPE_INFO){
                throw (new Error("get infoPacketValue() not permitted unless frameType is FRAME_TYPE_INFO"));
            };
            bytes[(TAG_HEADER_BYTE_COUNT + 1)] = value;
            bytes.length = (TAG_HEADER_BYTE_COUNT + 2);
            dataSize = 2;
        }
        public function get avcPacketType():int{
            if (this.codecID != CODEC_ID_AVC){
                throw (new Error("get avcPacketType() not permitted unless codecID is CODEC_ID_AVC"));
            };
            return (bytes[(TAG_HEADER_BYTE_COUNT + 1)]);
        }
        public function set avcPacketType(value:int):void{
            if (this.codecID != CODEC_ID_AVC){
                throw (new Error("set avcPacketType() not permitted unless codecID is CODEC_ID_AVC"));
            };
            bytes[(TAG_HEADER_BYTE_COUNT + 1)] = value;
            if (this.avcPacketType != AVC_PACKET_TYPE_NALU){
                bytes[(TAG_HEADER_BYTE_COUNT + 2)] = 0;
                bytes[(TAG_HEADER_BYTE_COUNT + 3)] = 0;
                bytes[(TAG_HEADER_BYTE_COUNT + 4)] = 0;
                bytes.length = (TAG_HEADER_BYTE_COUNT + 5);
                dataSize = 5;
            };
        }
        public function get avcCompositionTimeOffset():int{
            if (((!((this.codecID == CODEC_ID_AVC))) || (!((this.avcPacketType == AVC_PACKET_TYPE_NALU))))){
                throw (new Error("get avcCompositionTimeOffset() not permitted unless codecID is CODEC_ID_AVC and avcPacketType is AVC NALU"));
            };
            var _local1 = (bytes[(TAG_HEADER_BYTE_COUNT + 2)] << 16);
            _local1 = (_local1 | (bytes[(TAG_HEADER_BYTE_COUNT + 3)] << 8));
            _local1 = (_local1 | bytes[(TAG_HEADER_BYTE_COUNT + 4)]);
            if ((_local1 & 0x800000)){
                _local1 = (_local1 | 0xFF000000);
            };
            return (_local1);
        }
        public function set avcCompositionTimeOffset(value:int):void{
            if (((!((this.codecID == CODEC_ID_AVC))) || (!((this.avcPacketType == AVC_PACKET_TYPE_NALU))))){
                throw (new Error("set avcCompositionTimeOffset() not permitted unless codecID is CODEC_ID_AVC and avcPacketType is AVC NALU"));
            };
            bytes[(TAG_HEADER_BYTE_COUNT + 2)] = ((value >> 16) & 0xFF);
            bytes[(TAG_HEADER_BYTE_COUNT + 3)] = ((value >> 8) & 0xFF);
            bytes[(TAG_HEADER_BYTE_COUNT + 4)] = (value & 0xFF);
        }
        override public function get data():ByteArray{
            var _local1:ByteArray = new ByteArray();
            if (this.codecID == CODEC_ID_AVC){
                _local1.writeBytes(bytes, (TAG_HEADER_BYTE_COUNT + 5), (dataSize - 5));
            } else {
                _local1.writeBytes(bytes, (TAG_HEADER_BYTE_COUNT + 1), (dataSize - 1));
            };
            return (_local1);
        }
        override public function set data(value:ByteArray):void{
            if (this.codecID == CODEC_ID_AVC){
                bytes.length = ((TAG_HEADER_BYTE_COUNT + value.length) + 5);
                bytes.position = (TAG_HEADER_BYTE_COUNT + 5);
                bytes.writeBytes(value, 0, value.length);
                dataSize = (value.length + 5);
            } else {
                bytes.length = ((TAG_HEADER_BYTE_COUNT + value.length) + 1);
                bytes.position = (TAG_HEADER_BYTE_COUNT + 1);
                bytes.writeBytes(value, 0, value.length);
                dataSize = (value.length + 1);
            };
        }

    }
}//package org.osmf.net.httpstreaming.flv 
﻿package org.osmf.net.httpstreaming.flv {
    import flash.utils.*;

    public class FLVTagAudio extends FLVTag {

        public static const SOUND_FORMAT_LINEAR:int = 0;
        public static const SOUND_FORMAT_ADPCM:int = 1;
        public static const SOUND_FORMAT_MP3:int = 2;
        public static const SOUND_FORMAT_LINEAR_LE:int = 3;
        public static const SOUND_FORMAT_NELLYMOSER_16K:int = 4;
        public static const SOUND_FORMAT_NELLYMOSER_8K:int = 5;
        public static const SOUND_FORMAT_NELLYMOSER:int = 6;
        public static const SOUND_FORMAT_G711A:int = 7;
        public static const SOUND_FORMAT_G711U:int = 8;
        public static const SOUND_FORMAT_AAC:int = 10;
        public static const SOUND_FORMAT_SPEEX:int = 11;
        public static const SOUND_FORMAT_MP3_8K:int = 14;
        public static const SOUND_FORMAT_DEVICE_SPECIFIC:int = 15;
        public static const SOUND_RATE_5K:Number = 5512.5;
        public static const SOUND_RATE_11K:Number = 11025;
        public static const SOUND_RATE_22K:Number = 22050;
        public static const SOUND_RATE_44K:Number = 44100;
        public static const SOUND_SIZE_8BITS:int = 8;
        public static const SOUND_SIZE_16BITS:int = 16;
        public static const SOUND_CHANNELS_MONO:int = 1;
        public static const SOUND_CHANNELS_STEREO:int = 2;

        public function FLVTagAudio(type:int=8){
            super(type);
        }
        public function get soundFormatByte():int{
            return (bytes[(TAG_HEADER_BYTE_COUNT + 0)]);
        }
        public function set soundFormatByte(value:int):void{
            bytes[(TAG_HEADER_BYTE_COUNT + 0)] = value;
        }
        public function get soundFormat():int{
            return (((bytes[(TAG_HEADER_BYTE_COUNT + 0)] >> 4) & 15));
        }
        public function set soundFormat(value:int):void{
            bytes[(TAG_HEADER_BYTE_COUNT + 0)] = (bytes[(TAG_HEADER_BYTE_COUNT + 0)] & 15);
            bytes[(TAG_HEADER_BYTE_COUNT + 0)] = (bytes[(TAG_HEADER_BYTE_COUNT + 0)] | ((value << 4) & 240));
            if (value == SOUND_FORMAT_AAC){
                this.soundRate = SOUND_RATE_44K;
                this.soundChannels = SOUND_CHANNELS_STEREO;
                this.isAACSequenceHeader = false;
            };
        }
        public function get soundRate():Number{
            switch (((bytes[(TAG_HEADER_BYTE_COUNT + 0)] >> 2) & 3)){
                case 0:
                    return (SOUND_RATE_5K);
                case 1:
                    return (SOUND_RATE_11K);
                case 2:
                    return (SOUND_RATE_22K);
                case 3:
                    return (SOUND_RATE_44K);
            };
            throw (new Error("get soundRate() a two-bit number wasn't 0, 1, 2, or 3. impossible."));
        }
        public function set soundRate(value:Number):void{
            var _local2:int;
            switch (value){
                case SOUND_RATE_5K:
                    _local2 = 0;
                    break;
                case SOUND_RATE_11K:
                    _local2 = 1;
                    break;
                case SOUND_RATE_22K:
                    _local2 = 2;
                    break;
                case SOUND_RATE_44K:
                    _local2 = 3;
                    break;
                    throw (new Error("set soundRate valid values 5512.5, 11025, 22050, 44100"));
            };
            bytes[(TAG_HEADER_BYTE_COUNT + 0)] = (bytes[(TAG_HEADER_BYTE_COUNT + 0)] & 243);
            bytes[(TAG_HEADER_BYTE_COUNT + 0)] = (bytes[(TAG_HEADER_BYTE_COUNT + 0)] | (_local2 << 2));
        }
        public function get soundSize():int{
            if (((bytes[(TAG_HEADER_BYTE_COUNT + 0)] >> 1) & 1)){
                return (SOUND_SIZE_16BITS);
            };
            return (SOUND_SIZE_8BITS);
        }
        public function set soundSize(value:int):void{
            switch (value){
                case SOUND_SIZE_8BITS:
                    bytes[(TAG_HEADER_BYTE_COUNT + 0)] = (bytes[(TAG_HEADER_BYTE_COUNT + 0)] & 253);
                    break;
                case SOUND_SIZE_16BITS:
                    bytes[(TAG_HEADER_BYTE_COUNT + 0)] = (bytes[(TAG_HEADER_BYTE_COUNT + 0)] | 2);
                    break;
                    throw (new Error("set soundSize valid values 8, 16"));
            };
        }
        public function get soundChannels():int{
            if ((bytes[(TAG_HEADER_BYTE_COUNT + 0)] & 1)){
                return (SOUND_CHANNELS_STEREO);
            };
            return (SOUND_CHANNELS_MONO);
        }
        public function set soundChannels(value:int):void{
            switch (value){
                case SOUND_CHANNELS_MONO:
                    bytes[(TAG_HEADER_BYTE_COUNT + 0)] = (bytes[(TAG_HEADER_BYTE_COUNT + 0)] & 254);
                    break;
                case SOUND_CHANNELS_STEREO:
                    bytes[(TAG_HEADER_BYTE_COUNT + 0)] = (bytes[(TAG_HEADER_BYTE_COUNT + 0)] | 1);
                    break;
                    throw (new Error("set soundChannels valid values 1, 2"));
            };
        }
        public function get isAACSequenceHeader():Boolean{
            if (this.soundFormat != SOUND_FORMAT_AAC){
                throw (new Error("get isAACSequenceHeader not valid if soundFormat != SOUND_FORMAT_AAC"));
            };
            if (bytes[(TAG_HEADER_BYTE_COUNT + 1)] == 0){
                return (true);
            };
            return (false);
        }
        public function set isAACSequenceHeader(value:Boolean):void{
            if (this.soundFormat != SOUND_FORMAT_AAC){
                throw (new Error("set isAACSequenceHeader not valid if soundFormat != SOUND_FORMAT_AAC"));
            };
            if (value){
                bytes[(TAG_HEADER_BYTE_COUNT + 1)] = 0;
            } else {
                bytes[(TAG_HEADER_BYTE_COUNT + 1)] = 1;
            };
        }
        public function get isCodecConfiguration():Boolean{
            switch (this.soundFormat){
                case FLVTagAudio.SOUND_FORMAT_AAC:
                    if (this.isAACSequenceHeader){
                        return (true);
                    };
                    break;
            };
            return (false);
        }
        override public function get data():ByteArray{
            var _local1:ByteArray = new ByteArray();
            if (this.soundFormat == SOUND_FORMAT_AAC){
                _local1.writeBytes(bytes, (TAG_HEADER_BYTE_COUNT + 2), (dataSize - 2));
            } else {
                _local1.writeBytes(bytes, (TAG_HEADER_BYTE_COUNT + 1), (dataSize - 1));
            };
            return (_local1);
        }
        override public function set data(value:ByteArray):void{
            if (this.soundFormat == SOUND_FORMAT_AAC){
                bytes.length = ((TAG_HEADER_BYTE_COUNT + value.length) + 2);
                bytes.position = (TAG_HEADER_BYTE_COUNT + 2);
                bytes.writeBytes(value, 0, value.length);
                dataSize = (value.length + 2);
            } else {
                bytes.length = ((TAG_HEADER_BYTE_COUNT + value.length) + 1);
                bytes.position = (TAG_HEADER_BYTE_COUNT + 1);
                bytes.writeBytes(value, 0, value.length);
                dataSize = (value.length + 1);
            };
        }

    }
}//package org.osmf.net.httpstreaming.flv 
﻿package org.osmf.net.httpstreaming.flv {
    import flash.utils.*;

    public class FLVParser {

        private var state:String;
        private var savedBytes:ByteArray;
        private var currentTag:FLVTag = null;
        private var flvHeader:FLVHeader;

        public function FLVParser(startWithFileHeader:Boolean){
            this.savedBytes = new ByteArray();
            if (startWithFileHeader){
                this.state = FLVParserState.FILE_HEADER;
            } else {
                this.state = FLVParserState.TYPE;
            };
        }
        public function flush(output:IDataOutput):void{
            output.writeBytes(this.savedBytes);
        }
        public function parse(input:IDataInput, consumeAll:Boolean, onEachFLVTag:Function):void{
            var _local5:IDataInput;
            var _local7:int;
            var _local4:Boolean;
            var _local6:Date = new Date();
            while (_local4) {
                switch (this.state){
                    case FLVParserState.FILE_HEADER:
                        _local5 = this.byteSource(input, FLVHeader.MIN_FILE_HEADER_BYTE_COUNT);
                        if (_local5 != null){
                            this.flvHeader = new FLVHeader();
                            this.flvHeader.readHeader(_local5);
                            this.state = FLVParserState.FILE_HEADER_REST;
                        } else {
                            _local4 = false;
                        };
                        break;
                    case FLVParserState.FILE_HEADER_REST:
                        _local5 = this.byteSource(input, this.flvHeader.restBytesNeeded);
                        if (_local5 != null){
                            this.flvHeader.readRest(_local5);
                            this.state = FLVParserState.TYPE;
                        } else {
                            _local4 = false;
                        };
                        break;
                    case FLVParserState.TYPE:
                        _local5 = this.byteSource(input, 1);
                        if (_local5 != null){
                            _local7 = _local5.readByte();
                            switch (_local7){
                                case FLVTag.TAG_TYPE_AUDIO:
                                case FLVTag.TAG_TYPE_ENCRYPTED_AUDIO:
                                    this.currentTag = new FLVTagAudio(_local7);
                                    break;
                                case FLVTag.TAG_TYPE_VIDEO:
                                case FLVTag.TAG_TYPE_ENCRYPTED_VIDEO:
                                    this.currentTag = new FLVTagVideo(_local7);
                                    break;
                                case FLVTag.TAG_TYPE_SCRIPTDATAOBJECT:
                                case FLVTag.TAG_TYPE_ENCRYPTED_SCRIPTDATAOBJECT:
                                    this.currentTag = new FLVTagScriptDataObject(_local7);
                                    break;
                                    this.currentTag = new FLVTag(_local7);
                            };
                            this.state = FLVParserState.HEADER;
                        } else {
                            _local4 = false;
                        };
                        break;
                    case FLVParserState.HEADER:
                        _local5 = this.byteSource(input, (FLVTag.TAG_HEADER_BYTE_COUNT - 1));
                        if (_local5 != null){
                            this.currentTag.readRemainingHeader(_local5);
                            if (this.currentTag.dataSize){
                                this.state = FLVParserState.DATA;
                            } else {
                                this.state = FLVParserState.PREV_TAG;
                            };
                        } else {
                            _local4 = false;
                        };
                        break;
                    case FLVParserState.DATA:
                        _local5 = this.byteSource(input, this.currentTag.dataSize);
                        if (_local5 != null){
                            this.currentTag.readData(_local5);
                            this.state = FLVParserState.PREV_TAG;
                        } else {
                            _local4 = false;
                        };
                        break;
                    case FLVParserState.PREV_TAG:
                        _local5 = this.byteSource(input, FLVTag.PREV_TAG_BYTE_COUNT);
                        if (_local5 != null){
                            this.currentTag.readPrevTag(_local5);
                            this.state = FLVParserState.TYPE;
                            _local4 = onEachFLVTag(this.currentTag);
                        } else {
                            _local4 = false;
                        };
                        break;
                        throw (new Error("FLVParser state machine in unknown state"));
                };
            };
            if (consumeAll){
                input.readBytes(this.savedBytes, this.savedBytes.length);
            };
        }
        private function byteSource(input:IDataInput, numBytes:int):IDataInput{
            var _local3:int;
            if ((this.savedBytes.bytesAvailable + input.bytesAvailable) < numBytes){
                return (null);
            };
            if (this.savedBytes.bytesAvailable){
                _local3 = (numBytes - this.savedBytes.bytesAvailable);
                if (_local3 > 0){
                    input.readBytes(this.savedBytes, this.savedBytes.length, _local3);
                };
                return (this.savedBytes);
            };
            this.savedBytes.length = 0;
            return (input);
        }

    }
}//package org.osmf.net.httpstreaming.flv 
﻿package org.osmf.net.httpstreaming {
    import org.osmf.media.*;
    import flash.errors.*;

    public class HTTPStreamingFactory {

        public function createFileHandler(resource:MediaResourceBase):HTTPStreamingFileHandlerBase{
            throw (new IllegalOperationError("The createFileHandler() method must be overriden by derived class."));
        }
        public function createIndexHandler(resource:MediaResourceBase, fileHandler:HTTPStreamingFileHandlerBase):HTTPStreamingIndexHandlerBase{
            throw (new IllegalOperationError("The createIndexHandler() method must be overriden by derived class."));
        }
        public function createIndexInfo(resource:MediaResourceBase):HTTPStreamingIndexInfoBase{
            throw (new IllegalOperationError("The createIndexInfo() methods must be overriden by derived class."));
        }

    }
}//package org.osmf.net.httpstreaming 
﻿package org.osmf.net.httpstreaming {
    import flash.utils.*;

    public interface IHTTPStreamSource {

        function get isReady():Boolean;
        function get endOfStream():Boolean;
        function get isLiveStalled():Boolean;
        function get hasErrors():Boolean;
        function seek(_arg1:Number):void;
        function getBytes():ByteArray;
        function get fragmentDuration():Number;
        function get isBestEffortFetchEnabled():Boolean;

    }
}//package org.osmf.net.httpstreaming 
﻿package org.osmf.net.qos {
    import org.osmf.events.*;
    import flash.net.*;
    import __AS3__.vec.*;

    public class QoSInfoHistory {

        public static const DEFAULT_HISTORY_LENGTH:Number = 10;

        private var history:Vector.<QoSInfo>;
        private var _maxHistoryLength:uint = 0;

        public function QoSInfoHistory(netStream:NetStream, maxHistoryLength:uint=10){
            this.history = new Vector.<QoSInfo>();
            this.maxHistoryLength = maxHistoryLength;
            netStream.addEventListener(QoSInfoEvent.QOS_UPDATE, this.onQoSUpdate);
        }
        public function get length():uint{
            return (this.history.length);
        }
        public function getHistory(count:uint=0):Vector.<QoSInfo>{
            if (count == 0){
                return (this.history.slice());
            };
            return (this.history.slice(0, count));
        }
        public function getLatestQoSInfo():QoSInfo{
            if (this.history.length > 0){
                return (this.history[0]);
            };
            return (null);
        }
        public function get maxHistoryLength():uint{
            return (this._maxHistoryLength);
        }
        public function set maxHistoryLength(length:uint):void{
            if (length == 0){
                throw (new ArgumentError("maxHistoryLength needs to be greater than 0."));
            };
            this._maxHistoryLength = length;
            this.trimHistory();
        }
        public function flush():void{
            this.history = new Vector.<QoSInfo>();
        }
        function addQoSInfo(qosInfo:QoSInfo):void{
            this.history.splice(0, 0, qosInfo);
            this.trimHistory();
        }
        private function onQoSUpdate(event:QoSInfoEvent):void{
            this.addQoSInfo(event.qosInfo);
        }
        private function trimHistory():void{
            if (this.history.length > this._maxHistoryLength){
                this.history.length = this._maxHistoryLength;
            };
        }

    }
}//package org.osmf.net.qos 
﻿package org.osmf.net.qos {

    public class QualityLevel {

        private var _index:uint;
        private var _bitrate:Number;
        private var _streamName:String;

        public function QualityLevel(index:uint, bitrate:Number, streamName:String=null){
            this._index = index;
            this._bitrate = bitrate;
            this._streamName = streamName;
        }
        public function get index():uint{
            return (this._index);
        }
        public function get bitrate():Number{
            return (this._bitrate);
        }
        public function get streamName():String{
            return (this._streamName);
        }

    }
}//package org.osmf.net.qos 
﻿package org.osmf.net.qos {

    public class PlaybackDetails {

        private var _index:uint;
        private var _duration:Number;
        private var _droppedFrames:Number;

        public function PlaybackDetails(index:uint, duration:Number, droppedFrames:Number){
            this._index = index;
            this._duration = duration;
            this._droppedFrames = droppedFrames;
        }
        public function get index():uint{
            return (this._index);
        }
        public function get duration():Number{
            return (this._duration);
        }
        public function set duration(value:Number):void{
            this._duration = value;
        }
        public function get droppedFrames():Number{
            return (this._droppedFrames);
        }
        public function set droppedFrames(value:Number):void{
            this._droppedFrames = value;
        }

    }
}//package org.osmf.net.qos 
﻿package org.osmf.net.qos {
    import flash.net.*;
    import __AS3__.vec.*;

    public class QoSInfo {

        private var _currentIndex:int = -1;
        private var _actualIndex:int = -1;
        private var _lastDownloadedFragmentDetails:FragmentDetails = null;
        private var _timestamp:Number = NaN;
        private var _playheadTime:Number = NaN;
        private var _availableQualityLevels:Vector.<QualityLevel> = null;
        private var _maxFPS:Number = NaN;
        private var _nsInfo:NetStreamInfo = null;
        private var _playbackDetailsRecord:Vector.<PlaybackDetails> = null;
        private var _bufferTime:Number = NaN;
        private var _bufferLength:Number = NaN;
        private var _emptyBufferOccurred:Boolean = false;

        public function QoSInfo(timestamp:Number=NaN, playheadTime:Number=NaN, availableQualityLevels:Vector.<QualityLevel>=null, currentIndex:int=-1, actualIndex:int=-1, lastDownloadedFragmentDetails:FragmentDetails=null, maxFPS:Number=NaN, playbackDetailsRecord:Vector.<PlaybackDetails>=null, nsInfo:NetStreamInfo=null, bufferLength:Number=NaN, bufferTime:Number=NaN, emptyBufferOccurred:Boolean=false){
            this._timestamp = timestamp;
            this._playheadTime = playheadTime;
            this._availableQualityLevels = availableQualityLevels;
            this._currentIndex = currentIndex;
            this._actualIndex = actualIndex;
            this._lastDownloadedFragmentDetails = lastDownloadedFragmentDetails;
            this._maxFPS = maxFPS;
            this._playbackDetailsRecord = playbackDetailsRecord;
            this._nsInfo = nsInfo;
            this._bufferLength = bufferLength;
            this._bufferTime = bufferTime;
            this._emptyBufferOccurred = emptyBufferOccurred;
        }
        public function get timestamp():Number{
            return (this._timestamp);
        }
        public function get playheadTime():Number{
            return (this._playheadTime);
        }
        public function get availableQualityLevels():Vector.<QualityLevel>{
            return (this._availableQualityLevels);
        }
        public function get currentIndex():int{
            return (this._currentIndex);
        }
        public function get actualIndex():int{
            return (this._actualIndex);
        }
        public function get lastDownloadedFragmentDetails():FragmentDetails{
            return (this._lastDownloadedFragmentDetails);
        }
        public function get maxFPS():Number{
            return (this._maxFPS);
        }
        public function get nsInfo():NetStreamInfo{
            return (this._nsInfo);
        }
        public function get playbackDetailsRecord():Vector.<PlaybackDetails>{
            return (this._playbackDetailsRecord);
        }
        public function get bufferLength():Number{
            return (this._bufferLength);
        }
        public function get bufferTime():Number{
            return (this._bufferTime);
        }
        public function get emptyBufferOccurred():Boolean{
            return (this._emptyBufferOccurred);
        }

    }
}//package org.osmf.net.qos 
﻿package org.osmf.net.qos {

    public class FragmentDetails {

        private var _index:uint;
        private var _size:Number;
        private var _playDuration:Number;
        private var _downloadDuration:Number;
        private var _fragmentIdentifier:String;

        public function FragmentDetails(size:Number, playDuration:Number, downloadDuration:Number, index:uint, fragmentIdentifier:String=null){
            this._size = size;
            this._playDuration = playDuration;
            this._downloadDuration = downloadDuration;
            this._index = index;
            this._fragmentIdentifier = fragmentIdentifier;
        }
        public function get size():Number{
            return (this._size);
        }
        public function get playDuration():Number{
            return (this._playDuration);
        }
        public function get downloadDuration():Number{
            return (this._downloadDuration);
        }
        public function get index():uint{
            return (this._index);
        }
        public function get fragmentIdentifier():String{
            return (this._fragmentIdentifier);
        }

    }
}//package org.osmf.net.qos 
﻿package org.osmf.net {
    import org.osmf.media.*;
    import org.osmf.events.*;
    import flash.events.*;
    import flash.utils.*;
    import flash.net.*;
    import org.osmf.traits.*;
    import org.osmf.utils.*;
    import org.osmf.metadata.*;
    import __AS3__.vec.*;

    public class NetLoader extends LoaderBase {

        private static const PROTOCOL_RTMP:String = "rtmp";
        private static const PROTOCOL_RTMPS:String = "rtmps";
        private static const PROTOCOL_RTMPT:String = "rtmpt";
        private static const PROTOCOL_RTMPE:String = "rtmpe";
        private static const PROTOCOL_RTMPTE:String = "rtmpte";
        private static const PROTOCOL_RTMFP:String = "rtmfp";
        private static const PROTOCOL_HTTP:String = "http";
        private static const PROTOCOL_HTTPS:String = "https";
        private static const PROTOCOL_FILE:String = "file";
        private static const PROTOCOL_EMPTY:String = "";
        private static const MEDIA_TYPES_SUPPORTED:Vector.<String> = Vector.<String>([MediaType.VIDEO]);
        private static const MIME_TYPES_SUPPORTED:Vector.<String> = Vector.<String>(["video/x-flv", "video/x-f4v", "video/mp4", "video/mp4v-es", "video/x-m4v", "video/3gpp", "video/3gpp2", "video/quicktime"]);
        private static const STREAM_RECONNECT_TIMEOUT:Number = 120000;
        private static const STREAM_RECONNECT_TIMER_INTERVAL:int = 1000;

        private var netConnectionFactory:NetConnectionFactoryBase;
        private var pendingLoads:Dictionary;
        private var oldConnectionURLs:Dictionary;
        private var _reconnectStreams:Boolean = true;
        private var _reconnectTimeout:Number;

        public function NetLoader(factory:NetConnectionFactoryBase=null){
            this.pendingLoads = new Dictionary();
            this.oldConnectionURLs = new Dictionary();
            super();
            this._reconnectTimeout = STREAM_RECONNECT_TIMEOUT;
            this.netConnectionFactory = ((factory) || (new NetConnectionFactory()));
            this.netConnectionFactory.addEventListener(NetConnectionFactoryEvent.CREATION_COMPLETE, this.onCreationComplete);
            this.netConnectionFactory.addEventListener(NetConnectionFactoryEvent.CREATION_ERROR, this.onCreationError);
        }
        override public function canHandleResource(resource:MediaResourceBase):Boolean{
            var _local2:int = MediaTypeUtil.checkMetadataMatchWithResource(resource, MEDIA_TYPES_SUPPORTED, MIME_TYPES_SUPPORTED);
            if (_local2 != MediaTypeUtil.METADATA_MATCH_UNKNOWN){
                return ((_local2 == MediaTypeUtil.METADATA_MATCH_FOUND));
            };
            var _local3:URLResource = (resource as URLResource);
            var _local4:RegExp = new RegExp(".flv$|.f4v$|.m3u8$|.mov$|.mp4$|.mp4v$|.m4v$|.3gp$|.3gpp2$|.3g2$", "i");
            var _local5:URL = ((_local3)!=null) ? new URL(_local3.url) : null;
            if ((((((_local5 == null)) || ((_local5.rawUrl == null)))) || ((_local5.rawUrl.length <= 0)))){
                return (false);
            };
            if (_local5.protocol == ""){
                return (_local4.test(_local5.path));
            };
            if (NetStreamUtils.isRTMPStream(_local5.rawUrl)){
                return (true);
            };
            if (_local5.protocol.search(/file$|http$|https$/i) != -1){
                return ((((((((_local5.path == null)) || ((_local5.path.length <= 0)))) || ((_local5.extension.length == 0)))) || (_local4.test(_local5.path))));
            };
            return (false);
        }
        protected function createNetStream(connection:NetConnection, resource:URLResource):NetStream{
            var _local3:NetStream = new NetStream(connection);
            var _local4:StreamingURLResource = (resource as StreamingURLResource);
            if (((((!((_local4 == null))) && ((_local4.streamType == StreamType.LIVE)))) && ((_local3.bufferTime == 0)))){
                _local3.bufferTime = 0.1;
            };
            return (_local3);
        }
        protected function createNetStreamSwitchManager(connection:NetConnection, netStream:NetStream, dsResource:DynamicStreamingResource):NetStreamSwitchManagerBase{
            return (null);
        }
        protected function processFinishLoading(loadTrait:NetStreamLoadTrait):void{
            updateLoadTrait(loadTrait, LoadState.READY);
        }
        override protected function executeLoad(loadTrait:LoadTrait):void{
            updateLoadTrait(loadTrait, LoadState.LOADING);
            var _local2:URL = new URL((loadTrait.resource as URLResource).url);
            switch (_local2.protocol){
                case PROTOCOL_RTMP:
                case PROTOCOL_RTMPS:
                case PROTOCOL_RTMPT:
                case PROTOCOL_RTMPE:
                case PROTOCOL_RTMPTE:
                case PROTOCOL_RTMFP:
                    this.startLoadingRTMP(loadTrait);
                    break;
                case PROTOCOL_HTTP:
                case PROTOCOL_HTTPS:
                case PROTOCOL_FILE:
                case PROTOCOL_EMPTY:
                    this.startLoadingHTTP(loadTrait);
                    break;
                    updateLoadTrait(loadTrait, LoadState.LOAD_ERROR);
                    loadTrait.dispatchEvent(new MediaErrorEvent(MediaErrorEvent.MEDIA_ERROR, false, false, new MediaError(MediaErrorCodes.URL_SCHEME_INVALID)));
            };
        }
        override protected function executeUnload(loadTrait:LoadTrait):void{
            updateLoadTrait(loadTrait, LoadState.UNLOADING);
            var _local2:NetStreamLoadTrait = (loadTrait as NetStreamLoadTrait);
            if (_local2 != null){
                if (_local2.netStream != null){
                    _local2.netStream.close();
                };
                if (_local2.netConnectionFactory != null){
                    _local2.netConnectionFactory.closeNetConnection(_local2.connection);
                } else {
                    if (_local2.connection != null){
                        _local2.connection.close();
                    };
                };
            };
            if (this.oldConnectionURLs != null){
                delete this.oldConnectionURLs[loadTrait.resource];
            };
            updateLoadTrait(loadTrait, LoadState.UNINITIALIZED);
        }
        private function finishLoading(connection:NetConnection, loadTrait:LoadTrait, factory:NetConnectionFactoryBase=null):void{
            var _local5:NetStream;
            var _local6:DynamicStreamingResource;
            var _local4:NetStreamLoadTrait = (loadTrait as NetStreamLoadTrait);
            if (_local4 != null){
                _local4.connection = connection;
                _local5 = this.createNetStream(connection, (_local4.resource as URLResource));
                _local5.client = new NetClient();
                _local4.netStream = _local5;
                _local6 = (loadTrait.resource as DynamicStreamingResource);
                if (_local6 != null){
                    _local4.switchManager = this.createNetStreamSwitchManager(connection, _local5, _local6);
                };
                _local4.netConnectionFactory = factory;
                if (((((this._reconnectStreams) && ((_local4.resource is URLResource)))) && (this.supportsStreamReconnect((_local4.resource as URLResource))))){
                    this.setupStreamReconnect(_local4);
                };
                this.processFinishLoading((loadTrait as NetStreamLoadTrait));
            };
        }
        private function supportsStreamReconnect(resource:URLResource):Boolean{
            var _local3:String;
            var _local4:Array;
            var _local5:int;
            var _local6:int;
            var _local7:int;
            var _local2:Boolean;
            if (NetStreamUtils.isRTMPStream(resource.url)){
                _local3 = (resource.getMetadataValue(MetadataNamespaces.FMS_SERVER_VERSION_METADATA) as String);
                if (((!((_local3 == null))) && ((_local3.length > 0)))){
                    _local4 = _local3.split(",");
                    if (_local4.length >= 3){
                        _local5 = _local4[0];
                        _local6 = _local4[1];
                        _local7 = _local4[2];
                        if ((((((_local5 < 3)) || ((((_local5 == 3)) && ((_local6 < 5)))))) || ((((((_local5 == 3)) && ((_local6 == 5)))) && ((_local7 < 3)))))){
                            _local2 = false;
                        };
                    };
                };
            } else {
                _local2 = false;
            };
            return (_local2);
        }
        private function startLoadingRTMP(loadTrait:LoadTrait):void{
            this.addPendingLoad(loadTrait);
            this.netConnectionFactory.create((loadTrait.resource as URLResource));
        }
        private function onCreationComplete(event:NetConnectionFactoryEvent):void{
            this.processCreationComplete(event.netConnection, this.findAndRemovePendingLoad(event.resource), (event.currentTarget as NetConnectionFactoryBase));
        }
        protected function processCreationComplete(connection:NetConnection, loadTrait:LoadTrait, factory:NetConnectionFactoryBase=null):void{
            this.finishLoading(connection, loadTrait, factory);
        }
        private function onCreationError(event:NetConnectionFactoryEvent):void{
            var _local2:LoadTrait = this.findAndRemovePendingLoad(event.resource);
            if (_local2 != null){
                _local2.dispatchEvent(new MediaErrorEvent(MediaErrorEvent.MEDIA_ERROR, false, false, event.mediaError));
                updateLoadTrait(_local2, LoadState.LOAD_ERROR);
            };
        }
        private function startLoadingHTTP(loadTrait:LoadTrait):void{
            var _local2:NetConnection = new NetConnection();
            _local2.client = new NetClient();
            _local2.connect(null);
            this.finishLoading(_local2, loadTrait);
        }
        private function addPendingLoad(loadTrait:LoadTrait):void{
            if (this.pendingLoads[loadTrait.resource] == null){
                this.pendingLoads[loadTrait.resource] = [loadTrait];
            } else {
                this.pendingLoads[loadTrait.resource].push(loadTrait);
            };
        }
        private function findAndRemovePendingLoad(resource:URLResource):LoadTrait{
            var _local4:int;
            var _local2:LoadTrait;
            var _local3:Array = this.pendingLoads[resource];
            if (_local3 != null){
                if (_local3.length == 1){
                    _local2 = (_local3[0] as LoadTrait);
                    delete this.pendingLoads[resource];
                } else {
                    _local4 = 0;
                    while (_local4 < _local3.length) {
                        _local2 = _local3[_local4];
                        if (_local2.resource == resource){
                            _local3.splice(_local4, 1);
                            break;
                        };
                        _local4++;
                    };
                };
            };
            return (_local2);
        }
        public function get reconnectTimeout():Number{
            return (this._reconnectTimeout);
        }
        public function set reconnectTimeout(value:Number):void{
            if (value < 0){
                throw (new ArgumentError(OSMFStrings.getString(OSMFStrings.INVALID_PARAM)));
            };
            this._reconnectTimeout = value;
        }
        protected function setReconnectStreams(value:Boolean):void{
            this._reconnectStreams = value;
        }
        public function get reconnectStreams():Boolean{
            return (this._reconnectStreams);
        }
        protected function createReconnectNetConnection():NetConnection{
            return (new NetConnection());
        }
        protected function reconnect(netConnection:NetConnection, resource:URLResource):void{
            var _local3:String = (this.oldConnectionURLs[resource] as String);
            if (((((!((_local3 == null))) && ((_local3.length > 0)))) && (!((netConnection == null))))){
                netConnection.connect(_local3);
            };
        }
        protected function reconnectStream(loadTrait:NetStreamLoadTrait):void{
            var _local2:NetStreamPlayOptions = new NetStreamPlayOptions();
            loadTrait.netStream.attach(loadTrait.connection);
            _local2.transition = NetStreamPlayTransitions.RESUME;
            var _local3:URLResource = (loadTrait.resource as URLResource);
            var _local4:Boolean = (((_local3 as StreamingURLResource))!=null) ? (_local3 as StreamingURLResource).urlIncludesFMSApplicationInstance : false;
            var _local5:String = NetStreamUtils.getStreamNameFromURL(_local3.url, _local4);
            _local2.streamName = _local5;
            loadTrait.netStream.play2(_local2);
        }
        private function setupStreamReconnect(loadTrait:NetStreamLoadTrait):void{
            var netConnection:* = null;
            var reconnectTimer:* = null;
            var timeoutTimer:* = null;
            var streamIsPaused:* = false;
            var bufferIsEmpty:* = false;
            var reconnectHasTimedOut:* = false;
            var fmsIdleTimeoutReached:* = false;
            var onNetStatus:* = null;
            var onTimeoutTimer:* = null;
            var onReconnectTimer:* = null;
            var loadTrait:* = loadTrait;
            var setupReconnectTimer:* = function (add:Boolean=true):void{
                if (add){
                    reconnectTimer.addEventListener(TimerEvent.TIMER_COMPLETE, onReconnectTimer);
                } else {
                    reconnectTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, onReconnectTimer);
                    reconnectTimer = null;
                };
            };
            var setupTimeoutTimer:* = function (add:Boolean=true):void{
                if (add){
                    if (_reconnectTimeout > 0){
                        timeoutTimer = new Timer(_reconnectTimeout, 1);
                        timeoutTimer.addEventListener(TimerEvent.TIMER_COMPLETE, onTimeoutTimer);
                    };
                } else {
                    if (timeoutTimer != null){
                        timeoutTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, onTimeoutTimer);
                        timeoutTimer = null;
                    };
                };
            };
            var setupNetConnectionListeners:* = function (add:Boolean=true):void{
                if (add){
                    netConnection.addEventListener(NetStatusEvent.NET_STATUS, onNetStatus);
                } else {
                    netConnection.removeEventListener(NetStatusEvent.NET_STATUS, onNetStatus);
                };
            };
            var setupNetStreamListeners:* = function (add:Boolean=true):void{
                if (loadTrait.netStream != null){
                    if (add){
                        loadTrait.netStream.addEventListener(NetStatusEvent.NET_STATUS, onNetStatus);
                    } else {
                        loadTrait.netStream.removeEventListener(NetStatusEvent.NET_STATUS, onNetStatus);
                    };
                };
            };
            onNetStatus = function (event:NetStatusEvent):void{
                var _local2:NetConnection;
                switch (event.info.code){
                    case NetConnectionCodes.CONNECT_SUCCESS:
                        _local2 = loadTrait.connection;
                        loadTrait.connection = netConnection;
                        oldConnectionURLs[loadTrait.resource] = netConnection.uri;
                        if (timeoutTimer != null){
                            timeoutTimer.stop();
                        };
                        reconnectStream(loadTrait);
                        if (loadTrait.netConnectionFactory != null){
                            loadTrait.netConnectionFactory.closeNetConnection(_local2);
                        } else {
                            _local2.close();
                        };
                        break;
                    case NetConnectionCodes.CONNECT_IDLE_TIME_OUT:
                        fmsIdleTimeoutReached = true;
                        break;
                    case NetConnectionCodes.CONNECT_CLOSED:
                    case NetConnectionCodes.CONNECT_FAILED:
                        if ((((((loadTrait.loadState == LoadState.READY)) && (!(reconnectHasTimedOut)))) && (!(fmsIdleTimeoutReached)))){
                            reconnectTimer.start();
                            if (((((bufferIsEmpty) || ((loadTrait.netStream.bufferLength == 0)))) || (streamIsPaused))){
                                if (timeoutTimer != null){
                                    timeoutTimer.start();
                                } else {
                                    reconnectHasTimedOut = true;
                                    setupReconnectTimer(false);
                                    setupNetConnectionListeners(false);
                                    setupNetStreamListeners(false);
                                    setupTimeoutTimer(false);
                                };
                            };
                        } else {
                            setupReconnectTimer(false);
                            setupNetConnectionListeners(false);
                            setupNetStreamListeners(false);
                            setupTimeoutTimer(false);
                        };
                        break;
                    case NetStreamCodes.NETSTREAM_PAUSE_NOTIFY:
                        streamIsPaused = true;
                        break;
                    case NetStreamCodes.NETSTREAM_UNPAUSE_NOTIFY:
                        streamIsPaused = false;
                        break;
                    case NetStreamCodes.NETSTREAM_BUFFER_EMPTY:
                        if (!netConnection.connected){
                            if (timeoutTimer != null){
                                timeoutTimer.start();
                            } else {
                                reconnectHasTimedOut = true;
                            };
                        } else {
                            bufferIsEmpty = true;
                        };
                        break;
                    case NetStreamCodes.NETSTREAM_BUFFER_FULL:
                        bufferIsEmpty = false;
                        break;
                };
            };
            onTimeoutTimer = function (event:TimerEvent):void{
                reconnectHasTimedOut = true;
            };
            onReconnectTimer = function (event:TimerEvent):void{
                if (reconnectHasTimedOut){
                    return;
                };
                if (netConnection === loadTrait.connection){
                    setupNetConnectionListeners(false);
                    netConnection = createReconnectNetConnection();
                    netConnection.client = new NetClient();
                    setupNetConnectionListeners();
                };
                reconnect(netConnection, (loadTrait.resource as URLResource));
            };
            netConnection = loadTrait.connection;
            reconnectTimer = new Timer(STREAM_RECONNECT_TIMER_INTERVAL, 1);
            this.oldConnectionURLs[loadTrait.resource] = netConnection.uri;
            streamIsPaused = false;
            bufferIsEmpty = false;
            reconnectHasTimedOut = false;
            fmsIdleTimeoutReached = false;
            setupNetConnectionListeners();
            setupNetStreamListeners();
            setupReconnectTimer();
            return;
            /*not popped
            setupTimeoutTimer()
            */
        }

    }
}//package org.osmf.net 
﻿package org.osmf.net {
    import org.osmf.media.*;
    import org.osmf.events.*;
    import flash.events.*;
    import flash.utils.*;
    import flash.net.*;
    import org.osmf.net.*;
    import org.osmf.metadata.*;
    import __AS3__.vec.*;
    import flash.errors.*;

    class NetNegotiator extends EventDispatcher {

        private var resource:URLResource;
        private var netConnectionURLs:Vector.<String>;
        private var netConnections:Vector.<NetConnection>;
        private var netConnectionArguments:Vector.<Object>;
        private var failedConnectionCount:int;
        private var timeOutTimer:Timer;
        private var connectionTimer:Timer;
        private var attemptIndex:int;
        private var mediaError:MediaError;
        private var connectionAttemptInterval:Number;
        private var _timeout:Number;

        public function NetNegotiator(connectionAttemptInterval:Number, timeout:Number=10000):void{
            this.connectionAttemptInterval = connectionAttemptInterval;
            this._timeout = timeout;
        }
        public function get timeout():Number{
            return (this._timeout);
        }
        public function set timeout(value:Number):void{
            this._timeout = value;
        }
        public function createNetConnection(resource:URLResource, netConnectionURLs:Vector.<String>, netConnections:Vector.<NetConnection>):void{
            this.resource = resource;
            this.netConnectionURLs = netConnectionURLs;
            this.netConnections = netConnections;
            var _local4:StreamingURLResource = (resource as StreamingURLResource);
            if (((((!((_local4 == null))) && (!((_local4.connectionArguments == null))))) && ((_local4.connectionArguments.length > 0)))){
                this.netConnectionArguments = _local4.connectionArguments;
            };
            this.initializeConnectionAttempts();
            this.tryToConnect(null);
        }
        private function initializeConnectionAttempts():void{
            this.timeOutTimer = new Timer(this._timeout, 1);
            this.timeOutTimer.addEventListener(TimerEvent.TIMER_COMPLETE, this.masterTimeout);
            this.timeOutTimer.start();
            this.connectionTimer = new Timer(this.connectionAttemptInterval);
            this.connectionTimer.addEventListener(TimerEvent.TIMER, this.tryToConnect);
            this.connectionTimer.start();
            this.failedConnectionCount = 0;
            this.attemptIndex = 0;
        }
        private function tryToConnect(evt:TimerEvent):void{
            var rs:* = null;
            var host:* = null;
            var args:* = null;
            var arg:* = null;
            var evt:* = evt;
            this.netConnections[this.attemptIndex].addEventListener(NetStatusEvent.NET_STATUS, this.onNetStatus, false, 0, true);
            this.netConnections[this.attemptIndex].addEventListener(SecurityErrorEvent.SECURITY_ERROR, this.onNetSecurityError, false, 0, true);
            this.netConnections[this.attemptIndex].addEventListener(AsyncErrorEvent.ASYNC_ERROR, this.onAsyncError, false, 0, true);
            this.netConnections[this.attemptIndex].client = new NetClient();
            try {
                rs = (this.resource as MulticastResource);
                if (((((!((rs == null))) && (!((rs.groupspec == null))))) && ((rs.groupspec.length > 0)))){
                    NetConnection(this.netConnections[this.attemptIndex]).connect(rs.url);
                } else {
                    host = this.netConnectionURLs[this.attemptIndex];
                    args = [host];
                    if (this.netConnectionArguments != null){
                        for each (arg in this.netConnectionArguments) {
                            args.push(arg);
                        };
                    };
                    NetConnection(this.netConnections[this.attemptIndex]).connect.apply(this.netConnections[this.attemptIndex], args);
                };
                this.attemptIndex++;
                if (this.attemptIndex >= this.netConnectionURLs.length){
                    this.connectionTimer.stop();
                };
            } catch(ioError:IOError) {
                handleFailedConnectionSession(new MediaError(MediaErrorCodes.IO_ERROR, ioError.message), netConnectionURLs[attemptIndex]);
            } catch(argumentError:ArgumentError) {
                handleFailedConnectionSession(new MediaError(MediaErrorCodes.ARGUMENT_ERROR, argumentError.message), netConnectionURLs[attemptIndex]);
            } catch(securityError:SecurityError) {
                handleFailedConnectionSession(new MediaError(MediaErrorCodes.SECURITY_ERROR, securityError.message), netConnectionURLs[attemptIndex]);
            };
        }
        private function onNetStatus(event:NetStatusEvent):void{
            var index:* = 0;
            var tempTimer:* = null;
            var onTempTimer:* = null;
            var event:* = event;
            switch (event.info.code){
                case NetConnectionCodes.CONNECT_INVALIDAPP:
                    this.handleFailedConnectionSession(new MediaError(MediaErrorCodes.NETCONNECTION_APPLICATION_INVALID, event.info.description), NetConnection(event.target).uri);
                    break;
                case NetConnectionCodes.CONNECT_REJECTED:
                    if (((event.info.hasOwnProperty("ex")) && ((event.info.ex.code == 302)))){
                        onTempTimer = function (event:TimerEvent):void{
                            tempTimer.removeEventListener(TimerEvent.TIMER, onTempTimer);
                            tempTimer.stop();
                            tryToConnect(null);
                        };
                        index = this.netConnections.indexOf((event.target as NetConnection));
                        this.netConnectionURLs[index] = event.info.ex.redirect;
                        this.attemptIndex = index;
                        tempTimer = new Timer(100, 1);
                        tempTimer.addEventListener(TimerEvent.TIMER, onTempTimer);
                        tempTimer.start();
                    } else {
                        this.handleFailedConnectionSession(new MediaError(MediaErrorCodes.NETCONNECTION_REJECTED, event.info.description), NetConnection(event.target).uri);
                    };
                    break;
                case NetConnectionCodes.CONNECT_FAILED:
                    this.failedConnectionCount++;
                    if (this.failedConnectionCount >= this.netConnectionURLs.length){
                        this.handleFailedConnectionSession(new MediaError(MediaErrorCodes.NETCONNECTION_FAILED), NetConnection(event.target).uri);
                    };
                    break;
                case NetConnectionCodes.CONNECT_SUCCESS:
                    if (((event.info.hasOwnProperty("data")) && (event.info.data.hasOwnProperty("version")))){
                        this.resource.addMetadataValue(MetadataNamespaces.FMS_SERVER_VERSION_METADATA, event.info.data.version);
                    };
                    this.shutDownUnsuccessfulConnections();
                    dispatchEvent(new NetConnectionFactoryEvent(NetConnectionFactoryEvent.CREATION_COMPLETE, false, false, (event.currentTarget as NetConnection), this.resource));
                    break;
                case "NetStream.Publish.Start":
                    break;
            };
        }
        private function shutDownUnsuccessfulConnections():void{
            var _local2:NetConnection;
            this.timeOutTimer.stop();
            this.connectionTimer.stop();
            var _local1:int;
            while (_local1 < this.netConnections.length) {
                _local2 = this.netConnections[_local1];
                if (!_local2.connected){
                    _local2.removeEventListener(NetStatusEvent.NET_STATUS, this.onNetStatus);
                    _local2.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, this.onNetSecurityError);
                    _local2.removeEventListener(AsyncErrorEvent.ASYNC_ERROR, this.onAsyncError);
                    _local2.close();
                    this.netConnections.splice(_local1, 1);
                } else {
                    _local1++;
                };
            };
        }
        private function handleFailedConnectionSession(mediaError:MediaError, url:String):void{
            this.shutDownUnsuccessfulConnections();
            dispatchEvent(new NetConnectionFactoryEvent(NetConnectionFactoryEvent.CREATION_ERROR, false, false, null, this.resource, mediaError));
        }
        private function onNetSecurityError(event:SecurityErrorEvent):void{
            this.handleFailedConnectionSession(new MediaError(MediaErrorCodes.SECURITY_ERROR, event.text), NetConnection(event.target).uri);
        }
        private function onAsyncError(event:AsyncErrorEvent):void{
            this.handleFailedConnectionSession(new MediaError(MediaErrorCodes.ASYNC_ERROR, event.text), NetConnection(event.target).uri);
        }
        private function masterTimeout(event:TimerEvent):void{
            this.handleFailedConnectionSession(new MediaError(MediaErrorCodes.NETCONNECTION_TIMEOUT, ("" + this._timeout)), "");
        }

    }
}//package org.osmf.net 
﻿package org.osmf.net {
    import flash.net.*;
    import org.osmf.traits.*;
    import flash.media.*;

    public class NetStreamAudioTrait extends AudioTrait {

        private var netStream:NetStream;

        public function NetStreamAudioTrait(netStream:NetStream){
            this.netStream = netStream;
        }
        override protected function volumeChangeStart(newVolume:Number):void{
            var _local2:SoundTransform = this.netStream.soundTransform;
            _local2.volume = ((muted) ? 0 : newVolume);
            this.netStream.soundTransform = _local2;
        }
        override protected function mutedChangeStart(newMuted:Boolean):void{
            var _local2:SoundTransform = this.netStream.soundTransform;
            _local2.volume = ((newMuted) ? 0 : volume);
            this.netStream.soundTransform = _local2;
        }
        override protected function panChangeStart(newPan:Number):void{
            var _local2:SoundTransform = this.netStream.soundTransform;
            _local2.pan = newPan;
            this.netStream.soundTransform = _local2;
        }

    }
}//package org.osmf.net 
﻿package org.osmf.net {
    import flash.events.*;
    import flash.utils.*;
    import flash.net.*;
    import org.osmf.traits.*;
    import org.osmf.media.videoClasses.*;

    public class NetStreamSeekTrait extends SeekTrait {

        private var videoSurface:VideoSurface = null;
        private var loadTrait:LoadTrait;
        private var audioDelay:Number = 0;
        private var seekBugTimer:Timer;
        private var netStream:NetStream;
        private var expectedTime:Number;
        private var previousTime:Number;
        private var suppressSeekNotifyEvent:Boolean = false;

        public function NetStreamSeekTrait(temporal:TimeTrait, loadTrait:LoadTrait, netStream:NetStream, videoSurface:VideoSurface=null){
            super(temporal);
            this.netStream = netStream;
            this.videoSurface = videoSurface;
            this.loadTrait = loadTrait;
            if (netStream != null){
                if (netStream.client != null){
                    NetClient(netStream.client).addHandler(NetStreamCodes.ON_META_DATA, this.onMetaData);
                };
                netStream.addEventListener(NetStatusEvent.NET_STATUS, this.onNetStatus);
            };
            this.seekBugTimer = new Timer(10, 100);
            this.seekBugTimer.addEventListener(TimerEvent.TIMER, this.onSeekBugTimer, false, 0, true);
            this.seekBugTimer.addEventListener(TimerEvent.TIMER_COMPLETE, this.onSeekBugTimerDone, false, 0, true);
        }
        override public function canSeekTo(time:Number):Boolean{
            var _local3:Number;
            var _local2:Boolean = super.canSeekTo(time);
            if (((((((_local2) && (!(isNaN(this.loadTrait.bytesTotal))))) && ((this.loadTrait.bytesTotal > 0)))) && (this.useSeekLimitation))){
                _local3 = (timeTrait.duration * Number((this.loadTrait.bytesLoaded / this.loadTrait.bytesTotal)));
                _local2 = (time <= _local3);
            };
            return (_local2);
        }
        override protected function seekingChangeStart(newSeeking:Boolean, time:Number):void{
            if (newSeeking){
                this.suppressSeekNotifyEvent = false;
                this.previousTime = (this.netStream.time - this.audioDelay);
                this.expectedTime = time;
                this.netStream.seek((time + this.audioDelay));
                if (this.previousTime == this.expectedTime){
                    this.seekBugTimer.start();
                    this.suppressSeekNotifyEvent = true;
                };
            };
        }
        override protected function seekingChangeEnd(time:Number):void{
            var _local2:NetStreamTimeTrait;
            super.seekingChangeEnd(time);
            if ((((seeking == true)) && (!((this.videoSurface == null))))){
                _local2 = (timeTrait as NetStreamTimeTrait);
                if (((!((_local2 == null))) && (((_local2.currentTime + _local2.audioDelay) >= _local2.duration)))){
                    this.videoSurface.clear();
                };
            };
        }
        private function onMetaData(value:Object):void{
            this.audioDelay = ((value.hasOwnProperty("audiodelay")) ? value.audiodelay : 0);
        }
        private function onNetStatus(event:NetStatusEvent):void{
            switch (event.info.code){
                case NetStreamCodes.NETSTREAM_SEEK_NOTIFY:
                    this.runSeekBugTimer();
                    break;
                case NetStreamCodes.NETSTREAM_SEEK_INVALIDTIME:
                case NetStreamCodes.NETSTREAM_SEEK_FAILED:
                    setSeeking(false, this.previousTime);
                    break;
                case NetStreamCodes.NETSTREAM_PLAY_START:
                case NetStreamCodes.NETSTREAM_PLAY_RESET:
                case NetStreamCodes.NETSTREAM_PAUSE_NOTIFY:
                case NetStreamCodes.NETSTREAM_PLAY_STOP:
                case NetStreamCodes.NETSTREAM_UNPAUSE_NOTIFY:
                    if (((seeking) && ((this.seekBugTimer.running == false)))){
                        this.runSeekBugTimer();
                    };
                    break;
            };
        }
        private function runSeekBugTimer():void{
            if (this.suppressSeekNotifyEvent == false){
                this.seekBugTimer.start();
            } else {
                this.suppressSeekNotifyEvent = false;
            };
        }
        private function onSeekBugTimer(event:TimerEvent):void{
            if (((!((this.previousTime == (this.netStream.time - this.audioDelay)))) || ((this.previousTime == this.expectedTime)))){
                this.onSeekBugTimerDone(null);
            };
        }
        private function onSeekBugTimerDone(event:TimerEvent):void{
            this.seekBugTimer.reset();
            setSeeking(false, this.expectedTime);
        }
        private function get useSeekLimitation():Boolean{
            return (!((((((this.loadTrait.bytesLoaded == 0)) && (!((this.videoSurface == null))))) && ((this.videoSurface.info.renderStatus == "accelerated")))));
        }

    }
}//package org.osmf.net 
﻿package org.osmf.net {
    import flash.events.*;
    import flash.net.*;
    import org.osmf.traits.*;
    import org.osmf.utils.*;

    public class NetStreamDynamicStreamTrait extends DynamicStreamTrait {

        private var netStream:NetStream;
        private var switchManager:NetStreamSwitchManagerBase;
        private var inSetSwitching:Boolean;
        private var dsResource:DynamicStreamingResource;
        private var indexToSwitchTo:int;
        private var index:int;

        public function NetStreamDynamicStreamTrait(netStream:NetStream, switchManager:NetStreamSwitchManagerBase, dsResource:DynamicStreamingResource){
            super(switchManager.autoSwitch, switchManager.currentIndex, dsResource.streamItems.length);
            this.netStream = netStream;
            this.switchManager = switchManager;
            this.dsResource = dsResource;
            netStream.addEventListener(NetStatusEvent.NET_STATUS, this.onNetStatus, false, int.MAX_VALUE);
            NetClient(netStream.client).addHandler(NetStreamCodes.ON_PLAY_STATUS, this.onPlayStatus);
        }
        override public function dispose():void{
            this.netStream = null;
            this.switchManager = null;
        }
        override public function getBitrateForIndex(index:int):Number{
            if ((((index > (numDynamicStreams - 1))) || ((index < 0)))){
                throw (new RangeError(OSMFStrings.getString(OSMFStrings.STREAMSWITCH_INVALID_INDEX)));
            };
            return (this.dsResource.streamItems[index].bitrate);
        }
        override protected function switchingChangeStart(newSwitching:Boolean, index:int):void{
            if (((newSwitching) && (!(this.inSetSwitching)))){
                this.indexToSwitchTo = index;
            };
        }
        override protected function switchingChangeEnd(index:int):void{
            var _local2:int;
            if (((!(switching)) || (this.inSetSwitching))){
                super.switchingChangeEnd(index);
            } else {
                _local2 = -1;
                if (this.switchManager.hasOwnProperty("actualIndex")){
                    _local2 = this.switchManager["actualIndex"];
                };
                if (this.indexToSwitchTo != _local2){
                    this.switchManager.switchTo(this.indexToSwitchTo);
                } else {
                    setSwitching(false, this.indexToSwitchTo);
                };
            };
        }
        override protected function autoSwitchChangeStart(value:Boolean):void{
            this.switchManager.autoSwitch = value;
        }
        override protected function maxAllowedIndexChangeStart(value:int):void{
            this.switchManager.maxAllowedIndex = value;
        }
        private function onNetStatus(event:NetStatusEvent):void{
            var _local2:int;
            switch (event.info.code){
                case NetStreamCodes.NETSTREAM_PLAY_START:
                    if (event.info.details){
                        this.index = this.dsResource.indexFromName(event.info.details);
                        if (this.index != this.currentIndex){
                            this.inSetSwitching = true;
                            setSwitching(true, this.index);
                            this.inSetSwitching = false;
                        };
                        setSwitching(false, this.index);
                    };
                    break;
                case NetStreamCodes.NETSTREAM_PLAY_TRANSITION:
                    this.index = this.dsResource.indexFromName(event.info.details);
                    if (this.index >= 0){
                        _local2 = -1;
                        if (this.switchManager.hasOwnProperty("actualIndex")){
                            _local2 = this.switchManager["actualIndex"];
                        };
                        if (this.index != _local2){
                            this.inSetSwitching = true;
                            setSwitching(true, this.index);
                            this.inSetSwitching = false;
                        };
                    };
                    break;
                case NetStreamCodes.NETSTREAM_PLAY_FAILED:
                    setSwitching(false, currentIndex);
                    break;
            };
        }
        private function onPlayStatus(event:Object):void{
            switch (event.code){
                case NetStreamCodes.NETSTREAM_PLAY_TRANSITION_COMPLETE:
                    if (((!(event.hasOwnProperty("details"))) || ((this.dsResource.indexFromName(event.details) >= 0)))){
                        setSwitching(false, this.switchManager.currentIndex);
                    };
                    break;
            };
        }

    }
}//package org.osmf.net 
﻿package org.osmf.net {
    import org.osmf.media.*;
    import flash.events.*;
    import flash.net.*;
    import org.osmf.traits.*;

    public class MulticastNetLoader extends NetLoader {

        public function MulticastNetLoader(factory:NetConnectionFactoryBase=null){
            var _local2:NetConnectionFactory;
            if (factory == null){
                _local2 = new NetConnectionFactory();
                _local2.timeout = 60000;
            };
            super(((factory)!=null) ? factory : _local2);
        }
        override public function canHandleResource(resource:MediaResourceBase):Boolean{
            var _local2:MulticastResource = (resource as MulticastResource);
            return (((((((((!((_local2 == null))) && (!((_local2.groupspec == null))))) && ((_local2.groupspec.length > 0)))) && (!((_local2.streamName == null))))) && ((_local2.streamName.length > 0))));
        }
        override protected function createNetStream(connection:NetConnection, resource:URLResource):NetStream{
            var _local3:MulticastResource = (resource as MulticastResource);
            var _local4:NetStream = new NetStream(connection, _local3.groupspec);
            return (_local4);
        }
        private function doProcessCreationComplete(connection:NetConnection, loadTrait:LoadTrait, factory:NetConnectionFactoryBase=null):void{
            super.processCreationComplete(connection, loadTrait, factory);
        }
        override protected function processCreationComplete(connection:NetConnection, loadTrait:LoadTrait, factory:NetConnectionFactoryBase=null):void{
            var netLoadTrait:* = null;
            var netGroup:* = null;
            var onNetStatus:* = null;
            var connection:* = connection;
            var loadTrait:* = loadTrait;
            var factory = factory;
            onNetStatus = function (event:NetStatusEvent):void{
                switch (event.info.code){
                    case "NetGroup.Connect.Success":
                        connection.removeEventListener(NetStatusEvent.NET_STATUS, onNetStatus);
                        netLoadTrait.netGroup = netGroup;
                        doProcessCreationComplete(connection, loadTrait, factory);
                        break;
                    case "NetGroup.Connect.Failed":
                    case "NetGroup.Connect.Rejected":
                        connection.removeEventListener(NetStatusEvent.NET_STATUS, onNetStatus);
                        updateLoadTrait(loadTrait, LoadState.LOAD_ERROR);
                        break;
                };
            };
            netLoadTrait = (loadTrait as NetStreamLoadTrait);
            var multicastResource:* = (netLoadTrait.resource as MulticastResource);
            connection.addEventListener(NetStatusEvent.NET_STATUS, onNetStatus);
            netGroup = new NetGroup(connection, multicastResource.groupspec);
        }

    }
}//package org.osmf.net 
﻿package org.osmf.net {

    public final class StreamingItemType {

        public static const VIDEO:String = "video";
        public static const AUDIO:String = "audio";

    }
}//package org.osmf.net 
﻿package org.osmf.net {
    import org.osmf.media.*;
    import org.osmf.events.*;
    import flash.utils.*;
    import flash.net.*;
    import org.osmf.utils.*;
    import __AS3__.vec.*;

    public class NetConnectionFactory extends NetConnectionFactoryBase {

        private static const DEFAULT_TIMEOUT:Number = 10000;
        private static const DEFAULT_PORTS:String = "1935,443,80";
        private static const DEFAULT_PROTOCOLS_FOR_RTMP:String = "rtmp,rtmpt,rtmps";
        private static const DEFAULT_PROTOCOLS_FOR_RTMPE:String = "rtmpe,rtmpte";
        private static const DEFAULT_CONNECTION_ATTEMPT_INTERVAL:Number = 200;
        private static const PROTOCOL_RTMP:String = "rtmp";
        private static const PROTOCOL_RTMPS:String = "rtmps";
        private static const PROTOCOL_RTMPT:String = "rtmpt";
        private static const PROTOCOL_RTMPE:String = "rtmpe";
        private static const PROTOCOL_RTMPTE:String = "rtmpte";
        private static const PROTOCOL_HTTP:String = "http";
        private static const PROTOCOL_HTTPS:String = "https";
        private static const PROTOCOL_FILE:String = "file";
        private static const PROTOCOL_EMPTY:String = "";
        private static const MP3_EXTENSION:String = ".mp3";

        private var shareNetConnections:Boolean;
        private var negotiator:NetNegotiator;
        private var connectionDictionary:Dictionary;
        private var keyDictionary:Dictionary;
        private var pendingDictionary:Dictionary;
        private var _connectionAttemptInterval:Number = 200;
        private var _timeout:Number = 10000;

        public function NetConnectionFactory(shareNetConnections:Boolean=true){
            this.shareNetConnections = shareNetConnections;
        }
        public function get timeout():Number{
            return (this._timeout);
        }
        public function set timeout(value:Number):void{
            this._timeout = value;
        }
        public function get connectionAttemptInterval():Number{
            return (this._connectionAttemptInterval);
        }
        public function set connectionAttemptInterval(value:Number):void{
            this._connectionAttemptInterval = value;
        }
        override public function create(resource:URLResource):void{
            var key:* = null;
            var pendingConnections:* = null;
            var urlIncludesFMSApplicationInstance:* = false;
            var netConnectionURLs:* = null;
            var netConnections:* = null;
            var j:* = 0;
            var negotiator:* = null;
            var onConnected:* = null;
            var onConnectionFailed:* = null;
            var resource:* = resource;
            key = this.createNetConnectionKey(resource);
            if (this.connectionDictionary == null){
                this.connectionDictionary = new Dictionary();
                this.keyDictionary = new Dictionary();
                this.pendingDictionary = new Dictionary();
            };
            var sharedConnection:* = (this.connectionDictionary[key] as SharedConnection);
            var connectionsUnderway:* = (this.pendingDictionary[key] as Vector.<URLResource>);
            if (((!((sharedConnection == null))) && (this.shareNetConnections))){
                sharedConnection.count++;
                dispatchEvent(new NetConnectionFactoryEvent(NetConnectionFactoryEvent.CREATION_COMPLETE, false, false, sharedConnection.netConnection, resource));
            } else {
                if (connectionsUnderway != null){
                    connectionsUnderway.push(resource);
                } else {
                    onConnected = function (event:NetConnectionFactoryEvent):void{
                        var _local5:NetConnectionFactoryEvent;
                        var _local6:URLResource;
                        var _local7:SharedConnection;
                        var _local8:SharedConnection;
                        negotiator.removeEventListener(NetConnectionFactoryEvent.CREATION_COMPLETE, onConnected);
                        negotiator.removeEventListener(NetConnectionFactoryEvent.CREATION_ERROR, onConnectionFailed);
                        var _local2:Vector.<NetConnectionFactoryEvent> = new Vector.<NetConnectionFactoryEvent>();
                        var _local3:Vector.<URLResource> = pendingDictionary[key];
                        var _local4 = 0;
                        while (_local4 < _local3.length) {
                            _local6 = (_local3[_local4] as URLResource);
                            if (shareNetConnections){
                                _local7 = (connectionDictionary[key] as SharedConnection);
                                if (_local7 != null){
                                    _local7.count++;
                                } else {
                                    _local8 = new SharedConnection();
                                    _local8.count = 1;
                                    _local8.netConnection = event.netConnection;
                                    connectionDictionary[key] = _local8;
                                    keyDictionary[_local8.netConnection] = key;
                                };
                            };
                            _local2.push(new NetConnectionFactoryEvent(NetConnectionFactoryEvent.CREATION_COMPLETE, false, false, event.netConnection, _local6));
                            _local4++;
                        };
                        delete pendingDictionary[key];
                        for each (_local5 in _local2) {
                            dispatchEvent(_local5);
                        };
                    };
                    onConnectionFailed = function (event:NetConnectionFactoryEvent):void{
                        var _local3:URLResource;
                        negotiator.removeEventListener(NetConnectionFactoryEvent.CREATION_COMPLETE, onConnected);
                        negotiator.removeEventListener(NetConnectionFactoryEvent.CREATION_ERROR, onConnectionFailed);
                        var _local2:Vector.<URLResource> = pendingDictionary[key];
                        for each (_local3 in _local2) {
                            dispatchEvent(new NetConnectionFactoryEvent(NetConnectionFactoryEvent.CREATION_ERROR, false, false, null, _local3, event.mediaError));
                        };
                        return;
                        /*not popped
                        delete pendingDictionary[key]
                        */
                    };
                    pendingConnections = new Vector.<URLResource>();
                    pendingConnections.push(resource);
                    this.pendingDictionary[key] = pendingConnections;
                    urlIncludesFMSApplicationInstance = (((resource is StreamingURLResource)) ? StreamingURLResource(resource).urlIncludesFMSApplicationInstance : false);
                    netConnectionURLs = this.createNetConnectionURLs(resource.url, urlIncludesFMSApplicationInstance);
                    netConnections = new Vector.<NetConnection>();
                    j = 0;
                    while (j < netConnectionURLs.length) {
                        netConnections.push(this.createNetConnection());
                        j = (j + 1);
                    };
                    negotiator = new NetNegotiator(this._connectionAttemptInterval, this._timeout);
                    negotiator.addEventListener(NetConnectionFactoryEvent.CREATION_COMPLETE, onConnected);
                    negotiator.addEventListener(NetConnectionFactoryEvent.CREATION_ERROR, onConnectionFailed);
                    negotiator.createNetConnection(resource, netConnectionURLs, netConnections);
                };
            };
        }
        override public function closeNetConnection(netConnection:NetConnection):void{
            var _local2:String;
            var _local3:SharedConnection;
            if (this.shareNetConnections){
                _local2 = (this.keyDictionary[netConnection] as String);
                if (_local2 != null){
                    _local3 = (this.connectionDictionary[_local2] as SharedConnection);
                    _local3.count--;
                    if (_local3.count == 0){
                        netConnection.close();
                        delete this.connectionDictionary[_local2];
                        delete this.keyDictionary[netConnection];
                    };
                };
            } else {
                super.closeNetConnection(netConnection);
            };
        }
        protected function createNetConnectionKey(resource:URLResource):String{
            var _local2:FMSURL = new FMSURL(resource.url);
            return (((((_local2.protocol + _local2.host) + _local2.port) + _local2.appName) + _local2.instanceName));
        }
        protected function createNetConnection():NetConnection{
            return (new NetConnection());
        }
        protected function createNetConnectionURLs(url:String, urlIncludesFMSApplicationInstance:Boolean=false):Vector.<String>{
            var _local5:PortProtocol;
            var _local3:Vector.<String> = new Vector.<String>();
            var _local4:Vector.<PortProtocol> = this.buildPortProtocolSequence(url);
            for each (_local5 in _local4) {
                _local3.push(this.buildConnectionAddress(url, urlIncludesFMSApplicationInstance, _local5));
            };
            return (_local3);
        }
        private function buildPortProtocolSequence(url:String):Vector.<PortProtocol>{
            var _local9:int;
            var _local10:PortProtocol;
            var _local2:Vector.<PortProtocol> = new Vector.<PortProtocol>();
            var _local3:URL = new URL(url);
            var _local4:String = ((_local3.port)=="") ? DEFAULT_PORTS : _local3.port;
            var _local5:String = "";
            switch (_local3.protocol){
                case PROTOCOL_RTMP:
                    _local5 = DEFAULT_PROTOCOLS_FOR_RTMP;
                    break;
                case PROTOCOL_RTMPE:
                    _local5 = DEFAULT_PROTOCOLS_FOR_RTMPE;
                    break;
                case PROTOCOL_RTMPS:
                case PROTOCOL_RTMPT:
                case PROTOCOL_RTMPTE:
                    _local5 = _local3.protocol;
                    break;
            };
            var _local6:Array = _local4.split(",");
            var _local7:Array = _local5.split(",");
            var _local8:int;
            while (_local8 < _local7.length) {
                _local9 = 0;
                while (_local9 < _local6.length) {
                    _local10 = new PortProtocol();
                    _local10.protocol = _local7[_local8];
                    _local10.port = _local6[_local9];
                    _local2.push(_local10);
                    _local9++;
                };
                _local8++;
            };
            return (_local2);
        }
        private function buildConnectionAddress(url:String, urlIncludesFMSApplicationInstance:Boolean, portProtocol:PortProtocol):String{
            var _local4:FMSURL = new FMSURL(url, urlIncludesFMSApplicationInstance);
            var _local5:String = (((((((portProtocol.protocol + "://") + _local4.host) + ":") + portProtocol.port) + "/") + _local4.appName) + ((_local4.useInstance) ? ("/" + _local4.instanceName) : ""));
            if (((!((_local4.query == null))) && (!((_local4.query == ""))))){
                _local5 = (_local5 + ("?" + _local4.query));
            };
            return (_local5);
        }

    }
}//package org.osmf.net 

import flash.net.*;

class SharedConnection {

    public var count:Number;
    public var netConnection:NetConnection;

    public function SharedConnection(){
    }
}
﻿package org.osmf.net.rtmpstreaming {
    import org.osmf.net.*;

    public class SufficientBandwidthRule extends SwitchingRuleBase {

        private static const BANDWIDTH_SAFETY_MULTIPLE:Number = 1.15;
        private static const MIN_DROPPED_FPS:int = 2;

        public function SufficientBandwidthRule(metrics:RTMPNetStreamMetrics){
            super(metrics);
        }
        override public function getNewIndex():int{
            var _local2:String;
            var _local3:int;
            var _local1 = -1;
            if (this.rtmpMetrics.averageMaxBytesPerSecond != 0){
                _local3 = (this.rtmpMetrics.resource.streamItems.length - 1);
                while (_local3 >= 0) {
                    if (((this.rtmpMetrics.averageMaxBytesPerSecond * 8) / 0x0400) > (this.rtmpMetrics.resource.streamItems[_local3].bitrate * BANDWIDTH_SAFETY_MULTIPLE)){
                        _local1 = _local3;
                        break;
                    };
                    _local3--;
                };
                if (_local1 > this.rtmpMetrics.currentIndex){
                    _local1 = (((((this.rtmpMetrics.droppedFPS < MIN_DROPPED_FPS)) && ((this.rtmpMetrics.netStream.bufferLength > this.rtmpMetrics.netStream.bufferTime)))) ? _local1 : -1);
                } else {
                    _local1 = -1;
                };
            };
            return (_local1);
        }
        private function get rtmpMetrics():RTMPNetStreamMetrics{
            return ((metrics as RTMPNetStreamMetrics));
        }

    }
}//package org.osmf.net.rtmpstreaming 
﻿package org.osmf.net.rtmpstreaming {
    import org.osmf.media.*;
    import flash.net.*;
    import org.osmf.net.*;
    import __AS3__.vec.*;

    public class RTMPDynamicStreamingNetLoader extends NetLoader {

        public function RTMPDynamicStreamingNetLoader(factory:NetConnectionFactoryBase=null){
            super(factory);
        }
        override public function canHandleResource(resource:MediaResourceBase):Boolean{
            var _local2:DynamicStreamingResource = (resource as DynamicStreamingResource);
            return (((((!((_local2 == null))) && (NetStreamUtils.isRTMPStream(_local2.host)))) || (super.canHandleResource(resource))));
        }
        override protected function createNetStreamSwitchManager(connection:NetConnection, netStream:NetStream, dsResource:DynamicStreamingResource):NetStreamSwitchManagerBase{
            var _local4:RTMPNetStreamMetrics = new RTMPNetStreamMetrics(netStream);
            return (new NetStreamSwitchManager(connection, netStream, dsResource, _local4, this.getDefaultSwitchingRules(_local4)));
        }
        private function getDefaultSwitchingRules(metrics:RTMPNetStreamMetrics):Vector.<SwitchingRuleBase>{
            var _local2:Vector.<SwitchingRuleBase> = new Vector.<SwitchingRuleBase>();
            _local2.push(new SufficientBandwidthRule(metrics));
            _local2.push(new InsufficientBandwidthRule(metrics));
            _local2.push(new DroppedFramesRule(metrics));
            _local2.push(new InsufficientBufferRule(metrics));
            return (_local2);
        }
        override protected function reconnectStream(loadTrait:NetStreamLoadTrait):void{
            var _local3:NetStreamPlayOptions;
            var _local4:DynamicStreamingItem;
            var _local5:String;
            var _local2:DynamicStreamingResource = (loadTrait.resource as DynamicStreamingResource);
            if (_local2 == null){
                super.reconnectStream(loadTrait);
            } else {
                _local3 = new NetStreamPlayOptions();
                loadTrait.netStream.attach(loadTrait.connection);
                _local3.transition = NetStreamPlayTransitions.RESUME;
                _local4 = _local2.streamItems[loadTrait.switchManager.currentIndex];
                _local5 = _local4.streamName;
                _local3.streamName = _local5;
                loadTrait.netStream.play2(_local3);
            };
        }

    }
}//package org.osmf.net.rtmpstreaming 
﻿package org.osmf.net.rtmpstreaming {
    import flash.utils.*;
    import org.osmf.net.*;

    public class DroppedFramesRule extends SwitchingRuleBase {

        private static const LOCK_INTERVAL:Number = 30000;

        private var downSwitchByOne:int;
        private var downSwitchByTwo:int;
        private var downSwitchToZero:int;
        private var lockLevel:Number;
        private var lastLockTime:Number;

        public function DroppedFramesRule(metrics:NetStreamMetricsBase, downSwitchByOne:int=10, downSwitchByTwo:int=20, downSwitchToZero:int=24){
            super(metrics);
            this.downSwitchByOne = downSwitchByOne;
            this.downSwitchByTwo = downSwitchByTwo;
            this.downSwitchToZero = downSwitchToZero;
            this.lastLockTime = 0;
            this.lockLevel = int.MAX_VALUE;
        }
        override public function getNewIndex():int{
            var _local2:String;
            var _local1 = -1;
            if (metrics.averageDroppedFPS > this.downSwitchToZero){
                _local1 = 0;
                _local2 = ((("Average droppedFPS of " + Math.round(metrics.averageDroppedFPS)) + " > ") + this.downSwitchToZero);
            } else {
                if (metrics.averageDroppedFPS > this.downSwitchByTwo){
                    _local1 = (((metrics.currentIndex - 2))<0) ? 0 : (metrics.currentIndex - 2);
                    _local2 = ((("Average droppedFPS of " + Math.round(metrics.averageDroppedFPS)) + " > ") + this.downSwitchByTwo);
                } else {
                    if (metrics.averageDroppedFPS > this.downSwitchByOne){
                        _local1 = (((metrics.currentIndex - 1))<0) ? 0 : (metrics.currentIndex - 1);
                        _local2 = ((("Average droppedFPS of " + Math.round(metrics.averageDroppedFPS)) + " > ") + this.downSwitchByOne);
                    };
                };
            };
            if (((!((_local1 == -1))) && ((_local1 < metrics.currentIndex)))){
                this.lockIndex(_local1);
            };
            if ((((_local1 == -1)) && (this.isLocked(metrics.currentIndex)))){
                _local1 = metrics.currentIndex;
            };
            return (_local1);
        }
        private function lockIndex(index:int):void{
            if (!this.isLocked(index)){
                this.lockLevel = index;
                this.lastLockTime = getTimer();
            };
        }
        private function isLocked(index:int):Boolean{
            return ((((index >= this.lockLevel)) && (((getTimer() - this.lastLockTime) < LOCK_INTERVAL))));
        }

    }
}//package org.osmf.net.rtmpstreaming 
﻿package org.osmf.net.rtmpstreaming {
    import org.osmf.net.*;

    public class InsufficientBandwidthRule extends SwitchingRuleBase {

        private var bitrateMultiplier:Number;

        public function InsufficientBandwidthRule(metrics:RTMPNetStreamMetrics, bitrateMultiplier:Number=1.15){
            super(metrics);
            this.bitrateMultiplier = bitrateMultiplier;
        }
        override public function getNewIndex():int{
            var _local2:String;
            var _local3:int;
            var _local1 = -1;
            if (this.rtmpMetrics.averageMaxBytesPerSecond != 0){
                _local3 = this.rtmpMetrics.currentIndex;
                while (_local3 >= 0) {
                    if (((this.rtmpMetrics.averageMaxBytesPerSecond * 8) / 0x0400) > (this.rtmpMetrics.resource.streamItems[_local3].bitrate * this.bitrateMultiplier)){
                        _local1 = _local3;
                        break;
                    };
                    _local3--;
                };
                _local1 = ((_local1)==this.rtmpMetrics.currentIndex) ? -1 : _local1;
            };
            return (_local1);
        }
        private function get rtmpMetrics():RTMPNetStreamMetrics{
            return ((metrics as RTMPNetStreamMetrics));
        }

    }
}//package org.osmf.net.rtmpstreaming 
﻿package org.osmf.net.rtmpstreaming {
    import flash.events.*;
    import org.osmf.net.*;

    public class InsufficientBufferRule extends SwitchingRuleBase {

        private var _panic:Boolean;
        private var _moreDetail:String;
        private var minBufferLength:Number;

        public function InsufficientBufferRule(metrics:RTMPNetStreamMetrics, minBufferLength:Number=2){
            super(metrics);
            this._panic = false;
            this.minBufferLength = minBufferLength;
            metrics.netStream.addEventListener(NetStatusEvent.NET_STATUS, this.monitorNetStatus, false, 0, true);
        }
        override public function getNewIndex():int{
            var _local1 = -1;
            if (((this._panic) || ((((this.rtmpMetrics.netStream.bufferLength < this.minBufferLength)) && ((this.rtmpMetrics.netStream.bufferLength > this.rtmpMetrics.netStream.bufferTime)))))){
                _local1 = 0;
            };
            return (_local1);
        }
        private function monitorNetStatus(e:NetStatusEvent):void{
            switch (e.info.code){
                case NetStreamCodes.NETSTREAM_BUFFER_FULL:
                    this._panic = false;
                    break;
                case NetStreamCodes.NETSTREAM_BUFFER_EMPTY:
                    if (Math.round(this.rtmpMetrics.netStream.time) != 0){
                        this._panic = true;
                        this._moreDetail = "Buffer was empty";
                    };
                    break;
                case NetStreamCodes.NETSTREAM_PLAY_INSUFFICIENTBW:
                    this._panic = true;
                    this._moreDetail = "Stream had insufficient bandwidth";
                    break;
            };
        }
        private function get rtmpMetrics():RTMPNetStreamMetrics{
            return ((metrics as RTMPNetStreamMetrics));
        }

    }
}//package org.osmf.net.rtmpstreaming 
﻿package org.osmf.net.rtmpstreaming {
    import flash.net.*;
    import org.osmf.net.*;

    public class RTMPNetStreamMetrics extends NetStreamMetricsBase {

        private static const DEFAULT_AVG_MAX_BYTES_SAMPLE_SIZE:Number = 50;

        private var _averageMaxBytesPerSecondArray:Array;
        private var _averageMaxBytesPerSecond:Number;

        public function RTMPNetStreamMetrics(netStream:NetStream){
            super(netStream);
            this._averageMaxBytesPerSecondArray = new Array();
        }
        public function get averageMaxBytesPerSecond():Number{
            return (this._averageMaxBytesPerSecond);
        }
        override protected function calculateMetrics():void{
            var maxBytesPerSecond:* = NaN;
            var totalMaxBytesPerSecond:* = NaN;
            var peakMaxBytesPerSecond:* = NaN;
            var b:* = 0;
            super.calculateMetrics();
            try {
                maxBytesPerSecond = netStream.info.maxBytesPerSecond;
                this._averageMaxBytesPerSecondArray.unshift(maxBytesPerSecond);
                if (this._averageMaxBytesPerSecondArray.length > DEFAULT_AVG_MAX_BYTES_SAMPLE_SIZE){
                    this._averageMaxBytesPerSecondArray.pop();
                };
                totalMaxBytesPerSecond = 0;
                peakMaxBytesPerSecond = 0;
                b = 0;
                while (b < this._averageMaxBytesPerSecondArray.length) {
                    totalMaxBytesPerSecond = (totalMaxBytesPerSecond + this._averageMaxBytesPerSecondArray[b]);
                    peakMaxBytesPerSecond = ((this._averageMaxBytesPerSecondArray[b])>peakMaxBytesPerSecond) ? this._averageMaxBytesPerSecondArray[b] : peakMaxBytesPerSecond;
                    b = (b + 1);
                };
                this._averageMaxBytesPerSecond = ((this._averageMaxBytesPerSecondArray.length)<DEFAULT_AVG_MAX_BYTES_SAMPLE_SIZE) ? 0 : ((this.isLive) ? peakMaxBytesPerSecond : (totalMaxBytesPerSecond / this._averageMaxBytesPerSecondArray.length));
            } catch(error:Error) {
                throw (error);
            };
        }
        private function get isLive():Boolean{
            return (((resource) && ((resource.streamType == StreamType.LIVE))));
        }

    }
}//package org.osmf.net.rtmpstreaming 
﻿package org.osmf.net {
    import flash.events.*;
    import flash.utils.*;
    import flash.net.*;

    public class NetStreamMetricsBase extends EventDispatcher {

        private static const DEFAULT_UPDATE_INTERVAL:Number = 100;
        private static const DEFAULT_AVG_FRAMERATE_SAMPLE_SIZE:Number = 50;

        private var _netStream:NetStream;
        private var _resource:DynamicStreamingResource;
        private var _currentIndex:int;
        private var _maxAllowedIndex:int;
        private var _timer:Timer;
        private var _averageDroppedFPSArray:Array;
        private var _averageDroppedFPS:Number;
        private var _droppedFPS:Number;
        private var _lastFrameDropValue:Number;
        private var _lastFrameDropCounter:Number;
        private var _maxFPS:Number;

        public function NetStreamMetricsBase(netStream:NetStream){
            this._netStream = netStream;
            this._droppedFPS = 0;
            this._lastFrameDropCounter = 0;
            this._lastFrameDropValue = 0;
            this._maxFPS = 0;
            this._averageDroppedFPSArray = new Array();
            this._timer = new Timer(DEFAULT_UPDATE_INTERVAL);
            this._timer.addEventListener(TimerEvent.TIMER, this.onTimerEvent);
            netStream.addEventListener(NetStatusEvent.NET_STATUS, this.onNetStatusEvent);
        }
        public function get resource():DynamicStreamingResource{
            return (this._resource);
        }
        public function set resource(value:DynamicStreamingResource):void{
            this._resource = value;
            this._maxAllowedIndex = ((value)!=null) ? (value.streamItems.length - 1) : 0;
        }
        public function get netStream():NetStream{
            return (this._netStream);
        }
        public function get currentIndex():int{
            return (this._currentIndex);
        }
        public function set currentIndex(value:int):void{
            this._currentIndex = value;
        }
        public function get maxAllowedIndex():int{
            return (this._maxAllowedIndex);
        }
        public function set maxAllowedIndex(value:int):void{
            this._maxAllowedIndex = value;
        }
        public function get updateInterval():Number{
            return (this._timer.delay);
        }
        public function set updateInterval(value:Number):void{
            this._timer.delay = value;
            if (value <= 0){
                this._timer.stop();
            };
        }
        public function get maxFPS():Number{
            return (this._maxFPS);
        }
        public function get droppedFPS():Number{
            return (this._droppedFPS);
        }
        public function get averageDroppedFPS():Number{
            return (this._averageDroppedFPS);
        }
        protected function calculateMetrics():void{
            var totalDroppedFrameRate:* = NaN;
            var f:* = 0;
            try {
                this._maxFPS = ((this.netStream.currentFPS)>this._maxFPS) ? this.netStream.currentFPS : this._maxFPS;
                if ((this._timer.currentCount - this._lastFrameDropCounter) > (1000 / this._timer.delay)){
                    this._droppedFPS = ((this.netStream.info.droppedFrames - this._lastFrameDropValue) / (((this._timer.currentCount - this._lastFrameDropCounter) * this._timer.delay) / 1000));
                    this._lastFrameDropCounter = this._timer.currentCount;
                    this._lastFrameDropValue = this.netStream.info.droppedFrames;
                };
                this._averageDroppedFPSArray.unshift(this._droppedFPS);
                if (this._averageDroppedFPSArray.length > DEFAULT_AVG_FRAMERATE_SAMPLE_SIZE){
                    this._averageDroppedFPSArray.pop();
                };
                totalDroppedFrameRate = 0;
                f = 0;
                while (f < this._averageDroppedFPSArray.length) {
                    totalDroppedFrameRate = (totalDroppedFrameRate + this._averageDroppedFPSArray[f]);
                    f = (f + 1);
                };
                this._averageDroppedFPS = ((this._averageDroppedFPSArray.length)<DEFAULT_AVG_FRAMERATE_SAMPLE_SIZE) ? 0 : (totalDroppedFrameRate / this._averageDroppedFPSArray.length);
            } catch(error:Error) {
                throw (error);
            };
        }
        private function onNetStatusEvent(event:NetStatusEvent):void{
            switch (event.info.code){
                case NetStreamCodes.NETSTREAM_PLAY_START:
                    if (((!(this._timer.running)) && ((this.updateInterval > 0)))){
                        this._timer.start();
                    };
                    break;
                case NetStreamCodes.NETSTREAM_PLAY_STOP:
                    this._timer.stop();
                    break;
            };
        }
        private function onTimerEvent(event:TimerEvent):void{
            if (isNaN(this.netStream.time)){
                this._timer.stop();
            } else {
                this.calculateMetrics();
            };
        }

    }
}//package org.osmf.net 
﻿package org.osmf.net {
    import flash.utils.*;
    import __AS3__.vec.*;

    public class MulticastResource extends StreamingURLResource {

        private var _groupspec:String;
        private var _streamName:String;

        public function MulticastResource(url:String, groupspec:String=null, streamName:String=null, connectionArguments:Vector.<Object>=null, urlIncludesFMSApplicationInstance:Boolean=false, drmContentData:ByteArray=null){
            super(url, StreamType.LIVE, NaN, NaN, connectionArguments, urlIncludesFMSApplicationInstance, drmContentData);
            this._groupspec = groupspec;
            this._streamName = streamName;
        }
        public function get groupspec():String{
            return (this._groupspec);
        }
        public function set groupspec(value:String):void{
            this._groupspec = value;
        }
        public function get streamName():String{
            return (this._streamName);
        }
        public function set streamName(value:String):void{
            this._streamName = value;
        }

    }
}//package org.osmf.net 
﻿package org.osmf.net {
    import flash.events.*;
    import flash.net.*;
    import org.osmf.utils.*;

    public class NetStreamSwitcher extends EventDispatcher {

        private var oldStreamName:String;
        private var netStream:NetStream = null;
        private var dsResource:DynamicStreamingResource = null;
        private var _currentIndex:uint = 0;
        private var _actualIndex:int = -1;
        private var _switching:Boolean;

        public function NetStreamSwitcher(netStream:NetStream, dsResource:DynamicStreamingResource){
            if (netStream == null){
                throw (new ArgumentError("Invalid netStream"));
            };
            if (dsResource == null){
                throw (new ArgumentError("Invalid dynamic streaming resource"));
            };
            this.netStream = netStream;
            this.dsResource = dsResource;
            this._currentIndex = Math.max(0, dsResource.initialIndex);
            netStream.addEventListener(NetStatusEvent.NET_STATUS, this.onNetStatus);
            var _local3:NetClient = (netStream.client as NetClient);
            if (_local3 != null){
                NetClient(netStream.client).addHandler(NetStreamCodes.ON_PLAY_STATUS, this.onPlayStatus, int.MAX_VALUE);
            } else {
                throw (new Error("The netStream does not have a NetClient associated."));
            };
        }
        public function get currentIndex():uint{
            return (this._currentIndex);
        }
        public function get actualIndex():int{
            return (((this._actualIndex)==-1) ? this._currentIndex : this._actualIndex);
        }
        public function get switching():Boolean{
            return (this._switching);
        }
        public function switchTo(index:int):void{
            if (index < 0){
                throw (new RangeError(OSMFStrings.getString(OSMFStrings.STREAMSWITCH_INVALID_INDEX)));
            };
            if (this._actualIndex == -1){
                this.prepareForSwitching();
            };
            this.executeSwitch(index);
        }
        private function setCurrentIndex(value:uint):void{
            var _local2:uint = this._currentIndex;
            this._currentIndex = value;
        }
        private function setActualIndex(value:int):void{
            var _local2:int = this._actualIndex;
            this._actualIndex = value;
        }
        private function executeSwitch(targetIndex:int):void{
            var _local2:NetStreamPlayOptions = new NetStreamPlayOptions();
            var _local3:Object = NetStreamUtils.getPlayArgsForResource(this.dsResource);
            _local2.start = _local3.start;
            _local2.len = _local3.len;
            _local2.streamName = this.dsResource.streamItems[targetIndex].streamName;
            var _local4:String = this.oldStreamName;
            if (((!((_local4 == null))) && ((_local4.indexOf("?") >= 0)))){
                _local2.oldStreamName = _local4.substr(0, _local4.indexOf("?"));
            } else {
                _local2.oldStreamName = this.oldStreamName;
            };
            _local2.transition = NetStreamPlayTransitions.SWITCH;
            this._switching = true;
            this.netStream.play2(_local2);
            this.oldStreamName = this.dsResource.streamItems[targetIndex].streamName;
        }
        private function prepareForSwitching():void{
            this._actualIndex = 0;
            if ((((this.dsResource.initialIndex >= 0)) && ((this.dsResource.initialIndex < this.dsResource.streamItems.length)))){
                this._actualIndex = this.dsResource.initialIndex;
            };
        }
        private function onNetStatus(event:NetStatusEvent):void{
            var _local2:int;
            switch (event.info.code){
                case NetStreamCodes.NETSTREAM_PLAY_START:
                    if (this._actualIndex == -1){
                        this.prepareForSwitching();
                    };
                    break;
                case NetStreamCodes.NETSTREAM_PLAY_TRANSITION:
                    _local2 = this.dsResource.indexFromName(event.info.details);
                    if (_local2 >= 0){
                        this.setActualIndex(_local2);
                        if (this._actualIndex > -1){
                            this._switching = false;
                        };
                    };
                    break;
                case NetStreamCodes.NETSTREAM_PLAY_FAILED:
                    this._switching = false;
                    break;
                case NetStreamCodes.NETSTREAM_SEEK_NOTIFY:
                    this._switching = false;
                    this.setCurrentIndex(this.actualIndex);
                    break;
                case NetStreamCodes.NETSTREAM_PLAY_STOP:
                    break;
            };
        }
        private function onPlayStatus(info:Object):void{
            var _local2:int;
            switch (info.code){
                case NetStreamCodes.NETSTREAM_PLAY_TRANSITION_COMPLETE:
                    _local2 = this.dsResource.indexFromName(info.details);
                    if (_local2 >= 0){
                        this.setCurrentIndex(_local2);
                    };
                    break;
            };
        }

    }
}//package org.osmf.net 
﻿package org.osmf.net {
    import org.osmf.utils.*;
    import __AS3__.vec.*;

    public class FMSURL extends URL {

        private static const APPNAME_START_INDEX:uint = 0;
        private static const INSTANCENAME_START_INDEX:uint = 2;
        private static const STREAMNAME_START_INDEX:uint = 4;
        private static const DEFAULT_INSTANCE_NAME:String = "_definst_";
        public static const MP4_STREAM:String = "mp4";
        public static const MP3_STREAM:String = "mp3";
        public static const ID3_STREAM:String = "id3";
        public static const QUERY_STRING_STREAM:String = "streamName";
        public static const QUERY_STRING_STREAMTYPE:String = "streamType";

        private var _useInstance:Boolean;
        private var _appName:String;
        private var _instanceName:String;
        private var _streamName:String;
        private var _fileFormat:String;
        private var _origins:Vector.<FMSHost>;
        private var _edges:Vector.<FMSHost>;

        public function FMSURL(url:String, useInstance:Boolean=false){
            super(url);
            this._useInstance = useInstance;
            this._appName = "";
            this._instanceName = "";
            this._streamName = "";
            this._fileFormat = "";
            this.parsePath();
            this.parseQuery();
        }
        public function get useInstance():Boolean{
            return (this._useInstance);
        }
        public function get appName():String{
            return (this._appName);
        }
        public function get instanceName():String{
            return (this._instanceName);
        }
        public function get streamName():String{
            return (this._streamName);
        }
        public function get fileFormat():String{
            return (this._fileFormat);
        }
        public function get edges():Vector.<FMSHost>{
            return (this._edges);
        }
        public function get origins():Vector.<FMSHost>{
            return (this._origins);
        }
        private function parsePath():void{
            var _local7:RegExp;
            var _local8:uint;
            var _local9:int;
            if ((((path == null)) || ((path.length == 0)))){
                this._streamName = getParamValue(QUERY_STRING_STREAM);
                this._fileFormat = getParamValue(QUERY_STRING_STREAMTYPE);
                return;
            };
            var _local1:RegExp = /(\/)/;
            var _local2:Array = path.split(_local1);
            if (_local2 != null){
                this._appName = _local2[APPNAME_START_INDEX];
                this._instanceName = "";
                this._streamName = "";
                _local7 = new RegExp(("^.*/" + DEFAULT_INSTANCE_NAME), "i");
                if (path.search(_local7) > -1){
                    this._useInstance = true;
                };
                _local8 = STREAMNAME_START_INDEX;
                if (this._useInstance){
                    this._instanceName = _local2[INSTANCENAME_START_INDEX];
                } else {
                    _local8 = INSTANCENAME_START_INDEX;
                };
                _local9 = _local8;
                while (_local9 < _local2.length) {
                    this._streamName = (this._streamName + _local2[_local9]);
                    _local9++;
                };
                if ((((this._streamName == null)) || ((this._streamName == "")))){
                    this._streamName = getParamValue(QUERY_STRING_STREAM);
                };
                if (this._streamName.search(/^mp4:/i) > -1){
                    this._fileFormat = MP4_STREAM;
                } else {
                    if (this._streamName.search(/^mp3:/i) > -1){
                        this._fileFormat = MP3_STREAM;
                    } else {
                        if (this._streamName.search(/^id3:/i) > -1){
                            this._fileFormat = ID3_STREAM;
                        };
                    };
                };
                if ((((this._fileFormat == null)) || ((this._fileFormat == "")))){
                    this._fileFormat = getParamValue(QUERY_STRING_STREAMTYPE);
                };
            };
            var _local3:int = this._streamName.indexOf("/mp4:");
            var _local4:int = this._streamName.indexOf("/mp3:");
            var _local5:int = this._streamName.indexOf("/id3:");
            var _local6 = -1;
            if (_local3 > 0){
                _local6 = _local3;
            } else {
                if (_local4 > 0){
                    _local6 = _local4;
                } else {
                    if (_local5 > 0){
                        _local6 = _local5;
                    };
                };
            };
            if (((this.useInstance) && ((_local6 > 0)))){
                this._instanceName = (this._instanceName + "/");
                this._instanceName = (this._instanceName + this._streamName.substr(0, _local6));
                this._streamName = this.streamName.substr((_local6 + 1));
            };
        }
        private function parseQuery():void{
            var _local12:int;
            var _local13:int;
            var _local14:FMSURL;
            if ((((((query == null)) || ((query.length == 0)))) || ((query.search(/:\//) == -1)))){
                return;
            };
            var _local1:Array = query.split("?");
            var _local2:int;
            while (_local2 < _local1.length) {
                _local12 = _local1[_local2].toString().search(/:\//);
                if (_local12 == -1){
                    _local1.splice(_local2, 1);
                };
                _local2++;
            };
            var _local3:Boolean;
            var _local4:int;
            if (_local1.length >= 2){
                _local3 = true;
                _local4 = (_local1.length - 1);
            };
            var _local5:String = "";
            var _local6:String = "";
            var _local7:int;
            var _local8:int;
            var _local9:int;
            var _local10:int;
            var _local11:int;
            while (_local11 < _local1.length) {
                _local13 = _local1[_local11].toString().search(/:\//);
                _local9 = (_local13 + 2);
                if (_local1[_local11].charAt(_local9) == "/"){
                    _local9++;
                };
                _local7 = _local1[_local11].indexOf(":", _local9);
                _local8 = _local1[_local11].indexOf("/", _local9);
                if ((((_local8 < 0)) && ((_local7 < 0)))){
                    _local5 = _local1[_local11].slice(_local9);
                } else {
                    if ((((_local7 >= 0)) && ((_local7 < _local8)))){
                        _local10 = _local7;
                        _local5 = _local1[_local11].slice(_local9, _local10);
                        _local9 = (_local10 + 1);
                        _local10 = _local8;
                        _local6 = _local1[_local11].slice(_local9, _local10);
                    } else {
                        if (_local1[_local11].indexOf("://") != -1){
                            _local10 = _local8;
                            _local5 = _local1[_local11].slice(_local9, _local10);
                        } else {
                            _local10 = _local1[_local11].indexOf("/");
                            _local5 = "localhost";
                        };
                    };
                };
                if (_local11 == _local4){
                    if (this._origins == null){
                        this._origins = new Vector.<FMSHost>();
                    };
                    this._origins.push(new FMSHost(_local5, _local6));
                    _local14 = new FMSURL(_local1[_local11], this._useInstance);
                    if (this._appName == ""){
                        this._appName = _local14.appName;
                    };
                    if (((this._useInstance) && ((this._instanceName == "")))){
                        this._instanceName = _local14.instanceName;
                    };
                    if (this._streamName == ""){
                        this._streamName = _local14.streamName;
                    };
                } else {
                    if (((!((_local1[_local11] == query))) && (_local3))){
                        if (this._edges == null){
                            this._edges = new Vector.<FMSHost>();
                        };
                        this._edges.push(new FMSHost(_local5, _local6));
                    };
                };
                _local11++;
            };
        }

    }
}//package org.osmf.net 
﻿package org.osmf.net {
    import flash.events.*;
    import flash.utils.*;
    import flash.net.*;
    import org.osmf.utils.*;
    import __AS3__.vec.*;
    import flash.errors.*;

    public class NetStreamSwitchManager extends NetStreamSwitchManagerBase {

        private static const RULE_CHECK_INTERVAL:Number = 500;
        private static const DEFAULT_MAX_UP_SWITCHES_PER_STREAM_ITEM:int = 3;
        private static const DEFAULT_WAIT_DURATION_AFTER_DOWN_SWITCH:int = 30000;
        private static const DEFAULT_CLEAR_FAILED_COUNTS_INTERVAL:Number = 300000;

        private var netStream:NetStream;
        private var dsResource:DynamicStreamingResource;
        private var switchingRules:Vector.<SwitchingRuleBase>;
        private var metrics:NetStreamMetricsBase;
        private var checkRulesTimer:Timer;
        private var clearFailedCountsTimer:Timer;
        private var actualIndex:int = -1;
        private var oldStreamName:String;
        private var switching:Boolean;
        private var _currentIndex:int;
        private var lastTransitionIndex:int = -1;
        private var connection:NetConnection;
        private var dsiFailedCounts:Vector.<int>;
        private var failedDSI:Dictionary;
        private var _bandwidthLimit:Number = 0;

        public function NetStreamSwitchManager(connection:NetConnection, netStream:NetStream, resource:DynamicStreamingResource, metrics:NetStreamMetricsBase, switchingRules:Vector.<SwitchingRuleBase>, autoSwitch:Boolean=true){
            this.connection = connection;
            this.netStream = netStream;
            this.dsResource = resource;
            this.metrics = metrics;
            metrics.resource = resource;
            this.switchingRules = ((switchingRules) || (new Vector.<SwitchingRuleBase>()));
            this._currentIndex = Math.max(0, Math.min(this.maxAllowedIndex, this.dsResource.initialIndex));
            this.checkRulesTimer = new Timer(RULE_CHECK_INTERVAL);
            this.checkRulesTimer.addEventListener(TimerEvent.TIMER, this.checkRules);
            super.autoSwitch = autoSwitch;
            this.failedDSI = new Dictionary();
            this.initDSIFailedCounts();
            this._bandwidthLimit = (((1.4 * resource.streamItems[(resource.streamItems.length - 1)].bitrate) * 1000) / 8);
            netStream.addEventListener(NetStatusEvent.NET_STATUS, this.onNetStatus);
            NetClient(netStream.client).addHandler(NetStreamCodes.ON_PLAY_STATUS, this.onPlayStatus, int.MAX_VALUE);
        }
        override public function set autoSwitch(value:Boolean):void{
            super.autoSwitch = value;
            if (_autoSwitch){
                this.checkRulesTimer.start();
            } else {
                this.checkRulesTimer.stop();
            };
        }
        override public function get currentIndex():uint{
            return (this._currentIndex);
        }
        override public function get maxAllowedIndex():int{
            var _local1:int = (this.dsResource.streamItems.length - 1);
            return (((_local1)<super.maxAllowedIndex) ? _local1 : super.maxAllowedIndex);
        }
        override public function set maxAllowedIndex(value:int):void{
            if (value > this.dsResource.streamItems.length){
                throw (new RangeError(OSMFStrings.getString(OSMFStrings.STREAMSWITCH_INVALID_INDEX)));
            };
            super.maxAllowedIndex = value;
            this.metrics.maxAllowedIndex = value;
        }
        override public function switchTo(index:int):void{
            if (!_autoSwitch){
                if ((((index < 0)) || ((index > this.maxAllowedIndex)))){
                    throw (new RangeError(OSMFStrings.getString(OSMFStrings.STREAMSWITCH_INVALID_INDEX)));
                };
                if (this.actualIndex == -1){
                    this.prepareForSwitching();
                };
                this.executeSwitch(index);
            } else {
                throw (new IllegalOperationError(OSMFStrings.getString(OSMFStrings.STREAMSWITCH_STREAM_NOT_IN_MANUAL_MODE)));
            };
        }
        protected function canAutoSwitchNow(newIndex:int):Boolean{
            var _local2:int;
            if (this.dsiFailedCounts[newIndex] >= 1){
                _local2 = getTimer();
                if ((_local2 - this.failedDSI[newIndex]) < DEFAULT_WAIT_DURATION_AFTER_DOWN_SWITCH){
                    return (false);
                };
            } else {
                if (this.dsiFailedCounts[newIndex] > DEFAULT_MAX_UP_SWITCHES_PER_STREAM_ITEM){
                    return (false);
                };
            };
            return (true);
        }
        final protected function get bandwidthLimit():Number{
            return (this._bandwidthLimit);
        }
        final protected function set bandwidthLimit(value:Number):void{
            this._bandwidthLimit = value;
        }
        protected function doCheckRules():void{
            this.checkRules(null);
        }
        private function executeSwitch(targetIndex:int):void{
            var _local2:NetStreamPlayOptions = new NetStreamPlayOptions();
            var _local3:Object = NetStreamUtils.getPlayArgsForResource(this.dsResource);
            _local2.start = _local3.start;
            _local2.len = _local3.len;
            _local2.streamName = this.dsResource.streamItems[targetIndex].streamName;
            var _local4:String = this.oldStreamName;
            if (((!((_local4 == null))) && ((_local4.indexOf("?") >= 0)))){
                _local2.oldStreamName = _local4.substr(0, _local4.indexOf("?"));
            } else {
                _local2.oldStreamName = this.oldStreamName;
            };
            _local2.transition = NetStreamPlayTransitions.SWITCH;
            this.switching = true;
            this.netStream.play2(_local2);
            this.oldStreamName = this.dsResource.streamItems[targetIndex].streamName;
            if ((((targetIndex < this.actualIndex)) && (_autoSwitch))){
                this.incrementDSIFailedCount(this.actualIndex);
                this.failedDSI[this.actualIndex] = getTimer();
            };
        }
        private function checkRules(event:TimerEvent):void{
            var _local4:int;
            if ((((((this.switchingRules == null)) || (this.switching))) || ((this.dsResource == null)))){
                return;
            };
            var _local2:int = int.MAX_VALUE;
            var _local3:int;
            while (_local3 < this.switchingRules.length) {
                _local4 = this.switchingRules[_local3].getNewIndex();
                if (((!((_local4 == -1))) && ((_local4 < _local2)))){
                    _local2 = _local4;
                };
                _local3++;
            };
            if (((((!((_local2 == -1))) && (!((_local2 == int.MAX_VALUE))))) && (!((_local2 == this.actualIndex))))){
                _local2 = Math.min(_local2, this.maxAllowedIndex);
            };
            if ((((((_local2 == -1)) || ((_local2 == int.MAX_VALUE)))) && ((this.actualIndex > this.maxAllowedIndex)))){
                _local2 = this.maxAllowedIndex;
            };
            if (((((((((!((_local2 == -1))) && (!((_local2 == int.MAX_VALUE))))) && (!((_local2 == this.actualIndex))))) && (!(this.switching)))) && ((_local2 <= this.maxAllowedIndex)))){
                if (this.actualIndex == -1){
                    this.prepareForSwitching();
                };
                if (this.canAutoSwitchNow(_local2)){
                    this.executeSwitch(_local2);
                };
            };
        }
        private function onNetStatus(event:NetStatusEvent):void{
            switch (event.info.code){
                case NetStreamCodes.NETSTREAM_PLAY_START:
                    if (this.actualIndex == -1){
                        this.prepareForSwitching();
                    } else {
                        if (((_autoSwitch) && ((this.checkRulesTimer.running == false)))){
                            this.checkRulesTimer.start();
                        };
                    };
                    break;
                case NetStreamCodes.NETSTREAM_PLAY_TRANSITION:
                    this.actualIndex = this.dsResource.indexFromName(event.info.details);
                    if (this.actualIndex > -1){
                        this.switching = false;
                        this.metrics.currentIndex = this.actualIndex;
                        this.lastTransitionIndex = this.actualIndex;
                    };
                    break;
                case NetStreamCodes.NETSTREAM_PLAY_FAILED:
                    this.switching = false;
                    break;
                case NetStreamCodes.NETSTREAM_SEEK_NOTIFY:
                    this.switching = false;
                    if (this.lastTransitionIndex >= 0){
                        this._currentIndex = this.lastTransitionIndex;
                    };
                    break;
                case NetStreamCodes.NETSTREAM_PLAY_STOP:
                    this.checkRulesTimer.stop();
                    break;
            };
        }
        private function onPlayStatus(info:Object):void{
            switch (info.code){
                case NetStreamCodes.NETSTREAM_PLAY_TRANSITION_COMPLETE:
                    if (this.lastTransitionIndex >= 0){
                        this._currentIndex = this.lastTransitionIndex;
                        this.lastTransitionIndex = -1;
                    };
                    break;
            };
        }
        private function prepareForSwitching():void{
            this.initDSIFailedCounts();
            this.metrics.resource = this.dsResource;
            this.actualIndex = 0;
            this.lastTransitionIndex = -1;
            if ((((this.dsResource.initialIndex >= 0)) && ((this.dsResource.initialIndex < this.dsResource.streamItems.length)))){
                this.actualIndex = this.dsResource.initialIndex;
            };
            if (_autoSwitch){
                this.checkRulesTimer.start();
            };
            this.setThrottleLimits((this.dsResource.streamItems.length - 1));
            this.metrics.currentIndex = this.actualIndex;
        }
        private function initDSIFailedCounts():void{
            if (this.dsiFailedCounts != null){
                this.dsiFailedCounts.length = 0;
                this.dsiFailedCounts = null;
            };
            this.dsiFailedCounts = new Vector.<int>();
            var _local1:int;
            while (_local1 < this.dsResource.streamItems.length) {
                this.dsiFailedCounts.push(0);
                _local1++;
            };
        }
        private function incrementDSIFailedCount(index:int):void{
            var _local2 = this.dsiFailedCounts;
            var _local3 = index;
            var _local4 = (_local2[_local3] + 1);
            _local2[_local3] = _local4;
            if (this.dsiFailedCounts[index] > DEFAULT_MAX_UP_SWITCHES_PER_STREAM_ITEM){
                if (this.clearFailedCountsTimer == null){
                    this.clearFailedCountsTimer = new Timer(DEFAULT_CLEAR_FAILED_COUNTS_INTERVAL, 1);
                    this.clearFailedCountsTimer.addEventListener(TimerEvent.TIMER, this.clearFailedCounts);
                };
                this.clearFailedCountsTimer.start();
            };
        }
        private function clearFailedCounts(event:TimerEvent):void{
            this.clearFailedCountsTimer.removeEventListener(TimerEvent.TIMER, this.clearFailedCounts);
            this.clearFailedCountsTimer = null;
            this.initDSIFailedCounts();
        }
        private function setThrottleLimits(index:int):void{
            this.connection.call("setBandwidthLimit", null, this._bandwidthLimit, this._bandwidthLimit);
        }

    }
}//package org.osmf.net 
﻿package org.osmf.net {

    public final class NetConnectionCodes {

        public static const CONNECT_CLOSED:String = "NetConnection.Connect.Closed";
        public static const CONNECT_FAILED:String = "NetConnection.Connect.Failed";
        public static const CONNECT_SUCCESS:String = "NetConnection.Connect.Success";
        public static const CONNECT_REJECTED:String = "NetConnection.Connect.Rejected";
        public static const CONNECT_INVALIDAPP:String = "NetConnection.Connect.InvalidApp";
        public static const CONNECT_IDLE_TIME_OUT:String = "NetConnection.Connect.IdleTimeOut";

    }
}//package org.osmf.net 
﻿package org.osmf.net {

    public class SwitchingRuleBase {

        private var _metrics:NetStreamMetricsBase;

        public function SwitchingRuleBase(metrics:NetStreamMetricsBase){
            this._metrics = metrics;
        }
        public function getNewIndex():int{
            return (-1);
        }
        protected function get metrics():NetStreamMetricsBase{
            return (this._metrics);
        }

    }
}//package org.osmf.net 
﻿package tv.freewheel.ad.behavior {
    import flash.utils.*;

    public class IAdInstance {

        protected var slotPool:Dictionary;
        protected var adInstancePool:Dictionary;
        protected var pool:Dictionary;
        var proxied:Object;

        public function IAdInstance(p:Object){
            this.proxied = p;
            this.pool = new Dictionary();
            this.slotPool = new Dictionary();
            this.adInstancePool = new Dictionary();
        }
        public function getPrimaryCreativeRendition():ICreativeRendition{
            if (!this.proxied){
                return (null);
            };
            var _local1:Object = this.proxied.getPrimaryCreativeRendition();
            return (((_local1) ? this._ICreativeRendition(_local1) : null));
        }
        protected function _IAdInstance(o:Object):IAdInstance{
            if (!this.adInstancePool[o]){
                this.adInstancePool[o] = new IAdInstance(o);
            };
            return (this.adInstancePool[o]);
        }
        public function getCreativeParameter(name:String):String{
            return (((this.proxied) ? this.proxied.getCreativeParameter(name) : null));
        }
        public function getCompanionAdInstances():Array{
            if (!this.proxied){
                return (null);
            };
            var _local1:Array = this.proxied.getCompanionAdInstances();
            var _local2:Array = new Array();
            var _local3:uint;
            while (_local3 < _local1.length) {
                _local2.push(this._IAdInstance(_local1[_local3]));
                _local3++;
            };
            return (_local2);
        }
        protected function _ISlot(o:Object):ISlot{
            if (!this.slotPool[o]){
                this.slotPool[o] = new ISlot(o);
            };
            return (this.slotPool[o]);
        }
        public function getAdId():int{
            return (((this.proxied) ? this.proxied.getAdId() : -1));
        }
        public function getEventCallbackURLs(eventName:String, eventType:String=null, externalCallbacks:Boolean=false):Array{
            return (((this.proxied) ? this.proxied.getEventCallbackURLs(eventName, eventType, externalCallbacks) : null));
        }
        public function isRequiredToShow():Boolean{
            return (((this.proxied) ? this.proxied.isRequiredToShow() : false));
        }
        public function getSlot():ISlot{
            if (!this.proxied){
                return (null);
            };
            var _local1:Object = this.proxied.getSlot();
            return (((_local1) ? this._ISlot(_local1) : null));
        }
        public function getAllCreativeRenditions():Array{
            if (!this.proxied){
                return (null);
            };
            var _local1:Array = this.proxied.getAllCreativeRenditions();
            var _local2:Array = new Array();
            var _local3:uint;
            while (_local3 < _local1.length) {
                _local2.push(this._ICreativeRendition(_local1[_local3]));
                _local3++;
            };
            return (_local2);
        }
        protected function _ICreativeRendition(o:Object):ICreativeRendition{
            if (!this.pool[o]){
                this.pool[o] = new ICreativeRendition(o);
            };
            return (this.pool[o]);
        }

    }
}//package tv.freewheel.ad.behavior 
﻿package tv.freewheel.ad.behavior {
    import flash.display.*;
    import flash.utils.*;
    import flash.geom.*;

    public class IAdManager {

        protected var pool2:Dictionary;
        protected var pool:Dictionary;
        protected var constants:IConstants;
        var proxied:Object;

        public function IAdManager(p:Object){
            this.proxied = p;
            this.pool = new Dictionary();
            this.pool2 = new Dictionary();
        }
        public function setVisitorHttpHeader(name:String, value:String):void{
            this.proxied.setVisitorHttpHeader(name, value);
        }
        public function getParameter(key:String, level:uint=0):String{
            return (this.proxied.getParameter(key, level));
        }
        public function addRenderer(url:String, baseUnit:String=null, contentType:String=null, slotType:String=null, adUnit:String=null, parameters:Object=null, creativeAPI:String=null):void{
            this.proxied.addRenderer(url, baseUnit, contentType, slotType, adUnit, parameters, creativeAPI);
        }
        public function finalizeRendererStateTransition(adInstance:Object):void{
            this.proxied.finalizeRendererStateTransition(adInstance);
        }
        public function setParameterObject(name:String, value:Object, level:uint):void{
            this.proxied.setParameterObject(name, value, level);
        }
        public function setRequestDuration(requestDuration:Number):void{
            this.proxied.setRequestDuration(requestDuration);
        }
        public function registerVideoDisplay(slotBase:Sprite):void{
            this.proxied.registerVideoDisplay(slotBase);
        }
        public function getTemporalSlots():Array{
            var _local1:Array = this.proxied.getTemporalSlots().slice();
            var _local2:Array = new Array();
            while (_local1.length) {
                _local2.push(this._ISlot(_local1.pop()));
            };
            return (_local2);
        }
        public function addTemporalSlot(customId:String, adUnit:String, timePosition:Number, slotProfile:String=null, timePositionSequence:uint=0, maxDuration:Number=0, slotParameters:Object=null, acceptPrimaryContentType:String=null, acceptContentType:String=null, minDuration:Number=0, cuePointSequence:uint=0, slotBase:Sprite=null):ISlot{
            var _local13:Object = this.proxied.addTemporalSlot(customId, adUnit, timePosition, slotProfile, timePositionSequence, maxDuration, slotParameters, acceptPrimaryContentType, acceptContentType, minDuration, cuePointSequence, slotBase);
            return (((_local13) ? this._ISlot(_local13) : null));
        }
        public function loadResponseData(data:String):void{
            this.proxied.loadResponseData(data);
        }
        public function getParameterObject(key:String, level:uint=0):Object{
            return (this.proxied.getParameterObject(key, level));
        }
        public function getAdVolume():uint{
            return (this.proxied.getAdVolume());
        }
        public function setVideoDisplayCompatibleSizes(compatibleDimensions:Array):void{
            this.proxied.setVideoDisplayCompatibleSizes(compatibleDimensions);
        }
        public function setRequestMode(mode:String):void{
            this.proxied.setRequestMode(mode);
        }
        public function setAdPlayState(toPause:Boolean):void{
            this.proxied.setAdPlayState(toPause);
        }
        public function getConstants():IConstants{
            var _local1:Object = this.proxied.getConstants();
            return (((_local1) ? this._IConstants(_local1) : null));
        }
        public function setCapability(capability:String, status, parameters:Object=null):Boolean{
            return (this.proxied.setCapability(capability, status, parameters));
        }
        public function getVideoPlayerNonTemporalSlots():Array{
            var _local1:Array = this.proxied.getVideoPlayerNonTemporalSlots().slice();
            var _local2:Array = new Array();
            while (_local1.length) {
                _local2.push(this._ISlot(_local1.pop()));
            };
            return (_local2);
        }
        public function setAdVolume(adVolume:uint):void{
            this.proxied.setAdVolume(adVolume);
        }
        public function getActiveSlots():Array{
            var _local1:Array = this.proxied.getActiveSlots().slice();
            var _local2:Array = new Array();
            while (_local1.length) {
                _local2.push(this._ISlot(_local1.pop()));
            };
            return (_local2);
        }
        public function getVersion():uint{
            return (this.proxied.getVersion());
        }
        public function getResponseData():String{
            return (this.proxied.getResponseData());
        }
        public function addCandidateAd(id:uint):void{
            this.proxied.addCandidateAd(id);
        }
        public function dispose():void{
            var _local1:Object;
            var _local2:Object;
            this.proxied.dispose();
            for (_local1 in this.pool2) {
                this.pool2[_local1].dispose();
                this.pool2[_local1].proxied = null;
                delete this.pool2[_local1];
            };
            for (_local2 in this.pool) {
                delete this.pool[_local2];
            };
            this.constants = null;
            this.proxied = null;
        }
        public function registerPlayheadTimeCallback(cb:Function):void{
            this.proxied.registerPlayheadTimeCallback(cb);
        }
        protected function _IConstants(o:Object):IConstants{
            if (!this.constants){
                this.constants = new IConstants(o);
            };
            return (this.constants);
        }
        public function setEventCallbackKeyValue(key:String, value:String):void{
            this.proxied.setEventCallbackKeyValue(key, value);
        }
        public function addSiteSectionNonTemporalSlot(customId:String, slotWidth:uint, slotHeight:uint, slotProfile:String=null, acceptCompanion:Boolean=true, initialAdOption=0, adUnit:String=null, slotParameters:Object=null, acceptPrimaryContentType:String=null, acceptContentType:String=null, slotBase:Sprite=null, compatibleDimensions:Array=null):ISlot{
            var _local13:Object = this.proxied.addSiteSectionNonTemporalSlot(customId, slotWidth, slotHeight, slotProfile, acceptCompanion, initialAdOption, adUnit, slotParameters, acceptPrimaryContentType, acceptContentType, slotBase, compatibleDimensions);
            return (((_local13) ? this._ISlot(_local13) : null));
        }
        public function setRendererConfiguration(xmlUrl:String, pathPrefix:String=null):void{
            this.proxied.setRendererConfiguration(xmlUrl, pathPrefix);
        }
        public function setVideoAsset(id:String, duration:Number, location:String=null, autoPlay:Boolean=true, videoPlayRandom:Number=0, networkId:uint=0, idType:uint=0, fallbackId:uint=0, durationType:String=null, autoPlayType:uint=0):void{
            this.proxied.setVideoAsset(id, duration, location, autoPlay, videoPlayRandom, networkId, idType, fallbackId, durationType, autoPlayType);
        }
        public function setVisitor(customId:String, ipV4Address:String=null, bandwidth:uint=0, bandwidthSource:String=null):void{
            this.proxied.setVisitor(customId, ipV4Address, bandwidth, bandwidthSource);
        }
        public function getVideoDisplay():Sprite{
            return (this.proxied.getVideoDisplay());
        }
        public function setLiveMode(isLive:Boolean):void{
            this.proxied.setLiveMode(isLive);
        }
        public function debugInitialize(param:Object):void{
            this.proxied.debugInitialize(param);
        }
        public function log(message:String, level:int):void{
            this.proxied.log(message, level);
        }
        public function setServer(url:String=null):void{
            this.proxied.setServer(url);
        }
        public function dispatchEvent(event:Object):void{
            this.proxied.dispatchEvent(event);
        }
        public function removeEventListener(event:String, handler:Function):void{
            if (((!((handler == null))) && (this.pool[handler]))){
                this.proxied.removeEventListener(event, this.pool[handler]);
            };
        }
        public function registerRendererStateTransitionCallback(transitionState:uint, hook:Function):void{
            this.proxied.registerRendererStateTransitionCallback(transitionState, hook);
        }
        public function addEventListener(event:String, handler:Function):void{
            var event:* = event;
            var handler:* = handler;
            if (((!((handler == null))) && (!(this.pool[handler])))){
                this.pool[handler] = function (ev:Object):void{
                    return;
                    /*not popped
                    handler(new IEvent(ev))
                    */
                };
            };
            this.proxied.addEventListener(event, this.pool[handler]);
        }
        public function addVideoPlayerNonTemporalSlot(customId:String, slotBase:Sprite, slotWidth:uint, slotHeight:uint, slotProfile:String=null, slotX:int=0, slotY:int=0, acceptCompanion:Boolean=true, adUnit:String=null, slotParameters:Object=null, acceptPrimaryContentType:String=null, acceptContentType:String=null, initialAdOption=null, compatibleDimensions:Array=null):ISlot{
            var _local15:Object = this.proxied.addVideoPlayerNonTemporalSlot(customId, slotBase, slotWidth, slotHeight, slotProfile, slotX, slotY, acceptCompanion, adUnit, slotParameters, acceptPrimaryContentType, acceptContentType, initialAdOption, compatibleDimensions);
            return (((_local15) ? this._ISlot(_local15) : null));
        }
        public function setKeyValue(key:String, value:String):void{
            this.proxied.setKeyValue(key, value);
        }
        public function submitRequest(timeoutSeconds:Number=0, maxDelayBeforeRequest:Number=0):void{
            this.proxied.submitRequest(timeoutSeconds, maxDelayBeforeRequest);
        }
        public function startSubsession(subsessionToken:uint):void{
            this.proxied.startSubsession(subsessionToken);
        }
        public function refresh():void{
            var _local1:Object;
            this.proxied.refresh();
            for (_local1 in this.pool2) {
                this.pool2[_local1].proxied = null;
                delete this.pool2[_local1];
            };
        }
        public function setSiteSection(id:String, pageViewRandom:Number=0, networkId:uint=0, idType:uint=0, fallbackId:uint=0):void{
            this.proxied.setSiteSection(id, pageViewRandom, networkId, idType, fallbackId);
        }
        public function getVideoDisplaySize():Rectangle{
            return (this.proxied.getVideoDisplaySize());
        }
        public function setVideoPlayStatus(playState:uint):void{
            this.proxied.setVideoPlayStatus(playState);
        }
        public function addSlotsByUrl(url:String):void{
            this.proxied.addSlotsByUrl(url);
        }
        public function scanSlotsOnPage(maxWaitSeconds:Number=0, onComplete:Function=null, keepInitialAds:Boolean=false, regExpFilter:String=null):Array{
            var _this:* = undefined;
            var maxWaitSeconds:int = maxWaitSeconds;
            var onComplete = onComplete;
            var keepInitialAds:Boolean = keepInitialAds;
            var regExpFilter = regExpFilter;
            _this = this;
            var r:* = this.proxied.scanSlotsOnPage(maxWaitSeconds, ((onComplete)!=null) ? function (r2:Array):void{
    var _local2:* = new Array();
    var _local3:* = r2.slice();
    while (_local3.length) {
        _local2.push(_this._ISlot(_local3.pop()));
    };
    return;
    /*not popped
    onComplete(_local2)
    */
} : null, keepInitialAds, regExpFilter).slice();
            var a:* = new Array();
            while (r.length) {
                a.push(this._ISlot(r.pop()));
            };
            return (a);
        }
        public function setProfile(playerProfile:String, defaultTemporalSlotProfile:String=null, defaultVideoPlayerSlotProfile:String=null, defaultSiteSectionSlotProfile:String=null):void{
            this.proxied.setProfile(playerProfile, defaultTemporalSlotProfile, defaultVideoPlayerSlotProfile, defaultSiteSectionSlotProfile);
        }
        protected function _ISlot(o:Object):ISlot{
            if (!this.pool2[o]){
                this.pool2[o] = new ISlot(o);
            };
            return (this.pool2[o]);
        }
        public function setVideoDisplaySize(temporalAdX:int, temporalAdY:int, temporalAdWidth:uint, temporalAdHeight:uint, videoDisplayX:int, videoDisplayY:int, videoDisplayWidth:uint, videoDisplayHeight:uint):void{
            this.proxied.setVideoDisplaySize(temporalAdX, temporalAdY, temporalAdWidth, temporalAdHeight, videoDisplayX, videoDisplayY, videoDisplayWidth, videoDisplayHeight);
        }
        public function getVideoPlayStatus():uint{
            return (this.proxied.getVideoPlayStatus());
        }
        public function setNetwork(networkId:uint):void{
            this.proxied.setNetwork(networkId);
        }
        public function getVideoPlayheadTime():Number{
            return (this.proxied.getVideoPlayheadTime());
        }
        public function getSiteSectionNonTemporalSlots():Array{
            var _local1:Array = this.proxied.getSiteSectionNonTemporalSlots().slice();
            var _local2:Array = new Array();
            while (_local1.length) {
                _local2.push(this._ISlot(_local1.pop()));
            };
            return (_local2);
        }
        public function getExtensionByName(name:String):Object{
            return (this.proxied.getExtensionByName(name));
        }
        public function getSlotsByTimePositionClass(tpc:String):Array{
            var _local2:Array = this.proxied.getSlotsByTimePositionClass(tpc).slice();
            var _local3:Array = new Array();
            while (_local2.length) {
                _local3.push(this._ISlot(_local2.pop()));
            };
            return (_local3);
        }
        public function setCustomDistributor(id:String, category:String, signature:String):void{
            this.proxied.setCustomDistributor(id, category, signature);
        }
        public function setParameter(name:String, value:String, level:uint):void{
            this.proxied.setParameter(name, value, level);
        }
        public function getSlotByCustomId(customId:String):ISlot{
            var _local2:Object = this.proxied.getSlotByCustomId(customId);
            return (((_local2) ? this._ISlot(_local2) : null));
        }
        public function setVideoAssetCurrentTimePosition(timePosition:Number):void{
            this.proxied.setVideoAssetCurrentTimePosition(timePosition);
        }
        public function loadExtension(name:String, urlOrInstance):void{
            this.proxied.loadExtension(name, urlOrInstance);
        }
        public function setVideoPlayer(videoPlayerNetworkId:uint):void{
            this.proxied.setVideoPlayer(videoPlayerNetworkId);
        }

    }
}//package tv.freewheel.ad.behavior 
﻿package tv.freewheel.ad.behavior {

    public interface IExtension {

        function init(_arg1:IAdManager):void;
        function dispose():void;

    }
}//package tv.freewheel.ad.behavior 
﻿package tv.freewheel.ad.behavior {

    public class IConstants {

        var proxied:Object;

        public function IConstants(p:Object){
            this.proxied = p;
        }
        public function get DATA_AD_CUSTOM_ID():String{
            return (this.proxied.DATA_AD_CUSTOM_ID);
        }
        public function get EVENT_PLAYING_SLOT_RESIZED():String{
            return (this.proxied.EVENT_PLAYING_SLOT_RESIZED);
        }
        public function get SLOT_TYPE_TEMPORAL():String{
            return (this.proxied.SLOT_TYPE_TEMPORAL);
        }
        public function get PARAM_KEY_ADUNIT_SEQUENCE():String{
            return (this.proxied.PARAM_KEY_ADUNIT_SEQUENCE);
        }
        public function get FW_CONTENT_TYPE_NULL_RENDERER():String{
            return (this.proxied.FW_CONTENT_TYPE_NULL_RENDERER);
        }
        public function get RENDERER_STATE_STOP_COMPLETE():uint{
            return (this.proxied.RENDERER_STATE_STOP_COMPLETE);
        }
        public function get CAPABILITY_RESET_EXCLUSIVITY():String{
            return (this.proxied.CAPABILITY_RESET_EXCLUSIVITY);
        }
        public function get ADUNIT_UNKNOWN():String{
            return (this.proxied.ADUNIT_UNKNOWN);
        }
        public function get DEMOGRAPHIC_ID():String{
            return (this.proxied.DEMOGRAPHIC_ID);
        }
        public function get ADUNIT_OVERLAY():String{
            return (this.proxied.ADUNIT_OVERLAY);
        }
        public function get EVENTCALLBACK_ERROR_3P_COMPONENT():String{
            return (this.proxied.EVENTCALLBACK_ERROR_3P_COMPONENT);
        }
        public function get EVENTCALLBACK_EXPAND():String{
            return (this.proxied.EVENTCALLBACK_EXPAND);
        }
        public function get RENDERER_EVENT_REWIND():uint{
            return (this.proxied.RENDERER_EVENT_REWIND);
        }
        public function get EVENTCALLBACK_MINIMIZE():String{
            return (this.proxied.EVENTCALLBACK_MINIMIZE);
        }
        public function get EVENT_PAUSESTATECHANGE_REQUEST():String{
            return (this.proxied.EVENT_PAUSESTATECHANGE_REQUEST);
        }
        public function get EVENTCALLBACK_ACCEPTINVITATION():String{
            return (this.proxied.EVENTCALLBACK_ACCEPTINVITATION);
        }
        public function get CAPABILITY_VIDEO_TRACKING():String{
            return (this.proxied.CAPABILITY_VIDEO_TRACKING);
        }
        public function get SLOT_ACCEPTANCE_UNKNOWN():int{
            return (this.proxied.SLOT_ACCEPTANCE_UNKNOWN);
        }
        public function get DEMOGRAPHIC_ETHNICITY():String{
            return (this.proxied.DEMOGRAPHIC_ETHNICITY);
        }
        public function get CAPABILITY_SUPPORT_AD_BUNDLE():String{
            return (this.proxied.CAPABILITY_SUPPORT_AD_BUNDLE);
        }
        public function get VIDEO_ASSET_DURATION_TYPE_VARIABLE():String{
            return (this.proxied.VIDEO_ASSET_DURATION_TYPE_VARIABLE);
        }
        public function get EVENT_REQUEST_COMPLETE():String{
            return (this.proxied.EVENT_REQUEST_COMPLETE);
        }
        public function get ADUNIT_POSTROLL():String{
            return (this.proxied.ADUNIT_POSTROLL);
        }
        public function get REQUEST_MODE_LIVE():String{
            return (this.proxied.REQUEST_MODE_LIVE);
        }
        public function get SLOT_OPTION_INITIAL_AD_KEEP_ORIGINAL():uint{
            return (this.proxied.SLOT_OPTION_INITIAL_AD_KEEP_ORIGINAL);
        }
        public function get EVENTCALLBACK_REWIND():String{
            return (this.proxied.EVENTCALLBACK_REWIND);
        }
        public function get TRANSLATOR_STATE_TRANSLATE_COMPLETE():uint{
            return (this.proxied.TRANSLATOR_STATE_TRANSLATE_COMPLETE);
        }
        public function get CAPABILITY_PACKAGE_HANDOFF():String{
            return (this.proxied.CAPABILITY_PACKAGE_HANDOFF);
        }
        public function get CAPABILITY_STATUS_UNSET():int{
            return (this.proxied.CAPABILITY_STATUS_UNSET);
        }
        public function get RENDERER_STATE_STOP_PENDING():uint{
            return (this.proxied.RENDERER_STATE_STOP_PENDING);
        }
        public function get CREATIVE_API_CLICKTAG():String{
            return (this.proxied.CREATIVE_API_CLICKTAG);
        }
        public function get EVENT_VIDEO_PLAY_STATUS_CHANGED():String{
            return (this.proxied.EVENT_VIDEO_PLAY_STATUS_CHANGED);
        }
        public function get SLOT_TYPE_SITESECTION_NONTEMPORAL():String{
            return (this.proxied.SLOT_TYPE_SITESECTION_NONTEMPORAL);
        }
        public function get EVENTCALLBACK_ERROR_NULL_ASSET():String{
            return (this.proxied.EVENTCALLBACK_ERROR_NULL_ASSET);
        }
        public function get EVENTCALLBACK_THIRDQUARTILE():String{
            return (this.proxied.EVENTCALLBACK_THIRDQUARTILE);
        }
        public function get VIDEO_ASSET_DURATION_TYPE_EXACT():String{
            return (this.proxied.VIDEO_ASSET_DURATION_TYPE_EXACT);
        }
        public function get TRANSLATOR_STATE_INITIALIZE_COMPLETE():uint{
            return (this.proxied.TRANSLATOR_STATE_INITIALIZE_COMPLETE);
        }
        public function get EVENTCALLBACK_PAUSE():String{
            return (this.proxied.EVENTCALLBACK_PAUSE);
        }
        public function get RENDERER_STATE_INITIALIZING():uint{
            return (this.proxied.RENDERER_STATE_INITIALIZING);
        }
        public function get EVENTCALLBACK_CLOSE():String{
            return (this.proxied.EVENTCALLBACK_CLOSE);
        }
        public function get RENDERER_EVENT_COMPLETE():uint{
            return (this.proxied.RENDERER_EVENT_COMPLETE);
        }
        public function get RENDERER_EVENT_PAUSE():uint{
            return (this.proxied.RENDERER_EVENT_PAUSE);
        }
        public function get ERROR_INVALID_SLOT():int{
            return (this.proxied.ERROR_INVALID_SLOT);
        }
        public function get RENDERER_EVENT_CLOSE():uint{
            return (this.proxied.RENDERER_EVENT_CLOSE);
        }
        public function get ERROR_ADINSTANCE_UNAVAILABLE():int{
            return (this.proxied.ERROR_ADINSTANCE_UNAVAILABLE);
        }
        public function get RENDERER_EVENT_PACKAGE_END():uint{
            return (this.proxied.RENDERER_EVENT_PACKAGE_END);
        }
        public function get EVENTCALLBACK_ERROR_IO():String{
            return (this.proxied.EVENTCALLBACK_ERROR_IO);
        }
        public function get EVENTCALLBACK_ERROR_UNMATCHED_SLOT_SIZE():String{
            return (this.proxied.EVENTCALLBACK_ERROR_UNMATCHED_SLOT_SIZE);
        }
        public function get PARAM_KEY_SLOT_CONFIGURATION():String{
            return (this.proxied.PARAM_KEY_SLOT_CONFIGURATION);
        }
        public function get RENDERER_EVENT_PACKAGE_START():uint{
            return (this.proxied.RENDERER_EVENT_PACKAGE_START);
        }
        public function get SLOT_LOCATION_PLAYER():String{
            return (this.proxied.SLOT_LOCATION_PLAYER);
        }
        public function get EVENTCALLBACK_ERROR_SLOT_UNAVAILABLE():String{
            return (this.proxied.EVENTCALLBACK_ERROR_SLOT_UNAVAILABLE);
        }
        public function get EVENTCALLBACK_ERROR_TIMEOUT():String{
            return (this.proxied.EVENTCALLBACK_ERROR_TIMEOUT);
        }
        public function get RENDERER_CAPABILITY_ADVOLUMECHANGE():uint{
            return (this.proxied.RENDERER_CAPABILITY_ADVOLUMECHANGE);
        }
        public function get DATA_EXCLUDED_INDUSTRIES():String{
            return (this.proxied.DATA_EXCLUDED_INDUSTRIES);
        }
        public function get CAPABILITY_SLOT_CALLBACK():String{
            return (this.proxied.CAPABILITY_SLOT_CALLBACK);
        }
        public function get RENDERER_CAPABILITY_ADPLAYBACKTRACK():uint{
            return (this.proxied.RENDERER_CAPABILITY_ADPLAYBACKTRACK);
        }
        public function get TIME_POSITION_CLASS_POSTROLL():String{
            return (this.proxied.TIME_POSITION_CLASS_POSTROLL);
        }
        public function get ADUNIT_MIDROLL():String{
            return (this.proxied.ADUNIT_MIDROLL);
        }
        public function get EVENT_NOTIFICATION():String{
            return (this.proxied.EVENT_NOTIFICATION);
        }
        public function get ERROR_3P_COMPONENT():int{
            return (this.proxied.ERROR_3P_COMPONENT);
        }
        public function get EVENTCALLBACK_FIRSTQUARTILE():String{
            return (this.proxied.EVENTCALLBACK_FIRSTQUARTILE);
        }
        public function get CREATIVE_API_SCRIPPS():String{
            return (this.proxied.CREATIVE_API_SCRIPPS);
        }
        public function get RENDERER_CAPABILITY_VIDEOSTATUSCONTROL():uint{
            return (this.proxied.RENDERER_CAPABILITY_VIDEOSTATUSCONTROL);
        }
        public function get EVENTCALLBACK_CLICKTRACKING():String{
            return (this.proxied.EVENTCALLBACK_CLICKTRACKING);
        }
        public function get EVENTCALLBACK_TYPE_STANDARD():String{
            return (this.proxied.EVENTCALLBACK_TYPE_STANDARD);
        }
        public function get DEMOGRAPHIC_INTEREST():String{
            return (this.proxied.DEMOGRAPHIC_INTEREST);
        }
        public function get CAPABILITY_SYNC_MULTI_REQUESTS():String{
            return (this.proxied.CAPABILITY_SYNC_MULTI_REQUESTS);
        }
        public function get SLOT_TYPE_VIDEOPLAYER_NONTEMPORAL():String{
            return (this.proxied.SLOT_TYPE_VIDEOPLAYER_NONTEMPORAL);
        }
        public function get TRANSLATOR_STATE_PRELOAD_COMPLETE():uint{
            return (this.proxied.TRANSLATOR_STATE_PRELOAD_COMPLETE);
        }
        public function get EVENTCALLBACK_TYPE_IMPRESSION():String{
            return (this.proxied.EVENTCALLBACK_TYPE_IMPRESSION);
        }
        public function get CAPABILITY_ADUNIT_IN_MULTIPLE_SLOTS():String{
            return (this.proxied.CAPABILITY_ADUNIT_IN_MULTIPLE_SLOTS);
        }
        public function get LEVEL_INFO():uint{
            return (this.proxied.LEVEL_INFO);
        }
        public function get TIME_POSITION_CLASS_PAUSE_MIDROLL():String{
            return (this.proxied.TIME_POSITION_CLASS_PAUSE_MIDROLL);
        }
        public function get DEMOGRAPHIC_RELATIONSHIP():String{
            return (this.proxied.DEMOGRAPHIC_RELATIONSHIP);
        }
        public function get CAPABILITY_SLOT_TEMPLATE():String{
            return (this.proxied.CAPABILITY_SLOT_TEMPLATE);
        }
        public function get TIME_POSITION_CLASS_PREROLL():String{
            return (this.proxied.TIME_POSITION_CLASS_PREROLL);
        }
        public function get SLOT_OPTION_INITIAL_AD_FIRST_COMPANION_OR_STAND_ALONE():uint{
            return (this.proxied.SLOT_OPTION_INITIAL_AD_FIRST_COMPANION_OR_STAND_ALONE);
        }
        public function get TRANSLATOR_STATE_TRANSLATING():uint{
            return (this.proxied.TRANSLATOR_STATE_TRANSLATING);
        }
        public function get EVENTCALLBACK_COMPLETE():String{
            return (this.proxied.EVENTCALLBACK_COMPLETE);
        }
        public function get DEMOGRAPHIC_GENDER():String{
            return (this.proxied.DEMOGRAPHIC_GENDER);
        }
        public function get RENDERER_EVENT_RESELLER_NO_AD():uint{
            return (this.proxied.RENDERER_EVENT_RESELLER_NO_AD);
        }
        public function get ERROR_NETWORK():int{
            return (this.proxied.ERROR_NETWORK);
        }
        public function get RENDERER_EVENT_FAIL():uint{
            return (this.proxied.RENDERER_EVENT_FAIL);
        }
        public function get PARAMETER_RENDERER():uint{
            return (this.proxied.PARAMETER_RENDERER);
        }
        public function get RENDERER_EVENT_ACCEPTINVITATION():uint{
            return (this.proxied.RENDERER_EVENT_ACCEPTINVITATION);
        }
        public function get CAPABILITY_SECURE_MODE():String{
            return (this.proxied.CAPABILITY_SECURE_MODE);
        }
        public function get EVENT_SLOT_STARTED():String{
            return (this.proxied.EVENT_SLOT_STARTED);
        }
        public function get SLOT_OPTION_INITIAL_AD_FIRST_COMPANION_ONLY():uint{
            return (this.proxied.SLOT_OPTION_INITIAL_AD_FIRST_COMPANION_ONLY);
        }
        public function get SLOT_TYPE_REDIRECT():String{
            return (this.proxied.SLOT_TYPE_REDIRECT);
        }
        public function get VIDEO_STATUS_STOPPED():uint{
            return (this.proxied.VIDEO_STATUS_STOPPED);
        }
        public function get ID_TYPE_FWGROUP():uint{
            return (this.proxied.ID_TYPE_FWGROUP);
        }
        public function get ADUNIT_SUBSESSION_POSTROLL():String{
            return (this.proxied.ADUNIT_SUBSESSION_POSTROLL);
        }
        public function get ERROR_NULL_ASSET():int{
            return (this.proxied.ERROR_NULL_ASSET);
        }
        public function get EVENT_DEBUG_INITIALIZATION():String{
            return (this.proxied.EVENT_DEBUG_INITIALIZATION);
        }
        public function get DEMOGRAPHIC_LANGUAGE():String{
            return (this.proxied.DEMOGRAPHIC_LANGUAGE);
        }
        public function get CAPABILITY_CHECK_TARGETING():String{
            return (this.proxied.CAPABILITY_CHECK_TARGETING);
        }
        public function get SLOT_ACCEPTANCE_ACCEPTED():int{
            return (this.proxied.SLOT_ACCEPTANCE_ACCEPTED);
        }
        public function get EVENT_CUSTOM():String{
            return (this.proxied.EVENT_CUSTOM);
        }
        public function get ERROR_INVALID_VALUE():int{
            return (this.proxied.ERROR_INVALID_VALUE);
        }
        public function get ERROR_UNKNOWN():int{
            return (this.proxied.ERROR_UNKNOWN);
        }
        public function get EVENTCALLBACK_ERROR_EXTERNAL_INTERFACE():String{
            return (this.proxied.EVENTCALLBACK_ERROR_EXTERNAL_INTERFACE);
        }
        public function get RENDERER_EVENT_COLLAPSE():uint{
            return (this.proxied.RENDERER_EVENT_COLLAPSE);
        }
        public function get REQUEST_MODE_ON_DEMAND():String{
            return (this.proxied.REQUEST_MODE_ON_DEMAND);
        }
        public function get ADUNIT_STREAM_PREROLL():String{
            return (this.proxied.ADUNIT_STREAM_PREROLL);
        }
        public function get ID_TYPE_FW():uint{
            return (this.proxied.ID_TYPE_FW);
        }
        public function get PARAMETER_PROFILE():uint{
            return (this.proxied.PARAMETER_PROFILE);
        }
        public function get ADUNIT_STREAM_POSTROLL():String{
            return (this.proxied.ADUNIT_STREAM_POSTROLL);
        }
        public function get CAPABILITY_STATUS_ON():int{
            return (this.proxied.CAPABILITY_STATUS_ON);
        }
        public function get ERROR_SLOT_UNAVAILABLE():int{
            return (this.proxied.ERROR_SLOT_UNAVAILABLE);
        }
        public function get EVENT_RENDERER():String{
            return (this.proxied.EVENT_RENDERER);
        }
        public function get RENDERER_EVENT_CUSTOM():uint{
            return (this.proxied.RENDERER_EVENT_CUSTOM);
        }
        public function get ERROR_IO():int{
            return (this.proxied.ERROR_IO);
        }
        public function get EVENT_ALLOWED_DOMAIN_REQUEST():String{
            return (this.proxied.EVENT_ALLOWED_DOMAIN_REQUEST);
        }
        public function get RENDERER_EVENT_IMPRESSION():uint{
            return (this.proxied.RENDERER_EVENT_IMPRESSION);
        }
        public function get ID_TYPE_CUSTOM():uint{
            return (this.proxied.ID_TYPE_CUSTOM);
        }
        public function get PARAM_KEY_FLASH_FRAME_RATE():String{
            return (this.proxied.PARAM_KEY_FLASH_FRAME_RATE);
        }
        public function get PARAMETER_SLOT():uint{
            return (this.proxied.PARAMETER_SLOT);
        }
        public function get ERROR_NO_AD_AVAILABLE():int{
            return (this.proxied.ERROR_NO_AD_AVAILABLE);
        }
        public function get DATA_AD_PRICE():String{
            return (this.proxied.DATA_AD_PRICE);
        }
        public function get CAPABILITY_STATUS_OFF():int{
            return (this.proxied.CAPABILITY_STATUS_OFF);
        }
        public function get SLOT_OPTION_INITIAL_AD_NO_STAND_ALONE():uint{
            return (this.proxied.SLOT_OPTION_INITIAL_AD_NO_STAND_ALONE);
        }
        public function get CREATIVE_API_VPAID():String{
            return (this.proxied.CREATIVE_API_VPAID);
        }
        public function get AD_COMPLETED():uint{
            return (this.proxied.AD_COMPLETED);
        }
        public function get SLOT_LOCATION_EXTERNAL():String{
            return (this.proxied.SLOT_LOCATION_EXTERNAL);
        }
        public function get EVENT_REFRESHED():String{
            return (this.proxied.EVENT_REFRESHED);
        }
        public function get PARAMETER_GLOBAL():uint{
            return (this.proxied.PARAMETER_GLOBAL);
        }
        public function get ADUNIT_PAUSE_MIDROLL():String{
            return (this.proxied.ADUNIT_PAUSE_MIDROLL);
        }
        public function get VIDEO_STATUS_PLAYING():uint{
            return (this.proxied.VIDEO_STATUS_PLAYING);
        }
        public function get CAPABILITY_MULTIPLE_CREATIVE_RENDITIONS():String{
            return (this.proxied.CAPABILITY_MULTIPLE_CREATIVE_RENDITIONS);
        }
        public function get SLOT_ACCEPTANCE_GENERATED():int{
            return (this.proxied.SLOT_ACCEPTANCE_GENERATED);
        }
        public function get DEMOGRAPHIC_AGE():String{
            return (this.proxied.DEMOGRAPHIC_AGE);
        }
        public function get EVENTCALLBACK_COLLAPSE():String{
            return (this.proxied.EVENTCALLBACK_COLLAPSE);
        }
        public function get CAPABILITY_CHECK_COMPANION():String{
            return (this.proxied.CAPABILITY_CHECK_COMPANION);
        }
        public function get RENDERER_STATE_FAIL():uint{
            return (this.proxied.RENDERER_STATE_FAIL);
        }
        public function get DEMOGRAPHIC_GROUP():String{
            return (this.proxied.DEMOGRAPHIC_GROUP);
        }
        public function get EVENTCALLBACK_ERROR_UNSUPPORTED_3P_FEATURE():String{
            return (this.proxied.EVENTCALLBACK_ERROR_UNSUPPORTED_3P_FEATURE);
        }
        public function get VIDEO_STATUS_PAUSED():uint{
            return (this.proxied.VIDEO_STATUS_PAUSED);
        }
        public function get ERROR_MISSING_PARAMETER():int{
            return (this.proxied.ERROR_MISSING_PARAMETER);
        }
        public function get SLOT_OPTION_INITIAL_AD_FIRST_COMPANION_OR_NO_STAND_ALONE_IF_TEMPORAL():uint{
            return (this.proxied.SLOT_OPTION_INITIAL_AD_FIRST_COMPANION_OR_NO_STAND_ALONE_IF_TEMPORAL);
        }
        public function get CREATIVE_API_YOUTUBE():String{
            return (this.proxied.CREATIVE_API_YOUTUBE);
        }
        public function get EVENTCALLBACK_ERROR_NETWORK():String{
            return (this.proxied.EVENTCALLBACK_ERROR_NETWORK);
        }
        public function get VIDEO_STATUS_UNKNOWN():uint{
            return (this.proxied.VIDEO_STATUS_UNKNOWN);
        }
        public function get EVENTCALLBACK_ERROR_SECURITY():String{
            return (this.proxied.EVENTCALLBACK_ERROR_SECURITY);
        }
        public function get RENDERER_EVENT_THIRDQUARTILE():uint{
            return (this.proxied.RENDERER_EVENT_THIRDQUARTILE);
        }
        public function get EVENT_EXTENSION_LOADED():String{
            return (this.proxied.EVENT_EXTENSION_LOADED);
        }
        public function get TRANSLATOR_STATE_PRELOADING():uint{
            return (this.proxied.TRANSLATOR_STATE_PRELOADING);
        }
        public function get LEVEL_ERROR():uint{
            return (this.proxied.LEVEL_ERROR);
        }
        public function get RENDERER_CAPABILITY_QUARTILE():uint{
            return (this.proxied.RENDERER_CAPABILITY_QUARTILE);
        }
        public function get PARAMETER_CREATIVERENDITION():uint{
            return (this.proxied.PARAMETER_CREATIVERENDITION);
        }
        public function get CAPABILITY_RECORD_VIDEO_VIEW():String{
            return (this.proxied.CAPABILITY_RECORD_VIDEO_VIEW);
        }
        public function get SLOT_OPTION_INITIAL_AD_NO_STAND_ALONE_IF_TEMPORAL():uint{
            return (this.proxied.SLOT_OPTION_INITIAL_AD_NO_STAND_ALONE_IF_TEMPORAL);
        }
        public function get EVENTCALLBACK_ERROR_INVALID_VALUE():String{
            return (this.proxied.EVENTCALLBACK_ERROR_INVALID_VALUE);
        }
        public function get EVENTCALLBACK_ERROR_UNKNOWN():String{
            return (this.proxied.EVENTCALLBACK_ERROR_UNKNOWN);
        }
        public function get DEMOGRAPHIC_EDUCATION():String{
            return (this.proxied.DEMOGRAPHIC_EDUCATION);
        }
        public function get SLOT_OPTION_INITIAL_AD_STAND_ALONE():uint{
            return (this.proxied.SLOT_OPTION_INITIAL_AD_STAND_ALONE);
        }
        public function get EVENTCALLBACK_TYPE_ACTION():String{
            return (this.proxied.EVENTCALLBACK_TYPE_ACTION);
        }
        public function get ERROR_EXTERNAL_INTERFACE():int{
            return (this.proxied.ERROR_EXTERNAL_INTERFACE);
        }
        public function get EVENTCALLBACK_TYPE_CLICKTRACKING():String{
            return (this.proxied.EVENTCALLBACK_TYPE_CLICKTRACKING);
        }
        public function get TIME_POSITION_CLASS_OVERLAY():String{
            return (this.proxied.TIME_POSITION_CLASS_OVERLAY);
        }
        public function get EVENTCALLBACK_DEFAULTCLICK():String{
            return (this.proxied.EVENTCALLBACK_DEFAULTCLICK);
        }
        public function get ADUNIT_PREROLL():String{
            return (this.proxied.ADUNIT_PREROLL);
        }
        public function get RENDERER_EVENT_MIDPOINT():uint{
            return (this.proxied.RENDERER_EVENT_MIDPOINT);
        }
        public function get SLOT_OPTION_INITIAL_AD_FIRST_COMPANION_THEN_STAND_ALONE():uint{
            return (this.proxied.SLOT_OPTION_INITIAL_AD_FIRST_COMPANION_THEN_STAND_ALONE);
        }
        public function get PARAMETER_DEFAULT():uint{
            return (this.proxied.PARAMETER_DEFAULT);
        }
        public function get ERROR_PARSE_ERROR():int{
            return (this.proxied.ERROR_PARSE_ERROR);
        }
        public function get ERROR_NOERROR():int{
            return (this.proxied.ERROR_NOERROR);
        }
        public function get TRANSLATOR_STATE_FAIL():uint{
            return (this.proxied.TRANSLATOR_STATE_FAIL);
        }
        public function get EVENTCALLBACK_ERROR_NO_AD_AVAILABLE():String{
            return (this.proxied.EVENTCALLBACK_ERROR_NO_AD_AVAILABLE);
        }
        public function get RENDERER_STATE_PLAY_PENDING():uint{
            return (this.proxied.RENDERER_STATE_PLAY_PENDING);
        }
        public function get VIDEO_ASSET_AUTO_PLAY_TYPE_UNATTENDED():uint{
            return (this.proxied.VIDEO_ASSET_AUTO_PLAY_TYPE_UNATTENDED);
        }
        public function get LEVEL_QUIET():uint{
            return (this.proxied.LEVEL_QUIET);
        }
        public function get VIDEO_STATUS_COMPLETED():uint{
            return (this.proxied.VIDEO_STATUS_COMPLETED);
        }
        public function get CREATIVE_API_NOAPI():String{
            return (this.proxied.CREATIVE_API_NOAPI);
        }
        public function get EVENTCALLBACK_DEFAULTIMPRESSION():String{
            return (this.proxied.EVENTCALLBACK_DEFAULTIMPRESSION);
        }
        public function get RENDERER_EVENT_RESUME():uint{
            return (this.proxied.RENDERER_EVENT_RESUME);
        }
        public function get VIDEO_ASSET_AUTO_PLAY_TYPE_ATTENDED():uint{
            return (this.proxied.VIDEO_ASSET_AUTO_PLAY_TYPE_ATTENDED);
        }
        public function get RENDERER_EVENT_FIRSTQUARTILE():uint{
            return (this.proxied.RENDERER_EVENT_FIRSTQUARTILE);
        }
        public function get RENDERER_EVENT_UNMUTE():uint{
            return (this.proxied.RENDERER_EVENT_UNMUTE);
        }
        public function get LEVEL_DEBUG():uint{
            return (this.proxied.LEVEL_DEBUG);
        }
        public function get EVENTCALLBACK_MUTE():String{
            return (this.proxied.EVENTCALLBACK_MUTE);
        }
        public function get RENDERER_CAPABILITY_ADSIZECHANGE():uint{
            return (this.proxied.RENDERER_CAPABILITY_ADSIZECHANGE);
        }
        public function get TRANSLATOR_STATE_INITIALIZING():uint{
            return (this.proxied.TRANSLATOR_STATE_INITIALIZING);
        }
        public function get LEVEL_WARNING():uint{
            return (this.proxied.LEVEL_WARNING);
        }
        public function get EVENTCALLBACK_TYPE_CLICK():String{
            return (this.proxied.EVENTCALLBACK_TYPE_CLICK);
        }
        public function get PARAMETER_CREATIVE():uint{
            return (this.proxied.PARAMETER_CREATIVE);
        }
        public function get DEMOGRAPHIC_INCOME():String{
            return (this.proxied.DEMOGRAPHIC_INCOME);
        }
        public function get EVENT_SLOT_PRELOADED():String{
            return (this.proxied.EVENT_SLOT_PRELOADED);
        }
        public function get EVENTCALLBACK_RESUME():String{
            return (this.proxied.EVENTCALLBACK_RESUME);
        }
        public function get ADUNIT_SUBSESSION_PREROLL():String{
            return (this.proxied.ADUNIT_SUBSESSION_PREROLL);
        }
        public function get CREATIVE_API_FWOVERLAY():String{
            return (this.proxied.CREATIVE_API_FWOVERLAY);
        }
        public function get EVENTCALLBACK_UNMUTE():String{
            return (this.proxied.EVENTCALLBACK_UNMUTE);
        }
        public function get ERROR_UNSUPPORTED_3P_FEATURE():int{
            return (this.proxied.ERROR_UNSUPPORTED_3P_FEATURE);
        }
        public function get PARAM_KEY_DESIRED_BITRATE():String{
            return (this.proxied.PARAM_KEY_DESIRED_BITRATE);
        }
        public function get ERROR_SECURITY():int{
            return (this.proxied.ERROR_SECURITY);
        }
        public function get EVENTCALLBACK_ERROR_MISSING_PARAMETER():String{
            return (this.proxied.EVENTCALLBACK_ERROR_MISSING_PARAMETER);
        }
        public function get RENDERER_EVENT_MUTE():uint{
            return (this.proxied.RENDERER_EVENT_MUTE);
        }
        public function get RENDERER_STATE_INITIALIZE_COMPLETE():uint{
            return (this.proxied.RENDERER_STATE_INITIALIZE_COMPLETE);
        }
        public function get RENDERER_EVENT_MINIMIZE():uint{
            return (this.proxied.RENDERER_EVENT_MINIMIZE);
        }
        public function get PARAMETER_OVERRIDE():uint{
            return (this.proxied.PARAMETER_OVERRIDE);
        }
        public function get RENDERER_STATE_PRELOADING():uint{
            return (this.proxied.RENDERER_STATE_PRELOADING);
        }
        public function get RENDERER_STATE_PLAYING():uint{
            return (this.proxied.RENDERER_STATE_PLAYING);
        }
        public function get RENDERER_CAPABILITY_ADPLAYSTATECHANGE():uint{
            return (this.proxied.RENDERER_CAPABILITY_ADPLAYSTATECHANGE);
        }
        public function get EVENTCALLBACK_MIDPOINT():String{
            return (this.proxied.EVENTCALLBACK_MIDPOINT);
        }
        public function get EVENT_SLOT_PAUSESTATE_CHANGED():String{
            return (this.proxied.EVENT_SLOT_PAUSESTATE_CHANGED);
        }
        public function get TIME_POSITION_CLASS_DISPLAY():String{
            return (this.proxied.TIME_POSITION_CLASS_DISPLAY);
        }
        public function get RENDERER_STATE_PRELOAD_COMPLETE():uint{
            return (this.proxied.RENDERER_STATE_PRELOAD_COMPLETE);
        }
        public function get TIME_POSITION_CLASS_MIDROLL():String{
            return (this.proxied.TIME_POSITION_CLASS_MIDROLL);
        }
        public function get EVENTCALLBACK_ERROR_INVALID_SLOT():String{
            return (this.proxied.EVENTCALLBACK_ERROR_INVALID_SLOT);
        }
        public function get ERROR_UNMATCHED_SLOT_SIZE():int{
            return (this.proxied.ERROR_UNMATCHED_SLOT_SIZE);
        }
        public function get EVENTCALLBACK_ERROR_ADINSTANCE_UNAVAILABLE():String{
            return (this.proxied.EVENTCALLBACK_ERROR_ADINSTANCE_UNAVAILABLE);
        }
        public function get EVENTCALLBACK_ERROR_PARSE_ERROR():String{
            return (this.proxied.EVENTCALLBACK_ERROR_PARSE_ERROR);
        }
        public function get RENDERER_EVENT_IMPRESSION_END():uint{
            return (this.proxied.RENDERER_EVENT_IMPRESSION_END);
        }
        public function get RENDERER_EVENT_CLICK():uint{
            return (this.proxied.RENDERER_EVENT_CLICK);
        }
        public function get AD_FAILED():uint{
            return (this.proxied.AD_FAILED);
        }
        public function get ERROR_TIMEOUT():int{
            return (this.proxied.ERROR_TIMEOUT);
        }
        public function get AD_PLAYING():uint{
            return (this.proxied.AD_PLAYING);
        }
        public function get CAPABILITY_BYPASS_COMMERCIAL_RATIO_RESTRICTION():String{
            return (this.proxied.CAPABILITY_BYPASS_COMMERCIAL_RATIO_RESTRICTION);
        }
        public function get SLOT_OPTION_INITIAL_AD_FIRST_COMPANION_OR_NO_STAND_ALONE():uint{
            return (this.proxied.SLOT_OPTION_INITIAL_AD_FIRST_COMPANION_OR_NO_STAND_ALONE);
        }
        public function get RENDERER_EVENT_EXPAND():uint{
            return (this.proxied.RENDERER_EVENT_EXPAND);
        }
        public function get EVENT_SLOT_ENDED():String{
            return (this.proxied.EVENT_SLOT_ENDED);
        }

    }
}//package tv.freewheel.ad.behavior 
﻿package tv.freewheel.ad.behavior {
    import flash.utils.*;

    public class ICreativeRendition {

        protected var pool:Dictionary;
        var proxied:Object;

        public function ICreativeRendition(p:Object){
            this.proxied = p;
            this.pool = new Dictionary();
        }
        public function getDuration():Number{
            return (((this.proxied) ? this.proxied.getDuration() : -1));
        }
        public function getBaseUnit():String{
            return (((this.proxied) ? this.proxied.getBaseUnit() : null));
        }
        public function getHeight():uint{
            return (((this.proxied) ? this.proxied.getHeight() : 0));
        }
        public function getWidth():uint{
            return (((this.proxied) ? this.proxied.getWidth() : 0));
        }
        public function getPreference():int{
            return (((this.proxied) ? this.proxied.getPreference() : -1));
        }
        public function getCreativeRenditionAssets(value:String, field:String="name"):Array{
            if (!this.proxied){
                return (null);
            };
            var _local3:Array = this.proxied.getCreativeRenditionAssets(value, field);
            var _local4:Array = new Array();
            var _local5:uint;
            while (_local5 < _local3.length) {
                _local4.push(this._ICreativeRenditionAsset(_local3[_local5]));
                _local5++;
            };
            return (_local4);
        }
        protected function _ICreativeRenditionAsset(o:Object):ICreativeRenditionAsset{
            if (!this.pool[o]){
                this.pool[o] = new ICreativeRenditionAsset(o);
            };
            return (this.pool[o]);
        }
        public function getWrapperType():String{
            return (((this.proxied) ? this.proxied.getWrapperType() : null));
        }
        public function getWrapperURL():String{
            return (((this.proxied) ? this.proxied.getWrapperURL() : null));
        }
        public function getCreativeAPI():String{
            return (((this.proxied) ? this.proxied.getCreativeAPI() : null));
        }
        public function getContentType():String{
            return (((this.proxied) ? this.proxied.getContentType() : null));
        }
        public function getPrimaryCreativeRenditionAsset():ICreativeRenditionAsset{
            if (!this.proxied){
                return (null);
            };
            var _local1:Object = this.proxied.getPrimaryCreativeRenditionAsset();
            return (((_local1) ? this._ICreativeRenditionAsset(_local1) : null));
        }
        public function getAllCreativeRenditionAssets():Array{
            if (!this.proxied){
                return (null);
            };
            var _local1:Array = this.proxied.getAllCreativeRenditionAssets();
            var _local2:Array = new Array();
            var _local3:uint;
            while (_local3 < _local1.length) {
                _local2.push(this._ICreativeRenditionAsset(_local1[_local3]));
                _local3++;
            };
            return (_local2);
        }

    }
}//package tv.freewheel.ad.behavior 
﻿package tv.freewheel.ad.behavior {
    import flash.display.*;
    import flash.utils.*;

    public class ISlot {

        var proxied:Object;
        protected var pool:Dictionary;

        public function ISlot(p:Object){
            this.proxied = p;
            this.pool = new Dictionary();
        }
        public function getTotalDuration(estimate:Boolean=false):Number{
            return (((this.proxied) ? this.proxied.getTotalDuration(estimate) : 0));
        }
        public function getEmbeddedAdsDuration():Number{
            return (((this.proxied) ? this.proxied.getEmbeddedAdsDuration() : -1));
        }
        public function pause(pauseState:Boolean=true):void{
            if (this.proxied){
                this.proxied.pause(pauseState);
            };
        }
        public function getBase():Sprite{
            return (((this.proxied) ? this.proxied.getBase() : null));
        }
        public function setVisible(visible:Boolean):void{
            if (this.proxied){
                this.proxied.setVisible(visible);
            };
        }
        public function preload():void{
            if (this.proxied){
                this.proxied.preload();
            };
        }
        public function getTimePosition():Number{
            return (((this.proxied) ? this.proxied.getTimePosition() : 0));
        }
        public function getEventCallbackURLs():Array{
            return (((this.proxied) ? this.proxied.getEventCallbackURLs() : null));
        }
        public function isActive():Boolean{
            return (((this.proxied) ? this.proxied.isActive() : false));
        }
        protected function _IAdInstance(o:Object):IAdInstance{
            if (!this.pool[o]){
                this.pool[o] = new IAdInstance(o);
            };
            return (this.pool[o]);
        }
        public function hasCompanion():Boolean{
            return (((this.proxied) ? this.proxied.hasCompanion() : false));
        }
        public function getTimePositionClass():String{
            return (((this.proxied) ? this.proxied.getTimePositionClass() : null));
        }
        public function getAcceptance():int{
            return (((this.proxied) ? this.proxied.getAcceptance() : 0));
        }
        public function getWidth():uint{
            return (((this.proxied) ? this.proxied.getWidth() : 0));
        }
        public function getParameterObject(name:String):Object{
            return (((this.proxied) ? this.proxied.getParameterObject(name) : null));
        }
        public function stop(immediate:Boolean=false):void{
            if (this.proxied){
                this.proxied.stop(immediate);
            };
        }
        public function getEndTimePosition():Number{
            return (((this.proxied) ? this.proxied.getEndTimePosition() : -1));
        }
        public function getHeight():uint{
            return (((this.proxied) ? this.proxied.getHeight() : 0));
        }
        public function getTotalBytes(estimate:Boolean=false):int{
            return (((this.proxied) ? this.proxied.getTotalBytes(estimate) : 0));
        }
        public function getBytesLoaded(estimate:Boolean=false):int{
            return (((this.proxied) ? this.proxied.getBytesLoaded(estimate) : 0));
        }
        public function getPhysicalLocation():String{
            return (((this.proxied) ? this.proxied.getPhysicalLocation() : null));
        }
        public function getAdInstances(withWrapperAd:Boolean=true):Array{
            if (!this.proxied){
                return (null);
            };
            var _local2:Array = this.proxied.getAdInstances(withWrapperAd);
            var _local3:Array = new Array();
            var _local4:uint;
            while (_local4 < _local2.length) {
                _local3.push(this._IAdInstance(_local2[_local4]));
                _local4++;
            };
            return (_local3);
        }
        public function dispose():void{
            var _local1:Object;
            for (_local1 in this.pool) {
                this.pool[_local1].proxied = null;
                delete this.pool[_local1];
            };
            this.proxied = null;
        }
        public function setParameter(name:String, value:String):void{
            if (this.proxied){
                this.proxied.setParameter(name, value);
            };
        }
        public function getCustomId():String{
            return (((this.proxied) ? this.proxied.getCustomId() : null));
        }
        public function setBase(slotBase:Sprite):void{
            if (this.proxied){
                this.proxied.setBase(slotBase);
            };
        }
        public function getType():String{
            return (((this.proxied) ? this.proxied.getType() : null));
        }
        public function getParameter(name:String):String{
            return (((this.proxied) ? this.proxied.getParameter(name) : null));
        }
        public function play(adRefId:String=null, adState:uint=0):void{
            if (this.proxied){
                this.proxied.play(adRefId, adState);
            };
        }
        public function getAdCount():uint{
            return (((this.proxied) ? this.proxied.getAdCount() : 0));
        }
        public function getPlayheadTime(estimate:Boolean=false):Number{
            return (((this.proxied) ? this.proxied.getPlayheadTime(estimate) : 0));
        }
        public function skipCurrentAd():void{
            if (this.proxied){
                this.proxied.skipCurrentAd();
            };
        }
        public function setBounds(x:int, y:int, width:uint, height:uint):void{
            if (this.proxied){
                this.proxied.setBounds(x, y, width, height);
            };
        }
        public function playCompanion():void{
            if (this.proxied){
                this.proxied.playCompanion();
            };
        }

    }
}//package tv.freewheel.ad.behavior 
﻿package tv.freewheel.ad.behavior {

    public class ICreativeRenditionAsset {

        var proxied:Object;

        public function ICreativeRenditionAsset(p:Object){
            this.proxied = p;
        }
        public function getContent():String{
            return (((this.proxied) ? this.proxied.getContent() : null));
        }
        public function getMimeType():String{
            return (((this.proxied) ? this.proxied.getMimeType() : null));
        }
        public function getBytes():int{
            return (((this.proxied) ? this.proxied.getBytes() : -1));
        }
        public function getURL():String{
            return (((this.proxied) ? this.proxied.getURL() : null));
        }
        public function getContentType():String{
            return (((this.proxied) ? this.proxied.getContentType() : null));
        }

    }
}//package tv.freewheel.ad.behavior 
﻿package tv.freewheel.ad.behavior {
    import flash.utils.*;

    public class IEvent {

        protected var pool:Dictionary;
        var proxied:Object;

        public function IEvent(p:Object){
            this.proxied = p;
            this.pool = new Dictionary();
        }
        protected function _IAdInstance(o:Object):IAdInstance{
            if (!this.pool[o]){
                this.pool[o] = new IAdInstance(o);
            };
            return (this.pool[o]);
        }
        public function get adReferenceId():String{
            return (this.proxied.adReferenceId);
        }
        public function get level():int{
            return (this.proxied.level);
        }
        public function get domain():String{
            return (this.proxied.domain);
        }
        public function get message():String{
            return (this.proxied.message);
        }
        public function get details():Object{
            return (this.proxied.details);
        }
        public function get subType():String{
            return (this.proxied.subType);
        }
        public function get creativeId():int{
            return (this.proxied.creativeId);
        }
        public function get adPause():Boolean{
            return (this.proxied.adPause);
        }
        public function get code():int{
            return (this.proxied.code);
        }
        public function get serverMessages():Array{
            return (this.proxied.serverMessages);
        }
        public function get videoPlayStatus():int{
            return (this.proxied.videoPlayStatus);
        }
        public function get slotCustomId():String{
            return (this.proxied.slotCustomId);
        }
        public function get success():Boolean{
            return (this.proxied.success);
        }
        public function get moduleName():String{
            return (this.proxied.moduleName);
        }
        public function get type():String{
            return (this.proxied.type);
        }
        public function get videoPause():Boolean{
            return (this.proxied.videoPause);
        }
        public function get adId():int{
            return (this.proxied.adId);
        }
        public function get adInstance():IAdInstance{
            if (((!(this.proxied)) || (!(this.proxied.adInstance)))){
                return (null);
            };
            return (this._IAdInstance(this.proxied.adInstance));
        }

    }
}//package tv.freewheel.ad.behavior 
﻿package tv.freewheel.ad.loader {
    import flash.display.*;
    import flash.events.*;
    import flash.net.*;
    import flash.system.*;
    import tv.freewheel.ad.behavior.*;

    public class AdManagerLoader extends Sprite {

        public static const LEVEL_WARNING:String = "WARN";
        public static const LEVEL_INFO:String = "INFO";
        private static const Caller:String = ((((("AS3-" + Tag) + "-r") + Revision) + "-") + Timestamp);
        public static const LEVEL_ERROR:String = "ERROR";
        public static const LEVEL_DEBUG:String = "VERBOSE";
        public static const LEVEL_QUIET:String = "QUIET";
        private static const Tag:String = "6.0.0";
        private static const Revision:String = "10757";
        private static const Timestamp:String = "1503090702";

        public static var forceAdManagerUrl:String;

        private var __adManagerMC:MovieClip;
        private var __parent:Sprite;
        private var __logLevel:String;
        private var __importIEvent:IEvent;
        private var __isLocalLoad:Boolean;
        private var __adManagerUrl:String;
        private var __loader:Loader;
        private var __loadComplete:Function;
        private var __importIExtension:IExtension;
        private var __logLevelMap:Object;

        public function AdManagerLoader(){
            log(Caller);
            this.__logLevelMap = {
                VERBOSE:0,
                INFO:1,
                WARN:2,
                ERROR:3,
                QUIET:4
            };
        }
        private static function log(s:String):void{
            trace(("--FreeWheel-- AdManagerLoader " + s));
        }
        private static function getDomain(_url:String):String{
            if (_url == null){
                return (null);
            };
            var _local2:String = _url;
            if (_local2.lastIndexOf("/") > 8){
                _local2 = _local2.substr(0, _local2.indexOf("/", 8));
                if (_local2.indexOf("/") > -1){
                    _local2 = _local2.substr((_local2.lastIndexOf("/") + 1));
                };
            };
            return (_local2);
        }
        private static function getLibraryVersion():uint{
            var _local1:Array = Tag.toLowerCase().split("trunk").join("99").split("x").join("99").split(".");
            while (_local1.length < 4) {
                _local1.push("0");
            };
            var _local2:uint = ((((((0x0100 * 0x0100) * 0x0100) * _local1[0]) + ((0x0100 * 0x0100) * _local1[1])) + (0x0100 * _local1[2])) + (1 * _local1[3]));
            return (_local2);
        }

        private function securityErrorHandler(e:SecurityErrorEvent):void{
            this.__loadComplete(false, ("Security Error: " + e.toString()));
        }
        public function proxyAdManager(o:Object):IAdManager{
            return (new IAdManager(o));
        }
        public function loadAdManager(_parent:Sprite, _loadComplete:Function, _logLevel:String, _urlOverride:String, _cacheBuster:Number):void{
            var _parent:* = _parent;
            var _loadComplete:* = _loadComplete;
            var _logLevel:* = _logLevel;
            var _urlOverride:* = _urlOverride;
            var _cacheBuster:* = _cacheBuster;
            log((("loadAdManager(" + _urlOverride) + ")"));
            if (null == _loadComplete){
                _loadComplete = function (succ:Boolean, errStr:String):void{
                    log("Warning: load complete callback is not specified");
                };
            };
            this.__parent = _parent;
            this.__loadComplete = _loadComplete;
            this.__logLevel = _logLevel;
            this.__loader = new Loader();
            this.__loader.contentLoaderInfo.addEventListener(Event.COMPLETE, this.completeHandler);
            this.__loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, this.ioErrorHandler);
            this.__loader.contentLoaderInfo.addEventListener(SecurityErrorEvent.SECURITY_ERROR, this.securityErrorHandler);
            this.__adManagerUrl = _urlOverride;
            if (forceAdManagerUrl != null){
                this.__adManagerUrl = forceAdManagerUrl;
            };
            if (((!((this.__adManagerUrl == null))) && (!((this.__adManagerUrl.indexOf("://") == -1))))){
                try {
                    Security.allowDomain(getDomain(this.__adManagerUrl));
                } catch(e:Error) {
                    log(((("Error: Security.allowDomain sandboxTpe:" + Security.sandboxType) + " message:") + e.message));
                };
            };
            if (Security.sandboxType == Security.REMOTE){
                this.__adManagerUrl = (this.__adManagerUrl + ("?logLevel=" + _logLevel));
                if (!isNaN(_cacheBuster)){
                    this.__adManagerUrl = (this.__adManagerUrl + ("&cb=" + _cacheBuster));
                };
            } else {
                this.__isLocalLoad = true;
            };
            var __loaderRequestURL:* = new URLRequest(this.__adManagerUrl);
            log(("load from " + this.__adManagerUrl));
            var loaderContext:* = new LoaderContext();
            loaderContext.applicationDomain = new ApplicationDomain();
            switch (Security.sandboxType){
                case Security.REMOTE:
                    loaderContext.securityDomain = SecurityDomain.currentDomain;
                    this.__loader.load(__loaderRequestURL, loaderContext);
                    break;
                    this.__loader.load(__loaderRequestURL, loaderContext);
            };
            if ((this.__parent is MovieClip)){
                this.__parent.addChild(this.__loader);
            };
        }
        private function completeHandler(e:Event):void{
            log("load complete");
            if (this.__loader.contentLoaderInfo.actionScriptVersion == 2){
                this.__loadComplete(false, "Error: wrong AVM version.");
                return;
            };
            this.__adManagerMC = MovieClip(this.__loader.content);
            this.__adManagerMC.initialize({
                stageUrl:((((this.__parent) && (this.__parent.stage))) ? this.__parent.stage.loaderInfo.url : null),
                logLevel:((this.__isLocalLoad) ? this.__logLevelMap[this.__logLevel] : -1),
                admURL:this.__adManagerUrl,
                loaderInstance:this
            });
            this.__loadComplete(true, "Ready.");
        }
        public function getAppDomain():ApplicationDomain{
            return (ApplicationDomain.currentDomain);
        }
        public function newAdManager():IAdManager{
            log("newAdManager()");
            if (this.__adManagerMC){
                return (this.proxyAdManager(this.__adManagerMC.getNewInstance(getLibraryVersion())));
            };
            log("Error: runtime library not loaded.");
            return (null);
        }
        private function ioErrorHandler(e:IOErrorEvent):void{
            this.__loadComplete(false, ("IO Error: " + e.toString()));
        }
        public function disposeAdManager(adManager:IAdManager):void{
            log("disposeAdManager()");
            if (adManager){
                adManager.dispose();
            } else {
                log("Error: runtime library not loaded.");
            };
        }
        public function loadAdManagerByProfile(parentObject:Sprite, onComplete:Function, logLevel:String, profile:String, cacheBuster:Number=0):void{
            log((("loadAdManagerByProfile(" + profile) + ")"));
            var _local6:String = "http://adm.fwmrm.net/p/";
            var _local7:String = "/AdManager.swf";
            var _local8:String = ((_local6 + profile) + _local7);
            this.loadAdManager(parentObject, onComplete, logLevel, _local8, cacheBuster);
        }

    }
}//package tv.freewheel.ad.loader 
﻿package tv.freewheel.wrapper.osmf.slot {
    import org.osmf.media.*;
    import org.osmf.events.*;
    import flash.geom.*;
    import org.osmf.traits.*;
    import tv.freewheel.ad.behavior.*;
    import tv.freewheel.wrapper.osmf.events.*;

    public class FWSlotElement extends MediaElement {

        private var am:IAdManager;
        private var _slot:ISlot;

        public function FWSlotElement(am:IAdManager, slot:ISlot, slotBounds:Object=null){
            var _local6:DisplayObjectTrait;
            var _local7:TimeTrait;
            super();
            this.am = am;
            this._slot = slot;
            var _local4:PlayTrait = new FWSlotPlayTrait(am, slot);
            addTrait(MediaTraitType.PLAY, _local4);
            if (slot.getPhysicalLocation() == am.getConstants().SLOT_LOCATION_PLAYER){
                _local6 = new FWSlotDisplayObjectTrait((slot as ISlot), slotBounds);
                addTrait(MediaTraitType.DISPLAY_OBJECT, _local6);
                _local4.addEventListener(PlayEvent.PLAY_STATE_CHANGE, this.onPlayStateChange);
            };
            if (this.supportTimeTrait){
                _local7 = new FWSlotTimeTrait(this.am, (this.slot as ISlot));
                addTrait(MediaTraitType.TIME, _local7);
            };
            var _local5:FWSlotAudioTrait = new FWSlotAudioTrait(am, slot);
            addTrait(MediaTraitType.AUDIO, _local5);
        }
        private function get supportTimeTrait():Boolean{
            var _local1:IConstants;
            if (this.am){
                _local1 = this.am.getConstants();
                return (([_local1.TIME_POSITION_CLASS_PREROLL, _local1.TIME_POSITION_CLASS_MIDROLL, _local1.TIME_POSITION_CLASS_POSTROLL].indexOf(this.slot.getTimePositionClass()) > -1));
            };
            return (false);
        }
        public function get slot():Object{
            return (this._slot);
        }
        public function get customId():String{
            return (this._slot.getCustomId());
        }
        public function get timePositionClass():String{
            return (this._slot.getTimePositionClass());
        }
        public function get timePosition():Number{
            return (this._slot.getTimePosition());
        }
        public function setBounds(rect:Rectangle):void{
            this._slot.setBounds(rect.x, rect.y, rect.width, rect.height);
            var _local2:FWSlotDisplayObjectTrait = (this.getTrait(MediaTraitType.DISPLAY_OBJECT) as FWSlotDisplayObjectTrait);
            if (_local2){
                _local2.setBounds(rect);
            };
        }
        public function preload():void{
            this._slot.preload();
        }
        public function get playState():String{
            var _local1:PlayTrait = (this.getTrait(MediaTraitType.PLAY) as FWSlotPlayTrait);
            if (_local1){
                return (_local1.playState);
            };
            return (null);
        }
        public function play():void{
            var _local1:PlayTrait = (this.getTrait(MediaTraitType.PLAY) as FWSlotPlayTrait);
            if (_local1){
                _local1.play();
            } else {
                trace("NO PLAY TRAIT YET!");
            };
        }
        public function stop():void{
            var _local1:PlayTrait = (this.getTrait(MediaTraitType.PLAY) as FWSlotPlayTrait);
            if (_local1){
                _local1.stop();
            };
            var _local2:FWSlotTimeTrait = (this.getTrait(MediaTraitType.TIME) as FWSlotTimeTrait);
            if (_local2){
                _local2.stop();
            };
        }
        public function pause():void{
            var _local1:PlayTrait = (this.getTrait(MediaTraitType.PLAY) as FWSlotPlayTrait);
            if (_local1){
                _local1.pause();
            };
        }
        public function get duration():Number{
            var _local1:TimeTrait = (this.getTrait(MediaTraitType.TIME) as TimeTrait);
            if (_local1){
                return (_local1.duration);
            };
            return (NaN);
        }
        public function get currentTime():Number{
            var _local1:TimeTrait = (this.getTrait(MediaTraitType.TIME) as TimeTrait);
            if (_local1){
                return (_local1.currentTime);
            };
            return (NaN);
        }
        protected function onPlayStateChange(e:PlayEvent):void{
            switch (e.playState){
                case PlayState.PLAYING:
                    dispatchEvent(new FWSlotEvent(FWSlotEvent.SLOT_START, false, false, this));
                    break;
                case PlayState.STOPPED:
                    dispatchEvent(new FWSlotEvent(FWSlotEvent.SLOT_END, false, false, this));
                    break;
            };
        }
        public function get numAds():int{
            if (this._slot){
                return (this._slot.getAdInstances().length);
            };
            return (0);
        }

    }
}//package tv.freewheel.wrapper.osmf.slot 
﻿package tv.freewheel.wrapper.osmf.slot {
    import flash.utils.*;
    import org.osmf.traits.*;
    import tv.freewheel.ad.behavior.*;

    public class FWSlotPlayTrait extends PlayTrait {

        private var am:IAdManager;
        private var slot:ISlot;

        public function FWSlotPlayTrait(am:IAdManager, slot:ISlot){
            this.am = am;
            this.slot = slot;
            am.addEventListener(am.getConstants().EVENT_SLOT_ENDED, this.onSlotEnd);
        }
        override protected function playStateChangeStart(newPlayState:String):void{
            switch (newPlayState){
                case PlayState.PLAYING:
                    this.slot.play();
                    break;
                case PlayState.PAUSED:
                    this.slot.pause();
                    break;
                case PlayState.STOPPED:
                    this.slot.stop();
                    break;
            };
        }
        override public function get canPause():Boolean{
            return (true);
        }
        private function onSlotEnd(e:IEvent):void{
            if (e.slotCustomId == this.slot.getCustomId()){
                setTimeout(this.stop, 0);
            };
        }

    }
}//package tv.freewheel.wrapper.osmf.slot 
﻿package tv.freewheel.wrapper.osmf.slot {
    import org.osmf.events.*;
    import flash.events.*;
    import flash.utils.*;
    import org.osmf.traits.*;
    import tv.freewheel.ad.behavior.*;

    public class FWSlotTimeTrait extends TimeTrait {

        private var slot:ISlot;
        private var timer:Timer;
        private var am:IAdManager;

        public function FWSlotTimeTrait(am:IAdManager, slot:ISlot){
            super(this.convertMinusToNaN(slot.getTotalDuration(true)));
            this.slot = slot;
            this.timer = new Timer(1000);
            this.timer.addEventListener(TimerEvent.TIMER, this.onTimer, false, 0, true);
            this.timer.start();
            this.am = am;
            am.addEventListener(am.getConstants().EVENT_SLOT_ENDED, this.onSlotEnd);
        }
        private function onSlotEnd(e:IEvent):void{
            if (e.slotCustomId == this.slot.getCustomId()){
                trace((e.slotCustomId + " SLOT HAS ENDED."));
                this.signalComplete();
            };
        }
        override protected function signalComplete():void{
            this.am.removeEventListener(this.am.getConstants().EVENT_SLOT_ENDED, this.onSlotEnd);
            this.timer.stop();
            super.signalComplete();
        }
        public function stop():void{
            this.signalComplete();
        }
        override protected function currentTimeChangeEnd(oldCurrentTime:Number):void{
            dispatchEvent(new TimeEvent(TimeEvent.CURRENT_TIME_CHANGE, false, false, this.currentTime));
        }
        private function onTimer(e:TimerEvent):void{
            var _local2:Number = this.convertMinusToNaN(this.slot.getPlayheadTime());
            if ((((_local2 > 0)) && ((_local2 >= duration)))){
                this.setDuration((_local2 + 0.001));
            };
            this.setCurrentTime(_local2);
        }
        private function convertMinusToNaN(num:Number):Number{
            if (num < 0){
                return (NaN);
            };
            return (num);
        }

    }
}//package tv.freewheel.wrapper.osmf.slot 
﻿package tv.freewheel.wrapper.osmf.slot {
    import org.osmf.traits.*;
    import tv.freewheel.ad.behavior.*;

    public class FWSlotAudioTrait extends AudioTrait {

        private var am:IAdManager;
        private var slot:ISlot;
        private var adsManager:IAdManager;
        protected var resumeVolume:Number = 0;

        public function FWSlotAudioTrait(am:IAdManager, slot:ISlot){
            this.am = am;
            this.slot = slot;
            this.resumeVolume = volume;
            this.adsManager = am;
            this.adsManager.setAdVolume(((muted) ? 0 : int((this.resumeVolume * 100))));
        }
        override public function dispose():void{
            super.dispose();
            this.adsManager = null;
        }
        override protected function volumeChangeStart(newVolume:Number):void{
            if (newVolume > 0){
                this.resumeVolume = newVolume;
            };
            super.volumeChangeStart(newVolume);
        }
        override protected function volumeChangeEnd():void{
            if (this.adsManager){
                this.adsManager.setAdVolume(int((volume * 100)));
            };
            super.volumeChangeEnd();
        }
        override protected function mutedChangeEnd():void{
            if (this.adsManager){
                this.adsManager.setAdVolume(((muted) ? 0 : int((this.resumeVolume * 100))));
            };
            super.mutedChangeEnd();
        }

    }
}//package tv.freewheel.wrapper.osmf.slot 
﻿package tv.freewheel.wrapper.osmf.slot {
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;
    import org.osmf.traits.*;
    import tv.freewheel.ad.behavior.*;

    public class FWSlotDisplayObjectTrait extends DisplayObjectTrait {

        private static var sharedSlotBase:Sprite = new Sprite();

        private var slot:ISlot;
        private var slotBounds:Rectangle;
        protected var slotBase:Sprite;

        public function FWSlotDisplayObjectTrait(slot:ISlot, slotBounds:Object){
            var _local3:Sprite = slot.getBase();
            if (_local3 == null){
                _local3 = sharedSlotBase;
                slot.setBase(_local3);
            };
            this.slot = slot;
            var _local4:Rectangle = (slotBounds as Rectangle);
            if (!_local4){
                if (slotBounds){
                    _local4 = new Rectangle(slotBounds.x, slotBounds.y, slotBounds.width, slotBounds.height);
                } else {
                    _local4 = new Rectangle(0, 0, 320, 240);
                };
            };
            this.slotBounds = _local4;
            this.redrawSlot();
            super(_local3, this.slotBounds.width, this.slotBounds.height);
            _local3.addEventListener(Event.ADDED_TO_STAGE, this.onAddedToStage);
        }
        protected function onAddedToStage(e:Event):void{
            this.slotBase = (e.target as Sprite);
            if (this.mediaWidth > 0){
                this.slotBase.visible = true;
                this.redrawSlot();
            };
            this.slotBase.removeEventListener(Event.ADDED_TO_STAGE, this.onAddedToStage);
        }
        public function setBounds(rect:Rectangle):void{
            this.setMediaSize(rect.width, rect.height);
        }
        public function redrawSlot():void{
            if (!this.slotBase){
                return;
            };
            if (this.slotBounds.width > 0){
                this.slotBase.visible = true;
                this.slotBase.scaleX = (this.slotBase.scaleY = 1);
                this.slotBase.graphics.clear();
                this.slotBase.graphics.beginFill(0, 0);
                this.slotBase.graphics.drawRect(0, 0, this.slotBounds.width, this.slotBounds.height);
                this.slotBase.graphics.endFill();
            };
        }
        override protected function mediaSizeChangeStart(newMediaWidth:Number, newMediaHeight:Number):void{
            if (this.slotBounds){
                this.slotBounds.width = newMediaWidth;
                this.slotBounds.height = newMediaHeight;
            };
        }
        override protected function mediaSizeChangeEnd(oldMediaWidth:Number, oldMediaHeight:Number):void{
            if (this.slotBounds){
                this.slot.setBounds(this.slotBounds.x, this.slotBounds.y, this.slotBounds.width, this.slotBounds.height);
            };
            this.redrawSlot();
        }
        override public function dispose():void{
            if (this.slot){
                this.slot.dispose();
            };
            if (((this.slotBase) && (this.slotBase.parent))){
                this.slotBase.graphics.clear();
                this.slotBase.parent.removeChild(this.slotBase);
            };
            this.slotBase = null;
        }

    }
}//package tv.freewheel.wrapper.osmf.slot 
﻿package tv.freewheel.wrapper.osmf.events {
    import flash.events.*;
    import tv.freewheel.wrapper.osmf.slot.*;

    public class FWSlotEvent extends Event {

        public static const SLOT_START:String = "slotStart";
        public static const SLOT_END:String = "slotEnd";

        private var _slotElement:FWSlotElement;

        public function FWSlotEvent(type:String, bubbles:Boolean=false, cancelable:Boolean=false, slotElement:FWSlotElement=null){
            super(type, bubbles, cancelable);
            this._slotElement = slotElement;
        }
        public function get slotElement():FWSlotElement{
            return (this._slotElement);
        }
        override public function clone():Event{
            return (new FWSlotEvent(type, bubbles, cancelable, this.slotElement));
        }

    }
}//package tv.freewheel.wrapper.osmf.events 
﻿package rte.osmf.element {
    import org.osmf.media.*;
    import flash.utils.*;
    import org.osmf.elements.*;
    import __AS3__.vec.*;

    public class AutoSmoothDefaultMediaFactory extends DefaultMediaFactory {

        private var _smoothing:Boolean = true;
        private var _deblocking:int = 0;
        private var _checkPolicyFile:Boolean = true;
        private var _highjackedMediaCreationFunction:Function;
        protected var indexedListeners:Dictionary;

        public function AutoSmoothDefaultMediaFactory(){
            return;
            /*not popped
            trace(("INIT AUTO SMOOTH WITH " + smoothing))
            */
        }
        public function get smoothing():Boolean{
            return (_smoothing);
        }
        public function set smoothing(b:Boolean):void{
            _smoothing = b;
        }
        public function get deblocking():int{
            return (_deblocking);
        }
        public function set deblocking(i:int):void{
            _deblocking = i;
        }
        public function get checkPolicyFile():Boolean{
            return (_checkPolicyFile);
        }
        public function set checkPolicyFile(b:Boolean):void{
            _checkPolicyFile = b;
        }
        override protected function resolveItems(resource:MediaResourceBase, items:Vector.<MediaFactoryItem>):MediaFactoryItem{
            var _local4:MediaFactoryItem = super.resolveItems(resource, items);
            if (!_local4){
                return (_local4);
            };
            _highjackedMediaCreationFunction = _local4.mediaElementCreationFunction;
            var _local3:MediaFactoryItem = new MediaFactoryItem(_local4.id, _local4.canHandleResourceFunction, interceptMediaElement);
            return (_local3);
        }
        protected function interceptMediaElement():MediaElement{
            var _local1:MediaElement = _highjackedMediaCreationFunction();
            smoothElement(_local1);
            return (_local1);
        }
        protected function smoothElement(initElement:MediaElement):void{
            var _local2:MediaElement = C.recurseForProxies(initElement);
            if (!_local2){
                return;
                /*not popped
                trace(("Nothing to smooth. " + initElement))
                */
            };
            if ((_local2 is VideoElement)){
                VideoElement(_local2).smoothing = smoothing;
                VideoElement(_local2).deblocking = deblocking;
                trace("\t\t(Video smoothed.)");
            } else {
                if ((_local2 is ImageElement)){
                    ImageElement(_local2).smoothing = smoothing;
                };
            };
        }

    }
}//package rte.osmf.element 
﻿package rte.osmf.ad {
    import org.osmf.media.*;
    import flash.events.*;

    public interface IAdvertisingMediaElement extends IEventDispatcher {

        function skip():void;
        function get isContentWrapper():Boolean;
        function get contentElement():MediaElement;
        function set contentElement(_arg1:MediaElement):void;
        function getCurrentlyPlaying():MediaElement;
        function get currentAdMediaUrl():String;
        function get currentAdTitle():String;
        function get currentAdDuration():Number;
        function get currentAdTime():Number;

    }
}//package rte.osmf.ad 
﻿package rte.osmf.ad {

    public class RTEAdPlaybackUpdateConstantsAndMetadata {

        public static const RTE_ADPOD_TYPE:String = "codingshortcuts/adpod";
        public static const RTE_ADTYPE:String = "codingshortcuts/advert";
        public static const PLAYBACK_METADATA_URL:String = "http://www.rte.ie/advertising/playback/";
        public static const PLAYBACK_SKIPPABLE:String = "skippable";
        public static const COMPANION_METADATA_URL:String = "http://www.rte.ie/advertising/companion/";
        public static const COMPANION_ADS_LIST:String = "companionAdsList";
        public static const INTERACTIVE_FLASH_AD:String = "interactiveFlashAd";
        public static const PAUSE_PLAY_SHOW:String = "pausePlayShow";

    }
}//package rte.osmf.ad 
﻿package rte.osmf {
    import __AS3__.vec.*;

    public interface IPlaylistEntry {

        function get id():String;
        function get showId():String;
        function get itemId():int;
        function get channelId():int;
        function get channelName():String;
        function get programTitle():String;
        function get episodeTitle():String;
        function get itemTypeTitle():String;
        function get content():String;
        function get thumbnailUrl():String;
        function get scheduleDescription():ScheduleDescription;
        function get genreName():String;
        function get mediaRating():String;
        function get nowNextType():String;
        function get isMatureContent():Boolean;
        function get isLiveContent():Boolean;
        function get isAudioContent():Boolean;
        function get programmeFormType():String;
        function get published():Date;
        function get expiryDate():Date;
        function get copyright():String;
        function get mediaItems():Vector.<IPlaylistMediaItem>;
        function get supplementalItems():Vector.<IPlaylistMediaItem>;
        function get source():String;
        function get durationMilliseconds():int;
        function get rteBug():String;
        function get briNumber():String;

    }
}//package rte.osmf 
﻿package rte.osmf.thirdPartyTracking.comScore {
    import org.osmf.media.*;
    import flash.display.*;
    import org.osmf.events.*;
    import flash.events.*;
    import flash.utils.*;
    import rte.osmf.player.*;
    import rte.osmf.*;
    import rte.osmf.tracking.*;
    import rte.osmf.playlist.*;
    import org.osmf.traits.*;
    import rte.osmf.ad.*;
    import rte.playerInsights.*;
    import rte.osmf.utils.*;
    import org.osmf.metadata.*;
    import __AS3__.vec.*;
    import com.comscore.streaming.*;
    import com.comscore.analytics.*;

    public class ComScoreTracking extends AbstractTracker implements ITracker {

        public static const USE_COMSCORE_TRACKING:Boolean = true;

        public static var THROW_ERRORS_FOR_DEBUG:Boolean = false;
        private static var _instance:ComScoreTracking;

        private const COM_SCORE_CUSTOMER:String = "16600418";
        private const COM_SCORE_SECRET:String = "ebb940d9856fa62de69750b767129c76";

        protected var rteInstance:RTE_OSMF_Player;
        protected var persistentLabels:Object;
        protected var isLive:Boolean = false;
        protected var comScoreLfThresholdMilliseconds:Number = 3000;
        private var _streamSense:StreamSense;
        protected var clipInfoSetAt:Number;
        protected var playingClipIndex:int = -1;
        protected var trackAsAdvert:Boolean = false;
        protected var debugClipNumberSetting:Number;
        protected var lastSet:Number = 0;
        private var active:Boolean = false;
        private var closed:Boolean = false;
        private var _userID:String = "";
        protected var needToTrackFirstPlaylistPlay:Boolean = false;
        protected var needToTrackPlaylistEnd:Boolean = false;
        protected var currentShares:ShareProperties;
        protected var lastPlayType:String = "stopped";
        protected var lastAdPlayType:String = "stopped";
        protected var hasPlayedThisAdvert:Dictionary;
        protected var lastType:StreamSenseEventType;
        protected var checkSoonTimer:Timer;
        protected var selectedBitRate:Number;
        protected var startBufferTime:uint;
        protected var currentAdIsInteractive:Boolean = false;
        protected var flagForNoMoreTracking:Boolean = false;
        protected var wasAdvert:Boolean;
        private var clipNumbersInvalid:Boolean = false;
        private var playlistIsInvalid:Boolean = false;
        private var clipLabelsInvalid:Boolean = false;
        private var playstateIsInvalid:Boolean = false;
        protected var lastGoodPositionInSeconds:Number;
        protected var playingClip:Boolean;
        protected var currentAdType:String;
        protected var currentAdDurationInSeconds:Number;
        protected var currentAdPositionInSeconds:Number = 0;
        protected var lastViewEvent:String;
        protected var nextPlayIndex:int;
        protected var reportAsClipNumber:Dictionary;

        public function ComScoreTracking(se:SingletonEnforcer){
            persistentLabels = {
                ns_site:"please set site using config vars",
                ns_st_mp:"please set media player using config vars",
                rte_vs_pl:"please set platform using config vars",
                rte_vs_an:"please set application name using config vars",
                ns_st_it:"c",
                rte_vs_sn:"please set using config vars",
                rte_mt_sec:"please set using config vars"
            };
            super();
            if (!se){
                throw (new Error("Please use class methods to obtain an instance of this class."));
            };
        }
        public static function get instance():ComScoreTracking{
            if (!_instance){
                _instance = new ComScoreTracking(new SingletonEnforcer());
            };
            return (_instance);
        }
        protected static function pad(n:Number):String{
            return (((n)<10) ? ("0" + n) : n.toString());
        }
        protected static function toMs(n:Number):int{
            return ((n * 1000));
        }

        public function initPlayer(dob:RTE_OSMF_Player):void{
            if (((checkSoonTimer) && (checkSoonTimer.running))){
                checkSoonTimer.stop();
                checkSoonTimer.reset();
            };
            rteInstance = dob;
            buildStreamSense();
        }
        public function initApp(dob:DisplayObject, versionValue:String, useActivityChange:Boolean, ... _args):void{
            var _local6:int;
            if (!dob){
                throw (new Error("This class must be initialised with a valid application"));
            };
            closed = false;
            _local6 = 0;
            while (_local6 < _args.length) {
                readConfigFile(_args[_local6]);
                _local6++;
            };
            var _local5:String = comScore.getAppVersion();
            trace(((("COMSCORE VERSION IS :" + _local5) + "\n") + comScore.getCustomerC2()));
            if (comScore.getCustomerC2()){
                return;
            };
            comScore.setAppContext(dob);
            comScore.setCustomerC2("16600418");
            comScore.setPublisherSecret("ebb940d9856fa62de69750b767129c76");
            comScore.setAppName(persistentLabels["rte_vs_an"]);
            comScore.setAppVersion(versionValue);
            comScore.setLabel("ns_site", persistentLabels["ns_site"]);
            if (useActivityChange){
                dob.addEventListener("activate", onActivityChange);
                dob.addEventListener("deactivate", onActivityChange);
            };
            comScore.onEnterForeground();
        }
        public function notifyApplicationExit():void{
            if (comScore){
                comScore.close();
            };
        }
        protected function setPersistentStreamSenseLabels():void{
            var _local1:Object = copyObject(persistentLabels);
            _local1["ns_st_mv"] = RTEUtils.normaliseStr(rteInstance.version);
            _local1["rte_vs_dt"] = PlaylistFactoryLoader.deviceType;
            streamSense.setLabels(_local1);
        }
        protected function readConfigFile(o:Object):void{
            var _local2:Number;
            _loop1:
            for (var _local3:String in o) {
                var _local4 = _local3;
                while ("comscore_lf_threshold_seconds" === _local4) {
                    _local2 = o[_local3];
                    if (!isNaN(_local2)){
                        comScoreLfThresholdMilliseconds = (_local2 * 1000);
                    };
                    continue _loop1;
                    persistentLabels[_local3] = o[_local3];
                    continue _loop1;
                };
                //unresolved if
                //unresolved if
                //unresolved if
                //unresolved if
                //unresolved if
                //unresolved if
                //unresolved if
            };
        }
        protected function copyObject(o:Object):Object{
            var _local2:Object = {};
            for (var _local3:String in o) {
                _local2[_local3] = o[_local3];
            };
            return (_local2);
        }
        protected function updateUserEnvironmentLabels():void{
            var _local1:Object = {};
            _local1["ns_st_cs"] = ((width + "x") + height);
            _local1["ns_st_vo"] = (100 * volume);
            _local1["rte_cc"] = ((captionsEnabled) ? 1 : 0);
            _local1["rte_userid"] = userID;
            if (streamSense){
                streamSense.setLabels(_local1);
            };
        }
        protected function setPlaylistLabels():void{
            var _local4 = null;
            var _local3:int;
            var _local1 = null;
            var _local2 = null;
            if (((((playlist) && (playlist.isPlayable))) && (pid))){
                hasPlayedThisAdvert = new Dictionary();
                currentShares = playlist.getShareProperties();
                isLive = currentShares.isLiveContent;
                _local4 = {};
                _local4["ns_st_pl"] = currentShares.programTitle;
                _local4["ns_st_pr"] = currentShares.programTitle;
                _local4["ns_st_ep"] = currentShares.title;
                if (((isFinite(rteInstance.totalDuration)) && ((rteInstance.totalDuration > 0)))){
                    _local3 = toMs(rteInstance.totalDuration);
                } else {
                    _local1 = playlist.getEntryAt(0);
                    _local3 = _local1.durationMilliseconds;
                };
                if (!currentShares.isLiveContent){
                    _local4["ns_st_ca"] = _local3;
                };
                _local4["ns_st_cp"] = pid.partsInMainContent;
                if (this.currentShares.isAudioContent){
                    _local4["ns_st_ty"] = ((currentShares.isLiveContent) ? "simulcast" : "aod");
                } else {
                    _local4["ns_st_ty"] = ((currentShares.isLiveContent) ? "simulcast" : "vod");
                };
                _local4["rte_vs_ch"] = ((currentShares.isAudioContent) ? "radio" : "tv");
                if (this.currentShares.isLiveContent){
                    _local4["rte_vs_sc"] = "live";
                } else {
                    _local4["rte_vs_sc"] = ((_local3)>comScoreLfThresholdMilliseconds) ? "lf" : "sf";
                };
                if (this.currentShares.isAudioContent){
                    _local4["rte_vs_ct"] = "aud";
                } else {
                    _local4["rte_vs_ct"] = "vid";
                };
                if (currentShares.itemType){
                    _local4["rte_item_name"] = currentShares.itemType;
                };
                _local4["ns_st_sp"] = (1 + rteInstance.playlistRepeatCounter);
                _local4["ns_st_ge"] = currentShares.genre;
                _local4["ns_st_st"] = currentShares.channelName;
                _local2 = playlist.getEntryAt(0).briNumber;
                if (_local2 != ""){
                    _local4["rte_bri"] = _local2;
                };
                if (currentShares.isLiveContent){
                    _local4["rte_mt_pl_copy"] = "live";
                    _local4["rte_provider"] = "live";
                } else {
                    if (currentShares.copyright){
                        _local4["rte_mt_pl_copy"] = currentShares.copyright;
                        _local4["rte_provider"] = currentShares.copyright;
                    } else {
                        _local4["rte_mt_pl_copy"] = "unknown";
                        _local4["rte_provider"] = "unknown";
                    };
                };
                streamSense.setPlaylist(_local4);
            } else {
                if (playingClip){
                    safelyNotify(StreamSenseEventType.END);
                };
                isLive = false;
                hasPlayedThisAdvert = null;
                playingClip = false;
                currentShares = null;
                trackAsAdvert = false;
            };
        }
        protected function formatDate(d:Date):String{
            return ([d.fullYear, pad((d.month + 1)), pad(d.date)].join("-"));
        }
        protected function buildStreamSense():void{
            if (!_streamSense){
                _streamSense = new StreamSense();
            };
            setPersistentStreamSenseLabels();
            updateUserEnvironmentLabels();
        }
        public function get inited():Boolean{
            return (!((_streamSense == null)));
        }
        public function get streamSense():StreamSense{
            return (_streamSense);
        }
        private function onlyIfInited():void{
            if (!inited){
                throw (new Error("Not yet inited."));
            };
            if (closed){
                throw (new Error("Cannot access this function now closed."));
            };
        }
        public function closeApp():void{
            onlyIfInited();
            comScore.close();
            closed = true;
        }
        protected function onActivityChange(event:Event):void{
            active = (event.type == "activate");
            return;
            /*not popped
            ((active) ? comScore.onEnterForeground() : comScore.onExitForeground())
            */
        }
        protected function setCurrentClipInformation():void{
            var _local10:int;
            var _local5:Number;
            var _local6 = null;
            var _local4 = null;
            var _local3 = null;
            var _local7:Boolean;
            var _local9:Number;
            var _local1 = null;
            if (((pid) && (playlist))){
                _local10 = pid.clipNumber;
                if (!rteInstance.isAdvert){
                    if ((((rteInstance.position == -1)) || (isNaN(rteInstance.position)))){
                        trace("POSITION IS -1 or NaN >> NOT YET READY");
                        invalidateClipLabels();
                        return;
                    };
                };
                if (playingClip){
                    if (playingClipIndex != _local10){
                        trace(((("CLEANING UP A CLIP " + playingClipIndex) + " THAT SHOULDN'T STILL BE PLAYING ") + _local10));
                        notifyFauxEnd();
                    };
                    if (rteInstance.isAdvert != trackAsAdvert){
                        trace("FORCING A TRANSFER");
                        notifyFauxEnd();
                    };
                };
                clipInfoSetAt = getTimer();
                playingClipIndex = _local10;
                _local5 = calculateCurrentPartDuration();
                if ((((((_local5 < 2000)) && (!(isLive)))) || (!(rteMd)))){
                    invalidateClipLabels();
                    return;
                };
                if (!playingClip){
                    trackAsAdvert = rteInstance.isAdvert;
                    _local6 = ((trackAsAdvert) ? getAdClipLabels() : getClipLabels());
                    _local6["ns_st_cn"] = getSequentialClipId((1 + _local10));
                    lastSet = (_local10 + 1);
                    _local6["ns_st_pn"] = calculatePartNumber();
                    _local6["ns_st_tp"] = calculateTotalParts();
                    _local6["ns_st_ci"] = calculateContentId();
                    _local6["ns_st_cl"] = _local5;
                    if (((trackAsAdvert) && (!(_local6["ns_st_cu"])))){
                        _local6["ns_st_cu"] = _local6["ns_st_ci"];
                    };
                    _local4 = streamSense.getClip();
                    streamSense.setClip(_local6);
                    _local3 = streamSense.getClip().getLabels();
                    if (_local3){
                        _local7 = false;
                        _loop1:
                        for (var _local8:String in _local6) {
                            if (_local3[_local8] != _local6[_local8]){
                                var _local11 = _local8;
                                while ("ns_st_cn" === _local11) {
                                    trace((((((("Skipping " + _local8) + " with values '") + _local3[_local8]) + "' versus '") + _local6[_local8]) + "'"));
                                    continue _loop1;
                                    trace((((((("NEEDS RESET ON " + _local8) + " with values '") + _local3[_local8]) + "' versus '") + _local6[_local8]) + "'"));
                                    _local7 = true;
                                    continue _loop1;
                                };
                                //unresolved jump
                            };
                        };
                        _loop2:
                        for (var _local2:String in _local3) {
                            if (_local6[_local2] == undefined){
                                _local11 = _local2;
                                while ("ns_st_br" === _local11) {
                                    trace((((((("Skipping " + _local2) + " with values '") + _local3[_local2]) + "' versus '") + _local6[_local2]) + "'"));
                                    continue _loop2;
                                    trace((((((("NEEDS RESET TO DELETE " + _local8) + " with values '") + _local3[_local8]) + "' versus '") + _local6[_local8]) + "'"));
                                    _local7 = true;
                                    continue _loop2;
                                };
                                //unresolved jump
                            };
                        };
                        if (_local7){
                            trace("RESET IS NEEDED.");
                            if (!playingClip){
                                trace("\n\t\t@@@@@@@@ OUCH! NO PLAYING CLIP\n");
                            };
                            _local9 = ((_local3["ns_st_ad"])==1) ? currentAdDurationInSeconds : lastGoodPositionInSeconds;
                            streamSense.setClip(_local4);
                            streamSense.notify(StreamSenseEventType.END, _local9);
                            streamSense.setClip(_local6);
                            trace("RECOVERED");
                        };
                    };
                } else {
                    if (streamSense.getClip().getLabel("ns_st_ad") != "1"){
                        _local1 = calculatePartNumber();
                        if (_local1 != streamSense.getClip().getLabel("ns_st_pn")){
                            trace((">>>>> RESETTING TO " + _local1));
                            streamSense.getClip().setLabel("ns_st_pn", _local1);
                        };
                    };
                };
                updateBitrate();
            };
        }
        protected function getClipLabels():Object{
            var _local1:Object = defaultClipLabels();
            _local1["ns_st_cl"] = calculateCurrentPartDuration();
            _local1["ns_st_cu"] = mediaUrl;
            return (_local1);
        }
        protected function getAdClipLabels():Object{
            var _local1:Object = defaultClipLabels();
            _local1["ns_st_el"] = pid.clipDurationInMilliseconds;
            _local1["ns_st_cl"] = pid.clipDurationInMilliseconds;
            _local1["ns_st_cu"] = pid.mediaUrl;
            _local1["ns_st_ad"] = 1;
            _local1["ns_st_ty"] = currentAdType;
            _local1["ns_st_pr"] = currentAdType;
            _local1["ns_st_ep"] = currentAdType;
            return (_local1);
        }
        protected function defaultClipLabels():Object{
            var _local1:Object = {};
            _local1["ns_st_el"] = toMs(rteInstance.totalDuration);
            if (currentShares){
                _local1["ns_st_pr"] = currentShares.programTitle;
                _local1["ns_st_ep"] = currentShares.title;
                if (currentShares.isLiveContent){
                    _local1["ns_st_li"] = 1;
                };
                _local1["ns_st_sp"] = (1 + rteInstance.playlistRepeatCounter);
                if (currentShares.isAudioContent){
                    _local1["ns_st_ty"] = ((currentShares.isLiveContent) ? "simulcast" : "aod");
                } else {
                    _local1["ns_st_ty"] = ((currentShares.isLiveContent) ? "simulcast" : "vod");
                };
                _local1["ns_st_ge"] = currentShares.genre;
                _local1["ns_st_dt"] = formatDate(currentShares.published);
                _local1["ns_st_st"] = currentShares.channelName;
            } else {
                _local1["ns_st_ep"] = "UNKNOWN";
                _local1["ns_st_pr"] = "UNKNOWN";
            };
            return (_local1);
        }
        protected function calculateContentId():String{
            var _local1 = null;
            if (!currentShares){
                return ("");
            };
            if (rteInstance.isAdvert){
                return ("");
            };
            return (((currentShares.isLiveContent) ? currentShares.channelId.toString() : currentShares.itemId.toString()));
        }
        protected function calculateTotalParts():int{
            var _local2:*;
            var _local1:Metadata = rteMd;
            if (_local1){
                _local2 = (_local1.getValue("rawCuePoints") as Vector.<Number>);
                if (_local2){
                    return ((_local2.length + 1));
                };
            };
            return (1);
        }
        protected function calculatePartNumber():int{
            var _local3:*;
            var _local2:Number;
            var _local4:int;
            if (rteInstance.isAdvert){
                return (1);
            };
            var _local1:Metadata = rteMd;
            if (_local1){
                _local3 = (_local1.getValue("rawCuePoints") as Vector.<Number>);
                if (_local3){
                    _local2 = rteInstance.position;
                    if (isNaN(_local2)){
                        trace("Found non-numeric position in calculatePartNumber of ComScoreTracking. Using 0");
                        _local2 = 0;
                    };
                    _local4 = 0;
                    while (_local4 < _local3.length) {
                        if (_local3[_local4] > _local2){
                            return ((_local4 + 1));
                        };
                        _local4++;
                    };
                    return ((_local3.length + 1));
                };
            };
            return (1);
        }
        protected function calculateCurrentPartDuration():Number{
            if (!playlist){
                return (toMs(rteInstance.totalDuration));
            };
            var _local1:Number = pid.clipDurationInMilliseconds;
            if (((!(isNaN(_local1))) && ((_local1 > 0)))){
                return (_local1);
            };
            return (toMs(rteInstance.totalDuration));
        }
        override public function startTracking():void{
            trace("@@@ COMSCORE startTracking");
            onlyIfInited();
            super.startTracking();
            comScore.onUxActive();
        }
        override public function stopTracking():void{
            trace("@@@ COMSCORE stopTracking");
            onlyIfInited();
            super.stopTracking();
            comScore.onUxInactive();
        }
        override public function setSize(width:Number, height:Number):void{
            var _local3:Boolean = ((!((this.width == width))) || (!((this.height == height))));
            super.setSize(width, height);
            if (_local3){
                trace("@@@ COMSCORE setSize");
                updateUserEnvironmentLabels();
            };
        }
        public function get userID():String{
            return (_userID);
        }
        public function set userID(value:String):void{
            _userID = value;
            updateUserEnvironmentLabels();
        }
        override public function set volume(n:Number):void{
            var _local2 = !((n == volume));
            super.volume = n;
            if (_local2){
                trace("@@@ COMSCORE set volume");
                updateUserEnvironmentLabels();
            };
        }
        override public function set captionsEnabled(b:Boolean):void{
            var _local2 = !((b == captionsEnabled));
            super.captionsEnabled = b;
            if (_local2){
                trace("@@@ COMSCORE set captionsSelected");
                updateUserEnvironmentLabels();
            };
        }
        override public function setProgrammeInfo(playlist:IPlaylistLoader):void{
            var _local2:Boolean = ((!(this.playlist)) || (!((this.playlist == playlist))));
            if (_local2){
                if (((rteInstance) && (rteInstance.mediaPlayer))){
                    rteInstance.mediaPlayer.removeEventListener("playStateChange", handlePlayState);
                };
            };
            super.setProgrammeInfo(playlist);
            if (_local2){
                trace("@@@ COMSCORE setProgrammeInfo");
                if (playingClip){
                    safelyNotify(StreamSenseEventType.END);
                };
                playingClip = false;
                needToTrackFirstPlaylistPlay = true;
                needToTrackPlaylistEnd = false;
                invalidateClipNumbers();
                invalidatePlaylist();
                invalidateClipLabels();
                if (((playlist) && (playlist.isPlayable))){
                    rteInstance.mediaPlayer.addEventListener("playStateChange", handlePlayState);
                };
            };
        }
        protected function handlePlayState(event:PlayEvent):void{
            invalidatePlaystate();
        }
        override public function trackPlaylistEnd():void{
            needToTrackPlaylistEnd = true;
            super.trackPlaylistEnd();
            if (playingClip){
                safelyNotify(StreamSenseEventType.END);
            };
        }
        override public function receiveMetadataChange(hasRteMetadata:Boolean, isAdvert:Boolean=false, isSting:Boolean=false, itemStartVal:Number=NaN, itemEndVal:Number=NaN, currentAdIndex:int=0, numberOfAds:int=0, canSkipAdverts:Boolean=false, isInteractiveAdvert:Boolean=false, isPausePlayAdvert:Boolean=false):void{
            super.receiveMetadataChange.apply(this, arguments);
            trace(((("RECEIVING MetaData \n" + ["hasRteMetadata", "isAdvert", "isSting", "itemStartVal", "itemEndVal:Number", "currentAdIndex", "numberOfAds", "canSkipAdverts", "isInteractiveAdvert", "isPausePlayAdvert"].join("\t")) + "\n") + arguments.join("\t")));
            if (!isAdvert){
                currentAdType = null;
                currentAdIsInteractive = false;
                flagForNoMoreTracking = false;
            } else {
                if (isInteractiveAdvert){
                    currentAdIsInteractive = isInteractiveAdvert;
                };
            };
            validateAll();
            invalidateClipLabels();
            invalidatePlaystate();
        }
        override public function handleBuffer(event:BufferEvent):void{
            var _local2:int;
            if (!playingClip){
                return;
            };
            if (event.buffering){
                trace(("START BUFFER AT " + getTimer()));
                startBufferTime = getTimer();
                safelyNotify(StreamSenseEventType.BUFFER);
            } else {
                if (startBufferTime == 0){
                    return;
                };
                _local2 = (getTimer() - startBufferTime);
                streamSense.getClip().setLabel("ns_st_bt", _local2.toString());
                if (playState == "playing"){
                    setCurrentClipInformation();
                    safelyNotify(StreamSenseEventType.PLAY);
                };
            };
        }
        protected function combine(... _args):Object{
            var _local5:int;
            var _local2 = null;
            var _local3:Object = {};
            _local5 = 0;
            while (_local5 < _args.length) {
                _local2 = _args[_local5];
                for (var _local4:String in _local2) {
                    if (_local3[_local2]){
                        trace(("There is a conflict with: " + _local4));
                    };
                    _local3[_local4] = _local2[_local4];
                };
                _local5++;
            };
            return (_local3);
        }
        protected function safelyNotify(type:StreamSenseEventType, eventLabels:Object=null):void{
            var _local4:PlayingItemClipDetails = pid;
            var _local6:String = streamSense.getClip().getId();
            if (((((rteInstance.isAdvert) && (hasPlayedThisAdvert))) && (hasPlayedThisAdvert[_local6]))){
                return;
                /*not popped
                trace("NOT DOUBLE TRACKING.")
                */
            };
            if (((!(rteInstance.isAdvert)) && (flagForNoMoreTracking))){
                if (THROW_ERRORS_FOR_DEBUG){
                    throw (new Error("NOT TRACKING ANY MORE AS GONE PAST POST ROLL"));
                };
                return;
            };
            var _local5:Object = streamSense.getClip().getLabels();
            var _local3:int = underlyingItemPositionInMilliseconds(trackAsAdvert);
            if (type == StreamSenseEventType.PLAY){
                if (trackAsAdvert){
                    if (((((!(_local4)) || (isNaN(_local4.clipDurationInMilliseconds)))) || ((_local4.clipDurationInMilliseconds == 0)))){
                        if (THROW_ERRORS_FOR_DEBUG){
                            throw (new Error("No ad duration found."));
                        };
                        return;
                    };
                    currentAdDurationInSeconds = (_local4.clipDurationInMilliseconds / 1000);
                };
                if (_local5["ns_st_cl"] == 0){
                    if (((!(isLive)) || (trackAsAdvert))){
                        if (THROW_ERRORS_FOR_DEBUG){
                            throw (new Error("Zero length play report... RETURN FALSE"));
                        };
                        return;
                    };
                };
                if (_local3 < 0){
                    checkSoon();
                    return;
                };
                if (needToTrackFirstPlaylistPlay){
                    needToTrackFirstPlaylistPlay = false;
                    if (!eventLabels){
                        eventLabels = {};
                    };
                    eventLabels.ns_st_pb = 1;
                };
                if (!trackAsAdvert){
                    hasPlayedThisAdvert = new Dictionary();
                };
                playingClip = true;
            };
            if (type == StreamSenseEventType.END){
                if (!playingClip){
                    if (THROW_ERRORS_FOR_DEBUG){
                        throw (new Error("Cannot end without playing clip."));
                    };
                };
                if (needToTrackPlaylistEnd){
                    needToTrackPlaylistEnd = false;
                    if (!eventLabels){
                        eventLabels = {};
                    };
                    eventLabels.ns_st_pe = 1;
                };
                if (!hasPlayedThisAdvert){
                    hasPlayedThisAdvert = new Dictionary();
                };
                hasPlayedThisAdvert[_local6] = true;
                _local3 = toMs(((trackAsAdvert) ? currentAdDurationInSeconds : lastGoodPositionInSeconds));
                if (((!(isLive)) || (trackAsAdvert))){
                    if ((((_local3 == 0)) || ((_local5["ns_st_cl"] == 0)))){
                        if (THROW_ERRORS_FOR_DEBUG){
                            throw (new Error("Zero length end report"));
                        };
                    };
                };
                playingClip = false;
                currentAdPositionInSeconds = 0;
                lastGoodPositionInSeconds = 0;
            };
            if ((((type == StreamSenseEventType.BUFFER)) && (!(playingClip)))){
                return;
            };
            updateBitrate();
            lastType = type;
            trace(("STREAMSENSE NOTIFY TYPE " + lastType));
            streamSense.notify(type, _local3, eventLabels);
        }
        protected function checkSoon():void{
            if (((checkSoonTimer) && (checkSoonTimer.running))){
                return;
            };
            if (!checkSoonTimer){
                checkSoonTimer = new Timer(100, 1);
                checkSoonTimer.addEventListener("timerComplete", checkAgainNow);
            };
            checkSoonTimer.reset();
            checkSoonTimer.start();
        }
        protected function checkAgainNow(event:TimerEvent):void{
            checkSoonTimer.stop();
            playstateIsInvalid = true;
            validateAll();
        }
        override public function notifyDataRates(autoSelect:Boolean, selectedRate:Number=NaN, availableRates:Array=null):void{
            selectedBitRate = selectedRate;
            updateBitrate();
        }
        protected function updateBitrate():void{
            if (((((rteInstance) && (!(isNaN(selectedBitRate))))) && (streamSense.getClip()))){
                streamSense.getClip().setLabel("ns_st_br", selectedBitRate);
            };
        }
        override public function handlePlayerInsight(event:PlayerInsightsEvent):void{
            if (event.insightData.getAdType() == "overlay"){
                handleCustomAdEvent(event);
                return;
            };
            if (event.type == "adRequestInsight"){
            };
            if (event.type == "adStartInsight"){
                currentAdType = event.insightData.getAdType();
                currentAdPositionInSeconds = 0;
                flagForNoMoreTracking = event.insightData.postRoll;
                invalidateClipLabels();
                invalidatePlaystate();
                setCurrentClipInformation();
            };
            if (event.type != "adEndInsight"){
            };
            trace(((("AD INSIGHT " + event.type) + " lastGoodPositionInSeconds: ") + lastGoodPositionInSeconds));
            var _local2 = event.type;
            while ("adClickInsight" === _local2) {
                safelyNotify(StreamSenseEventType.AD_CLICK);
                break;
            };
        }
        override public function positionUpdate(position:Number, duration:Number):void{
            var _local4:Number;
            var _local3:Number;
            super.positionUpdate(position, duration);
            if (!pid){
                return;
            };
            if (((playingClip) && ((position > 0)))){
                if (!trackAsAdvert){
                    lastGoodPositionInSeconds = position;
                };
            };
            if (((!(rteInstance.isAdvert)) && (playlist))){
                _local4 = streamSense.getClip().getLabel("ns_st_pn");
                _local3 = calculatePartNumber();
                if (_local4 != _local3){
                    trace(((("INVALIDATING LABELS IN POSITION UPDATE >> " + _local4) + " >> ") + _local3));
                    setCurrentClipInformation();
                };
            };
            if (wasAdvert != rteInstance.isAdvert){
                invalidateClipLabels();
                wasAdvert = rteInstance.isAdvert;
            } else {
                validateAll();
            };
        }
        protected function validateAll():void{
            var _local1:TimeTrait = rteInstance.itemTimeTrait();
            if (((_local1) && ((_local1.currentTime >= 0)))){
                if (((rteInstance.isAdvert) && ((_local1.duration < 2)))){
                    checkSoon();
                    return;
                };
                if (clipNumbersInvalid){
                    validateClipNumbers();
                    clipNumbersInvalid = false;
                };
                if (playlistIsInvalid){
                    this.validatePlaylist();
                    playlistIsInvalid = false;
                };
                if (clipLabelsInvalid){
                    clipLabelsInvalid = false;
                    validateClipLabels();
                };
                if (((!(clipLabelsInvalid)) && (playstateIsInvalid))){
                    playstateIsInvalid = false;
                    doValidatePlaystate();
                };
            } else {
                trace(((("SKIPPING VALIDATION " + rteInstance.isAdvert) + " ") + rteInstance.position));
            };
        }
        protected function invalidateClipNumbers():void{
            clipNumbersInvalid = true;
            checkSoon();
        }
        protected function validateClipNumbers():void{
            nextPlayIndex = 0;
            reportAsClipNumber = new Dictionary();
        }
        protected function invalidatePlaylist():void{
            playlistIsInvalid = true;
            flagForNoMoreTracking = false;
            checkSoon();
        }
        protected function validatePlaylist():void{
            setPlaylistLabels();
        }
        protected function invalidateClipLabels():void{
            clipLabelsInvalid = true;
            checkSoon();
        }
        protected function validateClipLabels():void{
            setCurrentClipInformation();
        }
        protected function invalidatePlaystate():void{
            playstateIsInvalid = true;
            checkSoon();
        }
        protected function doValidatePlaystate():void{
            var _local5:Number;
            var _local2:Number;
            var _local4 = null;
            var _local1:Number;
            if (!rteInstance.media){
                return;
                /*not popped
                trace("RETURNING WITH NO MEDIA?")
                */
            };
            if (!pid){
                return;
                /*not popped
                trace("RETURNING WITH NO PID")
                */
            };
            var _local3:Object = streamSense.getClip().getLabels();
            if (((playlist) && (!(rteInstance.isAdvert)))){
                _local5 = _local3["ns_st_pn"];
                _local2 = calculatePartNumber();
                if (_local5 != _local2){
                    trace(((("In ValidatePlayState >> " + _local5) + " >> ") + _local2));
                    setCurrentClipInformation();
                };
                if (clipLabelsInvalid){
                    return;
                    /*not popped
                    trace(("CLIP LABELS STILL INVALID " + _local3["ns_st_ci"]))
                    */
                };
                trace(("CLIP LABELS VALIDATED " + _local3["ns_st_ci"]));
                _local3 = streamSense.getClip().getLabels();
                if (((((trackAsAdvert) && ((_local3["ns_st_ad"] == undefined)))) || (((!(trackAsAdvert)) && ((_local3["ns_st_ad"] == "1")))))){
                    trace(((("TRACKING " + ((trackAsAdvert) ? "AD AS NON-AD" : "NON-AD AS AD")) + " trackAsAdvert = ") + trackAsAdvert));
                    invalidateClipLabels();
                    invalidatePlaystate();
                    return;
                };
            } else {
                if (rteInstance.isAdvert){
                    if ((((currentAdType == null)) || (!(trackAsAdvert)))){
                        invalidatePlaystate();
                        return;
                    };
                };
            };
            if (((!(isLive)) || (trackAsAdvert))){
                if (_local3["ns_st_cl"] == 0){
                    invalidateClipLabels();
                    invalidatePlaystate();
                    return;
                };
            };
            var _local6 = playState;
            while ("playing" === _local6) {
                if (rteInstance.isAdvert != this.trackAsAdvert){
                    invalidateClipLabels();
                    invalidatePlaystate();
                    checkSoon();
                    return;
                };
                _local1 = underlyingItemPositionInMilliseconds(trackAsAdvert);
                if (((!(trackAsAdvert)) && ((Math.abs((clipInfoSetAt - getTimer())) < 1000)))){
                    checkSoon();
                    return;
                };
                if ((((_local1 < 0)) || (((trackAsAdvert) && (!(pid)))))){
                    invalidateClipLabels();
                    invalidatePlaystate();
                    checkSoon();
                    return;
                };
                trace(("::::\n@@@@\nVALIDATING NOW PLAY FOR " + ((trackAsAdvert) ? pid.mediaUrl : "content")));
                _local4 = StreamSenseEventType.PLAY;
                //unresolved jump
                _local4 = StreamSenseEventType.PAUSE;
                //unresolved jump
                if (playingClip){
                    _local4 = StreamSenseEventType.END;
                };
                //unresolved jump
            };
            //unresolved if
            //unresolved if
            if (_local4){
                safelyNotify(_local4);
            };
        }
        protected function notifyFauxEnd():void{
            if (playingClip){
                safelyNotify(StreamSenseEventType.END);
            };
        }
        protected function underlyingItemPositionInMilliseconds(asAdvert:Boolean):int{
            return (toMs(((asAdvert) ? getAdPosition() : rteInstance.position)));
        }
        protected function handleCustomAdEvent(event:PlayerInsightsEvent):void{
            var _local2:Object = {};
            _local2["ns_st_ev"] = ("onpause ad " + event.type);
            safelyNotify(StreamSenseEventType.CUSTOM, _local2);
        }
        protected function getAdPosition():Number{
            var _local1 = null;
            if (currentAdIsInteractive){
                return (0);
            };
            var _local2:IAdvertisingMediaElement = rteInstance.advertMedia;
            if (_local2){
                currentAdPositionInSeconds = Math.max(currentAdPositionInSeconds, _local2.currentAdTime);
            } else {
                _local1 = rteInstance.itemTimeTrait();
                if (_local1){
                    currentAdPositionInSeconds = Math.max(currentAdPositionInSeconds, _local1.currentTime);
                };
            };
            return (Math.max(0, currentAdPositionInSeconds));
        }
        public function clearLastViewEvent():void{
            lastViewEvent = null;
        }
        public function registerViewEvent(url:String, showid:String=null):void{
            if (((!(url)) || (!(true)))){
                return;
            };
            var _local4:Object = copyObject(persistentLabels);
            _local4.name = url;
            if (showid){
                _local4["rte_mt_id"] = showid;
                _local4["rte_mt_prg_id"] = showid;
            };
            var _local3:String = ((url + " ") + showid);
            if (_local3 == lastViewEvent){
                return;
            };
            lastViewEvent = _local3;
            comScore.view(_local4);
        }
        protected function getSequentialClipId(underlyingInt:int):int{
            if (!reportAsClipNumber){
                return (1);
            };
            var _local2:int = reportAsClipNumber[underlyingInt];
            if (_local2 > 0){
                return (_local2);
            };
            nextPlayIndex = (nextPlayIndex + 1);
            reportAsClipNumber[underlyingInt] = (nextPlayIndex + 1);
            return (getSequentialClipId(underlyingInt));
        }
        protected function resetClipIndexFor(mappedPlayInteger:int):void{
            var _local4:int;
            var _local2:int;
            for (var _local3:Object in this.reportAsClipNumber) {
                _local4 = _local3;
                _local2 = reportAsClipNumber[_local3];
                if (mappedPlayInteger == _local2){
                    return;
                    /*not popped
                    delete reportAsClipNumber[_local3]
                    */
                };
            };
        }
        protected function get rteMd():Metadata{
            var _local2:MediaElement = ((rteInstance) ? rteInstance.media : null);
            if (!_local2){
                return (null);
            };
            var _local1:Metadata = (_local2.getMetadata("http://www.rte.ie/schemas/vod") as Metadata);
            if (!_local1){
                return (null);
            };
            return (_local1);
        }
        protected function get pid():PlayingItemClipDetails{
            var _local1:Metadata = rteMd;
            if (_local1){
                return ((_local1.getValue("clipdetails") as PlayingItemClipDetails));
            };
            return (null);
        }

    }
}//package rte.osmf.thirdPartyTracking.comScore 

class SingletonEnforcer {

    public function SingletonEnforcer(){
    }
}
﻿package rte.osmf.thirdPartyTracking.conviva {
    import rte.playerInsights.*;

    public class ConvivaConstants {

        public static const CONVIVA_TEST_ENABLED:Boolean = false;
        public static const CONVIVA_CUSTOMER_ID:String = "c3.RTE";
        public static const CONVIVA_SERVICE_URL:String = "http://livepass.conviva.com";
        public static const CONVIVA_NAMESPACE_URL:String = "http://www.conviva.com";
        public static const CONVIVA_URL:String = ("http://livepassdl.conviva.com/OSMF/ConvivaOSMFPlugin_OSMF2_0_FP10_1.swf?customerId=" + CONVIVA_CUSTOMER_ID);

        public static var isEnabled:Boolean = false;

        public static function eventTypeToInsightCommand(event:PlayerInsightsEvent):String{
            var _local2 = event.type;
            while ("adRequestInsight" === _local2) {
                return ("ad_request");
                return ("ad_start");
                return ("ad_end");
            };
            //unresolved if
            //unresolved if
            return (null);
        }

    }
}//package rte.osmf.thirdPartyTracking.conviva 
﻿package rte.osmf.thirdPartyTracking.conviva {
    import org.osmf.media.*;
    import rte.osmf.player.*;
    import rte.osmf.*;
    import rte.osmf.tracking.*;
    import rte.playerInsights.*;

    public class ConvivaTracker extends AbstractTracker {

        protected var rteOsmfPlayerInstance:RTE_OSMF_Player;
        protected var _isLivePassInitialized:Boolean = false;
        protected var playerInsight:Object;
        protected var storedConvivaMetadata:Object;

        public function ConvivaTracker(){
            storedConvivaMetadata = {};
            super();
        }
        public function loadConvivaPlugin(rteVal:RTE_OSMF_Player):void{
            rteOsmfPlayerInstance = rteVal;
            var _local2:Object = {};
            _local2["serviceUrl"] = "http://livepass.conviva.com";
            _local2["customerId"] = ConvivaConstants.CONVIVA_CUSTOMER_ID;
            _local2["livePassNotifier"] = livePassNotifier;
            _local2["livePassMetricsCallback"] = setPlayerInsight;
            rteOsmfPlayerInstance.loadPlugin(ConvivaConstants.CONVIVA_URL, "http://www.conviva.com", _local2);
        }
        protected function livePassNotifier(event:Object):void{
            if (event.code == 0){
                _isLivePassInitialized = true;
                trace("Conviva LivePass initialized successfully. GDC");
            } else {
                if (_isLivePassInitialized){
                    trace((((("Conviva LivePass post-initialization error/feedback. Code: " + event.code) + "; ") + "Message: ") + event.message));
                } else {
                    trace("Conviva LivePass failed to initialize. Conviva metrics will not be captured!");
                };
            };
        }
        protected function setPlayerInsight(playerInsightObject:Object):void{
            playerInsight = playerInsightObject;
        }
        protected function sendPlayerInsightEvent(eventName:String, eventAttributes:Object):void{
            if (playerInsight){
                playerInsight.sendEvent(eventName, eventAttributes);
            };
        }
        protected function updateConvivaMetadata(obj:ShareProperties):void{
            var _local3:Object = {};
            var _local4 = {};
            _local3["tags"] = _local4;
            var _local2:Object = _local4;
            _local3["cdnName"] = "INHOUSE";
            _local3["deviceType"] = this.deviceType;
            _local3["playerName"] = this.playerType;
            _local3["viewerId"] = rteOsmfPlayerInstance.playerId;
            _local2["playerVersion"] = rteOsmfPlayerInstance.version;
            if (obj){
                _local3["assetName"] = ((("[" + ((obj.isLiveContent) ? obj.channelId : obj.programId)) + "]") + obj.title);
                _local3["isLive"] = obj.isLiveContent;
                _local2["channel"] = obj.channelName;
                _local2["contentType"] = ((obj.isLiveContent) ? "Live" : "Long VOD");
                _local2["show"] = obj.programTitle;
                _local2["episodeName"] = obj.title;
                _local2["category"] = obj.genre;
            } else {
                _local3["isLive"] = false;
                _local2["channel"] = "rawmedia";
                _local2["contentType"] = "Long VOD";
                _local2["show"] = ((mediaUrl) ? mediaUrl : "rawmedia");
                _local2["episodeName"] = "rawmedia";
                _local2["category"] = "unknown";
            };
            _local2["connectionType"] = networkType;
            storedConvivaMetadata = _local3;
        }
        public function checkConvivaMetadata(resource:MediaResourceBase):void{
            var _local2 = null;
            if (((resource) && (storedConvivaMetadata))){
                if (!storedConvivaMetadata.tags){
                    storedConvivaMetadata.tags = {};
                };
                _local2 = (resource as URLResource);
                if (_local2){
                    storedConvivaMetadata.tags.url = _local2.url;
                };
                resource.addMetadataValue("http://www.conviva.com", storedConvivaMetadata);
            };
        }
        override public function setProgrammeInfo(playlist:IPlaylistLoader):void{
            super.setProgrammeInfo(playlist);
            if (((ConvivaConstants.isEnabled) && (playlist))){
                updateConvivaMetadata(playlist.getShareProperties());
            };
        }
        override public function handlePlayerInsight(event:PlayerInsightsEvent):void{
            super.handlePlayerInsight(event);
            var _local2:String = ConvivaConstants.eventTypeToInsightCommand(event);
            if (_local2){
                sendPlayerInsightEvent(_local2, event.insightData);
            };
        }
        override public function set networkType(s:String):void{
            super.networkType = s;
            if (storedConvivaMetadata){
                storedConvivaMetadata["connectionType"] = s;
            };
        }

    }
}//package rte.osmf.thirdPartyTracking.conviva 
﻿package rte.osmf.player {
    import org.osmf.media.*;
    import org.osmf.containers.*;
    import flash.display.*;
    import org.osmf.events.*;
    import flash.events.*;
    import flash.utils.*;
    import flash.geom.*;
    import rte.utils.*;
    import rte.osmf.*;
    import rte.osmf.tracking.*;
    import rte.osmf.skinshared.*;
    import rte.osmf.debug.*;
    import flash.net.*;
    import rte.osmf.playlist.*;
    import flash.system.*;
    import flash.ui.*;
    import org.osmf.traits.*;
    import flash.external.*;
    import org.osmf.utils.*;
    import rte.osmf.ad.*;
    import org.osmf.elements.*;
    import rte.playerInsights.*;
    import src.*;
    import rte.osmf.element.*;
    import com.gdcsoft.utils.*;
    import org.osmf.net.*;
    import rte.osmf.utils.*;
    import org.osmf.metadata.*;
    import __AS3__.vec.*;
    import rte.domainChecking.*;

    public class RTE_OSMF_Player extends BaseOSMFPlayer {

        public static const VERSION:String = "(FW) RTÉ 2015 November 12";
        protected static const RESET_RECOVERY_TIME:uint = 20000;
        protected static const SMIL_PLUGIN_KEY:String = "org.osmf.smil.SMILPluginInfo";

        public static var CATCH_UNCAUGHT_ERRORS:Boolean = true;
        public static var SHOW_PROFILER_ON_STARTUP:Boolean = false;
        public static var BLOCK_AUTOMATED_BITRATE_SWITCHING:Boolean = false;
        public static var PREFERRED_STARTING_BITRATE:int = 0x0200;
        public static var MAXIMUM_ALLOWED_BITRATE:int = 0;
        public static var START_IN_FULL_SCREENMODE:Boolean = false;
        public static var USE_SMALLER_SCREEN_FOR_PLAYBACK:Boolean = false;
        protected static var maxRecoveryCount:uint = 5;
        private static var _additionalCustomAdTagParameters:Object;
        private static var _adTagAppendParameters:Object;
        public static var drmErrorMessage:String = "DRM authentication error. Please contact support.";

        protected const PING_TRACKING_URL:String = "http://ping.rasset.ie";
        protected const BLUE_METRIX_TRACKING_URL:String = "trackTestBm.html?url=";

        public var privacyPolicyURL:String = "http://www.rte.ie/about/organisation/terms.html";
        public var playIsBlocked:Boolean = false;
        protected var configLocation:String;
        protected var deferredError:ErrorEvent;
        protected var uncaughtListenerToCleanup:IEventDispatcher;
        protected var _playerId:String = "[ID not set]";
        protected var iOwnTheStage:Boolean = false;
        protected var initialStageDims:Point;
        protected var menuItemsForCleanup:Array;
        protected var hasBobCall:Boolean = false;
        public var playPauseCMITitlePlay:String = "Play";
        public var playPauseCMITitlePause:String = "Pause";
        public var muteUnmuteCMITitleMute:String = "Mute";
        public var muteUnmuteCMITitleUnmute:String = "Unmute";
        public var fullScreenCMITitleFull:String = "Full Screen";
        public var fullScreenCMITitleNormal:String = "Normal Screen";
        public var bitRateCMISelectAuto:String = "Automatic Quality (recommended)";
        public var bitRateCMISwitchUp:String = "Increase Quality";
        public var bitRateCMISwitchDown:String = "Decrease Quality";
        public var bitRateCMIPrefix:String = "Use: ";
        public var bitRateCMINotSelected:String = " kbps";
        public var bitRateCMISelected:String = " kbps (Selected)";
        public var helpBandwidthCMITitle:String = "Show / Hide Bandwidth Test";
        public var privacyCMITitle:String = "Privacy Policy";
        protected var disableApi:Boolean = false;
        protected var js:JSInterface;
        protected var jsVolCorrection:Number = 1;
        public var optionalDisplaySettings:Array;
        protected var dvrSafetyBuffer:int = 0;
        protected var defaultVolume:Number = 0.7;
        private var _roadblockOptions:Object;
        private var _callbackOnPlay:Function;
        private var _callbackRoadBlock:Function;
        private var _pinService:IPINServices;
        protected var countDownToCrash:int = 2;
        protected var pinValidated:Boolean = false;
        private var _enableAgeRestriction:Boolean = true;
        private var _hideThumbnailXL:Boolean = false;
        private var _isFullScreenState:Boolean = false;
        public var limitedScreenRect:Rectangle;
        protected var playerW:Number = 0x0200;
        protected var playerH:Number = 288;
        protected var pingTracker:PingTracking;
        public var pingTrackPlatform:String = "web";
        protected var tracker:CompositeTracker;
        protected var pingTrackInterval:int = 60000;
        private var _hasCaptions:Boolean = false;
        private var _captionsEnabled:Boolean = false;
        protected var mediaPlayerState:String = "uninitialized";
        protected var rteAPIPlayState:int;
        protected var playState:String = "stopped";
        protected var canPause:Boolean = false;
        protected var playerMinimumBufferTime:Number = 1;
        protected var deferredLoadFromUrl:Object;
        protected var ui:DisplayObject;
        protected var iskin:ISkin;
        protected var lastRecoveryTime:uint = 0;
        protected var recoveryCount:uint = 0;
        private var _lastError:Object;
        private var _lastErrorCode:int = 0;
        private var _cued:Boolean = false;
        private var _andGoToSeconds:Number;
        public var urchinLogFirstPlayUrl:String = "http://av.rte.ie/";
        public var additionalTrackingValues:Object;
        protected var cuedPic:MediaElement;
        protected var cuePoint:Number = NaN;
        private var _playlistRepeatCounter:uint = 0;
        private var _playlist:IPlaylistLoader;
        protected var deferredSeek:Number;
        private var _lastPosition:Number = -1;
        private var _autoStreamRateSelection:Boolean = true;
        private var _selectedStreamRate:Number;
        private var _availableStreamRates:Array;
        protected var currentMedia:MediaElement;
        protected var firstTimeStreamsLoad:Boolean = true;
        protected var userBufferIntervention:Boolean = false;
        private var _lastGoodBandwidth:int = -1;
        protected var hasDelayedValidate:Boolean = false;
        protected var delayCount:Number;
        protected var hasAds:Boolean = false;
        protected var adChange:Boolean = false;
        protected var showDVR:Boolean = false;
        protected var profiler:Profiler;

        public function RTE_OSMF_Player(mediaPlayer:MediaPlayer=null, mediaContainer:MediaContainer=null, mediaFactory:MediaFactory=null, alternateParameters:Object=null){
            limitedScreenRect = new Rectangle(0, 0, playerW, playerH);
            if (!mediaFactory){
                mediaFactory = new AutoSmoothDefaultMediaFactory();
            };
            super(mediaPlayer, mediaContainer, mediaFactory);
            trace((((((("////////////////////////////////////////////////////////////////////\n// Created RTE_OSMF_Player version: " + version) + "\n") + "// Auto smoothing is ") + (((mediaFactory is AutoSmoothDefaultMediaFactory)) ? "on" : "off")) + ".\n") + "////////////////////////////////////////////////////////////////////"));
            if (stage){
                checkIfIAmTheStage(null);
            } else {
                addEventListener("addedToStage", checkIfIAmTheStage);
            };
            OSMFSettings.hdsPureLiveOffset = 20;
            if (loaderInfo){
                processReceivedParameters(loaderInfo.parameters);
            };
            if (alternateParameters){
                processReceivedParameters(alternateParameters);
            };
            var _local5:ConfigurationManager = ConfigurationManager.singleton;
            if (((configLocation) && (!(_local5.receivedConfigs)))){
                _local5.addEventListener("complete", handleConfigs);
                _local5.addEventListener("error", handleConfigError);
                _local5.loadFrom(configLocation);
            } else {
                handleConfigs();
            };
            BlockedDomainChecker.instance.addEventListener("complete", handleDomainCheckerResult);
            startTheLicenceProcessGoing();
        }
        public static function getAdditionalCustomAdTagParameters():Object{
            return (_additionalCustomAdTagParameters);
        }
        public static function addCustomAdTagParameter(key:String, value:Object):void{
            if (!_additionalCustomAdTagParameters){
                _additionalCustomAdTagParameters = {};
            };
            _additionalCustomAdTagParameters[key] = value;
        }
        public static function removeCustomAdTagParameter(key:String):void{
            if (!_additionalCustomAdTagParameters){
                return;
            };
            return;
            /*not popped
            delete _additionalCustomAdTagParameters[key]
            */
        }
        public static function getAdTagAppendParameters():Object{
            return (_adTagAppendParameters);
        }
        public static function addAdTagAppendParameter(key:String, value:Object):void{
            if (!_adTagAppendParameters){
                _adTagAppendParameters = {};
            };
            _adTagAppendParameters[key] = value;
        }
        public static function removeAdTagAppendParameter(key:String):void{
            if (!_adTagAppendParameters){
                return;
            };
            return;
            /*not popped
            delete _adTagAppendParameters[key]
            */
        }
        public static function deboolise(o:Object, defaultVal:Boolean=false):Boolean{
            if (!o){
                return (defaultVal);
            };
            if ((o is Boolean)){
                return ((o as Boolean));
            };
            var _local3:String = o.toString();
            if (_local3 == ""){
                return (false);
            };
            var _local4 = _local3.charAt(0).toLowerCase();
            while ("0" === _local4) {
                return (false);
            };
            //unresolved if
            //unresolved if
            return (true);
        }

        public function moreInformationOnErrorUrl(errorMessage:String="", errorCode:int=0):String{
            var _local4:URLVariables = new URLVariables();
            _local4.error = errorMessage;
            var _local3:String = ((((PlaylistFactoryLoader.baseHelp + "?") + _local4.toString()) + "#") + errorCode.toString());
            return (_local3);
        }
        protected function updateAdvertTimes(pos:Number, dur:Number):void{
        }
        protected function checkBlockedDomains():void{
            handleDomainCheckerResult(new Event("complete"));
        }
        protected function handleDomainCheckerResult(event:Event):void{
        }
        protected function startTheLicenceProcessGoing():void{
            var _local1:SystemUpdater = new SystemUpdater();
            _local1.addEventListener("status", handleSystemUpdaterStatus);
            _local1.addEventListener("progress", handleSystemUpdaterProgress);
            _local1.addEventListener("ioError", handleSystemUpdaterIOError);
            _local1.addEventListener("complete", handleSystemUpdaterComplete);
            _local1.update("drm");
        }
        protected function handleSystemUpdaterComplete(event:Event):void{
            return;
            /*not popped
            trace(("SystemUpdater:" + event.type))
            */
        }
        protected function handleSystemUpdaterProgress(event:ProgressEvent):void{
            return;
            /*not popped
            trace(((("SystemUpdater progress " + event.bytesLoaded) + " of ") + event.bytesTotal))
            */
        }
        protected function handleSystemUpdaterIOError(event:IOErrorEvent):void{
            return;
            /*not popped
            trace("SystemUpdater io error")
            */
        }
        protected function handleSystemUpdaterStatus(event:StatusEvent):void{
            return;
            /*not popped
            trace(("SystemUpdater status is:" + event.code))
            */
        }
        public function dispose():void{
            pauseIfPlaying();
            handlePlayRequest(new PlayRequest());
            if (playlist){
                setPlaylist(null, true);
            };
            if (mediaPlayer){
                mediaPlayer.media = null;
            };
            if (tracker){
                tracker.dispose();
            };
            tracker = null;
            unsetUncaughtListener();
        }
        protected function handleConfigError(event:ErrorEvent):void{
            if (!iskin){
                deferredError = event;
            };
            handleError(event);
            buildAfterConfigs();
        }
        protected function handleConfigs(event:Event=null):void{
            var _local5 = null;
            var _local6 = null;
            var _local2 = null;
            var _local4 = null;
            var _local3:ConfigurationManager = ConfigurationManager.singleton;
            if (_local3.receivedConfigs){
                _local5 = _local3.receivedConfigs.feedBaseURLs;
                if (_local5){
                    _local6 = ["baseFeed", "basePlaylist", "baseGenreList", "baseGenre", "baseChart", "baseProgramme", "baseLatest", "baseLatestFront", "baseDateList", "baseDate", "baseAZList", "baseLiveListings", "baseLivePlaylist", "baseCL", "baseHelp", "baseParental"];
                    while (_local6.length) {
                        _local2 = _local6.pop();
                        if (_local5[_local2]){
                            PlaylistFactoryLoader[_local2] = _local5[_local2];
                        };
                    };
                };
                _local4 = _local3.receivedConfigs.metricsParamaters;
                if (_local4){
                    if (_local4.streamBase){
                        urchinLogFirstPlayUrl = _local4.streamBase;
                    };
                };
                processReceivedParameters(_local3.receivedConfigs);
            };
            buildAfterConfigs();
        }
        protected function buildAfterConfigs():void{
            buildOSMF();
            setUncaughtListener();
            if (((deferredLoadFromUrl) && (!(hasQueuedPlugins())))){
                loadDeferredContent();
            };
            if (SHOW_PROFILER_ON_STARTUP){
                toggleBandWidthProfiler();
            };
            initLastGood();
            if (lastGoodBandwidth == -1){
                lastGoodBandwidth = 0x0200;
            };
            checkBlockedDomains();
        }
        protected function setUncaughtListener():void{
            if (((!(CATCH_UNCAUGHT_ERRORS)) || (uncaughtListenerToCleanup))){
                return;
            };
            if (((loaderInfo) && (loaderInfo.hasOwnProperty("uncaughtErrorEvents")))){
                uncaughtListenerToCleanup = (loaderInfo["uncaughtErrorEvents"] as IEventDispatcher);
            };
            if (((!(uncaughtListenerToCleanup)) && (stage))){
                try {
                    uncaughtListenerToCleanup = stage.loaderInfo;
                } catch(e:Error) {
                    trace("Couldn't listen to stage...");
                };
            };
            if (uncaughtListenerToCleanup){
                uncaughtListenerToCleanup.addEventListener("uncaughtError", handleError, false, 100);
            };
        }
        protected function unsetUncaughtListener():void{
            if (uncaughtListenerToCleanup){
                uncaughtListenerToCleanup.removeEventListener("uncaughtError", handleError, false);
            };
            uncaughtListenerToCleanup = null;
        }
        protected function loadDeferredContent():void{
            if (!deferredLoadFromUrl){
                return;
            };
            trace((("Confirm load received init request to;\n\t loadFromUrl(\n\t\t" + [deferredLoadFromUrl.loadUrl, deferredLoadFromUrl.autoStart, deferredLoadFromUrl.startPosition].join("\n\t\t")) + "\n);"));
            loadFromUrl(deferredLoadFromUrl.loadUrl, deferredLoadFromUrl.autoStart, deferredLoadFromUrl.startPosition);
            deferredLoadFromUrl = null;
        }
        public function get version():String{
            var _local1:String = "(FW) RTÉ 2015 November 12";
            if (iskin){
                _local1 = (_local1 + (" " + iskin.skinVersionKey));
            };
            if (AbstractPlaylistLoader.DEV_THROW_ALL_ERRORS){
                _local1 = (_local1 + " (throw errors)");
            };
            //unresolved jump
            var _local2:Boolean;
            try {
                _local2 = (new Error().getStackTrace().search(/:[0-9]+\]$/m) > -1);
            } catch(e:Error) {
                _local2 = false;
            };
            if (_local2){
                _local1 = (_local1 + " (debug)");
            };
            return (_local1);
        }
        public function get playerId():String{
            return (_playerId);
        }
        protected function checkIfIAmTheStage(event:Event):void{
            removeEventListener("addedToStage", checkIfIAmTheStage);
            setUncaughtListener();
            try {
                if (null != (parent as Stage)){
                    iOwnTheStage = true;
                    stage.align = "TL";
                    stage.scaleMode = "noScale";
                    stage.showDefaultContextMenu = false;
                    stage.addEventListener("resize", onStageResize);
                    stage.addEventListener("fullScreen", onStageResize);
                    addEventListener("removedFromStage", clearStageListeners);
                    onStageResize(null);
                } else {
                    stage.addEventListener("resize", onStageResize);
                    stage.addEventListener("fullScreen", onStageResize);
                    addEventListener("removedFromStage", clearStageListeners);
                    onStageResize(null);
                };
            } catch(e:Error) {
                trace("Not allowed to access the stage.");
            };
            var _local2:ContextMenu = new ContextMenu();
            _local2.hideBuiltInItems();
            _local2.addEventListener("menuSelect", setCurrentMenuItems);
            contextMenu = _local2;
            try {
                calculateScreenRect();
            } catch(e:Error) {
                trace("Stage setting failed...");
            };
        }
        protected function clearStageListeners(event:Event):void{
            stage.removeEventListener("resize", onStageResize);
            stage.removeEventListener("fullScreen", onStageResize);
            removeEventListener("removedFromStage", clearStageListeners);
        }
        protected function setCurrentMenuItems(event:ContextMenuEvent):void{
            var _local5 = null;
            var _local9:int;
            var _local3 = null;
            var _local8:int;
            var _local4:Array = menuItemsForCleanup;
            if (_local4){
                while (_local4.length) {
                    _local5 = (_local4.pop() as ContextMenuItem);
                    _local5.removeEventListener("menuItemSelect", handleContextMenuSelect);
                };
            };
            _local4 = [];
            var _local7:Array = [version, playPauseCMITitle(), muteUnmuteCMITitle(), fullScreenCMITitle()];
            if (hasBobCall){
                _local7.unshift("BOB");
            };
            var _local6:int = _local7.length;
            _local7 = _local7.concat(bitRateOptions());
            var _local2:int = _local7.length;
            _local7.push(helpBandwidthCMITitle, privacyCMITitle);
            _local9 = 0;
            _loop1:
            for (;_local9 < _local7.length;if ((((((_local9 == 1)) || ((_local9 == _local2)))) || ((_local9 == _local6)))){
                _local5.separatorBefore = true;
            }, _local5.addEventListener("menuItemSelect", handleContextMenuSelect), _local4.push(_local5), _local9++) {
                _local5 = new ContextMenuItem(_local7[_local9]);
                var _local10 = _local5.caption;
                while (playPauseCMITitle() === _local10) {
                    if (playIsBlocked){
                        _local5.enabled = false;
                    } else {
                        if (playlist){
                            _local5.enabled = playlist.isPlayable;
                        } else {
                            _local5.enabled = !((media == null));
                        };
                    };
                    continue _loop1;
                    continue _loop1;
                    _local3 = (media.getTrait("dynamicStream") as DynamicStreamTrait);
                    _local8 = _local3.currentIndex;
                    if (_local5.caption == bitRateCMISwitchUp){
                        _local5.enabled = (_local8 < _local3.maxAllowedIndex);
                    } else {
                        _local5.enabled = (_local8 > 0);
                    };
                    continue _loop1;
                    continue _loop1;
                };
                //unresolved if
                //unresolved if
                //unresolved if
                //unresolved jump
            };
            contextMenu.customItems = _local4;
            menuItemsForCleanup = _local4;
        }
        protected function doOnBobCall():void{
        }
        protected function handleContextMenuSelect(event:ContextMenuEvent):void{
            var _local5 = null;
            var _local2 = null;
            var _local4:Number;
            var _local6 = null;
            var _local3:ContextMenuItem = (event.target as ContextMenuItem);
            var _local11 = _local3.caption;
            while ("BOB" === _local11) {
                doOnBobCall();
                //unresolved jump
                //unresolved jump
                playPauseMedia();
                //unresolved jump
                muteState = !(muteState);
                //unresolved jump
                toggleFullScreen();
                //unresolved jump
                _local5 = new URLRequest(privacyPolicyURL);
                try {
                    navigateToURL(_local5, "_blank");
                    //unresolved jump
                } catch(e:Error) {
                };
                //unresolved jump
                trySetBitRateAuto();
                //unresolved jump
                tryIncreaseBitRate();
                //unresolved jump
                tryDecreaseBitRate();
                //unresolved jump
                toggleBandWidthProfiler();
                //unresolved jump
                if (_local3.caption.indexOf(bitRateCMIPrefix) == 0){
                    _local2 = _local3.caption.split(bitRateCMIPrefix).join("").split(bitRateCMISelected).join("").split(bitRateCMINotSelected).join("");
                    _local4 = _local2;
                    trySetSpecifiedBitRate(_local4);
                    //unresolved jump
                };
                _local6 = (("'" + _local3.caption) + "' function not yet implemented.");
                try {
                    if (ExternalInterface.available){
                        ExternalInterface.call("alert", _local6);
                    };
                } catch(e:Error) {
                };
                trace(_local6);
                //unresolved jump
            };
            //unresolved if
            //unresolved if
            //unresolved if
            //unresolved if
            //unresolved if
            //unresolved if
            //unresolved if
            //unresolved if
            //unresolved if
            //unresolved jump
        }
        public function get shareProperties():ShareProperties{
            if (playlist){
                return (playlist.getShareProperties(position));
            };
            return (null);
        }
        protected function playPauseCMITitle():String{
            if (media == null){
                return (((playPauseCMITitlePlay + "/") + playPauseCMITitlePause));
            };
            var _local1:String = ((isPlaying) ? playPauseCMITitlePause : playPauseCMITitlePlay);
            if (playlist){
                _local1 = (((_local1 + " '") + playlist.getShareProperties().title) + "'");
            };
            return (_local1);
        }
        protected function muteUnmuteCMITitle():String{
            return (((muteState) ? muteUnmuteCMITitleUnmute : muteUnmuteCMITitleMute));
        }
        protected function fullScreenCMITitle():String{
            var _local1:String = fullScreenCMITitleFull;
            try {
                if (stage.displayState != "normal"){
                    _local1 = fullScreenCMITitleNormal;
                };
            } catch(e:Error) {
            };
            return (_local1);
        }
        protected function bitRateOptions():Array{
            if (((((cued) || ((media == null)))) || (!(media.hasTrait("dynamicStream"))))){
                return (null);
            };
            var _local1:DynamicStreamTrait = (media.getTrait("dynamicStream") as DynamicStreamTrait);
            if (_local1.numDynamicStreams == 1){
                return (null);
            };
            var _local2:Array = [];
            if (!_local1.autoSwitch){
                _local2.push(bitRateCMISelectAuto);
            };
            _local2.push(bitRateCMISwitchUp);
            _local2.push(bitRateCMISwitchDown);
            return (_local2);
        }
        protected function trySetBitRateAuto():void{
            if (!media){
                return;
            };
            var _local1:DynamicStreamTrait = (media.getTrait("dynamicStream") as DynamicStreamTrait);
            if (!_local1){
                return;
            };
            _local1.autoSwitch = true;
        }
        protected function tryIncreaseBitRate():void{
            if (!media){
                return;
            };
            var _local1:DynamicStreamTrait = (media.getTrait("dynamicStream") as DynamicStreamTrait);
            if (!_local1){
                return;
            };
            if (_local1.autoSwitch){
                _local1.autoSwitch = false;
            };
            var _local2:int = _local1.currentIndex;
            if (_local2 < _local1.maxAllowedIndex){
                _local1.switchTo((_local2 + 1));
            };
        }
        protected function tryDecreaseBitRate():void{
            if (!media){
                return;
            };
            var _local1:DynamicStreamTrait = (media.getTrait("dynamicStream") as DynamicStreamTrait);
            if (!_local1){
                return;
            };
            if (_local1.autoSwitch){
                _local1.autoSwitch = false;
            };
            var _local2:int = _local1.currentIndex;
            if (_local2 > 0){
                _local1.switchTo((_local2 - 1));
            };
        }
        protected function trySetSpecifiedBitRate(n:Number):void{
            var _local6:int;
            if (isNaN(n)){
                return;
            };
            if (!media){
                return;
            };
            var _local4:DynamicStreamTrait = (media.getTrait("dynamicStream") as DynamicStreamTrait);
            if (!_local4){
                return;
            };
            if (_local4.autoSwitch){
                _local4.autoSwitch = false;
            };
            var _local3:int;
            var _local5:int;
            var _local2:int;
            _local6 = 0;
            while (_local6 < _local4.numDynamicStreams) {
                _local5 = _local4.getBitrateForIndex(_local6);
                if (_local5 == n){
                    _local2 = _local6;
                } else {
                    if ((((_local3 < n)) && ((_local5 > n)))){
                        _local2 = Math.max((_local6 - 1), 0);
                    };
                };
                _local3 = _local5;
                _local6++;
            };
            if ((((_local2 == 0)) && ((_local3 < n)))){
                _local2 = (_local4.numDynamicStreams - 1);
            };
            _local4.switchTo(_local2);
        }
        protected function buildJavascriptApi():void{
            if (ExternalInterface.available){
                js = new JSInterface();
                js.clbkPlayPause = jsPlayPauseMedia;
                js.clbkSetMute = jsSetMute;
                js.clbkSetVolume = jsSetVolume;
                js.clbkSeek = jsSeek;
                js.clbkLoadFeed = jsLoadFeed;
                js.clbkShowShare = jsShowShare;
                js.clbkCurrentPosition = getRtePosition;
                js.clbkCurrentState = jsCurrentState;
                js.clbkChangeDSRate = jsChangeDSRate;
                js.clbkGetMute = jsGetMute;
                js.clbkOSMFLoadRaw = loadRaw;
                js.clbkGetVolume = jsGetVolume;
                js.clbkTotalDuration = getRteTotalDuration;
                js.clbkIsPlaying = jsIsPlaying;
                js.clbkDSAuto = trySetBitRateAuto;
                js.clbkDSIncrease = tryIncreaseBitRate;
                js.clbkDSDecrease = tryDecreaseBitRate;
                js.clbkIsEighteen = jsViewerIsMature;
                js.clbkIsEighteenWithPin = jsViewerIsMatureWithPin;
                js.clbkFlexBrowser = jsBrowserChange;
                js.clbkGetEnableStageVideo = jsGetEnableStageVideo;
                js.clbkSetEnableStageVideo = jsSetEnableStageVideo;
                js.mapCallbacks();
            };
        }
        protected function jsBrowserChange(url:String):void{
            this.logToJs("@@@@\nReceived browser change:");
            this.logToJs(url);
        }
        protected function jsSetEnableStageVideo(b:Boolean):void{
            var _local2:Boolean = OSMFSettings.enableStageVideo;
            trace(("\t### SETTING OSMFSettings.enableStageVideo = " + b));
            OSMFSettings.enableStageVideo = b;
        }
        protected function jsGetEnableStageVideo():Boolean{
            return (OSMFSettings.enableStageVideo);
        }
        protected function jsViewerIsMature():void{
            if (needsPin){
                return;
            };
            viewerIsMature();
        }
        protected function jsViewerIsMatureWithPin(pin:String):void{
            if (checkViewerMatureByPin(pin)){
                viewerIsMature();
            } else {
                ExternalInterface.call("alert", "Please check your PIN and try again.");
            };
        }
        protected function jsGetMute():Boolean{
            return (mediaPlayer.muted);
        }
        protected function jsSetMute(value):void{
            muteState = value;
        }
        protected function jsGetVolume():Number{
            return ((jsVolCorrection * volume));
        }
        protected function jsSetVolume(value:String):void{
            var _local2:Number = value;
            if (!isNaN(_local2)){
                _local2 = (Math.max(0, Math.min(_local2, jsVolCorrection)) / jsVolCorrection);
                onChangeVolume(_local2);
            };
        }
        protected function jsSeek(pos:String):void{
            var _local2:Number = pos;
            if (((((media) && (!(isNaN(_local2))))) && ((_local2 > 0)))){
                doRteSeek(_local2);
            };
            userBufferIntervention = true;
        }
        protected function jsLoadFeed(url:String, autoPlay:Object=true, startPos:String=null, ... _args):void{
            trace(("jsLoadFeed \n\t" + [url, autoPlay, startPos, _args].join("\n\t")));
            media = null;
            optionalDisplaySettings = _args;
            var _local6:Boolean = deboolise(autoPlay);
            var _local5:Number = startPos;
            if (isNaN(_local5)){
                _local5 = -1;
            };
            loadFromUrl(url, _local6, _local5);
            userBufferIntervention = true;
        }
        protected function jsCurrentState():Array{
            var _local2:Array = [];
            var _local1:int = rteAPIPlayState;
            _local2.push(playerId);
            _local2.push(_local1);
            return (_local2);
        }
        protected function jsChangeDSRate(nStr:String):void{
            var _local2:Number = nStr;
            if (isNaN(_local2)){
                return;
            };
            trySetSpecifiedBitRate(_local2);
            userBufferIntervention = true;
        }
        protected function jsShowShare(callback:String):void{
            var _local2 = null;
            if (!ExternalInterface.available){
                return;
            };
            if (stage.displayState == "fullScreen"){
                stage.displayState = "normal";
            };
            if (playlist){
                _local2 = playlist.getShareProperties();
                ExternalInterface.call(callback, _local2.title, _local2.description, _local2.thumbnailUrl, _local2.shareThisUrl);
            } else {
                ExternalInterface.call(callback, null, null, null, null);
            };
        }
        public function get isPlaying():Boolean{
            if (((((!(cued)) && (media))) && (media.hasTrait("play")))){
                return (mediaPlayer.playing);
            };
            return (false);
        }
        protected function jsIsPlaying():Boolean{
            return (isPlaying);
        }
        protected function jsPlayPauseMedia():void{
            playPauseMedia();
            userBufferIntervention = true;
        }
        public function playPauseMedia():void{
            var _local1 = null;
            if (cued){
                setCued(false, ((playlist) ? playlist.startPos : -1));
            } else {
                if (((media) && (media.hasTrait("play")))){
                    _local1 = (media.getTrait("play") as PlayTrait);
                    if (_local1.playState == "playing"){
                        if (_local1.canPause){
                            _local1.pause();
                        };
                    } else {
                        _local1.play();
                    };
                };
            };
        }
        public function get position():Number{
            return (getRtePosition());
        }
        public function seekMedia(seconds:Number):void{
            trace(("seek media " + arguments));
            doRteSeek(seconds);
        }
        public function get advertMedia():IAdvertisingMediaElement{
            return (C.recurseForAdvert(currentMedia));
        }
        public function get isAdvert():Boolean{
            var _local1 = null;
            if (playlist){
                if (!media){
                    return (false);
                };
                _local1 = C.recurseForSeekable(media);
                if (_local1){
                    return (_local1.isAdvertising);
                };
            };
            return (false);
        }
        public function get isSting():Boolean{
            var _local1 = null;
            if (playlist){
                if (!media){
                    return (false);
                };
                _local1 = C.recurseForSeekable(media);
                if (_local1){
                    return (_local1.isSting);
                };
            };
            return (false);
        }
        protected function dvrDuration():Number{
            var _local1:TimeTrait = (currentMedia.getTrait("time") as TimeTrait);
            if (isNaN(_local1.currentTime)){
                return (Math.max(0, _local1.currentTime, (_local1.duration - dvrSafetyBuffer)));
            };
            return (Math.max(0, (_local1.duration - dvrSafetyBuffer)));
        }
        public function get totalDuration():Number{
            if (showDVR){
                return (dvrDuration());
            };
            var _local1:IMultiElementSeekable = C.recurseForSeekable(media);
            if (_local1){
                return (_local1.contentOnlyDuration());
            };
            return (mediaPlayer.duration);
        }
        protected function getRteTotalDuration():Number{
            return (totalDuration);
        }
        public function get volume():Number{
            return (mediaPlayer.volume);
        }
        public function onChangeVolume(volumeLevel:Number):void{
            if (isNaN(volumeLevel)){
                return;
            };
            mediaPlayer.volume = Math.min(1, Math.max(volumeLevel, 0));
            Storage.save("audioVolume", "audioVolume", mediaPlayer.volume);
            if (muteState){
                muteState = false;
            } else {
                updateVolume();
            };
        }
        public function get muteState():Boolean{
            return (mediaPlayer.muted);
        }
        public function set muteState(value:Boolean):void{
            mediaPlayer.muted = value;
            Storage.save("Mute", "mute", mediaPlayer.muted);
            updateVolume();
        }
        protected function updateVolume():void{
            var _local1 = null;
            if (currentMedia){
                _local1 = (currentMedia.getTrait("audio") as AudioTrait);
                if (_local1){
                    _local1.muted = muteState;
                    _local1.volume = volume;
                };
            };
            if (js){
                js.notifyVolumeChange(volume, muteState);
            };
            if (iskin){
                iskin.notifyVolumeChange(volume, muteState);
            };
            if (tracker){
                tracker.volume = ((muteState) ? 0 : volume);
            };
        }
        public function get playlistTitle():String{
            if (playlist){
                return (playlist.getShareProperties().title);
            };
            return ("");
        }
        public function get streamUrl():String{
            if (playlist){
                return (playlist.getShareProperties().title);
            };
            return ("");
        }
        public function get feedUrl():String{
            if (playlist){
                return (playlist.getShareProperties().title);
            };
            return ("");
        }
        public function get roadblockOptions():Object{
            return (_roadblockOptions);
        }
        public function set roadblockOptions(value:Object):void{
            _roadblockOptions = value;
        }
        public function get callbackOnPlay():Function{
            return (_callbackOnPlay);
        }
        public function set callbackOnPlay(fn:Function):void{
            _callbackOnPlay = fn;
        }
        public function get callbackRoadBlock():Function{
            return (_callbackRoadBlock);
        }
        public function set callbackRoadBlock(fn:Function):void{
            _callbackRoadBlock = fn;
        }
        public function clearInternals(clearPlaylist:Boolean=true):void{
        }
        public function hideThumbnail():void{
            hideThumbnailXL = true;
        }
        public function get pinService():IPINServices{
            return (_pinService);
        }
        public function set pinService(ip:IPINServices):void{
            _pinService = ip;
            if (iskin){
                iskin.pinService = ip;
            };
        }
        public function get needsPin():Boolean{
            var _local1:Boolean;
            if (pinService){
                _local1 = pinService.needsPin();
            };
            return (_local1);
        }
        protected function checkPin(pin:String):Boolean{
            var _local2:Boolean;
            if (pinService){
                _local2 = pinService.checkPin(pin);
            };
            return (_local2);
        }
        protected function handleSkinValidateMaturity(event:SkinCommand):void{
            var _local2 = null;
            if (needsPin){
                _local2 = event.value;
                if (checkViewerMatureByPin(_local2)){
                    viewerIsMature();
                } else {
                    if (iskin){
                        iskin.notifyUser("That PIN wasn't recognised. Please check and try again.", "Notification", -1111);
                    };
                };
            } else {
                viewerIsMature();
            };
        }
        protected function viewerIsMature():void{
            media = null;
            if (playlist){
                playlist.confirmedMaturity = true;
            };
            addEventListener("enterFrame", completeViewerIsMature);
        }
        protected function completeViewerIsMature(event:Event):void{
            trace(("Completion count " + countDownToCrash));
            countDownToCrash = (countDownToCrash - 1);
            if (countDownToCrash > 0){
                return;
            };
            countDownToCrash = 2;
            removeEventListener("enterFrame", completeViewerIsMature);
            if (playlist){
                playlist.confirmedMaturity = true;
            };
            setCued(false, _andGoToSeconds);
            if (!isPlaying){
                playPauseMedia();
            };
        }
        protected function checkViewerMatureByPin(pin:String):Boolean{
            var _local2:Boolean;
            if (((needsPin) && (playlist))){
                _local2 = checkPin(pin);
                if (_local2){
                    pinValidated = true;
                };
                playlist.confirmedMaturity = _local2;
            };
            return (_local2);
        }
        public function get enableAgeRestriction():Boolean{
            return (_enableAgeRestriction);
        }
        public function set enableAgeRestriction(b:Boolean):void{
            _enableAgeRestriction = b;
        }
        public function get hideThumbnailXL():Boolean{
            return (_hideThumbnailXL);
        }
        public function set hideThumbnailXL(b:Boolean):void{
            _hideThumbnailXL = b;
            if (((cued) && (hideThumbnailXL))){
                media = null;
            };
        }
        protected function onStageResize(event:Event):void{
            var _local2:Boolean;
            if (((event) && ((event is FullScreenEvent)))){
                _local2 = (event as FullScreenEvent).fullScreen;
            } else {
                try {
                    _local2 = !((stage.displayState == "normal"));
                } catch(e:Error) {
                };
            };
            setSize(stage.stageWidth, stage.stageHeight);
            isFullScreenState = _local2;
        }
        public function get isFullScreenState():Boolean{
            return (_isFullScreenState);
        }
        public function set isFullScreenState(b:Boolean):void{
            var _local2:Boolean = isFullScreenState;
            _isFullScreenState = b;
            if (iskin){
                iskin.isFullScreenState = isFullScreenState;
            };
            if (_local2 != isFullScreenState){
                dispatchEvent(new Event("fullScreenStateChange"));
            };
        }
        public function calculateScreenRect():void{
            if (!stage){
                return;
            };
            if (USE_SMALLER_SCREEN_FOR_PLAYBACK){
                stage.fullScreenSourceRect = limitedScreenRect;
            } else {
                stage.fullScreenSourceRect = null;
            };
        }
        public function setSize(w:Number, h:Number):void{
            playerW = w;
            width = w;
            playerH = h;
            height = h;
            var _local3:LightweightVideoElement = C.recurseForVideoElement(currentMedia);
            if (_local3){
                mediaContainer.x = mediaContainer.x;
                mediaContainer.y = mediaContainer.y;
            };
            mediaContainer.validateNow();
            try {
                calculateScreenRect();
            } catch(e:Error) {
            };
            if (tracker){
                tracker.setSize(w, h);
            };
            dispatchEvent(new Event("playerResizeEvent"));
        }
        protected function buildTracker():void{
            tracker = new CompositeTracker();
            tracker.setMediaPlayer(mediaPlayer);
            tracker.setSize(playerW, playerH);
            tracker.volume = volume;
            tracker.captionsEnabled = captionsEnabled;
            var _local1:GeoLocator = GeoLocator.instance();
            _local1.addEventListener("complete", completeTrackSetup);
            _local1.checkGeoLocation(PlaylistFactoryLoader.baseCL);
        }
        protected function completeTrackSetup(event:Event):void{
            trace(("RECEIVED GEOLOCATION OF " + GeoLocator.instance().geoLocation));
            GeoLocator.instance().removeEventListener("complete", completeTrackSetup);
        }
        protected function setPlayerInsightListeners():void{
            AdvertisingEventDispatcher.instance.addEventListener("adRequestInsight", handlePlayerInsight);
            AdvertisingEventDispatcher.instance.addEventListener("adStartInsight", handlePlayerInsight);
            AdvertisingEventDispatcher.instance.addEventListener("adEndInsight", handlePlayerInsight);
            AdvertisingEventDispatcher.instance.addEventListener("adClickInsight", handlePlayerInsight);
        }
        protected function handlePlayerInsight(event:PlayerInsightsEvent):void{
            updateRteMetadata();
            if (tracker){
                tracker.handlePlayerInsight(event);
            };
            trace(((((("CORRECTING MEDIA PLAYER STATE " + this.mediaPlayer.playing) + " ") + mediaPlayer.paused) + " ") + mediaPlayerState));
            notifyMediaPlayerState();
        }
        public function setBlueMetrixAccount(s:String):void{
        }
        protected function buildOSMF():void{
            var _local1:Number;
            var _local2:Number;
            if (parent){
                _local1 = width;
                if (((isNaN(_local1)) || ((_local1 == 0x0200)))){
                    _local1 = parent.width;
                };
                _local2 = height;
                if (((isNaN(_local2)) || ((_local2 == 288)))){
                    _local2 = parent.height;
                };
                setSize(_local1, _local2);
            };
            if (!disableApi){
                buildJavascriptApi();
            };
            addPlayerListeners();
            buildTracker();
            loadPlugins();
            loadFromStorage();
            notifyState("onStateChange", 64);
            updateVolume();
            updateRteMetadata();
            updateCaptions();
        }
        public function get hasCaptions():Boolean{
            return (_hasCaptions);
        }
        public function set hasCaptions(b:Boolean):void{
            _hasCaptions = b;
            updateCaptions();
        }
        public function get captionsEnabled():Boolean{
            return (_captionsEnabled);
        }
        public function set captionsEnabled(b:Boolean):void{
            _captionsEnabled = b;
            Storage.save("captionsEnabled", "captionsEnabled", captionsEnabled);
            updateCaptions();
        }
        protected function updateCaptions():void{
            if (iskin){
                iskin.notifyCaptionChange(hasCaptions, captionsEnabled);
            };
            if (tracker){
                tracker.captionsEnabled = captionsEnabled;
            };
        }
        protected function loadPlugins():void{
            loadSmilPlugin();
        }
        protected function loadSmilPlugin():void{
            loadPlugin("org.osmf.smil.SMILPluginInfo");
        }
        override protected function onPluginLoaded(event:MediaFactoryEvent):void{
            var _local2:MediaResourceBase = registerPluginLoadEvent(event);
            var _local3:URLResource = (_local2 as URLResource);
            if (_local3){
                trace((">> " + _local3.url));
            };
            if (hasQueuedPlugins()){
                return;
                /*not popped
                trace("RETURNING AS STILL QUEUE OF PLUGINS")
                */
            };
            loadDeferredContent();
        }
        protected function loadFromStorage():void{
            var _local1 = null;
            _local1 = Storage.load("Mute", "mute");
            if (_local1 != null){
                muteState = _local1;
            };
            _local1 = Storage.load("audioVolume", "audioVolume");
            var _local2:Number = _local1;
            if (((((_local1) && (!(isNaN(_local2))))) && ((_local2 > 0)))){
                onChangeVolume(_local2);
            } else {
                onChangeVolume(defaultVolume);
            };
            _local1 = Storage.load("captionsEnabled", "captionsEnabled");
            if (_local1 != null){
                captionsEnabled = _local1;
                updateCaptions();
            };
        }
        protected function addPlayerListeners():void{
            mediaPlayer.addEventListener("currentTimeChange", notifyTimeChange);
            mediaPlayer.addEventListener("durationChange", notifyTimeChange);
            mediaPlayer.addEventListener("complete", handleMediaComplete);
            mediaPlayer.addEventListener("mediaError", handleMediaError);
            mediaPlayer.addEventListener("mediaElementChange", mediaElementChangeHandler);
            mediaPlayer.addEventListener("playStateChange", notifyStatePlayEventHandler);
            mediaPlayer.addEventListener("canPauseChange", notifyStatePlayEventHandler);
            mediaPlayer.addEventListener("mediaPlayerStateChange", notifyMediaPlayerState);
        }
        protected function notifyMediaPlayerState(event:MediaPlayerStateChangeEvent=null):void{
            if (event){
                mediaPlayerState = event.state;
            } else {
                if (mediaPlayer.playing){
                    mediaPlayerState = "playing";
                } else {
                    if (mediaPlayer.paused){
                        mediaPlayerState = "paused";
                    } else {
                        mediaPlayerState = "buffering";
                    };
                };
            };
            if (iskin){
                iskin.setPlayerState(mediaPlayerState);
            };
        }
        protected function notifyStatePlayEventHandler(event:PlayEvent):void{
            var _local2 = null;
            canPause = event.canPause;
            if (event.playState){
                playState = event.playState;
            };
            if (tracker){
                tracker.playStateUpdate(playState);
            };
            var _local3:int = ((playState)=="playing") ? 16 : 32;
            notifyState("onStateChange", _local3);
            delayedValidation();
        }
        protected function notifyState(type:String, state:int, errorMessage:String=""):void{
            rteAPIPlayState = state;
            var _local4:RTEAPIEvent = new RTEAPIEvent(type, state, errorMessage);
            dispatchEvent(_local4);
            if (type == "onStateChange"){
                if (js){
                    js.notifyPlayState(state, playerId);
                };
            };
            if (iskin){
                iskin.notifyState(type, state, errorMessage);
            };
            if (tracker){
                tracker.notifyState(type, state, errorMessage);
            };
        }
        public function getState():RTEAPIEvent{
            return (new RTEAPIEvent("onStateChange", this.rteAPIPlayState, this.errorMessage));
        }
        protected function processReceivedParameters(o:Object):void{
            var _local8:Number;
            var _local13 = null;
            var _local5 = null;
            var _local11 = null;
            var _local12:Number;
            var _local2:Boolean;
            var _local9:int;
            var _local7 = null;
            var _local14 = null;
            var _local4:String = "unset";
            var _local15 = -1;
            var _local6:Boolean;
            var _local3:String = "flash";
            _loop1:
            for (var _local10:String in o) {
                _local11 = o[_local10];
                _local12 = o[_local10];
                _local2 = deboolise(o[_local10]);
                _local9 = parseInt(o[_local10]);
                var _local16 = _local10.toLowerCase();
                while ("playerid" === _local16) {
                    _playerId = _local11;
                    continue _loop1;
                    RTE_OSMF_Player.addAdTagAppendParameter("cmsid", _local11);
                    continue _loop1;
                    AbstractSingleFilePlaylist.ON_PAUSE_AD_TAG = _local11;
                    continue _loop1;
                    pingTrackPlatform = _local11;
                    continue _loop1;
                    PingTracking.pingStackUrl = _local11;
                    continue _loop1;
                    configLocation = _local11;
                    continue _loop1;
                    continue _loop1;
                    disableApi = _local2;
                    continue _loop1;
                    loadUIByUrl(_local11);
                    continue _loop1;
                    _local4 = _local11;
                    continue _loop1;
                    _local6 = _local2;
                    continue _loop1;
                    _local15 = _local12;
                    if (isNaN(_local15)){
                        _local15 = -1;
                    };
                    continue _loop1;
                    _local7 = o[_local10].split(",");
                    trace(("Loading plugins:\n\t" + _local7.join("\n\t")));
                    while (_local7.length) {
                        loadPlugin(_local7.pop());
                    };
                    continue _loop1;
                    _local8 = _local9;
                    if (!isNaN(_local8)){
                        AbstractPlaylistLoader.defaultNowNextTimerInterval = Math.max(100, Math.abs(_local8));
                        if (((playlist) && ((playlist is AbstractPlaylistLoader)))){
                            (playlist as AbstractPlaylistLoader).nowNextTimerInterval = AbstractPlaylistLoader.defaultNowNextTimerInterval;
                        };
                    };
                    continue _loop1;
                    _local8 = _local9;
                    if (((!(isNaN(_local8))) && ((_local8 >= 0)))){
                        RTE_OSMF_Player.maxRecoveryCount = _local8;
                    };
                    continue _loop1;
                    _local8 = _local9;
                    if (!isNaN(_local8)){
                        pingTrackInterval = Math.max(100, Math.abs(_local8));
                    };
                    continue _loop1;
                    _local8 = _local9;
                    if (!isNaN(_local8)){
                        PREFERRED_STARTING_BITRATE = Math.max(32, Math.abs(_local8));
                    };
                    continue _loop1;
                    _local14 = (mediaFactory as AutoSmoothDefaultMediaFactory);
                    _local14.checkPolicyFile = _local2;
                    continue _loop1;
                    _local5 = _local11;
                    continue _loop1;
                    _local13 = _local11;
                    continue _loop1;
                    OSMFSettings.enableStageVideo = _local2;
                    continue _loop1;
                    playerMinimumBufferTime = _local12;
                    continue _loop1;
                    safeOSMFNum(o[_local10], _local10);
                    continue _loop1;
                };
                //unresolved if
                //unresolved if
                //unresolved if
                //unresolved if
                //unresolved if
                //unresolved if
                //unresolved if
                //unresolved if
                //unresolved if
                //unresolved if
                //unresolved if
                //unresolved if
                //unresolved if
                //unresolved if
                //unresolved if
                //unresolved if
                //unresolved if
                //unresolved if
                //unresolved if
                //unresolved if
                //unresolved if
                //unresolved if
                //unresolved if
                //unresolved if
                //unresolved if
                //unresolved if
                //unresolved if
                //unresolved if
                //unresolved if
                //unresolved if
                //unresolved if
                //unresolved if
                //unresolved if
                //unresolved if
                //unresolved if
            };
            mediaPlayer.bufferTime = playerMinimumBufferTime;
            if (_local4 != "unset"){
                deferredLoadFromUrl = {};
                deferredLoadFromUrl.loadUrl = _local4;
                deferredLoadFromUrl.autoStart = _local6;
                deferredLoadFromUrl.startPosition = _local15;
            };
        }
        protected function safeOSMFNum(val:Object, propName:String):void{
            var _local3:Number = val;
            if (isNaN(_local3)){
                return;
                /*not popped
                trace(("Invalid config received for " + propName))
                */
            };
            if (OSMFSettings[propName] == undefined){
                return;
                /*not popped
                trace((("Key " + propName) + " not found on OSMFSettings. Please check case."))
                */
            };
            trace(((((("Updating OSMFSettings." + propName) + " from ") + OSMFSettings[propName]) + " to ") + _local3));
            OSMFSettings[propName] = _local3;
        }
        protected function loadUIByUrl(url:String):void{
            var _local2:Loader = new Loader();
            var _local3:URLRequest = new URLRequest(url);
            _local2.contentLoaderInfo.addEventListener("ioError", trace);
            _local2.contentLoaderInfo.addEventListener("securityError", trace);
            _local2.contentLoaderInfo.addEventListener("init", completeSkinLoad);
            try {
                _local2.load(_local3);
            } catch(e:Error) {
                trace(("SKIN LOAD ERROR: " + e));
            };
        }
        public function setSkinProxy(iskin:ISkin):void{
            unsetSkin();
            processSetSkin(iskin);
        }
        protected function completeSkinLoad(event:Event):void{
            unsetSkin();
            var _local2:LoaderInfo = (event.target as LoaderInfo);
            trace(("LOADED SKIN: " + _local2.content));
            ui = _local2.content;
            if ((ui is ISkin)){
                processSetSkin((ui as ISkin));
            } else {
                throw (new Error("Skin object supplied is not an ISkin"));
            };
        }
        public function unsetSkin():void{
            if (iskin){
                removeSkinListeners(iskin);
                iskin.setPlaylist(null);
                iskin.handleSetMedia(null);
                iskin.pinService = null;
                if ((iskin is DisplayObject)){
                    mediaContainer.layoutRenderer.removeTarget(iskin);
                };
                iskin = null;
            };
        }
        protected function processSetSkin(isk:ISkin):void{
            var _local2 = null;
            iskin = isk;
            addSkinListeners(iskin);
            iskin.pinService = pinService;
            iskin.handleSetInitVars(((loaderInfo) ? loaderInfo.parameters : null));
            iskin.isFullScreenState = isFullScreenState;
            iskin.notifyState("onStateChange", rteAPIPlayState);
            iskin.layoutMetadata.x = 0;
            iskin.layoutMetadata.y = 0;
            iskin.layoutMetadata.percentHeight = 100;
            iskin.layoutMetadata.percentWidth = 100;
            iskin.layoutMetadata.index = 10000;
            if ((iskin is DisplayObject)){
                mediaContainer.layoutRenderer.addTarget(iskin);
            };
            mediaContainer.validateNow();
            iskin.setPlaylist(playlist, optionalDisplaySettings);
            iskin.handleSetMedia(media);
            iskin.setPlayerState(mediaPlayerState);
            updateVolume();
            updateRteMetadata();
            updateCaptions();
            if (deferredError){
                handleError(deferredError);
                deferredError = null;
            };
        }
        public function get errorMessage():String{
            if (_lastError){
                return (_lastError.toString());
            };
            return ("");
        }
        public function get errorCode():int{
            return (_lastErrorCode);
        }
        protected function handleMediaError(event:MediaErrorEvent):void{
            var _local3:String = event.error.message;
            var _local2:int = event.error.errorID;
            var _local5 = _local2;
            while (15 === _local5) {
                if (tryToRecover()){
                    return;
                };
                _local3 = (_local3 + ((" (Failed after " + recoveryCount) + " retries.)"));
                recoveryCount = 0;
                //unresolved jump
                _local3 = "This error has an id of 0 and is most likely to have been triggered by a load failure or parse failure of .F4M or plugin content.";
                //unresolved jump
            };
            //unresolved if
            //unresolved if
            //unresolved if
            //unresolved if
            //unresolved if
            //unresolved if
            var _local4:Error = new Error(_local3, _local2);
            handleError(_local4);
        }
        protected function tryToRecover(atLeastOnce:Boolean=false):Boolean{
            var _local3:uint = getTimer();
            if ((_local3 - lastRecoveryTime) > 20000){
                recoveryCount = 0;
            };
            lastRecoveryTime = _local3;
            recoveryCount = (recoveryCount + 1);
            trace(("@@@@@@@@@@\n@@@@\n@@\t\t\t\ttryToRecover() " + recoveryCount));
            var _local2:int = Math.max(maxRecoveryCount, ((atLeastOnce) ? 1 : 0));
            if (recoveryCount < _local2){
                this.triggerReloadPlaylist();
                return (true);
            };
            return (false);
        }
        protected function resetRecoveryCount():void{
            recoveryCount = 0;
        }
        public function handleError(e, asPlaylist:Boolean=false):void{
            var _local7 = null;
            trace(((" \n\n\nUNCAUGHT ERROR HANDLER \n\n" + e) + "\n\n\nEND UNCAUGHT"));
            if (AbstractPlaylistLoader.DEV_THROW_ALL_ERRORS){
                throw (e);
            };
            _lastError = e;
            var _local6:int;
            var _local5:Boolean;
            var _local3:UncaughtErrorEvent = (e as UncaughtErrorEvent);
            if (_local3){
                _local3.preventDefault();
                e = _local3.error;
                _lastError = e;
                try {
                    if ((_local3.error is Error)){
                        _local7 = Error(_local3.error).getStackTrace();
                    };
                } catch(e:Error) {
                    _local7 = "No stack available.";
                };
                _local5 = true;
            };
            var _local10:ArgumentError = (e as ArgumentError);
            if (_local10){
                if (((_local5) && ((_local10.message == OSMFStrings.getString("invalidParam"))))){
                    logToJs("(Ignoring uncaught invalid params in LoadTrait. OSMF bug.)");
                    return;
                };
            };
            var _local4:ErrorEvent = (e as ErrorEvent);
            if (_local4){
                _lastError = _local4.text;
                _local6 = _local4.errorID;
            };
            var _local9:Error = (e as Error);
            if (_local9){
                _lastError = _local9.message;
                _local6 = _local9.errorID;
            };
            if (_local6 == -3322){
                if (tracker){
                    tracker.stopTracking();
                };
                if (iskin){
                    iskin.notifyUser("DRM error encountered.", "error", _local6, _lastError);
                };
                if (_local3){
                    _local3.preventDefault();
                };
                return;
            };
            if (_local6 == -3365){
                trace("DETECTED INCOGNITO");
                if (tracker){
                    tracker.stopTracking();
                };
                if (iskin){
                    iskin.notifyUser("DRM error encountered - are you using 'InPrivate' browsing?", "error", _local6);
                };
                if (_local3){
                    _local3.preventDefault();
                };
                return;
            };
            if ((((_local6 == -1009)) || ((_lastError == "Quality level cannot be set at this time.")))){
                if (tryToRecover()){
                    if (_local3){
                        _local3.preventDefault();
                    };
                    return;
                };
                _lastError = (_lastError + ((" (Failed after " + recoveryCount) + " retries.)"));
                recoveryCount = 0;
            };
            var _local8:MediaErrorEvent = (e as MediaErrorEvent);
            if (_local8){
                _lastError = ((((((("Media errorID: " + _local8.error.errorID) + "\nName: ") + _local8.error.name) + "\nMessage: ") + _local8.error.message) + "\nDetail: ") + _local8.error.detail);
                _local6 = _local8.error.errorID;
            };
            _lastErrorCode = _local6;
            if (_local5){
                _lastError = ("(UNCAUGHT) " + _lastError);
                if (_local6 == 1009){
                    if (tryToRecover(true)){
                        trace("@@@@@@@@@@@@@@@@@@@@@@@@\nUNCAUGHT NULL POINTER ERROR!\n@@@@@@@@@@@@@@@@@@@@");
                        if (_local3){
                            _local3.preventDefault();
                        };
                        return;
                    };
                    _lastError = (_lastError + ((" (Failed after " + recoveryCount) + " retries.)"));
                    recoveryCount = 0;
                };
            };
            logToJs(((("Error:" + errorMessage) + "\nCode:") + _local6));
            if (asPlaylist){
                _local6 = -1;
            };
            notifyState("onError", 128, errorMessage);
            if (!_local7){
                _local7 = StackTrace.getStack();
            };
            if (pingTracker){
                pingTracker.registerError(errorMessage, _local6, _local7);
            };
            if (this.isPlaying){
                this.playPauseMedia();
            };
            if (this.playlist){
                this.setCued(true);
            };
            if (tracker){
                tracker.stopTracking();
            };
            if (iskin){
                iskin.notifyUser(errorMessage, "error", _local6, moreInformationOnErrorUrl(errorMessage, _local6));
            };
        }
        protected function logToJs(s:String):void{
            try {
                if (ExternalInterface.available){
                    ExternalInterface.call("logOutput", s);
                };
            } catch(e:Error) {
                trace(((("Couldn't log " + s) + "\nBecause:\n") + e));
            };
        }
        protected function getPlaylistForLoad(autoPlay:Boolean=false, startPos:Number=-1):AbstractPlaylistLoader{
            var _local4:PlaylistFactoryLoader = new PlaylistFactoryLoader();
            _local4.addEventListener("complete", completeLoadPlaylist);
            _local4.addEventListener("error", errorLoadPlaylist);
            _local4.autoPlay = autoPlay;
            _local4.startPos = startPos;
            trace(("GENERATED NEW PLAYLIST WITH " + arguments));
            return (_local4);
        }
        protected function cleanupPlaylist(pl:IPlaylistLoader, andDisposePlaylist:Boolean):void{
            if (!pl){
                return;
            };
            if (andDisposePlaylist){
                pl.dispose();
            };
            pl.removeEventListener("complete", completeLoadPlaylist);
            pl.removeEventListener("error", errorLoadPlaylist);
            pl.removeEventListener("change", currentTermChangePlaylist);
            pl.removeEventListener("playingProgrammeChange", playingProgrammeChange);
        }
        public function loadRaw(url:String, autoPlay:Boolean=true, loadLive:Boolean=false):void{
            var _local4 = null;
            mediaPlayer.autoPlay = autoPlay;
            if (tracker){
                tracker.setMediaUrl(url);
            };
            setPlaylist(null, true);
            if (loadLive){
                _local4 = new StreamingURLResource(url, "live");
            } else {
                _local4 = new URLResource(url);
            };
            var _local5:MediaElement = mediaFactory.createMediaElement(_local4);
            media = _local5;
        }
        public function loadFromUrl(url:String, autoPlay:Boolean=false, startPos:Number=-1):void{
            if (tracker){
                tracker.setMediaUrl(url);
            };
            setPlaylist(null, true);
            var _local4:IPlaylistLoader = getPlaylistForLoad(autoPlay, startPos);
            _local4.load(url);
        }
        public function loadFromXML(xml:XML, autoPlay:Boolean=false, startPos:Number=-1):void{
            mediaPlayer.autoPlay = true;
            if (tracker){
                tracker.setMediaUrl(null);
            };
            setPlaylist(null, true);
            var _local4:AbstractPlaylistLoader = this.getPlaylistForLoad(autoPlay, startPos);
            _local4.loadFromSource(xml);
        }
        public function loadFromJSON(json:String, autoPlay:Boolean=false, startPos:Number=-1):void{
            if (tracker){
                tracker.setMediaUrl(null);
            };
            setPlaylist(null, true);
            var _local4:AbstractPlaylistLoader = this.getPlaylistForLoad(autoPlay, startPos);
            _local4.loadFromSource(json);
        }
        public function triggerReloadPlaylist():void{
            var _local1 = null;
            var _local2:Number;
            if (this.playlist){
                _local1 = this.playlist;
                _local2 = _local1.startPos;
                this.setPlaylist(null, false);
                _local1.autoPlay = true;
                _local1.startPos = _local2;
                _local1.toggleBitRateInProgress = true;
                this.setPlaylist(_local1, false);
            };
        }
        protected function playingProgrammeChange(event:Event):void{
            trace("TREATING NOW NEXT CHANGE AS NEW PROGRAMME");
            setPlaylist(playlist.cloneLoader(), true);
        }
        protected function currentTermChangePlaylist(event:Event):void{
            notifyNowNextChange(playlist.showNext);
        }
        protected function errorLoadPlaylist(event:Event):void{
            notifyState("onStateChange", 8);
            handleError((event.target as IPlaylistLoader).lastError(), true);
            cleanupPlaylist((event.target as IPlaylistLoader), true);
        }
        protected function completeLoadPlaylist(event:Event):void{
            setPlaylist((event.target as IPlaylistLoader), true);
        }
        public function get cued():Boolean{
            return (_cued);
        }
        public function get waitingForMaturity():Boolean{
            return (((((((playlist) && (playlist.isMatureContent))) && (!(playlist.confirmedMaturity)))) && (enableAgeRestriction)));
        }
        public function setCued(b:Boolean, andGoToSeconds:Number=-1):void{
            var _local3 = null;
            var _local5 = null;
            var _local6:Boolean;
            var _local4 = null;
            if (((!(b)) && (playIsBlocked))){
                return;
            };
            _cued = b;
            if (playlist){
                mediaPlayer.autoPlay = !(b);
                if (!cued){
                    if (!playlist.playInitedFirstTime){
                        playlist.playInitedFirstTime = true;
                        sendUrchinLogOfFirstTimePlay();
                    };
                    if (waitingForMaturity){
                        _cued = true;
                        _andGoToSeconds = andGoToSeconds;
                        setCued(true, andGoToSeconds);
                        notifyAgeRestriction();
                        return;
                    };
                    _local3 = playlist.generateMediaFromFactory(mediaFactory);
                    media = _local3;
                    _local5 = C.recurseForSeekable(media);
                    if (((_local5) && (playlist.toggleBitRateInProgress))){
                        _local5.clearAdverts();
                        playlist.toggleBitRateInProgress = false;
                    };
                    _lastPosition = andGoToSeconds;
                    notifyTimeChange(null);
                    _local6 = ((!(isNaN(andGoToSeconds))) && ((andGoToSeconds > 0)));
                    if (((_local5) && (_local6))){
                        trace((((("ISEEK ? " + _local5) + " iseek.initialiseForStartPos(") + andGoToSeconds) + ")"));
                        if (_local5){
                            _local5.initialiseForStartPos(andGoToSeconds);
                        };
                        _local4 = (media.getTrait("seek") as SeekTrait);
                        if (!_local4){
                            cuePoint = andGoToSeconds;
                            media.addEventListener("traitAdd", completeCueSeek);
                        } else {
                            cuePoint = NaN;
                            doRteSeek(andGoToSeconds, true);
                        };
                    };
                    if (tracker){
                        tracker.startTracking();
                    };
                } else {
                    if (!hideThumbnailXL){
                        media = cuedPic;
                    };
                };
            };
            dispatchEvent(new Event("cuedSettingChange"));
        }
        protected function sendUrchinLogOfFirstTimePlay():void{
            pad = function (_arg1:int):String{
                return (((_arg1)<10) ? ("0" + _arg1.toString()) : _arg1.toString());
            };
            if (!playlist){
                return;
            };
            var pe:* = playlist.getEntryAt(0);
            if (!pe){
                return;
            };
            var a:* = [];
            if (pe.isLiveContent){
                a.push("live");
                if (pe.isAudioContent){
                    a.push("radio");
                } else {
                    a.push("tv");
                };
            };
            var d:* = pe.published;
            if (!d){
                d = new Date();
            };
            a.push(d.fullYear);
            a.push((pad((d.month + 1)) + pad(d.date)));
            var s:* = "";
            if (pe.channelName){
                s = (s + (RTEUtils.normaliseStr(pe.channelName) + "-"));
            };
            s = (s + RTEUtils.normaliseStr(pe.episodeTitle));
            if (pe.isAudioContent){
                s = (s + ".aac");
            } else {
                s = (s + ".mp4");
            };
            var addUv:* = generateUrchinTrackingUrlDetail(pe);
            s = (s + ("?" + addUv.toString()));
            a.push(s);
            var url:* = urchinLogFirstPlayUrl;
            var hasTrailingSlash:* = (url.charAt((url.length - 1)) == "/");
            if (!hasTrailingSlash){
                url = (url + "/");
            };
            url = (url + a.join("/"));
            var ur:* = new URLRequest(url);
            return;
            /*not popped
            sendToURL(ur)
            */
        }
        protected function generateUrchinTrackingUrlDetail(pe:IPlaylistEntry):URLVariables{
            var _local2:URLVariables = new URLVariables();
            _local2.ui = RTEUtils.normaliseStr(pe.source);
            if (pe.briNumber != ""){
                _local2.bri = pe.briNumber;
            };
            if (additionalTrackingValues){
                for (var _local3:String in additionalTrackingValues) {
                    _local2[_local3] = additionalTrackingValues[_local3];
                };
            };
            return (_local2);
        }
        protected function completeCueSeek(event:MediaElementEvent):void{
            var _local2 = null;
            var _local3:Boolean;
            if (event.traitType == "seek"){
                _local2 = (event.target as MediaElement);
                _local2.removeEventListener("traitAdd", completeCueSeek);
                _local3 = ((!(isNaN(cuePoint))) && ((cuePoint > 0)));
                if (playlist){
                    _local3 = true;
                };
                if ((((_local2 == media)) && (_local3))){
                    doRteSeek(cuePoint, true);
                    cuePoint = NaN;
                };
            };
        }
        public function get playlist():IPlaylistLoader{
            return (_playlist);
        }
        public function get playlistRepeatCounter():uint{
            return (_playlistRepeatCounter);
        }
        protected function replayMedia():void{
            _playlistRepeatCounter = (_playlistRepeatCounter + 1);
            handleSeekMedia(new SkinCommand("seekMedia", 0));
        }
        public function setPlaylist(pl:IPlaylistLoader, andDisposePlaylist:Boolean):void{
            var _local5 = null;
            var _local3 = null;
            var _local4:int;
            if (((!(pl)) && (currentMedia))){
                _local5 = (currentMedia.getTrait("load") as LoadTrait);
                if (_local5){
                    var _local6 = _local5.loadState;
                    while ("unloading" === _local6) {
                        //unresolved jump
                        _local5.unload();
                        //unresolved jump
                    };
                    //unresolved if
                    //unresolved jump
                };
            };
            firstTimeStreamsLoad = true;
            if (((playlist) && (!((playlist == pl))))){
                cleanupPlaylist(playlist, andDisposePlaylist);
                if (tracker){
                    tracker.stopTracking();
                };
            };
            if (((cuedPic) && (mediaContainer.containsMediaElement(cuedPic)))){
                mediaContainer.removeMediaElement(cuedPic);
            };
            if (pl){
                pl.additionalCustomAdTagParameters = RTE_OSMF_Player.getAdditionalCustomAdTagParameters();
                _local3 = pl.getShareProperties();
                if (_local3){
                    RTE_OSMF_Player.addAdTagAppendParameter("vid", _local3.showId);
                } else {
                    RTE_OSMF_Player.removeAdTagAppendParameter("vid");
                };
                pl.adTagAppendParameters = RTE_OSMF_Player.getAdTagAppendParameters();
                if (!pl.showNext){
                    if (!pl.isPlayable){
                        if (pl.lastError()){
                            handleError(pl.lastError());
                        } else {
                            handleError(new Error("Playlist has no content."));
                        };
                        pl = null;
                    };
                };
            };
            _playlist = pl;
            if (tracker){
                tracker.setProgrammeInfo(pl);
            };
            if (((((tracker) && (pl))) && (pl.sourceUrl))){
                tracker.setMediaUrl(pl.sourceUrl);
            };
            if (((((iskin) && (playlist))) && (!((iskin.playlist == playlist))))){
                iskin.setPlaylist(playlist, optionalDisplaySettings);
            };
            if (!playlist){
                if (cued){
                    setCued(false);
                };
                notifyState("onStateChange", 2);
            } else {
                _lastPosition = pl.startPos;
                if (!playlist.toggleBitRateInProgress){
                    resetRecoveryCount();
                };
                playlist.addEventListener("change", currentTermChangePlaylist);
                playlist.addEventListener("playingProgrammeChange", playingProgrammeChange);
                _local4 = 0;
                if (((isFullScreenState) || ((width > 0x0200)))){
                    _local4 = 852;
                };
                AbstractPlaylistLoader.overrideThumbnailSize = _local4;
                cuedPic = playlist.cuePlaylistFromFactory(mediaFactory);
                trace("HANDLE setPlaylist");
                notifyState("onStateChange", 2);
                notifyNowNextChange(playlist.showNext);
                setCued(!(playlist.autoPlay), playlist.startPos);
            };
        }
        protected function doRteSeek(numberInSeconds:Number, seekFromCueIgnoresBlocks:Boolean=false):void{
            var _local3 = null;
            mediaPlayer.autoPlay = true;
            deferredSeek = NaN;
            if (((playlist) && (cued))){
                setCued(false, numberInSeconds);
                return;
            };
            if (!media){
                return;
            };
            var _local4:IMultiElementSeekable = C.recurseForSeekable(media);
            if (_local4){
                _lastPosition = numberInSeconds;
                trace((("SET _lastPosition " + _lastPosition) + " in doRteSeek"));
                _local4.seekInContentOnly(numberInSeconds, seekFromCueIgnoresBlocks);
                return;
            };
            var _local5:SeekTrait = (media.getTrait("seek") as SeekTrait);
            if (_local5){
                if (_local5.canSeekTo(numberInSeconds)){
                    _local5.seek(numberInSeconds);
                } else {
                    _local3 = (media.getTrait("time") as TimeTrait);
                    _local3.addEventListener("durationChange", completeTimeChangeSeek);
                    deferredSeek = numberInSeconds;
                };
            } else {
                deferredSeek = numberInSeconds;
            };
        }
        protected function completeTimeChangeSeek(event:TimeEvent):void{
            var _local2:TimeTrait = (event.target as TimeTrait);
            _local2.removeEventListener("durationChange", completeTimeChangeSeek);
            if (((((currentMedia) && ((_local2 == currentMedia.getTrait("time"))))) && (!(isNaN(deferredSeek))))){
                trace("FINISHING TIME DEFERRED SEEK");
                doRteSeek(deferredSeek);
            };
        }
        public function itemTimeTrait():TimeTrait{
            var _local2 = null;
            var _local1 = null;
            if (isAdvert){
                _local1 = C.recurseForAdvert(currentMedia);
                if (_local1){
                    _local2 = C.recurseForProxies(_local1.getCurrentlyPlaying());
                };
            };
            if (!_local2){
                _local2 = C.recurseForProxies(currentMedia);
            };
            if (_local2){
                return ((_local2.getTrait("time") as TimeTrait));
            };
            return (null);
        }
        protected function getRtePosition():Number{
            var _local4:Number;
            var _local1 = null;
            if (!media){
                return (-1);
            };
            if (isAdvert){
                return (_lastPosition);
            };
            var _local3:IMultiElementSeekable = C.recurseForSeekable(media);
            var _local2:uint;
            if (_local3){
                _local4 = ((isNaN(_lastPosition)) ? -1 : _lastPosition);
                try {
                    _local2 = 1;
                    _lastPosition = _local3.contentOnlyPosition();
                } catch(e:Error) {
                    _local2 = 2;
                    _lastPosition = _local4;
                };
                if ((((_local2 == 1)) && ((_lastPosition > 0)))){
                    this.recoveryCount = 0;
                };
            } else {
                _local2 = 3;
                _local1 = (media.getTrait("time") as TimeTrait);
                if (_local1){
                    _lastPosition = _local1.currentTime;
                };
            };
            if (isNaN(_lastPosition)){
                trace(("RESETTING NaN TO " + _local4));
                _lastPosition = _local4;
            };
            return (_lastPosition);
        }
        protected function handleMediaComplete(event:TimeEvent):void{
            var _local2:IPlaylistLoader = playlist;
            if (_local2){
                if (!cued){
                    if (!hideThumbnailXL){
                        setCued(true, _local2.startPos);
                    };
                };
                tracker.trackPlaylistEnd();
                _local2.playbackStarted = false;
                if (_local2.currentTerm){
                    notifyNowNextChange(true);
                } else {
                    notifyState("onStateChange", 4);
                };
            } else {
                notifyState("onStateChange", 4);
            };
            notifyTimeChange(event);
        }
        protected function notifyTimeChange(event:TimeEvent):void{
            var _local3:Number = getRtePosition();
            var _local2:Number = getRteTotalDuration();
            if (((playlist) && ((_local3 > playlist.startPos)))){
                playlist.startPos = _local3;
            };
            if (js){
                js.notifyPlayPosition(_local3, _local2);
            };
            if (iskin){
                iskin.notifyPlayPosition(_local3, _local2);
            };
            if (tracker){
                tracker.positionUpdate(_local3, _local2);
            };
            updateAdvertTimes(_local3, _local2);
        }
        protected function notifyNowNextChange(showNext:Boolean):void{
            var _local3 = null;
            var _local2:int;
            if (((((!(showNext)) && (playlist))) && (!(playlist.isPlayable)))){
                _local3 = "This item cannot be played as there is no media associated with it.";
                _local2 = -999;
                if (iskin){
                    iskin.notifyUser(_local3, "error", 0, moreInformationOnErrorUrl(_local3, _local2));
                };
            } else {
                if (js){
                    js.notifyNowNextChange(showNext);
                };
                if (iskin){
                    iskin.notifyNowNextChange(showNext);
                };
            };
        }
        protected function notifyDataRatesChange(event:DynamicStreamEvent):void{
            var _local2:DynamicStreamTrait = ((media) ? (media.getTrait("dynamicStream") as DynamicStreamTrait) : null);
            if (!_local2){
                clearDataRates();
                return;
            };
            _selectedStreamRate = _local2.getBitrateForIndex(_local2.currentIndex);
            lastGoodBandwidth = _local2.getBitrateForIndex(_local2.currentIndex);
            _autoStreamRateSelection = _local2.autoSwitch;
            logToJs(((((("notifyDataRatesChange " + event.type) + " to ") + this.selectedStreamRate) + " kbps. ") + event.autoSwitch));
            if (event.type == "numDynamicStreamsChange"){
                processDataRates();
            };
            if (js){
                js.notifyDataRates(_local2.autoSwitch, selectedStreamRate, availableStreamRates);
            };
            if (iskin){
                iskin.notifyDataRates(_local2.autoSwitch, selectedStreamRate, availableStreamRates);
            };
            if (tracker){
                tracker.notifyDataRates(_local2.autoSwitch, selectedStreamRate, availableStreamRates);
            };
            dispatchEvent(new Event("streamRatesChange"));
        }
        protected function processDataRates():void{
            var _local5:int;
            var _local1:Number;
            var _local4:MediaElement = C.recurseForProxies(media);
            if (!_local4){
                return;
            };
            var _local2:DynamicStreamTrait = (_local4.getTrait("dynamicStream") as DynamicStreamTrait);
            if (!_local2){
                return;
            };
            var _local6:Array = [];
            var _local3 = -1;
            _local5 = 0;
            while (_local5 < _local2.numDynamicStreams) {
                _local1 = _local2.getBitrateForIndex(_local5);
                _local6.push(_local1);
                if ((((((MAXIMUM_ALLOWED_BITRATE > 0)) && ((_local3 == -1)))) && ((MAXIMUM_ALLOWED_BITRATE < _local1)))){
                    var _local7 = Math.max(0, (_local5 - 1));
                    _local2.maxAllowedIndex = _local7;
                    _local3 = _local7;
                    trace(((((("BLOCKED MAX RATE AT " + _local2.getBitrateForIndex(_local3)) + " ON INDEX ") + _local3) + " AFTER TESTING WITH ") + _local1));
                };
                _local5++;
            };
            _availableStreamRates = _local6;
        }
        protected function notifyAgeRestriction():void{
            if (js){
                js.notifyAgeRestriction(needsPin);
            };
            if (iskin){
                iskin.notifyAgeRestriction(needsPin);
            };
        }
        protected function clearDataRates():void{
            _autoStreamRateSelection = true;
            _selectedStreamRate = NaN;
            _availableStreamRates = null;
            if (js){
                js.notifyDataRates(true);
            };
            if (iskin){
                iskin.notifyDataRates(true);
            };
            if (tracker){
                tracker.notifyDataRates(true);
            };
        }
        public function get autoStreamRateSelection():Boolean{
            return (_autoStreamRateSelection);
        }
        public function get selectedStreamRate():Number{
            return (_selectedStreamRate);
        }
        public function get availableStreamRates():Array{
            return (_availableStreamRates);
        }
        protected function toggleFullScreen(setting:Object=null):void{
            var _local2:Boolean;
            try {
                _local2 = ((setting)==null) ? (stage.displayState == "normal") : setting;
                stage.displayState = ((_local2) ? "fullScreen" : "normal");
            } catch(e:Error) {
                trace(("Full screen mode failed. " + e));
            };
        }
        protected function mediaElementChangeHandler(event:MediaElementChangeEvent):void{
            deferredSeek = NaN;
            if (currentMedia){
                removeMediaListeners();
            };
            currentMedia = media;
            if (iskin){
                iskin.handleSetMedia(media);
            };
            if (currentMedia){
                setMediaListeners();
            };
        }
        protected function removeMediaListeners():void{
            var _local1:int;
            if (!currentMedia){
                return;
            };
            currentMedia.removeEventListener("metadataAdd", validateMetadata);
            currentMedia.removeEventListener("metadataRemove", validateMetadata);
            currentMedia.removeEventListener("traitAdd", validateTraitAddOrRemove);
            currentMedia.removeEventListener("traitRemove", validateTraitAddOrRemove);
            _local1 = 0;
            while (_local1 < currentMedia.traitTypes.length) {
                validateTrait(currentMedia.traitTypes[_local1], false);
                _local1++;
            };
        }
        protected function setMediaListeners():void{
            var _local1:int;
            if (!currentMedia){
                return;
            };
            currentMedia.addEventListener("metadataAdd", validateMetadata);
            currentMedia.addEventListener("metadataRemove", validateMetadata);
            currentMedia.addEventListener("traitAdd", validateTraitAddOrRemove);
            currentMedia.addEventListener("traitRemove", validateTraitAddOrRemove);
            _local1 = 0;
            while (_local1 < currentMedia.traitTypes.length) {
                validateTrait(currentMedia.traitTypes[_local1], true);
                _local1++;
            };
            delayedValidation();
            updateRteMetadata();
        }
        protected function validateTraitAddOrRemove(event:MediaElementEvent):void{
            if (currentMedia){
                validateTrait(event.traitType, (event.type == "traitAdd"));
            };
        }
        protected function processStartTrack():void{
            var _local1:IMultiElementSeekable = C.recurseForSeekable(currentMedia);
            notifyState("onStateChange", 0x0100);
            if (!_local1){
                return;
            };
            if (((((((((_local1.hasRTEMetadata) && (playlist))) && (!(playlist.playbackStarted)))) && (!(isAdvert)))) && (!(isSting)))){
                tracker.trackFirstPlayOfRTEMedia();
                playlist.playbackStarted = true;
            };
        }
        protected function validateTrait(type:String, added:Boolean):void{
            var _local3 = null;
            var _local4 = type;
            while ("buffer" === _local4) {
                validateBufferTrait(added);
                //unresolved jump
                _local3 = (currentMedia.getTrait("dynamicStream") as DynamicStreamTrait);
                logToJs(((((type + " trait ") + ((added) ? "added" : "removed")) + " with auto ") + ((_local3) ? _local3.autoSwitch : autoStreamRateSelection)));
                validateStreamTrait(added);
                //unresolved jump
                logToJs(((type + " trait ") + ((added) ? "added" : "removed")));
                showDVR = added;
                //unresolved jump
                validatePlayTrait(added);
                delayedValidation();
                //unresolved jump
                validateDRMTrait(added);
                //unresolved jump
                validateTimeTrait(added);
                //unresolved jump
                if (deferredSeek){
                    trace(("Continuing from deferredSeek of " + deferredSeek));
                    doRteSeek(deferredSeek);
                };
                //unresolved jump
            };
            //unresolved if
            //unresolved if
            //unresolved if
            //unresolved if
            //unresolved if
            //unresolved if
        }
        protected function validatePlayTrait(added:Boolean):void{
            if (added){
                processStartTrack();
            };
        }
        protected function validateTimeTrait(added:Boolean):void{
            var _local2:TimeTrait = (currentMedia.getTrait("time") as TimeTrait);
            if (added){
                _local2.addEventListener("durationChange", onDurationChange);
            } else {
                _local2.removeEventListener("durationChange", onDurationChange);
            };
            onDurationChange();
        }
        protected function validateDRMTrait(added:Boolean):void{
            var _local2:DRMTrait = (currentMedia.getTrait("drm") as DRMTrait);
            if (added){
                _local2.addEventListener("drmStateChange", updateDrmState);
                if (_local2.drmState == "authenticationError"){
                    showDrmError(_local2.drmState);
                };
            } else {
                _local2.removeEventListener("drmStateChange", updateDrmState);
            };
        }
        protected function updateDrmState(event:DRMEvent):void{
            if (event.drmState == "authenticationError"){
                showDrmError(event.drmState);
            };
        }
        protected function showDrmError(drmState:String):void{
            if (pingTracker){
                pingTracker.registerError(drmState);
            };
            notifyState("onError", 32, drmErrorMessage);
        }
        protected function onDurationChange(event:TimeEvent=null):void{
            if (iskin){
                iskin.notifyTotalDuration(totalDuration);
            };
        }
        protected function validateBufferTrait(added:Boolean):void{
            var _local2:BufferTrait = (currentMedia.getTrait("buffer") as BufferTrait);
            if (added){
                _local2.addEventListener("bufferTimeChange", updateBufferTrack);
                _local2.addEventListener("bufferingChange", updateBufferTrack);
            } else {
                _local2.removeEventListener("bufferTimeChange", updateBufferTrack);
                _local2.removeEventListener("bufferingChange", updateBufferTrack);
            };
        }
        protected function updateBufferTrack(event:BufferEvent):void{
            if (pingTracker){
                pingTracker.registerBufferEvent(event, userBufferIntervention);
            };
            if (tracker){
                tracker.handleBuffer(event);
            };
            userBufferIntervention = false;
        }
        protected function validateStreamTrait(added:Boolean):void{
            var _local2:DynamicStreamTrait = (currentMedia.getTrait("dynamicStream") as DynamicStreamTrait);
            if (added){
                if (((firstTimeStreamsLoad) && (autoStreamRateSelection))){
                    trySetSpecifiedBitRate(PREFERRED_STARTING_BITRATE);
                    firstTimeStreamsLoad = false;
                };
                if (RTE_OSMF_Player.BLOCK_AUTOMATED_BITRATE_SWITCHING){
                    _local2.autoSwitch = false;
                    _autoStreamRateSelection = false;
                };
                if (((autoStreamRateSelection) && (!((autoStreamRateSelection == _local2.autoSwitch))))){
                    logToJs("FORCING AUTO FOR BIT RATE");
                    trySetBitRateAuto();
                };
                _local2.addEventListener("autoSwitchChange", notifyDataRatesChange);
                _local2.addEventListener("switchingChange", notifyDataRatesChange);
                _local2.addEventListener("numDynamicStreamsChange", notifyDataRatesChange);
                _selectedStreamRate = _local2.getBitrateForIndex(_local2.currentIndex);
                lastGoodBandwidth = _local2.getBitrateForIndex(_local2.currentIndex);
                processDataRates();
                if (js){
                    js.notifyDataRates(autoStreamRateSelection, selectedStreamRate, availableStreamRates);
                };
                if (tracker){
                    tracker.notifyDataRates(autoStreamRateSelection, selectedStreamRate, availableStreamRates);
                };
            } else {
                _local2.removeEventListener("autoSwitchChange", notifyDataRatesChange);
                _local2.removeEventListener("switchingChange", notifyDataRatesChange);
                _local2.removeEventListener("numDynamicStreamsChange", notifyDataRatesChange);
                clearDataRates();
            };
        }
        protected function get lastGoodBandwidth():int{
            return (_lastGoodBandwidth);
        }
        protected function set lastGoodBandwidth(i:int):void{
            if (lastGoodBandwidth != i){
                Storage.save("rteplayer", "lastGoodBandwidth", i);
            };
            _lastGoodBandwidth = i;
        }
        protected function initLastGood():void{
            var _local1:Object = Storage.load("rteplayer", "lastGoodBandwidth");
            if ((_local1 is int)){
                trace(("UPDATING STORED lastGoodBandwidth " + _local1));
                _lastGoodBandwidth = _local1;
            };
        }
        protected function delayedValidation(event:Event=null):void{
            if (!event){
                if (!hasDelayedValidate){
                    addEventListener("enterFrame", delayedValidation);
                };
                hasDelayedValidate = true;
                delayCount = 30;
                setSize(playerW, playerH);
                return;
            };
            delayCount = (delayCount - 1);
            if ((delayCount % 5) == 0){
                setSize(playerW, playerH);
            };
            if (((stage) && ((delayCount > 0)))){
                return;
            };
            setSize(playerW, playerH);
            removeEventListener("enterFrame", delayedValidation);
            hasDelayedValidate = false;
        }
        protected function validateCompanionAds(added:Boolean, md:Metadata):void{
            var _local3:Array = ((md) ? md.getValue("companionAdsList") : null);
            if (((((!(_local3)) || (!(_local3.length)))) || (!(added)))){
                if (hasAds){
                    logToJs("Clear companion.");
                };
                _local3 = null;
                hasAds = false;
            } else {
                logToJs((("Show " + _local3.length) + " companions."));
                hasAds = true;
            };
            notifyCompanions(_local3);
        }
        protected function notifyCompanions(ads:Array=null):void{
            var _local2:String = "";
            dispatchEvent(new OSMFAdEvent("companionAds", -1, ads));
            if (js){
                js.notifyCompanions(ads);
            };
            if (callbackRoadBlock != null){
                callbackRoadBlock(((ads) ? ads[0] : null));
            };
            if (iskin){
                iskin.notifyCompanions(ads);
            };
        }
        protected function validateMetadata(event:MediaElementEvent):void{
            var _local2 = event.namespaceURL;
            while ("http://www.rte.ie/advertising/companion/" === _local2) {
                validateCompanionAds((event.type == "metadataAdd"), event.metadata);
                //unresolved jump
                updateRteMetadata();
                //unresolved jump
            };
            //unresolved if
            //unresolved if
        }
        protected function updateRteMetadata(event:Event=null):void{
            var _local13 = null;
            var _local5:*;
            var _local3:Boolean;
            var _local8:IMultiElementSeekable = C.recurseForSeekable(currentMedia);
            if (_local8){
                _local13 = currentMedia.getMetadata("http://www.rte.ie/schemas/vod");
                _local3 = true;
                var _local7:Boolean;
                var _local2:Boolean;
                var _local15:Number;
                var _local14:Number;
                var _local6:int;
                var _local10:int;
                var _local4:Boolean;
                var _local9:Boolean;
                var _local11:Boolean;
                var _local12:Number;
                var _local16:Number;
                _local7 = _local8.isAdvertising;
                _local2 = _local8.isSting;
                _local15 = _local8.itemStart;
                _local14 = _local8.itemEnd;
                _local6 = _local8.adIndex;
                _local10 = _local8.adCount;
                _local4 = _local8.canSkipAdverts;
                _local9 = _local8.isInteractiveAdvertising;
                _local11 = _local8.isOnPauseAdvertising;
                if (((_local7) && (!((_lastPosition == _local8.itemStart))))){
                    trace(("::::: AAAA @@@@ RESETTING _lastPosition " + _local8.itemStart));
                    _lastPosition = _local8.itemStart;
                };
                if (_local13){
                    _local9 = _local13.getValue("interactiveadvertising");
                    _local12 = _local13.getValue("adPodDuration");
                    _local16 = _local13.getValue("adPodStartKey");
                    _local5 = (_local13.getValue("cuePoints") as Vector.<Number>);
                };
                if (iskin){
                    iskin.receiveMetadataChange(_local3, _local7, _local2, _local15, _local14, _local6, _local10, _local4, _local9, _local11, _local12, _local16, _local5);
                };
                if (tracker){
                    tracker.receiveMetadataChange(_local3, _local7, _local2, _local15, _local14, _local6, _local10, _local4, _local9, _local11);
                };
            } else {
                if (iskin){
                    iskin.receiveMetadataChange(false);
                };
                if (tracker){
                    tracker.receiveMetadataChange(false);
                };
            };
            if (adChange != _local7){
                adChange = _local7;
                delayedValidation();
                onAdToContentChange();
            };
        }
        protected function onAdToContentChange():void{
        }
        protected function addSkinListeners(iskin:ISkin):void{
            iskin.addEventListener("confirmMaturity", handleSkinValidateMaturity);
            iskin.addEventListener("volumeChange", handleSetVolume);
            iskin.addEventListener("playPauseMedia", handlePlayPauseMedia);
            iskin.addEventListener("replayMedia", handleReplayMedia);
            iskin.addEventListener("closedCaptions", toggleCaptionsForMedia);
            iskin.addEventListener("resumeMedia", handleResumeMedia);
            iskin.addEventListener("seekMedia", handleSeekMedia);
            iskin.addEventListener("seekBy", handleSeekAdjust);
            iskin.addEventListener("bitrateChange", handleBitrateChange);
            iskin.addEventListener("setRoadblockOptions", handleSkinSetRoadblock);
            iskin.addEventListener("selectItem", handleSkinSelectItem);
            iskin.addEventListener("doPlayThis", handlePlayRequest);
            iskin.addEventListener("skipAdvert", handleSkipAdvert);
        }
        protected function removeSkinListeners(iskin:ISkin):void{
            iskin.removeEventListener("confirmMaturity", handleSkinValidateMaturity);
            iskin.removeEventListener("volumeChange", handleSetVolume);
            iskin.removeEventListener("playPauseMedia", handlePlayPauseMedia);
            iskin.removeEventListener("replayMedia", handleReplayMedia);
            iskin.removeEventListener("closedCaptions", toggleCaptionsForMedia);
            iskin.removeEventListener("resumeMedia", handleResumeMedia);
            iskin.removeEventListener("seekMedia", handleSeekMedia);
            iskin.removeEventListener("seekBy", handleSeekAdjust);
            iskin.removeEventListener("bitrateChange", handleBitrateChange);
            iskin.removeEventListener("setRoadblockOptions", handleSkinSetRoadblock);
            iskin.removeEventListener("selectItem", handleSkinSelectItem);
            iskin.removeEventListener("doPlayThis", handlePlayRequest);
            iskin.removeEventListener("skipAdvert", handleSkipAdvert);
        }
        public function handlePlayRequest(event:PlayRequest):void{
            var _local2 = null;
            var _local3 = null;
            if (tracker){
                tracker.setMediaUrl(((event) ? event.url : null));
            };
            setPlaylist(null, true);
            media = null;
            if (((!(event)) || (!(event.url)))){
                return;
            };
            if (event.loadAsFeed){
                loadFromUrl(event.url, event.autoStart, event.startPosSeconds);
            } else {
                _local2 = new StreamingURLResource(event.url, event.streamType, event.startPosSeconds, event.endPosSeconds);
                _local3 = this.mediaFactory.createMediaElement(_local2);
                mediaPlayer.autoPlay = event.autoStart;
                media = _local3;
            };
        }
        protected function handleSetVolume(event:SkinCommand):void{
            var _local3:Number;
            var _local2 = null;
            if (((event.value) && ((event.value is Boolean)))){
                muteState = event.value;
            } else {
                _local3 = event.value;
                _local2 = event.value;
                if (!isNaN(_local3)){
                    onChangeVolume(_local3);
                } else {
                    if (_local2 == "toggle"){
                        muteState = !(muteState);
                    } else {
                        muteState = event.value;
                    };
                };
            };
        }
        protected function handleReplayMedia(event:SkinCommand):void{
            replayMedia();
            js.notifyCommandReceived(event, playerId);
        }
        protected function handlePlayPauseMedia(event:SkinCommand):void{
            var _local4 = null;
            var _local3:Boolean;
            var _local2:Boolean;
            if (playlist){
                playlist.startPos = -1;
            };
            if (event.value == null){
                playPauseMedia();
            } else {
                _local4 = C.recurseForSeekable(media);
                _local2 = (event.value == "scrub");
                if (((_local4) && (_local2))){
                    _local4.scrubbing = _local2;
                };
                _local3 = ((_local2) ? false : event.value);
                trace(((((("PAUSING? setting: " + _local3) + " playing: ") + isPlaying) + " Toggle? ") + !((_local3 == isPlaying))));
                if (_local3 != isPlaying){
                    playPauseMedia();
                };
                if (_local4){
                    _local4.scrubbing = false;
                };
            };
            userBufferIntervention = true;
            js.notifyCommandReceived(event, playerId);
        }
        protected function toggleCaptionsForMedia(event:SkinCommand):void{
            if (((event.value) && ((event.value is Boolean)))){
                captionsEnabled = (event.value as Boolean);
            } else {
                captionsEnabled = !(captionsEnabled);
            };
        }
        public function pauseIfPlaying():void{
            if (((isPlaying) && (!(cued)))){
                playPauseMedia();
            };
        }
        protected function handleSkipAdvert(event:SkinCommand):void{
            var _local2:IMultiElementSeekable = C.recurseForSeekable(media);
            if (_local2){
                _local2.skipAdvert();
            };
        }
        protected function handleResumeMedia(event:SkinCommand):void{
            var _local2:Number = event.value;
            if (!isNaN(_local2)){
                if (playlist){
                    playlist.startPos = -1;
                };
                doRteSeek(_local2, true);
                userBufferIntervention = true;
            };
            js.notifyCommandReceived(event, playerId);
        }
        protected function handleSeekMedia(event:SkinCommand):void{
            var _local2:Number = event.value;
            if (!isNaN(_local2)){
                doRteSeek(_local2);
            };
            userBufferIntervention = true;
            js.notifyCommandReceived(event, playerId);
        }
        protected function handleSeekAdjust(event:SkinCommand):void{
            var _local2:Number = getRtePosition();
            if (_local2 < 1){
                return;
            };
            var _local3:Number = (_local2 + event.value);
            if (!isNaN(_local3)){
                doRteSeek(Math.max(0, Math.min(_local3, totalDuration)));
            };
            userBufferIntervention = true;
            js.notifyCommandReceived(event, playerId);
        }
        protected function handleBitrateChange(event:SkinCommand):void{
            var _local2 = null;
            var _local3:Number = event.value;
            if (!isNaN(_local3)){
                trySetSpecifiedBitRate(_local3);
            } else {
                _local2 = event.value;
                var _local4 = _local2.toLowerCase();
                while ("increase" === _local4) {
                    tryIncreaseBitRate();
                    //unresolved jump
                    tryDecreaseBitRate();
                    trySetBitRateAuto();
                    //unresolved jump
                };
                //unresolved if
                //unresolved if
            };
            userBufferIntervention = true;
        }
        protected function handleSkinSetRoadblock(event:SkinCommand):void{
            roadblockOptions = event.value;
        }
        protected function handleSkinSelectItem(event:PlayableItemSelectionEvent):void{
            try {
                if (ExternalInterface.available){
                    ExternalInterface.call("playSelectedItem", event.sp.shareThisUrl);
                };
            } catch(e:Error) {
                trace(("Couldn't process playSelectedItem because \n" + e));
            };
        }
        protected function toggleBandWidthProfiler():void{
            if (((profiler) && (mediaContainer.layoutRenderer.hasTarget(profiler)))){
                mediaContainer.layoutRenderer.removeTarget(profiler);
                profiler.mediaPlayer = null;
                profiler = null;
            } else {
                profiler = new Profiler();
                profiler.mediaPlayer = mediaPlayer;
                mediaContainer.layoutRenderer.addTarget(profiler);
            };
        }
        public function handleAdBlock(event:DataEvent):void{
            return;
            /*not popped
            trace(("RECEIVED AD BLOCK CHANGE " + event.data))
            */
        }

    }
}//package rte.osmf.player 
﻿package rte.osmf.player {
    import org.osmf.media.*;
    import org.osmf.containers.*;
    import org.osmf.events.*;
    import org.osmf.layout.*;
    import org.osmf.smil.*;
    import flash.utils.*;

    public class BaseOSMFPlayer extends MediaPlayerSprite {

        private static const forceReference:SMILPluginInfo = null;

        private var queuedPlugins:Dictionary;
        private var pluginListeners:Boolean = false;

        public function BaseOSMFPlayer(mediaPlayer:MediaPlayer=null, mediaContainer:MediaContainer=null, mediaFactory:MediaFactory=null){
            super(mediaPlayer, mediaContainer, mediaFactory);
            overcomeContextMenuBug();
        }
        protected function overcomeContextMenuBug():void{
            var _local1:LayoutTargetSprite = new LayoutTargetSprite();
            _local1.graphics.beginFill(0, 0);
            _local1.graphics.drawRect(0, 0, 100, 100);
            _local1.graphics.endFill();
            _local1.mouseEnabled = false;
            _local1.layoutMetadata.percentWidth = 100;
            _local1.layoutMetadata.percentHeight = 100;
            _local1.layoutMetadata.index = 1;
            mediaContainer.layoutRenderer.addTarget(_local1);
        }
        public function loadPlugin(source:String, nameSpaceURL:String=null, metaData:Object=null):void{
            var _local5 = null;
            var _local4 = null;
            if ((((source.substr(0, 4) == "http")) || ((source.substr(0, 4) == "file")))){
                _local5 = new URLResource(source);
            } else {
                _local4 = (getDefinitionByName(source) as Class);
                _local5 = new PluginInfoResource(new (_local4)());
            };
            if (((metaData) && (nameSpaceURL))){
                _local5.addMetadataValue(nameSpaceURL, metaData);
            };
            loadPluginFromResource(_local5);
        }
        private function loadPluginFromResource(pluginResource:MediaResourceBase):void{
            if (!queuedPlugins){
                queuedPlugins = new Dictionary(true);
            };
            queuedPlugins[pluginResource] = true;
            if (!pluginListeners){
                pluginListeners = true;
                mediaFactory.addEventListener("pluginLoad", onPluginLoaded);
                mediaFactory.addEventListener("pluginLoadError", onPluginLoadFailed);
            };
            mediaFactory.loadPlugin(pluginResource);
        }
        protected function registerPluginLoadEvent(event:MediaFactoryEvent):MediaResourceBase{
            var _local2:MediaResourceBase = (event.resource as MediaResourceBase);
            if (queuedPlugins[_local2]){
                delete queuedPlugins[_local2];
            } else {
                trace("Resource was not found.");
            };
            return (_local2);
        }
        protected function hasQueuedPlugins():Boolean{
            if (!queuedPlugins){
                return (false);
            };
            for (var _local1:Object in queuedPlugins) {
                return (true);
            };
            return (false);
        }
        protected function onPluginLoaded(event:MediaFactoryEvent):void{
            var _local2:MediaResourceBase = registerPluginLoadEvent(event);
        }
        protected function onPluginLoadFailed(event:MediaFactoryEvent):void{
            var _local2:MediaResourceBase = registerPluginLoadEvent(event);
            return;
            /*not popped
            trace(("Plugin LOAD FAILED! " + _local2))
            */
        }

    }
}//package rte.osmf.player 
﻿package rte.osmf {
    import flash.events.*;
    import flash.utils.*;
    import flash.net.*;
    import com.adobe.serialization.json.*;
    import mx.utils.*;

    public class ConfigurationManager extends EventDispatcher {

        public static var TIMEOUT_AFTER:uint = 10000;
        private static var _singleton:ConfigurationManager;
        public static var lastConfigsLoadedFrom:String;
        public static var lastConfigsVars:URLVariables;
        public static var lastConfigsMethod:String;
        private static var lastConfigLoad:URLLoader;

        private var _timedOut:Boolean = false;
        protected var timeoutWarning:Timer;
        public var receivedConfigs:Object;

        public function ConfigurationManager(se:SingletonEnforcer){
            if (!se){
                throw (new Error("Please use ConfigurationManager.singleton to obtain a reference to this class."));
            };
        }
        public static function get singleton():ConfigurationManager{
            if (!_singleton){
                _singleton = new ConfigurationManager(new SingletonEnforcer());
            };
            return (_singleton);
        }

        public function loadFrom(url:String, uv:URLVariables=null, method:String=null):void{
            var url:* = url;
            var uv = uv;
            var method = method;
            if (!method){
                method = URLRequestMethod.GET;
            };
            lastConfigsLoadedFrom = url;
            lastConfigsVars = uv;
            lastConfigsMethod = method;
            this.clearTimeout();
            if (!this.timeoutWarning){
                this.timeoutWarning = new Timer(TIMEOUT_AFTER, 1);
                this.timeoutWarning.addEventListener(TimerEvent.TIMER_COMPLETE, this.dispatchTimeout);
            } else {
                if (this.timeoutWarning.running){
                    this.timeoutWarning.stop();
                };
                this.timeoutWarning.reset();
            };
            this.timeoutWarning.start();
            var ur:* = new URLRequest(url);
            ur.data = uv;
            ur.method = method;
            var ld:* = new URLLoader();
            lastConfigLoad = ld;
            ld.addEventListener(IOErrorEvent.IO_ERROR, this.handleError);
            ld.addEventListener(SecurityErrorEvent.SECURITY_ERROR, this.handleError);
            ld.addEventListener(Event.COMPLETE, this.handleComplete);
            try {
                ld.load(ur);
            } catch(e:Error) {
                handleError(e);
            };
        }
        protected function clearTimeout():void{
            this._timedOut = false;
            if (((this.timeoutWarning) && (this.timeoutWarning.running))){
                this.timeoutWarning.stop();
                this.timeoutWarning.reset();
            };
        }
        public function get timedOut():Boolean{
            return (this._timedOut);
        }
        protected function dispatchTimeout(event:TimerEvent):void{
            trace("CONFIGURATION MANAGER TIMING OUT >> CHECK NETWORK?");
            this.timeoutWarning.reset();
            this._timedOut = true;
            dispatchEvent(new Event("timeoutWarning"));
        }
        public function manualRetry():void{
            var u:* = null;
            var cb:* = null;
            if (lastConfigLoad){
                try {
                    lastConfigLoad.close();
                } catch(e:Error) {
                    trace("Couldn't clean up config load.");
                };
                this.cleanupLoader(lastConfigLoad);
            };
            if ((((lastConfigsMethod == null)) || ((lastConfigsMethod == URLRequestMethod.GET)))){
                if (lastConfigsVars == null){
                    lastConfigsVars = new URLVariables();
                };
                lastConfigsVars.cacheBuster = (Math.random() * uint.MAX_VALUE);
            } else {
                cb = ("cacheBuster=" + (Math.random() * uint.MAX_VALUE));
                if (lastConfigsLoadedFrom.indexOf("cacheBuster") > -1){
                    lastConfigsLoadedFrom = lastConfigsLoadedFrom.split("cacheBuster")[0];
                    lastConfigsLoadedFrom = (lastConfigsLoadedFrom + cb);
                } else {
                    if (lastConfigsLoadedFrom.indexOf("?") > -1){
                        lastConfigsLoadedFrom = ((lastConfigsLoadedFrom + "&") + cb);
                    } else {
                        lastConfigsLoadedFrom = ((lastConfigsLoadedFrom + "?") + cb);
                    };
                };
            };
            this.loadFrom(lastConfigsLoadedFrom, lastConfigsVars, lastConfigsMethod);
        }
        protected function cleanupLoader(ld:URLLoader):void{
            ld.removeEventListener(IOErrorEvent.IO_ERROR, this.handleError);
            ld.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, this.handleError);
            ld.removeEventListener(Event.COMPLETE, this.handleComplete);
        }
        public function feedBase(key:String):String{
            if (((!(this.receivedConfigs)) || (!(this.receivedConfigs.feedBaseURLs)))){
                throw (new Error("Call to configs manager before configs are received."));
            };
            return (this.receivedConfigs.feedBaseURLs[key]);
        }
        public function get comScoreTrackingKeys():Object{
            if (((!(this.receivedConfigs)) || (!(this.receivedConfigs.feedBaseURLs)))){
                throw (new Error("Call to configs manager before configs are received."));
            };
            return (this.receivedConfigs.comScoreTrackingKeys);
        }
        protected function handleComplete(event:Event):void{
            var o:* = null;
            var l:* = null;
            var event:* = event;
            this.clearTimeout();
            var ld:* = (event.currentTarget as URLLoader);
            var response:* = StringUtil.trim(new String(ld.data)).split("\t").join(" ").split("\n").join(" ").split("\r").join(" ").split("  ").join(" ");
            try {
                l = new JSONDecoder(response);
                o = l.getValue();
            } catch(e:Error) {
                handleError(e);
            };
            if (o){
                this.receivedConfigs = o;
            };
            this.cleanupLoader(ld);
            dispatchEvent(new Event(Event.COMPLETE));
        }
        protected function recurseTrace(o:Object, prefix:String="CONFIGS"):void{
            var _local3:Array;
            var _local4:int;
            var _local5:Object;
            if ((((o is String)) || ((o is Number)))){
                trace(((prefix + " = ") + o));
                return;
            };
            if ((o is Array)){
                _local3 = (o as Array);
                _local4 = 0;
                while (_local4 < _local3.length) {
                    this.recurseTrace(_local3[_local4], (((prefix + "[") + _local4) + "]"));
                    _local4++;
                };
            } else {
                for (_local5 in o) {
                    this.recurseTrace(o[_local5], ((prefix + ".") + _local5));
                };
            };
        }
        protected function handleError(e:Object):void{
            var _local4:URLLoader;
            var _local5:Error;
            this.clearTimeout();
            if ((e is Event)){
                _local4 = ((e as Event).currentTarget as URLLoader);
                this.cleanupLoader(_local4);
            };
            var _local2:int;
            var _local3:String = e.toString();
            if ((e is Error)){
                _local5 = (e as Error);
                _local2 = _local5.errorID;
                _local3 = _local5.message;
                if (_local5.getStackTrace()){
                    _local3 = (_local3 + ("\n" + _local5.getStackTrace()));
                };
            };
            dispatchEvent(new ErrorEvent(ErrorEvent.ERROR, false, false, _local3, _local2));
        }
        public function liveChannelIDs():Array{
            var _local2:Array;
            var _local3:int;
            var _local1:Array = new Array();
            if (((this.receivedConfigs) && (this.receivedConfigs.liveChannelIDs))){
                _local2 = (this.receivedConfigs.liveChannelIDs as Array);
                if (_local2){
                    _local3 = 0;
                    while (_local3 < _local2.length) {
                        _local1.push(_local2[_local3].channelID);
                        _local3++;
                    };
                };
            };
            trace(("RETURNING liveChannelIDs: " + _local1));
            return (_local1);
        }

    }
}//package rte.osmf 

class SingletonEnforcer {

    public function SingletonEnforcer(){
    }
}
﻿package rte.osmf {
    import flash.events.*;

    public class OSMFAdEvent extends Event {

        public static const COMPANION_ADS:String = "companionAds";

        public var companionAds:Array;
        public var numElements:int = 0;

        public function OSMFAdEvent(type:String, numElements:int, companionAds:Array=null, bubbles:Boolean=false, cancelable:Boolean=false){
            super(type, bubbles, cancelable);
            this.numElements = numElements;
            this.companionAds = companionAds;
        }
        override public function clone():Event{
            return (new OSMFAdEvent(type, this.numElements, this.companionAds, bubbles, cancelable));
        }

    }
}//package rte.osmf 
﻿package rte.osmf {
    import flash.events.*;
    import org.osmf.traits.*;

    public interface IMultiElementSeekable extends IEventDispatcher {

        function get hasRTEMetadata():Boolean;
        function get isAdvertising():Boolean;
        function get isInteractiveAdvertising():Boolean;
        function get isOnPauseAdvertising():Boolean;
        function get scrubbing():Boolean;
        function set scrubbing(_arg1:Boolean):void;
        function get canSkipAdverts():Boolean;
        function skipAdvert():void;
        function get adIndex():int;
        function get adCount():int;
        function get itemStart():Number;
        function get itemEnd():Number;
        function get isSting():Boolean;
        function clearAdverts():void;
        function seekInContentOnly(_arg1:Number, _arg2:Boolean=false):void;
        function contentOnlyDuration():Number;
        function contentOnlyPosition():Number;
        function initialiseForStartPos(_arg1:Number):void;
        function hasTrait(_arg1:String):Boolean;
        function getTrait(_arg1:String):MediaTraitBase;

    }
}//package rte.osmf 
﻿package rte.osmf.tracking {
    import flash.events.*;
    import flash.net.*;

    public class GeoLocator extends EventDispatcher {

        private static var _singleton:GeoLocator;

        private var _geoLocation:String = "na";
        private var _locationCallComplete:Boolean = false;
        protected var _geoLocationFinderUrl:String;
        protected var geoLoad:URLLoader;
        private var _lastError;

        public function GeoLocator(se:SingletonEnforcer, target:IEventDispatcher=null){
            super(target);
        }
        public static function instance():GeoLocator{
            if (!_singleton){
                _singleton = new GeoLocator(new SingletonEnforcer());
            };
            return (_singleton);
        }

        public function get geoLocation():String{
            if (((((!(_geoLocation)) || ((_geoLocation == "na")))) && (!(geoLoad)))){
                checkGeoLocation();
            };
            return (_geoLocation);
        }
        public function get locationCallComplete():Boolean{
            return (_locationCallComplete);
        }
        protected function setGeoLocation(s:String):void{
            _geoLocation = s;
            _locationCallComplete = true;
            dispatchEvent(new Event("complete"));
        }
        public function get geoLocationFinderUrl():String{
            return (_geoLocationFinderUrl);
        }
        public function checkGeoLocation(url:String=""):void{
            if (geoLoad){
                return;
                /*not popped
                trace("Request to check location has already been made and is still in progress.")
                */
            };
            if (!url){
                handleError("Please specify a geo location service to call.");
                return;
            };
            _geoLocationFinderUrl = url;
            _locationCallComplete = false;
            var _local3:URLLoader = new URLLoader();
            var _local2:URLVariables = new URLVariables();
            _local2.time = new Date().time;
            var _local4:URLRequest = new URLRequest(geoLocationFinderUrl);
            _local4.data = _local2;
            _local4.method = "GET";
            _local3.addEventListener("complete", setGeoLocationHandler);
            _local3.addEventListener("ioError", handleGeoError);
            _local3.addEventListener("securityError", handleGeoError);
            geoLoad = _local3;
            geoLoad.load(_local4);
        }
        protected function handleGeoError(event:Event):void{
            cleanUpGeoLoader(event);
            handleError(event);
        }
        protected function setGeoLocationHandler(event:Event):void{
            var _local2 = null;
            try {
                _local2 = new XML(geoLoad.data);
                setGeoLocation(_local2.Country.toLowerCase());
            } catch(e:Error) {
                handleError(e);
            };
            cleanUpGeoLoader(event);
        }
        protected function cleanUpGeoLoader(event:Event):void{
            var _local2:URLLoader = geoLoad;
            _local2.removeEventListener("complete", setGeoLocationHandler);
            _local2.removeEventListener("ioError", handleGeoError);
            _local2.removeEventListener("securityError", handleGeoError);
            geoLoad = null;
        }
        public function get lastError(){
            return (_lastError);
        }
        protected function handleError(e):void{
            _lastError = e;
            setGeoLocation("na");
        }

    }
}//package rte.osmf.tracking 

class SingletonEnforcer {

    public function SingletonEnforcer(){
    }
}
﻿package rte.osmf.tracking {
    import org.osmf.media.*;
    import org.osmf.events.*;
    import rte.osmf.*;
    import rte.playerInsights.*;

    public class AbstractTracker implements ITracker {

        private var _playerType:String = "RTE_OSMF";
        private var _deviceType:String = "PC";
        private var _networkType:String = "WiFi";
        private var _mediaPlayer:MediaPlayer;
        private var _mediaUrl:String;
        private var _playlist:IPlaylistLoader;
        private var _shares:ShareProperties;
        private var _width:Number = 0;
        private var _height:Number = 0;
        private var _volume:Number = 1;
        private var _captionsSelected:Boolean = false;
        private var _position:Number = -1;
        private var _duration:Number = -1;
        private var _playState:String = "stopped";
        private var _isTracking:Boolean = false;

        public function get playerType():String{
            return (_playerType);
        }
        public function set playerType(s:String):void{
            _playerType = s;
        }
        public function get deviceType():String{
            return (_deviceType);
        }
        public function set deviceType(s:String):void{
            _deviceType = s;
        }
        public function get networkType():String{
            return (_networkType);
        }
        public function set networkType(s:String):void{
            _networkType = s;
        }
        public function get mediaPlayer():MediaPlayer{
            return (_mediaPlayer);
        }
        public function setMediaPlayer(mp:MediaPlayer):void{
            _mediaPlayer = mp;
        }
        public function get mediaUrl():String{
            return (_mediaUrl);
        }
        public function setMediaUrl(url:String):void{
            _mediaUrl = url;
        }
        public function get playlist():IPlaylistLoader{
            return (_playlist);
        }
        public function get shares():ShareProperties{
            return (_shares);
        }
        public function setProgrammeInfo(playlist:IPlaylistLoader):void{
            _playlist = playlist;
            if (_playlist){
                _shares = _playlist.getShareProperties();
            } else {
                _shares = null;
            };
        }
        public function handlePlayerInsight(event:PlayerInsightsEvent):void{
        }
        public function handleBuffer(event:BufferEvent):void{
        }
        public function setSize(width:Number, height:Number):void{
            _width = ((isNaN(width)) ? 0 : width);
            _height = ((isNaN(height)) ? 0 : height);
        }
        public function get width():Number{
            return (_width);
        }
        public function get height():Number{
            return (_height);
        }
        public function get volume():Number{
            return (_volume);
        }
        public function set volume(n:Number):void{
            _volume = n;
        }
        public function get captionsEnabled():Boolean{
            return (_captionsSelected);
        }
        public function set captionsEnabled(b:Boolean):void{
            _captionsSelected = b;
        }
        public function get position():Number{
            return (_position);
        }
        public function get duration():Number{
            return (_duration);
        }
        public function positionUpdate(position:Number, duration:Number):void{
            _position = position;
            _duration = duration;
        }
        public function get playState():String{
            return (_playState);
        }
        public function playStateUpdate(newState:String):void{
            _playState = newState;
        }
        public function startTracking():void{
            _isTracking = true;
        }
        public function stopTracking():void{
            _isTracking = false;
        }
        public function trackFirstPlayOfRTEMedia():void{
        }
        public function trackPlaylistEnd():void{
        }
        public function get isTracking():Boolean{
            return (_isTracking);
        }
        public function receiveMetadataChange(hasRteMetadata:Boolean, isAdvert:Boolean=false, isSting:Boolean=false, itemStartVal:Number=NaN, itemEndVal:Number=NaN, currentAdIndex:int=0, numberOfAds:int=0, canSkipAdverts:Boolean=false, isInteractiveAdvert:Boolean=false, isPausePlayAdvert:Boolean=false):void{
        }
        public function notifyState(type:String, state:int, errorMessage:String=""):void{
        }
        public function notifyDataRates(autoSelect:Boolean, selectedRate:Number=NaN, availableRates:Array=null):void{
        }

    }
}//package rte.osmf.tracking 
﻿package rte.osmf.tracking {
    import flash.events.*;
    import flash.utils.*;
    import flash.net.*;
    import rte.osmf.utils.*;

    public class AbstractTimedTracker extends AbstractTracker {

        public static var DISABLEONSECURITYERROR:Boolean = false;

        public var trackingUrl:String;
        private var trackTimer:Timer;
        private var _trackInterval:int = 60000;
        protected var lastLoad:URLLoader;

        protected static function cleanString(s:String, ifUnset:String="na"):String{
            if ((((s == null)) || ((s == "")))){
                return (ifUnset);
            };
            var _local3:String = RTEUtils.normaliseStr(s).toLowerCase();
            return (_local3);
        }

        override public function startTracking():void{
            if (isTracking){
                stopTracking();
            };
            super.startTracking();
            if (!trackTimer){
                trackTimer = new Timer(trackInterval);
                trackTimer.addEventListener("timer", onTimer);
            };
            trackTimer.start();
        }
        protected function resetTimer():void{
            if (trackTimer){
                trackTimer.reset();
                if (((isTracking) && (!(trackTimer.running)))){
                    trackTimer.start();
                };
            };
        }
        override public function stopTracking():void{
            if (isTracking){
                trackTimer.stop();
            };
            super.stopTracking();
        }
        protected function onTimer(event:TimerEvent):void{
            buildAndSendTrack();
        }
        public function get trackInterval():int{
            return (_trackInterval);
        }
        public function set trackInterval(i:int):void{
            _trackInterval = i;
            if (isTracking){
                stopTracking();
                trackTimer.removeEventListener("timer", onTimer);
                trackTimer = null;
                startTracking();
            };
        }
        protected function buildAndSendTrack():void{
            var _local1:URLRequest = buildTrackingRecord();
            sendTrackingRecord(_local1);
        }
        protected function buildTrackingRecord():URLRequest{
            if (trackingUrl == null){
                throw (new Error("No tracking url found."));
            };
            return (new URLRequest(trackingUrl));
        }
        protected function sendTrackingRecord(ur:URLRequest):void{
            if ((((ur.url == null)) || ((ur.url.indexOf("null") > -1)))){
                trace(("NULL URL? \n" + buildTrackingRecord()));
            };
            var _local2:URLLoader = new URLLoader();
            _local2.addEventListener("complete", completeTracking);
            _local2.addEventListener("ioError", handleTrackingError);
            _local2.addEventListener("securityError", handleTrackingError);
            lastLoad = _local2;
            _local2.load(ur);
        }
        protected function completeTracking(event:Event):void{
            cleanUpTracking(event);
        }
        protected function handleTrackingError(event:Event):void{
            trace(((("Track error at " + getTimer()) + " ") + event));
            if ((((event is SecurityErrorEvent)) && (DISABLEONSECURITYERROR))){
                trace("\tDisabling tracking for security so as not to flood the traces.");
                stopTracking();
            };
            cleanUpTracking(event);
        }
        protected function cleanUpTracking(event:Event):void{
            var _local2:URLLoader = (event.target as URLLoader);
            _local2.removeEventListener("complete", completeTracking);
            _local2.removeEventListener("ioError", handleTrackingError);
            _local2.removeEventListener("securityError", handleTrackingError);
        }

    }
}//package rte.osmf.tracking 
﻿package rte.osmf.tracking {
    import org.osmf.media.*;
    import org.osmf.events.*;
    import rte.osmf.*;
    import rte.playerInsights.*;

    public /*dynamic*/ interface ITracker {

        function get playerType():String;
        function set playerType(_arg1:String):void;
        function get deviceType():String;
        function set deviceType(_arg1:String):void;
        function get networkType():String;
        function set networkType(_arg1:String):void;
        function setMediaPlayer(_arg1:MediaPlayer):void;
        function setMediaUrl(_arg1:String):void;
        function setProgrammeInfo(_arg1:IPlaylistLoader):void;
        function handlePlayerInsight(_arg1:PlayerInsightsEvent):void;
        function positionUpdate(_arg1:Number, _arg2:Number):void;
        function setSize(_arg1:Number, _arg2:Number):void;
        function get volume():Number;
        function set volume(_arg1:Number):void;
        function get captionsEnabled():Boolean;
        function set captionsEnabled(_arg1:Boolean):void;
        function playStateUpdate(_arg1:String):void;
        function handleBuffer(_arg1:BufferEvent):void;
        function get isTracking():Boolean;
        function startTracking():void;
        function stopTracking():void;
        function trackFirstPlayOfRTEMedia():void;
        function trackPlaylistEnd():void;
        function receiveMetadataChange(_arg1:Boolean, _arg2:Boolean=false, _arg3:Boolean=false, _arg4:Number=NaN, _arg5:Number=NaN, _arg6:int=0, _arg7:int=0, _arg8:Boolean=false, _arg9:Boolean=false, _arg10:Boolean=false):void;
        function notifyState(_arg1:String, _arg2:int, _arg3:String=""):void;
        function notifyDataRates(_arg1:Boolean, _arg2:Number=NaN, _arg3:Array=null):void;

    }
}//package rte.osmf.tracking 
﻿package rte.osmf.tracking {
    import org.osmf.events.*;
    import flash.events.*;
    import flash.net.*;
    import org.osmf.traits.*;
    import com.gdcsoft.utils.*;

    public class PingTracking extends AbstractTimedTracker {

        public static var pingStackUrl:String;

        protected var additionalConfigs:Object;
        protected var playlistIsCurrent:Boolean = false;
        protected var errorDetails:Error;
        protected var bufferEventDetails:Object;

        public function PingTracking(){
            additionalConfigs = {};
        }
        public static function sendStack(errorMessage:String, errorCode:int, stack:String):void{
            errorMessage = errorMessage;
            errorCode = errorCode;
            stack = stack;
            handleEverything = function (_arg1:Event):void{
                lm.apply(ul, false);
                lm.dispose();
            };
            if (pingStackUrl == null){
                return;
            };
            var ul:* = new URLLoader();
            var lm:* = new ListenerManager();
            lm.addTask("ioError", handleEverything);
            lm.addTask("securityError", handleEverything);
            lm.addTask("complete", handleEverything);
            var uv:* = new URLVariables();
            uv.errorMessage = errorMessage;
            uv.errorCode = errorCode;
            uv.stack = stack;
            var ur:* = new URLRequest(pingStackUrl);
            ur.data = uv;
            ur.method = "POST";
            lm.apply(ul, true);
            try {
                ul.load(ur);
            } catch(e:Error) {
                trace(((((("ERROR SENDING PingStackTrack\n" + e) + "\n") + pingStackUrl) + "\n") + stack));
                lm.apply(ul, false);
                lm.dispose();
            };
        }

        public function setKey(keyName:String, value:Object):void{
            if (value){
                additionalConfigs[keyName] = value.toString();
            } else {
                deleteKey(keyName);
            };
        }
        public function deleteKey(keyName:String):void{
            if (additionalConfigs[keyName]){
                delete additionalConfigs[keyName];
            };
        }
        override protected function onTimer(event:TimerEvent):void{
            if (playlistIsCurrent){
                super.onTimer(event);
            };
        }
        override public function trackFirstPlayOfRTEMedia():void{
            playlistIsCurrent = true;
            buildAndSendTrack();
            resetTimer();
        }
        override public function trackPlaylistEnd():void{
            playlistIsCurrent = false;
        }
        override protected function buildTrackingRecord():URLRequest{
            var _local2 = null;
            var _local7 = null;
            var _local1 = null;
            var _local8 = null;
            if (!trackingUrl){
                throw (new Error("Cannot track without a URL to track to."));
            };
            var _local5:String = "na";
            var _local4:URLVariables = new URLVariables();
            try {
                _local5 = GeoLocator.instance().geoLocation;
            } catch(e:Error) {
                trace(("Geo location problems? \n" + e));
            };
            for (var _local9:String in additionalConfigs) {
                _local4[_local9] = additionalConfigs[_local9].toString();
            };
            _local4.countrycode = cleanString(_local5);
            var _local3:Array = [trackingUrl];
            if (shares){
                _local3.push(((shares.isLiveContent) ? "live" : "ondemand"));
                _local3.push(cleanString(shares.channelName));
                _local3.push(cleanString(shares.title));
                _local4.programid = cleanString(((shares.isLiveContent) ? shares.channelId.toString() : shares.programId));
            };
            var _local10:String = (_local3.join("/") + "/?");
            if (mediaPlayer){
                _local7 = mediaPlayer.media;
                if (_local7){
                    _local1 = C.recurseForProxies(_local7);
                    if (_local1){
                        _local8 = (_local1.getTrait("dynamicStream") as DynamicStreamTrait);
                        if (_local8){
                            _local4.bitrate = _local8.getBitrateForIndex(_local8.currentIndex);
                        };
                    };
                    if (bufferEventDetails){
                        _local4.buffer = "yes";
                        bufferEventDetails = null;
                    };
                };
            };
            if (errorDetails){
                _local4.errnum = errorDetails.errorID;
                _local4.err = cleanString(errorDetails.message);
                errorDetails = null;
            };
            _local4.playstate = playState;
            var _local6:URLRequest = new URLRequest(_local10);
            _local6.data = _local4;
            _local6.method = "GET";
            return (_local6);
        }
        public function registerError(errorMessage:String="", errorCode:int=0, stack:String=null):void{
            errorDetails = new Error(errorMessage, errorCode);
            buildAndSendTrack();
            if (((stack) && (pingStackUrl))){
                sendStack(errorMessage, errorCode, stack);
            };
        }
        public function registerBufferEvent(event:BufferEvent, userBufferIntervention:Boolean):void{
            if (event.buffering){
                if (!userBufferIntervention){
                    bufferEventDetails = event;
                };
            };
        }

    }
}//package rte.osmf.tracking 
﻿package rte.osmf.tracking {
    import org.osmf.media.*;
    import org.osmf.events.*;
    import rte.osmf.*;
    import rte.playerInsights.*;
    import __AS3__.vec.*;

    public class CompositeTracker extends AbstractTracker {

        private var _trackers:Vector.<ITracker>;

        public function CompositeTracker(){
            _trackers = new Vector.<ITracker>();
        }
        public function dispose():void{
            var _local2:int;
            var _local1 = null;
            if (isTracking){
                stopTracking();
            };
            _local2 = 0;
            while (_local2 < _trackers.length) {
                _local1 = _trackers[_local2];
                _local1.setMediaPlayer(null);
                _local1.setMediaUrl(null);
                _local1.setProgrammeInfo(null);
                _local2++;
            };
            _trackers.length = 0;
            setMediaPlayer(null);
            setProgrammeInfo(null);
        }
        override public function setMediaPlayer(mp:MediaPlayer):void{
            var _local2:int;
            super.setMediaPlayer(mp);
            _local2 = 0;
            while (_local2 < _trackers.length) {
                _trackers[_local2].setMediaPlayer(mp);
                _local2++;
            };
        }
        override public function setMediaUrl(url:String):void{
            var _local2:int;
            super.setMediaUrl(url);
            _local2 = 0;
            while (_local2 < _trackers.length) {
                _trackers[_local2].setMediaUrl(url);
                _local2++;
            };
        }
        override public function setProgrammeInfo(playlist:IPlaylistLoader):void{
            var _local2:int;
            super.setProgrammeInfo(playlist);
            _local2 = 0;
            while (_local2 < _trackers.length) {
                _trackers[_local2].setProgrammeInfo(playlist);
                _local2++;
            };
        }
        override public function handlePlayerInsight(event:PlayerInsightsEvent):void{
            var _local2:int;
            super.handlePlayerInsight(event);
            _local2 = 0;
            while (_local2 < _trackers.length) {
                _trackers[_local2].handlePlayerInsight(event);
                _local2++;
            };
        }
        override public function handleBuffer(event:BufferEvent):void{
            var _local2:int;
            super.handleBuffer(event);
            _local2 = 0;
            while (_local2 < _trackers.length) {
                _trackers[_local2].handleBuffer(event);
                _local2++;
            };
        }
        public function addTracker(tracker:ITracker):void{
            trace(("ADD TRACKER " + tracker));
            if (hasTracker(tracker)){
                throw (new Error("Tracker is already registered."));
            };
            _trackers.push(tracker);
            tracker.setMediaPlayer(mediaPlayer);
            tracker.setMediaUrl(mediaUrl);
            tracker.setProgrammeInfo(playlist);
            tracker.positionUpdate(position, duration);
            tracker.playStateUpdate(playState);
            tracker.setSize(width, height);
            tracker.playerType = playerType;
            tracker.deviceType = deviceType;
            tracker.networkType = networkType;
            tracker.volume = volume;
            if (isTracking){
                tracker.startTracking();
            };
        }
        public function removeTracker(tracker:ITracker):void{
            trace(("REMOVE TRACKER " + tracker));
            if (!hasTracker(tracker)){
                throw (new Error("Tracker is not registered."));
            };
            if (isTracking){
                tracker.stopTracking();
            };
            tracker.setMediaPlayer(null);
            tracker.setMediaUrl(null);
            tracker.setProgrammeInfo(null);
            _trackers.splice(_trackers.indexOf(tracker), 1);
        }
        public function hasTracker(tracker:ITracker):Boolean{
            return ((_trackers.indexOf(tracker) > -1));
        }
        override public function startTracking():void{
            var _local1:int;
            super.startTracking();
            _local1 = 0;
            while (_local1 < _trackers.length) {
                _trackers[_local1].startTracking();
                _local1++;
            };
        }
        override public function stopTracking():void{
            var _local1:int;
            super.stopTracking();
            _local1 = 0;
            while (_local1 < _trackers.length) {
                _trackers[_local1].stopTracking();
                _local1++;
            };
        }
        override public function trackFirstPlayOfRTEMedia():void{
            var _local1:int;
            super.trackFirstPlayOfRTEMedia();
            _local1 = 0;
            while (_local1 < _trackers.length) {
                _trackers[_local1].trackFirstPlayOfRTEMedia();
                _local1++;
            };
        }
        override public function trackPlaylistEnd():void{
            var _local1:int;
            super.trackPlaylistEnd();
            _local1 = 0;
            while (_local1 < _trackers.length) {
                _trackers[_local1].trackPlaylistEnd();
                _local1++;
            };
        }
        override public function positionUpdate(position:Number, duration:Number):void{
            var _local3:int;
            super.positionUpdate(position, duration);
            _local3 = 0;
            while (_local3 < _trackers.length) {
                _trackers[_local3].positionUpdate(position, duration);
                _local3++;
            };
        }
        override public function playStateUpdate(newState:String):void{
            var _local2:int;
            super.playStateUpdate(newState);
            _local2 = 0;
            while (_local2 < _trackers.length) {
                _trackers[_local2].playStateUpdate(newState);
                _local2++;
            };
        }
        override public function set playerType(s:String):void{
            var _local2:int;
            super.playerType = s;
            _local2 = 0;
            while (_local2 < _trackers.length) {
                _trackers[_local2].playerType = s;
                _local2++;
            };
        }
        override public function set deviceType(s:String):void{
            var _local2:int;
            super.deviceType = s;
            _local2 = 0;
            while (_local2 < _trackers.length) {
                _trackers[_local2].deviceType = s;
                _local2++;
            };
        }
        override public function set networkType(s:String):void{
            var _local2:int;
            super.networkType = s;
            _local2 = 0;
            while (_local2 < _trackers.length) {
                _trackers[_local2].networkType = s;
                _local2++;
            };
        }
        override public function setSize(width:Number, height:Number):void{
            var _local3:int;
            super.setSize(width, height);
            _local3 = 0;
            while (_local3 < _trackers.length) {
                _trackers[_local3].setSize(width, height);
                _local3++;
            };
        }
        override public function set volume(n:Number):void{
            var _local2:int;
            super.volume = n;
            _local2 = 0;
            while (_local2 < _trackers.length) {
                _trackers[_local2].volume = n;
                _local2++;
            };
        }
        override public function set captionsEnabled(b:Boolean):void{
            var _local2:int;
            super.captionsEnabled = b;
            _local2 = 0;
            while (_local2 < _trackers.length) {
                _trackers[_local2].captionsEnabled = b;
                _local2++;
            };
        }
        override public function receiveMetadataChange(hasRteMetadata:Boolean, isAdvert:Boolean=false, isSting:Boolean=false, itemStartVal:Number=NaN, itemEndVal:Number=NaN, currentAdIndex:int=0, numberOfAds:int=0, canSkipAdverts:Boolean=false, isInteractiveAdvert:Boolean=false, isPausePlayAdvert:Boolean=false):void{
            var _local12:int;
            super.receiveMetadataChange.apply(this, arguments);
            _local12 = 0;
            while (_local12 < _trackers.length) {
                _trackers[_local12].receiveMetadataChange.apply(_trackers[_local12], arguments);
                _local12++;
            };
        }
        override public function notifyState(type:String, state:int, errorMessage:String=""):void{
            var _local5:int;
            super.notifyState.apply(this, arguments);
            _local5 = 0;
            while (_local5 < _trackers.length) {
                _trackers[_local5].notifyState.apply(_trackers[_local5], arguments);
                _local5++;
            };
        }
        override public function notifyDataRates(autoSelect:Boolean, selectedRate:Number=NaN, availableRates:Array=null):void{
            var _local5:int;
            super.notifyDataRates.apply(this, arguments);
            _local5 = 0;
            while (_local5 < _trackers.length) {
                _trackers[_local5].notifyDataRates.apply(_trackers[_local5], arguments);
                _local5++;
            };
        }

    }
}//package rte.osmf.tracking 
﻿package rte.osmf.freewheel {
    import org.osmf.media.*;
    import org.osmf.events.*;
    import flash.events.*;
    import flash.utils.*;
    import rte.osmf.*;
    import org.osmf.traits.*;
    import rte.osmf.ad.*;
    import org.osmf.elements.*;
    import org.osmf.metadata.*;

    public class FreewheelPreAndPostAndMidRollElement extends SerialElement implements IAdvertisingMediaElement, IMultiElementSeekable {

        private var deferredSeek:Number;
        private var fwLoad:FreewheelLoader;
        private var _resource:MediaResourceBase;
        private var _scrubbing:Boolean = false;

        public function FreewheelPreAndPostAndMidRollElement(loader:FreewheelLoader){
            this.fwLoad = loader;
            this.fwLoad.addEventListener(LoaderEvent.LOAD_STATE_CHANGE, this.hasLoaded);
            this.traitAggregator.addEventListener("listenedChildChange", this.onChildChange);
            this.addEventListener(ContainerChangeEvent.CONTAINER_CHANGE, this.traceContainerChange);
        }
        protected function processContentSeekTo(number:Number):void{
            var _local3:SeekTrait;
            if (((this.isAdvertising) || (!(this.contentElement)))){
                this.deferredSeek = number;
                return;
            };
            this.deferredSeek = NaN;
            var _local2:SeekTrait = ((this.contentElement) ? (this.contentElement.getTrait(MediaTraitType.SEEK) as SeekTrait) : null);
            if (_local2){
                _local3 = (this.getTrait(MediaTraitType.SEEK) as SeekTrait);
                _local3.seek(number);
                _local3.addEventListener(SeekEvent.SEEKING_CHANGE, this.seekComplete);
            } else {
                this.deferredSeek = number;
                if (this.contentElement){
                    this.contentElement.addEventListener(MediaElementEvent.TRAIT_ADD, this.continueWithProcessSeek);
                };
            };
        }
        protected function seekComplete(event:SeekEvent):void{
            var _local2:SeekTrait;
            var _local3:PlayTrait;
            if (!event.seeking){
                _local2 = (event.target as SeekTrait);
                _local2.removeEventListener(SeekEvent.SEEKING_CHANGE, this.seekComplete);
                if (((!(this.isAdvertising)) && (this.contentElement))){
                    _local3 = (this.contentElement.getTrait(MediaTraitType.PLAY) as PlayTrait);
                    if (((((_local3) && (!((_local3.playState == PlayState.PLAYING))))) && (!((_local3.playState == PlayState.STOPPED))))){
                        _local3.play();
                    };
                };
            };
        }
        protected function continueWithProcessSeek(event:MediaElementEvent):void{
            (event.target as IEventDispatcher).removeEventListener(MediaElementEvent.TRAIT_ADD, this.continueWithProcessSeek);
            if (isFinite(this.deferredSeek)){
                this.processContentSeekTo(this.deferredSeek);
            };
        }
        protected function hasLoaded(event:LoaderEvent):void{
            var _local2:MediaElement;
            var _local3:PlayTrait;
            trace("Freewheel Loader is loaded");
            switch (event.newState){
                case LoadState.READY:
                    this.fwLoad.cueFreewheelMediaOnto(this);
                    break;
                case LoadState.UNLOADING:
                    while (numChildren) {
                        _local2 = getChildAt(0);
                        _local3 = (_local2.getTrait(MediaTraitType.PLAY) as PlayTrait);
                        if (((_local3) && (!((_local3.playState == PlayState.STOPPED))))){
                            _local3.stop();
                        };
                        removeChildAt(0);
                    };
                    break;
            };
        }
        protected function traceContainerChange(event:ContainerChangeEvent):void{
            trace(((((("CHANGING CONTAINERS " + event.newContainer) + " from ") + event.oldContainer) + " for ") + this));
        }
        protected function get fl():FreewheelLoader{
            return (this.fwLoad);
        }
        protected function onChildChange(event:Event):void{
            trace(((("ON CHILD CHANGE " + this.currentChild) + " ") + ((currentChild) ? currentChild.resource : "(nada)")));
            this.setRTEMetadata();
            if (this.fl){
                this.fl.checkChildChange();
            } else {
                this.checkForDeferral(NaN);
            };
        }
        public function checkForDeferral(resumeTime:Number):Boolean{
            this.setRTEMetadata();
            if (((!(this.fl.isUnloaded())) && (((this.deferredSeek) || (isFinite(resumeTime)))))){
                this.fl.resetClip();
                if (this.deferredSeek){
                    this.processContentSeekTo(this.deferredSeek);
                    return (true);
                };
                if (isFinite(resumeTime)){
                    this.processContentSeekTo(resumeTime);
                    return (true);
                };
            };
            return (false);
        }
        public function setRTEMetadata():void{
            var _local1:PlayingItemClipDetails;
            var _local2:Metadata;
            this.removeMetadata(OSMFPlayableItemMetadata.RTE_NAMESPACE_URL);
            if (((this.fl) && (this.fl.currentlyPlaying()))){
                trace(("CURRENTLY PLAYING IS " + this.fl.currentlyPlaying()));
                _local1 = this.fl.calculateClipDetails();
                trace(("AND CLIP DETAILS SHOULD BE:\n" + _local1));
                _local2 = this.fl.currentlyPlaying().getMetadata(OSMFPlayableItemMetadata.RTE_NAMESPACE_URL);
                _local2.addValue(OSMFPlayableItemMetadata.CUE_POINTS, this.fl.getCuePoints());
                _local2.addValue(OSMFPlayableItemMetadata.RAW_CUE_POINTS, this.fl.getRawCuePoints());
                if (_local1){
                    _local2.addValue(OSMFPlayableItemMetadata.CLIPDETAILS, _local1);
                };
                addMetadata(OSMFPlayableItemMetadata.RTE_NAMESPACE_URL, _local2);
            } else {
                trace((("WHY NO FL HERE ? " + this.fl) + " "));
            };
        }
        override public function get resource():MediaResourceBase{
            return (this._resource);
        }
        override public function set resource(value:MediaResourceBase):void{
            var _local3:MediaTraitBase;
            var _local4:LoadTrait;
            trace(((("SETTING RESOURCE TO " + value) + " ") + (((value is URLResource)) ? URLResource(value).url : "")));
            var _local2 = !((this._resource == value));
            this._resource = value;
            if (((((_local2) && (this.fwLoad))) && (this.resource))){
                _local3 = getTrait(MediaTraitType.LOAD);
                if (_local3){
                    trace("REPLACING TRAIT.");
                    removeTrait(MediaTraitType.LOAD);
                };
                _local4 = new LoadTrait(this.fwLoad, this.resource);
                this.addTrait(MediaTraitType.LOAD, _local4);
            };
        }
        public function get playingPostRoll():Boolean{
            var _local2:int;
            var _local3:int;
            var _local1:MediaElement = this.contentElement;
            if (_local1){
                _local2 = getChildIndex(_local1);
                _local3 = getChildIndex(currentChild);
                if ((((((_local2 > -1)) && ((_local3 > -1)))) && ((_local2 < _local3)))){
                    return (true);
                };
            };
            return (false);
        }
        public function get contentElement():MediaElement{
            return (this.fl.contentMedia);
        }
        public function set contentElement(me:MediaElement):void{
            throw (new Error(("NOT IMPLEMENTED set contentElement in " + getQualifiedClassName(this))));
        }
        public function get currentAdDuration():Number{
            return (this.fl.adDuration);
        }
        public function get currentAdMediaUrl():String{
            return (this.fl.adUrl);
        }
        public function get currentAdTime():Number{
            return (this.fl.adPosition);
        }
        public function skip():void{
            throw (new Error(("NOT IMPLEMENTED set contentElement in " + getQualifiedClassName(this))));
        }
        public function get isContentWrapper():Boolean{
            return (true);
        }
        public function getCurrentlyPlaying():MediaElement{
            return (this.fl.currentlyPlaying());
        }
        public function get currentAdTitle():String{
            return ("NO IDEA WHATSOEVER");
        }
        public function get hasRTEMetadata():Boolean{
            return (true);
        }
        public function get isAdvertising():Boolean{
            return (this.fl.isAdvert);
        }
        public function get isInteractiveAdvertising():Boolean{
            return (false);
        }
        public function get isOnPauseAdvertising():Boolean{
            return (false);
        }
        public function get scrubbing():Boolean{
            return (this._scrubbing);
        }
        public function set scrubbing(b:Boolean):void{
            this._scrubbing = b;
        }
        public function get canSkipAdverts():Boolean{
            return (false);
        }
        public function skipAdvert():void{
        }
        public function get adIndex():int{
            return (this.fl.adIndex);
        }
        public function get adCount():int{
            return (this.fl.adCount);
        }
        public function get itemStart():Number{
            return (this.fl.itemStart);
        }
        public function get itemEnd():Number{
            return (this.fl.itemEnd);
        }
        public function get isSting():Boolean{
            return (false);
        }
        public function clearAdverts():void{
        }
        public function seekInContentOnly(numberInSeconds:Number, seekFromCueIgnoresBlocks:Boolean=false):void{
            if (((this.isAdvertising) && (!(seekFromCueIgnoresBlocks)))){
                return;
            };
            if (this.fl.checkSeek(this.contentOnlyPosition(), numberInSeconds)){
                trace("SHOULD ALSO PLAY AD");
                this.setRTEMetadata();
                this.deferredSeek = numberInSeconds;
            } else {
                this.processContentSeekTo(numberInSeconds);
            };
        }
        public function contentOnlyDuration():Number{
            if (!this.contentElement){
                return (0);
            };
            var _local1:TimeTrait = (this.contentElement.getTrait(MediaTraitType.TIME) as TimeTrait);
            if (_local1){
                return (_local1.duration);
            };
            return (0);
        }
        public function contentOnlyPosition():Number{
            if (!this.contentElement){
                return (0);
            };
            if (isFinite(this.deferredSeek)){
                return (this.deferredSeek);
            };
            var _local1:TimeTrait = (this.contentElement.getTrait(MediaTraitType.TIME) as TimeTrait);
            if (_local1){
                return (_local1.currentTime);
            };
            return (0);
        }
        public function initialiseForStartPos(startPosInSeconds:Number):void{
            if (startPosInSeconds > 0){
                this.fl.doNotPlayAdsAsFarAs(startPosInSeconds);
            };
            this.processContentSeekTo(startPosInSeconds);
        }

    }
}//package rte.osmf.freewheel 
﻿package rte.osmf.freewheel {
    import org.osmf.media.*;
    import flash.display.*;
    import org.osmf.events.*;
    import flash.events.*;
    import flash.geom.*;
    import rte.osmf.*;
    import org.osmf.traits.*;
    import org.osmf.elements.*;
    import rte.playerInsights.*;
    import org.osmf.net.*;
    import org.osmf.metadata.*;
    import __AS3__.vec.*;
    import tv.freewheel.ad.loader.*;
    import tv.freewheel.ad.behavior.*;
    import tv.freewheel.wrapper.osmf.slot.*;

    public class FreewheelLoader extends LoaderBase {

        public static const NAME_SPACE:String = "rte.osmf.freewheel";
        public static const MEDIA_CONTAINER:String = "mediaContainer";
        public static const MEDIA_FACTORY:String = "mediaFactory";
        private static const FW_ADMANAGER_URL:String = "http://adm.fwmrm.net/p/RTE_Live/AdManager.swf";
        private static const FW_SERVER_URL:String = "http://5f95b.v.fwmrm.net";
        private static const FW_NETWORK_ID:int = 391515;

        public static var useClipResetSeeking:Boolean = false;
        public static var sectionId:String;
        public static var profileString:String;
        public static var serverUrl:String = "http://5f95b.v.fwmrm.net";
        public static var networkId:int = 391515;
        public static var adManagerUrl:String = "http://adm.fwmrm.net/p/RTE_Live/AdManager.swf";
        private static var defaultMetadata:Metadata;
        public static var adSlotWidth:int = 300;
        public static var adSlotHeight:int = 250;
        public static var playerDetectedUserBandwidthInKbps:int = -1;
        public static var usePrerolls:Boolean = true;
        public static var overrideRect:Rectangle;
        public static var cloneMediaMetadataFunction:Function;

        private var loadTrait:LoadTrait;
        private var loader:AdManagerLoader;
        private var adManager:IAdManager;
        private var constants:IConstants;
        private var plStage:Stage;
        private var listeningForEnd:Boolean = false;
        protected var isValidForFreewheel:Boolean = false;
        protected var lastAdId:int = -1;
        private var currentAdClipDetails:PlayingItemClipDetails;
        private var currentAdInsight:AdvertPlayerInsight;
        private var videoDisplay:Sprite;
        private var timeline:TimelineMetadata;
        private var _contentMedia:MediaElement;
        private var timelineMedia:ParallelElement;
        private var rootMedia:FreewheelPreAndPostAndMidRollElement;
        private var _doNotPlayAdvertsBefore:Number = 0;
        private var policyPrerollsSkippedWhenStartingAfter:Number = 60;
        protected var hasPrerolls:Boolean = false;
        protected var hasMidrolls:Boolean = false;
        protected var hasPausemidrolls:Boolean = false;
        protected var hasDisplays:Boolean = false;
        protected var hasOverlays:Boolean = false;
        protected var hasPostrolls:Boolean = false;
        protected var listeningForPlay:Boolean = false;
        protected var preRollList:AdBreakContentList;
        protected var displayAdList:AdBreakContentList;
        protected var postRollList:AdBreakContentList;
        protected var midRollIndices:Vector.<AdBreakContentList>;
        protected var pausemidRollIndices:Vector.<AdBreakContentList>;
        protected var midRollOverlayIndices:Vector.<AdBreakContentList>;
        private var resumeTime:Number = NaN;
        private var _playingAd:FWSlotElement;
        private var toCue:Vector.<String>;
        public var MAX_SLOT_PLAYS:uint = 1;

        public static function prepareForFreewheel(resource:MediaResourceBase):MediaResourceBase{
            var _local2:Metadata;
            var _local3:int;
            var _local4:String;
            if (defaultMetadata){
                _local2 = new Metadata();
                _local3 = 0;
                while (_local3 < defaultMetadata.keys.length) {
                    _local4 = defaultMetadata.keys[_local3];
                    _local2.addValue(_local4, defaultMetadata.getValue(_local4));
                    _local3++;
                };
                resource.addMetadataValue(FreewheelLoader.NAME_SPACE, _local2);
            };
            return (resource);
        }
        public static function setDefaultMetadata(mp:MediaPlayerSprite, mf:MediaFactory):void{
            var _local3:Metadata = new Metadata();
            _local3.addValue(FreewheelLoader.MEDIA_CONTAINER, mp);
            _local3.addValue(FreewheelLoader.MEDIA_FACTORY, mf);
            defaultMetadata = _local3;
        }
        public static function get factoryItem():MediaFactoryItem{
            var _local1:FreewheelLoader = new (FreewheelLoader)();
            var _local2:MediaFactoryItem = new MediaFactoryItem(NAME_SPACE, _local1.canHandleResource, _local1.generateElement);
            return (_local2);
        }

        override public function canHandleResource(resource:MediaResourceBase):Boolean{
            if (((!(resource)) || (!((resource is URLResource))))){
                return (false);
            };
            var _local2:Metadata = (resource.getMetadataValue(FreewheelLoader.NAME_SPACE) as Metadata);
            if (_local2){
                return (true);
            };
            return (false);
        }
        override protected function executeLoad(withLoadTrait:LoadTrait):void{
            var withLoadTrait:* = withLoadTrait;
            this.loadTrait = withLoadTrait;
            updateLoadTrait(this.loadTrait, LoadState.LOADING);
            this._contentMedia = this.cloneMedia();
            try {
                this.loader = new AdManagerLoader();
                this.loader.loadAdManager(this.player, this.onAdManagerLoaded, AdManagerLoader.LEVEL_QUIET, adManagerUrl, new Date().valueOf());
            } catch(e:Error) {
                trace(((("Freewheel ads not allowed due to error:\n" + e) + "\n") + e.getStackTrace()));
                isValidForFreewheel = false;
                updateLoadTrait(loadTrait, LoadState.READY);
            };
        }
        override protected function executeUnload(loadTrait:LoadTrait):void{
            var _local2:PlayTrait;
            var _local3:LoadTrait;
            var _local4:MediaElement;
            updateLoadTrait(loadTrait, LoadState.UNLOADING);
            if (this.player){
                this.player.removeEventListener("playerResizeEvent", this.playerResize);
                this.player.removeEventListener("fullScreenStateChange", this.playerFullScreenChange);
            };
            if (this.adManager){
                this.cleanupPlayingAd();
                this.adManager.removeEventListener(this.constants.EVENT_RENDERER, this.updatePlayingInsights);
                this.adManager.removeEventListener(this.constants.EVENT_REQUEST_COMPLETE, this.onRequestComplete);
                this.adManager.removeEventListener(this.constants.EVENT_SLOT_ENDED, this.onSlotEnded);
                this.adManager.removeEventListener(this.constants.EVENT_PAUSESTATECHANGE_REQUEST, this.onPauseStateChangeRequest);
                trace(((("CLEANING UP " + this.loader) + " ") + this.adManager));
                this.loader.disposeAdManager(this.adManager);
                this.adManager = null;
            };
            if (this.timelineMedia){
                while (this.timelineMedia.numChildren) {
                    _local4 = this.timelineMedia.removeChildAt(0);
                    _local2 = (_local4.getTrait(MediaTraitType.PLAY) as PlayTrait);
                    if (_local2){
                        _local2.removeEventListener(PlayEvent.PLAY_STATE_CHANGE, this.stopUnPauseIfAdvert);
                        _local2.stop();
                    };
                    _local3 = (_local4.getTrait(MediaTraitType.LOAD) as LoadTrait);
                    if (((((_local3) && (!((_local3.loadState == LoadState.UNINITIALIZED))))) && (!((_local3.loadState == LoadState.UNLOADING))))){
                        _local3.unload();
                    };
                };
            };
            this.cleanupTimeline();
            if (this.contentMedia){
                this.cleanUpListenForPlayListeners();
                this.stopListeningForEnd();
                if (((this.rootMedia) && ((this.rootMedia.currentChild == this.contentMedia)))){
                    this.rootMedia.removeChild(this.contentMedia);
                };
                _local2 = (this.contentMedia.getTrait(MediaTraitType.PLAY) as PlayTrait);
                if (_local2){
                    _local2.stop();
                    this.dispatchVideoStatus(this.constants.VIDEO_STATUS_STOPPED);
                };
                _local3 = (this.contentMedia.getTrait(MediaTraitType.LOAD) as LoadTrait);
                if (((((_local3) && (!((_local3.loadState == LoadState.UNINITIALIZED))))) && (!((_local3.loadState == LoadState.UNLOADING))))){
                    _local3.unload();
                };
                this._contentMedia = null;
            };
            updateLoadTrait(loadTrait, LoadState.UNINITIALIZED);
        }
        public function get player():MediaPlayerSprite{
            var _local1:Metadata = (this.loadTrait.resource.getMetadataValue(FreewheelLoader.NAME_SPACE) as Metadata);
            var _local2:MediaPlayerSprite = (_local1.getValue(FreewheelLoader.MEDIA_CONTAINER) as MediaPlayerSprite);
            return (_local2);
        }
        public function get mediaFactory():MediaFactory{
            var _local1:Metadata = (this.loadTrait.resource.getMetadataValue(FreewheelLoader.NAME_SPACE) as Metadata);
            var _local2:MediaFactory = (_local1.getValue(FreewheelLoader.MEDIA_FACTORY) as MediaFactory);
            return (_local2);
        }
        public function isUnloaded():Boolean{
            if (((((!(this.loadTrait)) || ((this.loadTrait.loadState == LoadState.UNINITIALIZED)))) || ((this.loadTrait.loadState == LoadState.UNLOADING)))){
                trace("IGNORING CANCELLED LOAD.");
                return (true);
            };
            return (false);
        }
        private function onAdManagerLoaded(success:Boolean, message:String):void{
            trace((("onAdManagerLoaded(" + arguments.join(", ")) + ")"));
            if (this.isUnloaded()){
                return;
            };
            if (success){
                trace("REQUESTING AD SLOT");
                this.adManager = this.loader.newAdManager();
                this.constants = this.adManager.getConstants();
                this.adManager.setServer(serverUrl);
                this.adManager.setNetwork(networkId);
                this.adManager.setProfile(profileString);
                this.videoDisplay = new Sprite();
                this.player.addChild(this.videoDisplay);
                this.player.addEventListener("playerResizeEvent", this.playerResize);
                this.player.addEventListener("fullScreenStateChange", this.playerFullScreenChange);
                this.playerResize();
                this.adManager.registerVideoDisplay(this.videoDisplay);
                this.adManager.addEventListener(this.constants.EVENT_RENDERER, this.updatePlayingInsights);
                this.adManager.addEventListener(this.constants.EVENT_REQUEST_COMPLETE, this.onRequestComplete);
                this.adManager.addEventListener(this.constants.EVENT_SLOT_ENDED, this.onSlotEnded);
                this.adManager.addEventListener(this.constants.EVENT_PAUSESTATECHANGE_REQUEST, this.onPauseStateChangeRequest);
                this.submitRequest();
            } else {
                updateLoadTrait(this.loadTrait, LoadState.READY);
            };
        }
        protected function playerFullScreenChange(event:Event):void{
            var _local5:ISlot;
            if (!this.adManager){
                return;
            };
            var _local2:Boolean;
            try {
                _local2 = (this.player.stage.displayState == StageDisplayState.NORMAL);
            } catch(e:Error) {
            };
            var _local3:Array = this.adManager.getSlotsByTimePositionClass(this.constants.TIME_POSITION_CLASS_DISPLAY);
            var _local4:int;
            while (_local4 < _local3.length) {
                _local5 = _local3[_local4];
                _local5.setVisible(_local2);
                _local4++;
            };
        }
        protected function playerResize(event:Event=null):void{
            var _local2:Rectangle;
            if (this.adManager){
                _local2 = this.getPlayerBounds();
                this.adManager.setVideoDisplaySize(_local2.x, _local2.y, _local2.width, _local2.height, _local2.x, _local2.y, _local2.width, _local2.height);
                if (this.playingAd){
                    this.playingAd.setBounds(_local2);
                };
            };
        }
        protected function dispatchVideoStatus(status:uint):void{
            if (this.adManager){
                this.adManager.setVideoPlayStatus(status);
            };
        }
        public function checkChildChange():void{
            if (!this.listeningForEnd){
                this.tryListeningForEnd();
            };
            if (this.rootMedia.playingPostRoll){
                this.playPostrollSlots();
            } else {
                if (this.rootMedia.currentChild == this.contentMedia){
                    this.returnToPlay();
                };
            };
        }
        private function tryListeningForEnd():void{
            if (this.listeningForEnd){
                return;
            };
            if (!this.contentMedia){
                return;
            };
            var _local1:TimeTrait = (this.contentMedia.getTrait(MediaTraitType.TIME) as TimeTrait);
            if (!_local1){
                return;
            };
            _local1.addEventListener(TimeEvent.COMPLETE, this.signalContentEnd);
            this.listeningForEnd = true;
        }
        private function signalContentEnd(event:TimeEvent):void{
            this.stopListeningForEnd();
            this.dispatchVideoStatus(this.constants.VIDEO_STATUS_COMPLETED);
        }
        private function stopListeningForEnd():void{
            if (!this.listeningForEnd){
                return;
            };
            if (!this.contentMedia){
                return;
            };
            var _local1:TimeTrait = (this.contentMedia.getTrait(MediaTraitType.TIME) as TimeTrait);
            if (!_local1){
                return;
            };
            _local1.removeEventListener(TimeEvent.COMPLETE, this.signalContentEnd);
            this.listeningForEnd = false;
        }
        private function playPrerollSlots():void{
            var _local1:int;
            trace("playPrerollSlots()");
            if (this.preRollList.length > 0){
                _local1 = 0;
                while (_local1 < this.preRollList.length) {
                    this.preRollList.slots[_local1].play();
                    _local1++;
                };
            };
        }
        private function playPostrollSlots():void{
            var _local1:int;
            trace("playPostrollSlots()");
            if (this.postRollList.length > 0){
                _local1 = 0;
                while (_local1 < this.postRollList.length) {
                    this.postRollList.slots[_local1].play();
                    _local1++;
                };
            };
        }
        protected function updatePlayingInsights(evt:IEvent):void{
            trace((("EVT: " + evt.type) + " "));
            trace(("slotCustomId " + evt.slotCustomId));
            trace(((("position " + this.adManager.getSlotByCustomId(evt.slotCustomId).getTimePosition()) + " of ") + this.adManager.getSlotByCustomId(evt.slotCustomId).getTotalDuration()));
            var _local2:IAdInstance = evt.adInstance;
            if (((_local2) && (!((this.lastAdId == evt.adId))))){
                trace(((("CHANGING AD FROM " + this.lastAdId) + " TO ") + evt.adId));
                this.setPlayingPlayerInsight(_local2);
            };
            this.rootMedia.setRTEMetadata();
        }
        protected function traceEvt(evt:IEvent):void{
            trace(">--");
            trace(((((((((((((("EVT: " + evt.type) + " ") + evt.creativeId) + " ") + evt.adId) + " ") + evt.adReferenceId) + " ") + evt.adPause) + " ") + evt.moduleName) + " ") + evt.message));
            trace("-->");
        }
        protected function calculateAdInsight(forAd:IAdInstance):AdvertPlayerInsight{
            var _local13:IAdInstance;
            var _local14:Array;
            var _local15:ICreativeRendition;
            var _local16:Array;
            var _local17:ICreativeRenditionAsset;
            var _local2:ISlot = forAd.getSlot();
            var _local3:URLResource = (this.loadTrait.resource as URLResource);
            var _local4:String = _local3.url;
            var _local5:AdvertPlayerInsight = new AdvertPlayerInsight();
            _local5.originatingAdTag = _local4;
            if (_local2.getTimePositionClass() == this.constants.TIME_POSITION_CLASS_POSTROLL){
                _local5.postRoll = true;
            } else {
                if (_local2.getTimePositionClass() == this.constants.TIME_POSITION_CLASS_PREROLL){
                    _local5.preRoll = true;
                };
            };
            _local5.contentId = _local2.getCustomId();
            var _local6:Array = _local2.getAdInstances();
            trace((("SLOT HAS " + _local6.length) + " ADS"));
            var _local7 = -1;
            var _local8:Boolean;
            var _local9:Object = {};
            var _local10 = -1;
            var _local11:int;
            while (_local11 < _local6.length) {
                _local13 = _local6[_local11];
                if (_local9[_local13.getAdId()] == undefined){
                    _local9[_local13.getAdId()] = true;
                    _local10++;
                };
                trace(((("SEARCHING " + _local13.getAdId()) + " AGAINST ") + forAd.getAdId()));
                if (_local13.getAdId() == forAd.getAdId()){
                    _local7 = _local10;
                    trace(("FOUND AD WITH " + forAd.getAdId()));
                    _local14 = forAd.getAllCreativeRenditions();
                    trace((("\tAD HAS " + _local14.length) + " renditions"));
                    if (_local14.length){
                        _local15 = _local14[0];
                        _local16 = _local15.getAllCreativeRenditionAssets();
                        if (_local16.length){
                            _local17 = _local16[0];
                            _local5.mediaUrl = _local17.getURL();
                        } else {
                            _local5.mediaUrl = _local15.getWrapperURL();
                        };
                    };
                    _local8 = true;
                    break;
                };
                _local11++;
            };
            if (!_local8){
                throw (new Error("Could not locate advertising information."));
            };
            var _local12:int = this.findSlotsIndex(this.findSlotHolder(_local2));
            if (_local12 == -1){
                _local5.position = ("X_" + _local7);
            } else {
                _local5.position = ((_local12 + "_") + _local7);
            };
            trace(("CALCULATED\n" + _local5.toString()));
            return (_local5);
        }
        protected function setPlayingPlayerInsight(forAd:IAdInstance):void{
            this.sendStopped();
            this.lastAdId = forAd.getAdId();
            var _local2:AdvertPlayerInsight = this.calculateAdInsight(forAd);
            this.currentAdClipDetails = this.calculateAdvertisingClipDetailsInternal(_local2);
            var _local3:Metadata = new Metadata();
            _local3.addValue(AdvertisingEventDispatcher.ADVERTISING_DESCRIPTOR_KEY, _local2);
            this.playingAd.addMetadata(AdvertisingEventDispatcher.ADVERTISING_DESCRIPTOR_NAMESPACE, _local3);
            this.sendStarted(_local2);
        }
        protected function sendStarted(adi:AdvertPlayerInsight):void{
            this.currentAdInsight = adi;
            this.rootMedia.setRTEMetadata();
            AdvertisingEventDispatcher.instance.dispatchEvent(new PlayerInsightsEvent(PlayerInsightsEvent.AD_REQUEST_INSIGHT, this.currentAdInsight));
            AdvertisingEventDispatcher.instance.dispatchEvent(new PlayerInsightsEvent(PlayerInsightsEvent.AD_START_INSIGHT, this.currentAdInsight));
        }
        protected function sendStopped():void{
            if (this.currentAdInsight){
                AdvertisingEventDispatcher.instance.dispatchEvent(new PlayerInsightsEvent(PlayerInsightsEvent.AD_END_INSIGHT, this.currentAdInsight));
            };
            this.currentAdInsight = null;
            this.currentAdClipDetails = null;
            this.rootMedia.setRTEMetadata();
        }
        private function submitRequest():void{
            var _local7:int;
            var _local8:String;
            trace("submitRequest()");
            var _local1 = -1;
            var _local2:Metadata = this.contentMedia.getMetadata(OSMFPlayableItemMetadata.RTE_NAMESPACE_URL);
            var _local3:String = "unknown";
            var _local4:Boolean;
            if (_local2){
                _local1 = Number(_local2.getValue(OSMFPlayableItemMetadata.DURATIONKEY));
                if (!_local1){
                    _local4 = true;
                };
                _local3 = _local2.getValue(OSMFPlayableItemMetadata.PLAYLISTID);
            };
            this.adManager.refresh();
            this.dispatchVideoStatus(this.constants.VIDEO_STATUS_STOPPED);
            this.adManager.setLiveMode(_local4);
            this.adManager.setSiteSection(sectionId);
            if (_local4){
                _local1 = 3600;
                this.adManager.setVideoAsset(_local3, _local1, null, true, 0, 0, 0, 0, "variable");
                this.adManager.addTemporalSlot("Preroll Spot", "PREROLL", 0);
            } else {
                this.adManager.setVideoAsset(_local3, _local1);
            };
            if (((isFinite(playerDetectedUserBandwidthInKbps)) && ((playerDetectedUserBandwidthInKbps > 0)))){
                this.adManager.setParameter("desiredBitrate", ("" + playerDetectedUserBandwidthInKbps), this.constants.PARAMETER_OVERRIDE);
            };
            var _local5:URLResource = (this.loadTrait.resource as URLResource);
            var _local6:Metadata = (_local5.getMetadataValue(OSMFPlayableItemMetadata.ADDITIONAL_AD_NAMESPACE) as Metadata);
            if (_local6){
                _local7 = 0;
                while (_local7 < _local6.keys.length) {
                    _local8 = _local6.keys[_local7];
                    this.adManager.setKeyValue(_local8, _local6.getValue(_local8));
                    _local7++;
                };
            };
            this.adManager.scanSlotsOnPage();
            this.adManager.submitRequest();
        }
        private function cloneTimeLine(to:MediaElement):TimelineMetadata{
            var _local2:TimelineMetadata;
            var _local3:int;
            if (this.timeline){
                _local2 = new TimelineMetadata(to);
                _local2.addEventListener(TimelineMetadataEvent.MARKER_TIME_REACHED, this.onCuePoint);
                _local3 = 0;
                while (_local3 < this.timeline.numMarkers) {
                    _local2.addMarker(this.timeline.getMarkerAt(_local3));
                    _local3++;
                };
                return (_local2);
            };
            return (null);
        }
        private function cleanupTimeline():void{
            if (this.timeline){
                trace("CLEANING TIMELINE");
                this.timeline.enabled = false;
                this.timeline.removeEventListener(TimelineMetadataEvent.MARKER_TIME_REACHED, this.onCuePoint);
                while (this.timeline.numMarkers) {
                    this.timeline.removeMarker(this.timeline.getMarkerAt(0));
                };
                this.timeline = null;
            };
        }
        private function onRequestComplete(evt:IEvent):void{
            trace("onRequestComplete(", evt.success, ")");
            this.isValidForFreewheel = true;
            updateLoadTrait(this.loadTrait, LoadState.READY);
        }
        public function currentlyPlaying():MediaElement{
            if (!this.rootMedia){
                return (null);
            };
            if (((this.timelineMedia) && ((this.rootMedia.currentChild == this.timelineMedia)))){
                return (this.timelineMedia.getChildAt((this.timelineMedia.numChildren - 1)));
            };
            return (this.rootMedia.currentChild);
        }
        public function get contentMedia():MediaElement{
            return (this._contentMedia);
        }
        public function resetClip():void{
            var _local1:URLResource = (this.contentMedia.resource as URLResource);
            var _local2:Metadata = this.contentMedia.getMetadata(OSMFPlayableItemMetadata.RTE_NAMESPACE_URL);
            var _local3:MediaElement = this.player.mediaFactory.createMediaElement(_local1);
            if (_local2){
                _local3.addMetadata(OSMFPlayableItemMetadata.RTE_NAMESPACE_URL, _local2);
            };
            var _local4:MediaElement = this.contentMedia;
            var _local5:TimelineMetadata = this.cloneTimeLine(_local3);
            this.cleanupTimeline();
            this.timeline = _local5;
            var _local6:LoadTrait = (_local4.getTrait(MediaTraitType.LOAD) as LoadTrait);
            if (this.isContentOnTimeline()){
                this.timelineMedia.removeChild(_local4);
            };
            if (_local6){
                _local6.unload();
            };
            this.timelineMedia.addChildAt(_local3, 0);
            this._contentMedia = _local3;
        }
        private function trySeek(me:MediaElement, pos:Number):void{
            var checkSeek:* = null;
            var me:* = me;
            var pos:* = pos;
            var arguments:* = arguments;
            checkSeek = function (event:MediaElementEvent=null):Boolean{
                var _local2:LoadTrait = (me.getTrait(MediaTraitType.LOAD) as LoadTrait);
                if (((_local2) && ((((((_local2.loadState == LoadState.UNINITIALIZED)) || ((_local2.loadState == LoadState.LOAD_ERROR)))) || ((_local2.loadState == LoadState.UNLOADING)))))){
                    trace("AM GIVING UP");
                    return (true);
                };
                var _local3:SeekTrait = (me.getTrait(MediaTraitType.SEEK) as SeekTrait);
                if (_local3){
                    _local3.seek(pos);
                    trace("SOUGHT");
                    return (true);
                };
                return (false);
            };
            if (checkSeek()){
                trace(("TRY SEEK WAS OK " + arguments));
                return;
            };
            me.addEventListener(MediaElementEvent.TRAIT_ADD, checkSeek);
        }
        public function cueFreewheelMediaOnto(onto:FreewheelPreAndPostAndMidRollElement):void{
            this.rootMedia = onto;
            var _local2:LoadTrait = (this.rootMedia.getTrait(MediaTraitType.LOAD) as LoadTrait);
            if (!_local2){
                throw (new Error("SHOULD HAVE A LOAD TRAIT HERE."));
            };
            if (!this.contentMedia){
                throw (new Error("No content media found for freewheeling. Please ensure you have waited for .LOADED on the LoadTrait."));
            };
            if (this.isValidForFreewheel){
                this.cueMediaForFreewheel();
            } else {
                this.cueMediaWithoutFreewheel();
            };
        }
        public function getRawCuePoints():Vector.<Number>{
            var _local2:int;
            var _local1:Vector.<Number> = new Vector.<Number>();
            if (this.hasMidrolls){
                _local2 = 0;
                while (_local2 < this.midRollIndices.length) {
                    _local1.push(this.midRollIndices[_local2].time);
                    _local2++;
                };
            };
            return (_local1);
        }
        public function getCuePoints():Vector.<Number>{
            var _local2:int;
            var _local1:Vector.<Number> = new Vector.<Number>();
            if (this.hasMidrolls){
                _local2 = 0;
                while (_local2 < this.midRollIndices.length) {
                    if (this.midRollIndices[_local2].playCount < this.MAX_SLOT_PLAYS){
                        _local1.push(this.midRollIndices[_local2].time);
                    };
                    _local2++;
                };
            };
            return (_local1);
        }
        public function doNotPlayAdsAsFarAs(timeStamp:Number):void{
            this._doNotPlayAdvertsBefore = ((isFinite(timeStamp)) ? Math.abs(timeStamp) : 0);
        }
        protected function cueMediaForFreewheel():void{
            var _local2:IAdInstance;
            if ((((this._doNotPlayAdvertsBefore <= this.policyPrerollsSkippedWhenStartingAfter)) && (usePrerolls))){
                this.cuePrerolls();
            } else {
                trace("PREROLL SETUP SKIPPED AS STARTING ABOVE ZERO");
            };
            this.cueDisplays();
            this.timeline = new TimelineMetadata(this.contentMedia);
            this.timeline.addEventListener(TimelineMetadataEvent.MARKER_TIME_REACHED, this.onCuePoint);
            this.cueMidrolls(this.timeline);
            this.cueOverlays(this.timeline);
            var _local1:ParallelElement = new ParallelElement();
            _local1.addChild(this.contentMedia);
            this.timelineMedia = _local1;
            this.rootMedia.addChild(this.timelineMedia);
            this.cuePostrolls();
            trace("-- FREEWHEEL --");
            trace("FREEWHEEL CUED AS FOLLOWS:");
            if (this.hasPrerolls){
                trace("PREROLLS:");
                trace(this.preRollList);
                _local2 = this.adManager.getSlotByCustomId(this.preRollList.entries[0]).getAdInstances(true)[0];
                if (_local2){
                    this.playingAd = (this.rootMedia.getChildAt(0) as FWSlotElement);
                    this.setPlayingPlayerInsight(_local2);
                    this.playPrerollSlots();
                };
            };
            if (this.hasMidrolls){
                trace("MIDROLLS:");
                trace(this.midRollIndices.join("\n"));
            };
            if (this.hasOverlays){
                trace("OVERLAYS:");
                trace(this.midRollOverlayIndices.join("\n"));
            };
            if (this.hasPostrolls){
                trace("POSTROLLS:");
                trace(this.postRollList);
            };
            trace(("CONTENT: " + this.contentMedia));
            trace((((("ROOT: " + this.rootMedia) + " has ") + this.rootMedia.numChildren) + " elements."));
            trace("-- END FREEWHEEL --");
            this.activateSlots();
            this.playWhenReady();
            this.rootMedia.setRTEMetadata();
        }
        protected function calculatePartCount():int{
            var _local1:Number = ((this.hasMidrolls) ? (this.midRollIndices.length + 1) : 1);
            return (_local1);
        }
        protected function calculateClipCount():int{
            var _local2:int;
            var _local1:int;
            if (this.preRollList){
                _local1 = (_local1 + this.preRollList.adCount);
            };
            if (this.midRollIndices){
                _local1 = (_local1 + (this.midRollIndices.length + 1));
                _local2 = 0;
                while (_local2 < this.midRollIndices.length) {
                    _local1 = (_local1 + this.midRollIndices[_local2].adCount);
                    _local2++;
                };
            };
            if (this.postRollList){
                _local1 = (_local1 + this.postRollList.adCount);
            };
            if (this.midRollOverlayIndices){
                _local2 = 0;
                while (_local2 < this.midRollOverlayIndices.length) {
                    _local1 = (_local1 + this.midRollOverlayIndices[_local2].adCount);
                    _local2++;
                };
            };
            return (_local1);
        }
        public function calculateClipDetails():PlayingItemClipDetails{
            if (this.isAdvert){
                return (this.currentAdClipDetails);
            };
            var _local1:PlayingItemClipDetails = new PlayingItemClipDetails();
            var _local2:Number = this.rootMedia.contentOnlyPosition();
            var _local3:Number = this.rootMedia.contentOnlyDuration();
            _local1.partsInMainContent = this.calculatePartCount();
            _local1.totalClips = this.calculateClipCount();
            _local1.clipNumber = this.calculatePlayingClipNumber(null, _local2);
            _local1.clipDurationInMilliseconds = (1000 * this.calculateBetweenSlotsDurationInSeconds(_local2, _local3));
            trace(("PLAYING ITEM CLIP DETAILS ARE:\n" + _local1));
            return (_local1);
        }
        protected function calculateAdvertisingClipDetailsInternal(adi:AdvertPlayerInsight):PlayingItemClipDetails{
            var _local2:ISlot = (this.playingAd.slot as ISlot);
            trace(((("CALCULATING AD FOR " + adi.position) + " AND SLOT ") + _local2.getCustomId()));
            var _local3:String = _local2.getTimePositionClass();
            var _local4:int = adi.getPlayingIndex();
            var _local5:Array = _local2.getAdInstances(true);
            var _local6:IAdInstance = (_local5[_local4] as IAdInstance);
            var _local7:PlayingItemClipDetails = new PlayingItemClipDetails();
            _local7.partsInMainContent = this.calculatePartCount();
            _local7.totalClips = this.calculateClipCount();
            _local7.clipNumber = this.calculatePlayingClipNumber(_local2.getTimePositionClass(), _local2.getTimePosition(), _local4);
            _local7.clipDurationInMilliseconds = int((_local6.getPrimaryCreativeRendition().getDuration() * 1000));
            _local7.isAdvert = true;
            _local7.isPreroll = (_local3 == this.constants.TIME_POSITION_CLASS_PREROLL);
            _local7.isMidroll = (_local3 == this.constants.TIME_POSITION_CLASS_MIDROLL);
            _local7.isPostroll = (_local3 == this.constants.TIME_POSITION_CLASS_POSTROLL);
            _local7.isOverlay = (((_local3 == this.constants.TIME_POSITION_CLASS_OVERLAY)) || ((_local3 == this.constants.TIME_POSITION_CLASS_PAUSE_MIDROLL)));
            _local7.mediaUrl = adi.mediaUrl;
            _local7.adTimelineStartOffset = this.calculateTimelineOffset(_local2, _local4);
            _local7.clipStartInMilliseconds = (_local7.clipEndInMilliseconds = int((_local2.getTimePosition() * 10000)));
            trace(((("ADVERTISING CLIP DETAILS ARE:\n" + _local7) + "\nFOR : ") + this.adUrl));
            return (_local7);
        }
        protected function calculateTimelineOffset(slot:ISlot, adIndexWithinSlot:int):Number{
            var _local6:IAdInstance;
            var _local3:Array = slot.getAdInstances(true);
            var _local4:int;
            var _local5:int;
            while (_local5 < adIndexWithinSlot) {
                _local6 = (_local3[_local5] as IAdInstance);
                _local4 = (_local4 + _local6.getPrimaryCreativeRendition().getDuration());
                _local5++;
            };
            return (_local4);
        }
        protected function calculatePlayingItemPart(pos:Number):uint{
            var _local2:int;
            if (((this.hasMidrolls) && (isFinite(pos)))){
                _local2 = (this.midRollIndices.length - 1);
                while (_local2 > -1) {
                    trace(((("calculatePlayingItemPart\tCHECKING " + this.midRollIndices[_local2].time) + " AGAINST ") + pos));
                    if (this.midRollIndices[_local2].time <= pos){
                        trace(("calculatePlayingItemPart\tFOUND AND RETURNING " + (_local2 + 1)));
                        return ((_local2 + 1));
                    };
                    _local2--;
                };
            };
            trace("calculatePlayingItemPart\tRETURNING 0");
            return (0);
        }
        protected function calculateBetweenSlotsDurationInSeconds(pos:Number, max:Number):Number{
            var _local5:int;
            var _local3:int;
            var _local4:int = max;
            if (this.hasMidrolls){
                _local5 = 0;
                while (_local5 < this.midRollIndices.length) {
                    if (this.midRollIndices[_local5].time < pos){
                        _local3 = this.midRollIndices[_local5].time;
                    };
                    if (this.midRollIndices[_local5].time > pos){
                        _local4 = this.midRollIndices[_local5].time;
                        return ((_local4 - _local3));
                    };
                    _local5++;
                };
            };
            return ((_local4 - _local3));
        }
        protected function calculatePlayingClipNumber(type:String, pos:Number, adIndex:int=0):uint{
            var _local5:int;
            var _local4 = 0;
            if (this.hasPrerolls){
                if (type == this.constants.TIME_POSITION_CLASS_PREROLL){
                    return (adIndex);
                };
                _local4 = (_local4 + this.preRollList.adCount);
            };
            _local4++;
            if (type == null){
                return (_local4);
            };
            if (this.hasMidrolls){
                _local5 = 0;
                while (_local5 < this.midRollIndices.length) {
                    if (this.midRollIndices[_local5].time <= pos){
                        if (((((_local5 + 1) == this.midRollIndices.length)) || ((this.midRollIndices[(_local5 + 1)].time > pos)))){
                            _local4 = (_local4 + 1);
                            if (type == this.constants.TIME_POSITION_CLASS_MIDROLL){
                                return ((_local4 + adIndex));
                            };
                            if (type == null){
                                return ((_local4 + this.midRollIndices[_local5].adCount));
                            };
                        };
                    };
                    _local4 = (_local4 + this.midRollIndices[_local5].adCount);
                    _local5++;
                };
            };
            if (this.hasPostrolls){
                if (type == this.constants.TIME_POSITION_CLASS_POSTROLL){
                    return ((_local4 + adIndex));
                };
                _local4 = (_local4 + this.postRollList.adCount);
            };
            if (this.midRollOverlayIndices){
                _local5 = 0;
                while (_local5 < this.midRollOverlayIndices.length) {
                    if (this.midRollOverlayIndices[_local5].time == pos){
                        return ((_local4 + adIndex));
                    };
                    _local4 = (_local4 + this.midRollIndices[_local5].length);
                    _local4 = (_local4 + 1);
                    _local5++;
                };
            };
            return (_local4);
        }
        protected function cueMediaWithoutFreewheel():void{
            this.rootMedia.addChild(this.contentMedia);
        }
        protected function getPlayerBounds():Rectangle{
            return (new Rectangle(this.player.x, this.player.y, this.player.width, this.player.height));
        }
        protected function activateSlots():void{
            var _local1:ISlot;
            trace("ACTIVATE SLOTS");
            for each (_local1 in this.adManager.getSiteSectionNonTemporalSlots()) {
                _local1.play();
            };
            for each (_local1 in this.adManager.getVideoPlayerNonTemporalSlots()) {
                _local1.play();
            };
        }
        protected function cleanUpListenForPlayListeners():void{
            if (this.listeningForPlay){
                if (this.hasPrerolls){
                    this.rootMedia.removeEventListener(MediaElementEvent.TRAIT_ADD, this.checkPlay);
                } else {
                    this.contentMedia.removeEventListener(MediaElementEvent.TRAIT_ADD, this.checkPlay);
                };
                this.listeningForPlay = false;
            };
        }
        protected function playWhenReady():void{
            var _local1:LoadTrait;
            if (((!(this.loadTrait)) || ((this.loadTrait.loadState == LoadState.UNINITIALIZED)))){
                trace("ABANDONING AS UNLOADED.");
                this.cleanUpListenForPlayListeners();
                return;
            };
            if (this.derivedPlayTraitForRootOrContent){
                trace(((("PLAY WHEN READY IS READY " + this.derivedPlayTraitForRootOrContent.playState) + " ") + [this.hasPrerolls, this.hasMidrolls, this.hasOverlays, this.hasPostrolls]));
                this.cleanUpListenForPlayListeners();
                if (this.derivedPlayTraitForRootOrContent.playState != PlayState.PLAYING){
                    this.derivedPlayTraitForRootOrContent.play();
                    if (!this.playingAd){
                        this.dispatchVideoStatus(this.constants.VIDEO_STATUS_PLAYING);
                    };
                };
            } else {
                if (!this.listeningForPlay){
                    trace("PLAY WHEN READY IS _NOT_ READY");
                    _local1 = (((this.hasPrerolls) ? this.rootMedia : this.contentMedia).getTrait(MediaTraitType.LOAD) as LoadTrait);
                    if (((_local1) && ((_local1.loadState == LoadState.UNINITIALIZED)))){
                        trace("TRIGGERING LOAD");
                        _local1.load();
                    };
                    this.listeningForPlay = true;
                    if (this.hasPrerolls){
                        this.rootMedia.addEventListener(MediaElementEvent.TRAIT_ADD, this.checkPlay);
                    } else {
                        this.contentMedia.addEventListener(MediaElementEvent.TRAIT_ADD, this.checkPlay);
                    };
                };
            };
            if ((this.rootMedia.currentChild is FWSlotElement)){
                this.playingAd = (this.rootMedia.currentChild as FWSlotElement);
                this.playAdWhenReady();
            };
        }
        protected function checkPlay(event:MediaElementEvent):void{
            trace(("CHECK PLAY FOR " + event.traitType));
            if (this.derivedPlayTraitForRootOrContent){
                this.playWhenReady();
            };
        }
        protected function get derivedPlayTraitForRootOrContent():PlayTrait{
            if (((!(this.rootMedia)) || (!(this.contentMedia)))){
                throw (new Error("Root media not set when reading play trait."));
            };
            return (((this.hasPrerolls) ? (this.rootMedia.getTrait(MediaTraitType.PLAY) as PlayTrait) : (this.contentMedia.getTrait(MediaTraitType.PLAY) as PlayTrait)));
        }
        protected function indexNonTimelineSlots(type:String, timeCode:Number):AdBreakContentList{
            var _local5:Array;
            var _local7:int;
            var _local8:ISlot;
            var _local3:AdBreakContentList = new AdBreakContentList(type, type, timeCode);
            var _local4:Rectangle = this.getPlayerBounds();
            _local5 = this.adManager.getSlotsByTimePositionClass(type);
            _local5.reverse();
            var _local6:Vector.<FWSlotElement> = new Vector.<FWSlotElement>();
            _local7 = 0;
            while (_local7 < _local5.length) {
                _local8 = (_local5[_local7] as ISlot);
                if (_local8.getTotalDuration(true) > -1){
                    trace(((("ADDING SLOT WITH:\n" + ["getTimePosition()", "getTimePositionClass()", "getTotalDuration()"].join("\t")) + "\n") + [_local8.getTimePosition(), _local8.getTimePositionClass(), _local8.getTotalDuration(), _local8.getTotalDuration(true)].join("\t")));
                    _local3.add(_local8);
                    _local6.push(new FWSlotElement(this.adManager, _local8));
                } else {
                    trace(((("NOT ADDING SLOT BECAUSE :\n" + ["getTimePosition()", "getTimePositionClass()", "getTotalDuration()"].join("\t")) + "\n") + [_local8.getTimePosition(), _local8.getTimePositionClass(), _local8.getTotalDuration(), _local8.getTotalDuration(true)].join("\t")));
                };
                _local7++;
            };
            _local7 = 0;
            while (_local7 < _local6.length) {
                this.setMetadata(_local6[_local7], _local5[_local7], type, _local3);
                this.rootMedia.addChild(_local6[_local7]);
                _local7++;
            };
            return (_local3);
        }
        protected function indexTimelineSlots(type:String, tl:TimelineMetadata):Vector.<AdBreakContentList>{
            var _local4:CuePoint;
            var _local5:ISlot;
            var _local6:int;
            var _local7:AdBreakContentList;
            var _local9:String;
            var _local3:Vector.<AdBreakContentList> = new Vector.<AdBreakContentList>();
            var _local8:Array = this.adManager.getSlotsByTimePositionClass(type);
            _local8.reverse();
            _local6 = 0;
            while (_local6 < _local8.length) {
                _local5 = (_local8[_local6] as ISlot);
                if (((!(_local7)) || (!((_local7.time == _local5.getTimePosition()))))){
                    _local9 = (type + _local3.length);
                    _local7 = new AdBreakContentList(_local9, type, _local5.getTimePosition());
                    _local3.push(_local7);
                    _local4 = new CuePoint(CuePointType.ACTIONSCRIPT, _local5.getTimePosition(), _local9, null);
                    tl.addMarker(_local4);
                };
                if (_local5.getTotalDuration(true) > -1){
                    trace(((("ADDING SLOT WITH:\n" + ["getTimePosition()", "getTimePositionClass()", "getEmbeddedAdsDuration()", "getEndTimePosition()"].join("\t")) + "\n") + [_local5.getTimePosition(), _local5.getTimePositionClass(), _local5.getEmbeddedAdsDuration(), _local5.getEndTimePosition()].join("\t")));
                    _local7.add(_local5);
                } else {
                    trace(((("NOT ADDING SLOT BECAUSE :\n" + ["getTimePosition()", "getTimePositionClass()", "getTotalDuration()"].join("\t")) + "\n") + [_local5.getTimePosition(), _local5.getTimePositionClass(), _local5.getTotalDuration(), _local5.getTotalDuration(true)].join("\t")));
                };
                _local6++;
            };
            return (_local3);
        }
        protected function cuePrerolls():void{
            this.preRollList = this.indexNonTimelineSlots(this.constants.TIME_POSITION_CLASS_PREROLL, 0);
            this.hasPrerolls = (this.preRollList.entries.length > 0);
            this.preRollList.setCounts();
        }
        protected function cueDisplays():void{
            this.displayAdList = this.indexNonTimelineSlots(this.constants.TIME_POSITION_CLASS_DISPLAY, 0);
            this.hasDisplays = (this.displayAdList.length > 0);
        }
        protected function cuePostrolls():void{
            this.postRollList = this.indexNonTimelineSlots(this.constants.TIME_POSITION_CLASS_POSTROLL, -1);
            this.hasPostrolls = (this.postRollList.entries.length > 0);
            this.postRollList.setCounts();
        }
        protected function cueMidrolls(tl:TimelineMetadata):void{
            this.midRollIndices = this.indexTimelineSlots(this.constants.TIME_POSITION_CLASS_MIDROLL, tl);
            var _local2:int;
            while (_local2 < this.midRollIndices.length) {
                this.midRollIndices[_local2].setCounts();
                if (this.midRollIndices[_local2].adCount == 0){
                    this.midRollIndices.splice(_local2, 1);
                    _local2--;
                };
                _local2++;
            };
            this.hasMidrolls = (this.midRollIndices.length > 0);
        }
        protected function cuePauseMidrolls(tl:TimelineMetadata):void{
            this.pausemidRollIndices = this.indexTimelineSlots(this.constants.TIME_POSITION_CLASS_PAUSE_MIDROLL, tl);
            this.hasPausemidrolls = (this.pausemidRollIndices.length > 0);
            var _local2:int;
            while (_local2 < this.pausemidRollIndices.length) {
                this.pausemidRollIndices[_local2].setCounts();
                _local2++;
            };
        }
        protected function cueOverlays(tl:TimelineMetadata):void{
            this.midRollOverlayIndices = this.indexTimelineSlots(this.constants.TIME_POSITION_CLASS_OVERLAY, tl);
            this.hasOverlays = (this.midRollOverlayIndices.length > 0);
            var _local2:int;
            while (_local2 < this.midRollOverlayIndices.length) {
                this.midRollOverlayIndices[_local2].setCounts();
                _local2++;
            };
        }
        protected function cloneMedia():MediaElement{
            var _local2:URLResource;
            var _local6:StreamingURLResource;
            var _local1:URLResource = (this.loadTrait.resource as URLResource);
            if ((_local1 is StreamingURLResource)){
                _local6 = (_local1 as StreamingURLResource);
                _local2 = new StreamingURLResource(_local6.url, _local6.streamType, _local6.clipStartTime, _local6.clipEndTime, _local6.connectionArguments, _local6.urlIncludesFMSApplicationInstance, _local6.drmContentData);
            } else {
                _local2 = new URLResource(_local1.url);
            };
            var _local3:Vector.<String> = _local1.metadataNamespaceURLs;
            var _local4:int;
            while (_local4 < _local3.length) {
                if (_local3[_local4] != FreewheelLoader.NAME_SPACE){
                    _local2.addMetadataValue(_local3[_local4], _local1.getMetadataValue(_local3[_local4]));
                };
                _local4++;
            };
            if (cloneMediaMetadataFunction != null){
                cloneMediaMetadataFunction(_local2);
            };
            var _local5:MediaElement = this.mediaFactory.createMediaElement(_local2);
            if (_local1.getMetadataValue(OSMFPlayableItemMetadata.RTE_NAMESPACE_URL)){
                _local5.addMetadata(OSMFPlayableItemMetadata.RTE_NAMESPACE_URL, (_local1.getMetadataValue(OSMFPlayableItemMetadata.RTE_NAMESPACE_URL) as Metadata));
            };
            return (_local5);
        }
        private function onPauseStateChangeRequest(evt:IEvent):void{
            trace((("onPauseStateChangeRequest(" + evt.videoPause) + ")"));
            if (evt.videoPause){
                this.pauseContent(false);
            } else {
                this.playContent();
            };
            this.rootMedia.setRTEMetadata();
        }
        private function pauseContent(andAddUnPauseListener:Boolean):void{
            var _local2:TimeTrait;
            var _local3:PlayTrait;
            if (this.isContentOnTimeline()){
                _local2 = (this.contentMedia.getTrait(MediaTraitType.TIME) as TimeTrait);
                _local3 = (this.contentMedia.getTrait(MediaTraitType.PLAY) as PlayTrait);
                if (((_local3) && ((_local3.playState == PlayState.PLAYING)))){
                    if (andAddUnPauseListener){
                        _local3.addEventListener(PlayEvent.PLAY_STATE_CHANGE, this.stopUnPauseIfAdvert);
                    };
                    _local3.pause();
                    this.dispatchVideoStatus(this.constants.VIDEO_STATUS_PAUSED);
                };
                this.resumeTime = ((_local2) ? _local2.currentTime : NaN);
            };
            this.playAdWhenReady();
        }
        private function playContent():void{
            var _local3:PlayTrait;
            this.cleanupPlayingAd();
            var _local1:Boolean;
            if (((this.timelineMedia) && (this.contentMedia))){
                if (!this.isContentOnTimeline()){
                    this.timelineMedia.addChild(this.contentMedia);
                };
                if (useClipResetSeeking){
                    _local1 = this.rootMedia.checkForDeferral(this.resumeTime);
                };
            };
            this.resumeTime = NaN;
            var _local2:LoadTrait = (this.contentMedia.getTrait(MediaTraitType.LOAD) as LoadTrait);
            if (_local2.loadState == LoadState.UNINITIALIZED){
                _local2.load();
            };
            if (this.isContentOnTimeline()){
                _local3 = (this.contentMedia.getTrait(MediaTraitType.PLAY) as PlayTrait);
                if (_local3){
                    _local3.removeEventListener(PlayEvent.PLAY_STATE_CHANGE, this.stopUnPauseIfAdvert);
                    if (((!(_local1)) && ((_local3.playState == PlayState.PAUSED)))){
                        _local3.play();
                    };
                };
                this.dispatchVideoStatus(this.constants.VIDEO_STATUS_PLAYING);
            };
        }
        protected function cleanupPlayingAd():void{
            var dob:* = null;
            trace("CLEAN UP PLAYING AD");
            if (this.playingAd){
                dob = (this.playingAd.getTrait(MediaTraitType.DISPLAY_OBJECT) as DisplayObjectTrait);
                if (this.playingAd.playState == PlayState.PLAYING){
                    trace("STOPPED PLAYING AD");
                    this.playingAd.stop();
                };
                if (this.rootMedia.currentChild == this.playingAd){
                    trace("REMOVED FROM ROOTMEDIA");
                    this.rootMedia.removeChild(this.playingAd);
                } else {
                    if (((this.timelineMedia) && ((this.timelineMedia.getChildIndex(this.playingAd) > -1)))){
                        trace("REMOVED FROM TIMELINEMEDIA");
                        this.timelineMedia.removeChild(this.playingAd);
                    };
                };
                if (dob){
                    try {
                        dob.dispose();
                    } catch(e:Error) {
                        trace("COULD NOT DISPOSE");
                    };
                };
                this.playingAd = null;
            };
            trace("ALL DONE");
            this.lastAdId = -1;
        }
        public function get playingAd():FWSlotElement{
            return (this._playingAd);
        }
        public function set playingAd(value:FWSlotElement):void{
            if (this._playingAd){
                this.setAdListener(false);
            };
            this._playingAd = value;
            if (this._playingAd){
                this.setAdListener(true);
            };
        }
        protected function setAdListener(on:Boolean):void{
            var _local2:Array = [[MediaElementEvent.TRAIT_ADD, this.adAddTrait], [MediaElementEvent.TRAIT_REMOVE, this.adRemoveTrait]];
            var _local3:int;
            while (_local3 < _local2.length) {
                if (on){
                    this.listenAllAdTraits(this.playingAd.traitTypes);
                    this.playingAd.addEventListener(_local2[_local3][0], _local2[_local3][1]);
                } else {
                    this.unlistenAllAdTraits(this.playingAd.traitTypes);
                    this.playingAd.removeEventListener(_local2[_local3][0], _local2[_local3][1]);
                };
                _local3++;
            };
        }
        protected function listenAllAdTraits(vs:Vector.<String>):void{
            while (vs.length) {
                this.listenAdTrait(vs.pop());
            };
        }
        protected function unlistenAllAdTraits(vs:Vector.<String>):void{
            while (vs.length) {
                this.unlistenAdTrait(vs.pop());
            };
        }
        protected function adAddTrait(event:MediaElementEvent):void{
            this.listenAdTrait(event.traitType);
        }
        protected function adRemoveTrait(event:MediaElementEvent):void{
            this.unlistenAdTrait(event.traitType);
        }
        protected function listenAdTrait(type:String):void{
            switch (type){
                case MediaTraitType.BUFFER:
                    this.playingAd.getTrait(type).addEventListener(BufferEvent.BUFFERING_CHANGE, this.bufferChange);
                    this.playingAd.getTrait(type).addEventListener(BufferEvent.BUFFERING_CHANGE, this.bufferingChange);
                    break;
            };
        }
        protected function unlistenAdTrait(type:String):void{
            switch (type){
                case MediaTraitType.BUFFER:
                    this.playingAd.getTrait(type).removeEventListener(BufferEvent.BUFFERING_CHANGE, this.bufferChange);
                    this.playingAd.getTrait(type).removeEventListener(BufferEvent.BUFFERING_CHANGE, this.bufferingChange);
                    break;
            };
        }
        protected function bufferChange(event:BufferEvent):void{
            trace(((("BUFFER CHANGE" + event.bufferTime) + "\n") + event));
        }
        protected function bufferingChange(event:BufferEvent):void{
            trace(((("BUFFERING CHANGE " + event.buffering) + "\n") + event));
        }
        private function rteMetadata():Metadata{
            if (!this.currentlyPlaying()){
                return (null);
            };
            return (this.currentlyPlaying().getMetadata(OSMFPlayableItemMetadata.RTE_NAMESPACE_URL));
        }
        public function get adIndex():int{
            var _local1:Metadata = this.rteMetadata();
            if (!_local1){
                return (0);
            };
            return (int(_local1.getValue(OSMFPlayableItemMetadata.AD_INDEXKEY)));
        }
        public function get adCount():int{
            var _local1:Metadata = this.rteMetadata();
            if (!_local1){
                return (0);
            };
            return (int(_local1.getValue(OSMFPlayableItemMetadata.AD_COUNTKEY)));
        }
        public function get itemStart():int{
            var _local1:Metadata = this.rteMetadata();
            if (!_local1){
                return (0);
            };
            return (int(_local1.getValue(OSMFPlayableItemMetadata.STARTPOINTKEY)));
        }
        public function get itemEnd():int{
            var _local1:Metadata = this.rteMetadata();
            if (!_local1){
                return (0);
            };
            if (this.isAdvert){
                return (this.itemStart);
            };
            return ((this.itemStart + int(_local1.getValue(OSMFPlayableItemMetadata.DURATIONKEY))));
        }
        public function get adDuration():Number{
            if (!this.isAdvert){
                return (0);
            };
            if (this.currentAdClipDetails){
                return ((this.currentAdClipDetails.clipDurationInMilliseconds * 1000));
            };
            return (1);
        }
        public function get adPosition():Number{
            var _local1:TimeTrait;
            if (!this.isAdvert){
                return (0);
            };
            if (((this.playingAd) && (this.currentAdClipDetails))){
                _local1 = (this.playingAd.getTrait(MediaTraitType.TIME) as TimeTrait);
                if (_local1){
                    return ((_local1.currentTime - this.currentAdClipDetails.adTimelineStartOffset));
                };
            } else {
                trace("AD NOT YET READY IN POSITION");
            };
            return (0);
        }
        public function get adUrl():String{
            var _local1:Metadata;
            if (this.isAdvert){
                _local1 = this.rteMetadata();
                if (_local1){
                    return (_local1.getValue(OSMFPlayableItemMetadata.AD_MEDIA_URL));
                };
            };
            return (null);
        }
        public function get isAdvert():Boolean{
            if (!this.currentlyPlaying()){
                return (false);
            };
            return ((this.currentlyPlaying() is FWSlotElement));
        }
        private function recurse(me:MediaElement):FWSlotElement{
            if ((me is FWSlotElement)){
                return ((me as FWSlotElement));
            };
            if ((me is ProxyElement)){
                return (this.recurse((me as ProxyElement).proxiedElement));
            };
            return (null);
        }
        private function onSlotEnded(evt:IEvent):void{
            var _local2:int;
            var _local3:FWSlotElement;
            trace(((("onSlotEnded " + evt.slotCustomId) + " ") + evt.type));
            if (((this.playingAd) && ((this.playingAd.customId == evt.slotCustomId)))){
                trace("Found match for playingAd, cleaning up");
                if (this.timelineMedia){
                    _local2 = (this.timelineMedia.numChildren - 1);
                    while (_local2 > -1) {
                        _local3 = this.recurse(this.timelineMedia.getChildAt(_local2));
                        if (_local3){
                            this.timelineMedia.removeChildAt(_local2);
                        };
                        _local2--;
                    };
                };
                if ((((this.loadTrait.loadState == LoadState.UNINITIALIZED)) || ((this.loadTrait.loadState == LoadState.UNLOADING)))){
                    trace("DO NOT RETURN TO PLAY WHEN UNLOADED");
                    return;
                };
                this.cueNext();
            } else {
                trace("Not ending slot as not the currently plaing ad.");
            };
        }
        public function checkSeek(contentPosition:Number, seekTime:Number):Boolean{
            var _local4:AdBreakContentList;
            if (contentPosition > seekTime){
                return (false);
            };
            if (seekTime < this._doNotPlayAdvertsBefore){
                this._doNotPlayAdvertsBefore = 0;
            };
            var _local3:Vector.<AdBreakContentList> = this.findSlotsBetween(contentPosition, seekTime);
            if (_local3.length){
                while (_local3.length) {
                    _local4 = _local3.pop();
                    if (this.checkIfPlayable(_local4)){
                        trace(("PLAYING " + _local4));
                        return (this.cueSlot(_local4));
                    };
                };
            };
            return (false);
        }
        private function cueSlot(adBreak:AdBreakContentList):Boolean{
            var _local2:Boolean;
            if (((((adBreak) && (adBreak.entries.length))) && (this.checkIfPlayable(adBreak)))){
                this.toCue = adBreak.entries.concat();
                _local2 = this.cueNext();
                return (_local2);
            };
            return (false);
        }
        private function checkIfPlayable(adBreak:AdBreakContentList):Boolean{
            if ((((this.MAX_SLOT_PLAYS > 0)) && ((adBreak.playCount >= this.MAX_SLOT_PLAYS)))){
                return (false);
            };
            if (((this._doNotPlayAdvertsBefore) && ((adBreak.time < this._doNotPlayAdvertsBefore)))){
                return (false);
            };
            return (true);
        }
        private function onCuePoint(evt:TimelineMetadataEvent):void{
            var _local2 = (evt.marker.time < this._doNotPlayAdvertsBefore);
            trace(((("onCuePoint(" + evt.marker.time) + ") against do not play time of ") + this._doNotPlayAdvertsBefore));
            this._doNotPlayAdvertsBefore = 0;
            if (_local2){
                trace("Skipping as _doNotPlayAdvertsBefore in place");
                return;
            };
            this.cueSlot(this.findMidrollByName((evt.marker as CuePoint).name));
        }
        protected function cueNext():Boolean{
            var _local1:String;
            var _local2:ISlot;
            trace("CUE NEXT");
            if (this.toCue){
                _local1 = this.toCue.shift();
                trace(("ADDING SLOT " + _local1));
                _local2 = this.adManager.getSlotByCustomId(_local1);
                if (_local2){
                    return (this.playThisSlotOnTimelineMedia(_local2));
                };
            };
            this.returnToPlay();
            return (false);
        }
        protected function ensureContentIsPausedWhilePlayingAd():void{
            if (this.isContentOnTimeline()){
                trace("REMOVING CHILD");
                this.pauseContent(true);
                this.timelineMedia.removeChild(this.contentMedia);
            };
        }
        protected function playThisSlotOnTimelineMedia(slot:ISlot):Boolean{
            var _local2:AdBreakContentList;
            var _local3:IAdInstance;
            var _local4:FWSlotElement;
            if (slot){
                _local2 = this.findSlotHolder(slot);
                if (_local2){
                    trace(((("REGISTER PLAY ON " + _local2) + " FOR ") + slot));
                    _local2.registerPlay();
                };
                _local3 = slot.getAdInstances(true)[0];
                if (_local3){
                    slot.play();
                    this.ensureContentIsPausedWhilePlayingAd();
                    _local4 = new FWSlotElement(this.adManager, slot);
                    this.setMetadata(_local4, slot, slot.getTimePositionClass());
                    this.playingAd = _local4;
                    this.setPlayingPlayerInsight(_local3);
                    this.timelineMedia.addChild(_local4);
                    this.playAdWhenReady();
                    return (true);
                };
            } else {
                throw (new Error("NO SLOT FOUND!"));
            };
            return (false);
        }
        protected function playAdWhenReady():void{
            if (!this.playingAd){
                trace("NO AD IN PLAY AD WHEN READY");
                return;
            };
            if (this.playingAd.playState == null){
                this.playingAd.addEventListener(MediaElementEvent.TRAIT_ADD, this.playAdWhenReadyListener);
            } else {
                if (this.playingAd.playState != PlayState.PLAYING){
                    this.playingAd.play();
                };
            };
        }
        protected function playAdWhenReadyListener(event:MediaElementEvent):void{
            if (event.traitType == MediaTraitType.PLAY){
                event.target.removeEventListener(MediaElementEvent.TRAIT_ADD, this.playAdWhenReadyListener);
                if (((!(this.isUnloaded())) && (this.playingAd))){
                    this.playingAd.play();
                };
            };
        }
        protected function stopUnPauseIfAdvert(event:PlayEvent):void{
            var _local2:PlayTrait = (event.target as PlayTrait);
            if (((!((event.playState == PlayState.PAUSED))) && (this.isAdvert))){
                trace("PAUSING FROM UNPAUSE");
                _local2.pause();
            };
        }
        protected function isContentOnTimeline():Boolean{
            return (((((this.timelineMedia) && (this.contentMedia))) && ((this.timelineMedia.getChildIndex(this.contentMedia) > -1))));
        }
        protected function returnToPlay():void{
            var _local3:TimeTrait;
            this.sendStopped();
            this.cleanupPlayingAd();
            var _local1:Boolean = this.rootMedia.playingPostRoll;
            if (_local1){
                trace("ENDING STREAM AS POSTROLL");
                _local3 = (this.rootMedia.getTrait(MediaTraitType.TIME) as TimeTrait);
                if (_local3){
                    _local3.dispatchEvent(new TimeEvent(TimeEvent.COMPLETE));
                };
                return;
            };
            var _local2:PlayTrait = (this.contentMedia.getTrait(MediaTraitType.PLAY) as PlayTrait);
            if (_local2){
                _local2.pause();
            };
            this.playContent();
        }
        protected function findMidrollByName(name:String):AdBreakContentList{
            var _local2:int;
            _local2 = 0;
            while (_local2 < this.midRollIndices.length) {
                if (this.midRollIndices[_local2].name == name){
                    return (this.midRollIndices[_local2]);
                };
                _local2++;
            };
            _local2 = 0;
            while (_local2 < this.midRollOverlayIndices.length) {
                if (this.midRollOverlayIndices[_local2].name == name){
                    return (this.midRollOverlayIndices[_local2]);
                };
                _local2++;
            };
            return (null);
        }
        protected function setMetadata(fw:FWSlotElement, slot:ISlot, type:String, overrideSlots:AdBreakContentList=null):void{
            var _local5:AdBreakContentList;
            var _local9:Metadata;
            if (overrideSlots){
                _local5 = overrideSlots;
            } else {
                switch (type){
                    case this.constants.TIME_POSITION_CLASS_PREROLL:
                        _local5 = this.preRollList;
                        break;
                    case this.constants.TIME_POSITION_CLASS_PAUSE_MIDROLL:
                        _local5 = this.findSlots(slot.getTimePosition(), this.pausemidRollIndices);
                        break;
                    case this.constants.TIME_POSITION_CLASS_OVERLAY:
                        _local5 = this.findSlots(slot.getTimePosition(), this.midRollOverlayIndices);
                        break;
                    case this.constants.TIME_POSITION_CLASS_MIDROLL:
                        _local5 = this.findSlots(slot.getTimePosition(), this.midRollIndices);
                        break;
                    case this.constants.TIME_POSITION_CLASS_POSTROLL:
                        _local5 = this.postRollList;
                        break;
                        trace(("WHY AM I HERE? " + type));
                };
            };
            var _local6:int = _local5.find(slot);
            var _local7:int = this.findSlotsIndex(_local5);
            var _local8:int = this.findClipCount(_local5, slot);
            _local9 = new Metadata();
            _local9.addValue(OSMFPlayableItemMetadata.AUDIOKEY, false);
            _local9.addValue(OSMFPlayableItemMetadata.STINGKEY, false);
            _local9.addValue(OSMFPlayableItemMetadata.ADVERTISINGKEY, true);
            _local9.addValue(OSMFPlayableItemMetadata.AD_INDEXKEY, 0);
            _local9.addValue(OSMFPlayableItemMetadata.AD_COUNTKEY, slot.getAdCount());
            trace(((("CALCULATED: " + _local5.calculateElapsed(slot)) + " ") + _local5.calculateDuration()));
            _local9.addValue(OSMFPlayableItemMetadata.AD_POD_START_KEY, _local5.calculateElapsed(slot));
            _local9.addValue(OSMFPlayableItemMetadata.AD_POD_DURATION_KEY, _local5.calculateDuration());
            _local9.addValue(OSMFPlayableItemMetadata.INDEXKEY, _local8);
            _local9.addValue(OSMFPlayableItemMetadata.PLAYLISTLENGTH, this.rootMedia.contentOnlyDuration());
            _local9.addValue(OSMFPlayableItemMetadata.STARTPOINTKEY, slot.getTimePosition());
            _local9.addValue(OSMFPlayableItemMetadata.DURATIONKEY, slot.getTotalDuration());
            _local9.addValue(OSMFPlayableItemMetadata.ENDPOINTKEY, slot.getTimePosition());
            fw.addMetadata(OSMFPlayableItemMetadata.RTE_NAMESPACE_URL, _local9);
        }
        protected function startIndexOfSlot(slot:ISlot):int{
            var _local6:int;
            var _local7:int;
            var _local2:AdBreakContentList = this.findSlotHolder(slot);
            var _local3:int;
            var _local4:Vector.<AdBreakContentList> = new Vector.<AdBreakContentList>();
            if (this.preRollList){
                _local4.push(this.preRollList);
            } else {
                _local3--;
            };
            if (this.midRollIndices){
                _local4.concat(this.midRollIndices);
            };
            if (this.postRollList){
                _local4.concat(this.postRollList);
            };
            var _local5:int;
            while (_local5 < _local4.length) {
                _local3++;
                if (_local2 == _local4[_local5]){
                    _local6 = _local2.find(slot);
                    _local7 = 0;
                    while (_local7 < _local6) {
                        _local3 = (_local3 + _local2.slots[_local7].getAdCount());
                        _local7++;
                    };
                    return (_local3);
                };
                _local3 = (_local3 + _local4[_local5].adCount);
                _local5++;
            };
            return (-1);
        }
        protected function countAllAds():int{
            var _local1 = 0;
            if (this.preRollList){
                _local1 = (_local1 + this.preRollList.adCount);
            };
            var _local2:int;
            while (_local2 < this.midRollIndices.length) {
                _local1 = (_local1 + this.midRollIndices[_local2].adCount);
                _local2++;
            };
            if (this.postRollList){
                _local1 = (_local1 + this.postRollList.adCount);
            };
            return (_local1);
        }
        protected function findSlotHolder(slot:ISlot):AdBreakContentList{
            var _local3:int;
            var _local2 = -1;
            if (this.preRollList){
                _local2 = this.preRollList.find(slot);
            };
            if (_local2 > -1){
                return (this.preRollList);
            };
            if (this.midRollIndices){
                _local3 = 0;
                while (_local3 < this.midRollIndices.length) {
                    _local2 = this.midRollIndices[_local3].find(slot);
                    if (_local2 > -1){
                        return (this.midRollIndices[_local3]);
                    };
                    _local3++;
                };
            };
            if (this.postRollList){
                _local2 = this.postRollList.find(slot);
            };
            if (_local2 > -1){
                return (this.postRollList);
            };
            return (null);
        }
        protected function findSlotsBetween(start:Number, end:Number):Vector.<AdBreakContentList>{
            var _local4:int;
            var _local3:Vector.<AdBreakContentList> = new Vector.<AdBreakContentList>();
            if (this.midRollIndices){
                _local4 = 0;
                while (_local4 < this.midRollIndices.length) {
                    trace(((((("CHECK\t" + start) + "\t") + this.midRollIndices[_local4].time) + "\t") + end));
                    if ((((start <= this.midRollIndices[_local4].time)) && ((end >= this.midRollIndices[_local4].time)))){
                        _local3.push(this.midRollIndices[_local4]);
                    };
                    _local4++;
                };
            };
            return (_local3);
        }
        protected function findSlots(time:Number, source:Vector.<AdBreakContentList>):AdBreakContentList{
            var _local3:int;
            while (_local3 < source.length) {
                if (time == source[_local3].time){
                    trace(((("MATCHED TIME OF " + time) + " WITH ") + source[_local3]));
                    return (source[_local3]);
                };
                _local3++;
            };
            throw (new Error(((("Couldn't match time of " + time) + " with ") + source)));
        }
        protected function findSlotsIndex(slots:AdBreakContentList):int{
            var _local3:int;
            var _local2:int;
            if (this.hasPrerolls){
                if (slots == this.preRollList){
                    return (0);
                };
                _local2++;
            };
            if (this.hasMidrolls){
                _local3 = 0;
                while (_local3 < this.midRollIndices.length) {
                    if (slots == this.midRollIndices[_local3]){
                        return (_local2);
                    };
                    _local2++;
                    _local3++;
                };
            };
            if (this.hasPostrolls){
                if (slots == this.postRollList){
                    return (_local2);
                };
            };
            return (0);
        }
        protected function findClipCount(slots:AdBreakContentList, slot:ISlot):int{
            var _local4:int;
            var _local3:int;
            if (this.hasPrerolls){
                if (slots == this.preRollList){
                    return (this.preRollList.find(slot));
                };
                _local3 = (_local3 + this.preRollList.entries.length);
            };
            if (this.hasMidrolls){
                _local4 = 0;
                while (_local4 < this.midRollIndices.length) {
                    if (slots == this.midRollIndices[_local4]){
                        return ((_local3 + this.midRollIndices[_local4].find(slot)));
                    };
                    _local3 = (_local3 + this.midRollIndices[_local4].entries.length);
                    _local4++;
                };
            };
            if (this.hasPostrolls){
                if (slots == this.postRollList){
                    return ((_local3 + this.postRollList.find(slot)));
                };
            };
            return (_local3);
        }
        public function generateElement():MediaElement{
            var _local1:FreewheelPreAndPostAndMidRollElement = new FreewheelPreAndPostAndMidRollElement(new FreewheelLoader());
            return (_local1);
        }

    }
}//package rte.osmf.freewheel 

import __AS3__.vec.*;
import tv.freewheel.ad.behavior.*;

class AdBreakContentList {

    private var _adCount:int;
    public var slots:Vector.<ISlot>;
    public var name:String;
    public var type:String;
    public var time:Number;
    private var _playCount:int = 0;
    public var entries:Vector.<String>;

    public function AdBreakContentList(_name:String, _type:String, _time:Number){
        this.name = _name;
        this.type = _type;
        this.time = _time;
        this.entries = new Vector.<String>();
        this.slots = new Vector.<ISlot>();
    }
    public function setCounts():void{
        var _local3:ISlot;
        var _local1 = 0;
        var _local2:int;
        while (_local2 < this.slots.length) {
            _local3 = this.slots[_local2];
            _local1 = (_local1 + _local3.getAdCount());
            _local2++;
        };
        this._adCount = int(_local1);
    }
    public function get adCount():int{
        return (this._adCount);
    }
    public function calculateElapsed(slot:ISlot):Number{
        var _local5:Number;
        var _local2:int = this.find(slot);
        var _local3 = 0;
        var _local4:int;
        while (_local4 < _local2) {
            slot = this.slots[_local4];
            _local5 = slot.getTotalDuration(true);
            if (((isFinite(_local5)) && ((_local5 > 0)))){
                _local3 = (_local3 + _local5);
            };
            _local4++;
        };
        return (_local3);
    }
    public function calculateDuration():Number{
        var _local3:ISlot;
        var _local4:Number;
        var _local1 = 0;
        var _local2:int;
        while (_local2 < this.slots.length) {
            _local3 = this.slots[_local2];
            _local4 = _local3.getTotalDuration(true);
            if (((isFinite(_local4)) && ((_local4 > 0)))){
                _local1 = (_local1 + _local4);
            };
            _local2++;
        };
        return (_local1);
    }
    public function findId(id:String):int{
        return (this.entries.indexOf(id));
    }
    public function find(slot:ISlot):int{
        return (this.entries.indexOf(slot.getCustomId()));
    }
    public function add(slot:ISlot):void{
        this.slots.push(slot);
        this.entries.push(slot.getCustomId());
    }
    public function get length():int{
        return (this.entries.length);
    }
    public function get playCount():int{
        return (this._playCount);
    }
    public function registerPlay():void{
        this._playCount++;
    }
    public function toString():String{
        return ((((((((("[" + this.type) + " played ") + this.playCount) + " times at ") + this.time) + " seconds ") + this.entries.join(",")) + "]"));
    }

}
﻿package rte.osmf {
    import org.osmf.media.*;

    public interface IPlaylist {

        function dispose():void;
        function get title():String;
        function get programmeFormType():String;
        function get length():int;
        function getEntryAt(_arg1:int):IPlaylistEntry;
        function get additionalCustomAdTagParameters():Object;
        function set additionalCustomAdTagParameters(_arg1:Object):void;
        function get adTagAppendParameters():Object;
        function set adTagAppendParameters(_arg1:Object):void;
        function generateMediaFromFactory(_arg1:MediaFactory):MediaElement;
        function get currentTerm():String;
        function get isError():Boolean;
        function lastError();
        function getMediaHash():String;
        function get playlistSource():String;
        function get sourceUrl():String;
        function clone():IPlaylist;

    }
}//package rte.osmf 
﻿package rte.osmf.skinshared {
    import flash.events.*;

    public class SkinCommand extends Event {

        public static const PLAY_PAUSE_MEDIA:String = "playPauseMedia";
        public static const REPLAY_MEDIA:String = "replayMedia";
        public static const CLOSED_CAPTIONS:String = "closedCaptions";
        public static const RESUME_MEDIA:String = "resumeMedia";
        public static const VOLUME_CHANGE:String = "volumeChange";
        public static const BITRATE_CHANGE:String = "bitrateChange";
        public static const SEEK_MEDIA:String = "seekMedia";
        public static const SEEK_BY:String = "seekBy";
        public static const SET_ROADBLOCK_OPTIONS:String = "setRoadblockOptions";
        public static const CONFIRM_MATURITY:String = "confirmMaturity";
        public static const SKIP_ADVERT:String = "skipAdvert";

        public var value:Object;

        public function SkinCommand(type:String, value:Object=null, bubbles:Boolean=false, cancelable:Boolean=false){
            super(type, bubbles, cancelable);
            this.value = value;
        }
        override public function clone():Event{
            return (new SkinCommand(type, this.value, bubbles, cancelable));
        }

    }
}//package rte.osmf.skinshared 
﻿package rte.osmf.skinshared {

    public class SkinNotificationErrorCodes {

        public static const PIN_VERIFICATION_FAILED:int = -1111;
        public static const AD_BLOCKER_DETECTED:int = -1112;

    }
}//package rte.osmf.skinshared 
﻿package rte.osmf.skinshared {
    import flash.events.*;

    public class PlayRequest extends Event {

        public static const DO_PLAY_THIS:String = "doPlayThis";

        public var url:String;
        public var streamType:String;
        public var autoStart:Boolean = false;
        public var startPosSeconds:Number;
        public var endPosSeconds:Number;
        public var loadAsFeed:Boolean = true;

        public function PlayRequest(urlV:String=null, streamTypeV:String=null, autoStartV:Boolean=false, loadAsFeedV:Boolean=true, startPosSecondsV:Number=NaN, endPosSecondsV:Number=NaN){
            super(DO_PLAY_THIS, false, false);
            this.url = urlV;
            this.streamType = streamTypeV;
            this.autoStart = autoStartV;
            this.startPosSeconds = startPosSecondsV;
            this.endPosSeconds = endPosSecondsV;
            this.loadAsFeed = loadAsFeedV;
        }
        override public function clone():Event{
            return (new PlayRequest(this.url, this.streamType, this.autoStart, this.loadAsFeed, this.startPosSeconds, this.endPosSeconds));
        }

    }
}//package rte.osmf.skinshared 
﻿package rte.osmf.skinshared {
    import org.osmf.media.*;
    import org.osmf.layout.*;
    import flash.events.*;
    import rte.osmf.*;
    import __AS3__.vec.*;

    public interface ISkin extends ILayoutTarget {

        function handleSetInitVars(_arg1:Object):void;
        function handleSetMedia(_arg1:MediaElement):void;
        function handleCaptionEvent(_arg1:Event):void;
        function get skinVersionKey():String;
        function get playlist():IPlaylistLoader;
        function setPlaylist(_arg1:IPlaylistLoader, _arg2:Object=null):void;
        function notifyVolumeChange(_arg1:Number, _arg2:Boolean):void;
        function notifyPlayPosition(_arg1:Number, _arg2:Number):void;
        function notifyCaptionChange(_arg1:Boolean, _arg2:Boolean):void;
        function notifyUser(_arg1:String, _arg2:String, _arg3:int=0, _arg4:String=""):void;
        function notifyState(_arg1:String, _arg2:int, _arg3:String=""):void;
        function notifyDataRates(_arg1:Boolean, _arg2:Number=NaN, _arg3:Array=null):void;
        function notifyAgeRestriction(_arg1:Boolean):void;
        function notifyCompanions(_arg1:Array=null):void;
        function notifyNowNextChange(_arg1:Boolean):void;
        function notifyTotalDuration(_arg1:Number):void;
        function receiveMetadataChange(_arg1:Boolean, _arg2:Boolean=false, _arg3:Boolean=false, _arg4:Number=NaN, _arg5:Number=NaN, _arg6:int=0, _arg7:int=0, _arg8:Boolean=false, _arg9:Boolean=false, _arg10:Boolean=false, _arg11:Number=NaN, _arg12:Number=NaN, _arg13:Vector.<Number>=null):void;
        function get isFullScreenState():Boolean;
        function set isFullScreenState(_arg1:Boolean):void;
        function setPlayerState(_arg1:String):void;
        function get pinService():IPINServices;
        function set pinService(_arg1:IPINServices):void;

    }
}//package rte.osmf.skinshared 
﻿package rte.osmf.skinshared {
    import flash.events.*;
    import rte.osmf.*;

    public class PlayableItemSelectionEvent extends Event {

        public static const SELECT_ITEM:String = "selectItem";

        public var sp:ShareProperties;

        public function PlayableItemSelectionEvent(type:String, sp:ShareProperties, bubbles:Boolean=false, cancelable:Boolean=false){
            super(type, bubbles, cancelable);
            this.sp = sp;
        }
        override public function clone():Event{
            return (new PlayableItemSelectionEvent(type, this.sp, bubbles, cancelable));
        }

    }
}//package rte.osmf.skinshared 
﻿package rte.osmf {
    import org.osmf.media.*;
    import flash.events.*;
    import __AS3__.vec.*;

    public interface IPlaylistLoader extends IPlaylist, IEventDispatcher {

        function load(_arg1:String):void;
        function get isPlayable():Boolean;
        function get confirmedMaturity():Boolean;
        function set confirmedMaturity(_arg1:Boolean):void;
        function get playInitedFirstTime():Boolean;
        function set playInitedFirstTime(_arg1:Boolean):void;
        function get playbackStarted():Boolean;
        function set playbackStarted(_arg1:Boolean):void;
        function get autoPlay():Boolean;
        function set autoPlay(_arg1:Boolean):void;
        function get toggleBitRateInProgress():Boolean;
        function set toggleBitRateInProgress(_arg1:Boolean):void;
        function get startPos():Number;
        function set startPos(_arg1:Number):void;
        function cuePlaylistFromFactory(_arg1:MediaFactory):MediaElement;
        function getShareProperties(_arg1:Number=NaN, _arg2:int=0, _arg3:String=null):ShareProperties;
        function get entryList():Vector.<ShareProperties>;
        function get showNext():Boolean;
        function get isMatureContent():Boolean;
        function get isReady():Boolean;
        function get relatedContent():IPlaylistLoader;
        function get moreFromThisProgramme():IPlaylistLoader;
        function get scheduleDescription():ScheduleDescription;
        function cloneLoader():IPlaylistLoader;

    }
}//package rte.osmf 
﻿package rte.osmf {

    public class OSMFPlayableItemMetadata {

        public static const RTE_NAMESPACE_URL:String = "http://www.rte.ie/schemas/vod";
        public static const RTE_VAST_DOCUMENT_URL:String = "http://www.rte.ie/schemas/vast";
        public static const VAST_VAST_DOCUMENT:String = "vastDocument";
        public static const AD_INDEXKEY:String = "adIndex";
        public static const AD_COUNTKEY:String = "adCount";
        public static const AD_POD_START_KEY:String = "adPodStartKey";
        public static const AD_POD_DURATION_KEY:String = "adPodDuration";
        public static const AD_DURATION:String = "adDuration";
        public static const AD_MEDIA_URL:String = "adMediaUrl";
        public static const AD_TITLE:String = "adTitle";
        public static const STING_INDEXKEY:String = "stingIndex";
        public static const STING_COUNTKEY:String = "stingCount";
        public static const STINGKEY:String = "sting";
        public static const AUDIOKEY:String = "audio";
        public static const ADVERTISINGKEY:String = "advertising";
        public static const INTERACTIVEADVERTISINGKEY:String = "interactiveadvertising";
        public static const STARTPOINTKEY:String = "startpoint";
        public static const ENDPOINTKEY:String = "endpoint";
        public static const DURATIONKEY:String = "duration";
        public static const MEDIA_METADATA_RECEIVED:String = "mediaMetadataReceived";
        public static const INDEXKEY:String = "index";
        public static const PLAYLISTLENGTH:String = "length";
        public static const PLAYLISTID:String = "playlistid";
        public static const ADDITIONAL_AD_NAMESPACE:String = "http://www.rte.ie/additionalAdParameters/";
        public static const ADDITIONAL_AD_PARAMETERS:String = "additionalAdParameters";
        public static const CUE_POINTS:String = "cuePoints";
        public static const RAW_CUE_POINTS:String = "rawCuePoints";
        public static const CLIPDETAILS:String = "clipdetails";

    }
}//package rte.osmf 
﻿package rte.osmf {

    public class ScheduleDescription {

        public var startDateTime:Date;
        public var endDateTime:Date;

    }
}//package rte.osmf 
﻿package rte.osmf.captionDecoder {
    import flash.events.*;

    public class RTE_CCDecoderCaptionChangeEvent extends Event {

        public static const CAPTIONS_FOUND:String = "captionsFound";
        public static const CAPTION_VISIBILITY_CHANGE:String = "captionVisibilityChange";

        public function RTE_CCDecoderCaptionChangeEvent(type:String, bubbles:Boolean=false, cancelable:Boolean=false){
            super(type, bubbles, cancelable);
        }
        override public function clone():Event{
            return (new RTE_CCDecoderCaptionChangeEvent(type, bubbles, cancelable));
        }

    }
}//package rte.osmf.captionDecoder 
﻿package rte.osmf.captionDecoder {
    import org.osmf.media.*;
    import org.osmf.events.*;
    import org.osmf.layout.*;
    import flash.geom.*;
    import org.osmf.traits.*;
    import org.osmf.elements.*;
    import org.osmf.net.*;
    import __AS3__.vec.*;
    import com.adobe.cc.*;

    public class RTE_CCDecoder extends LayoutTargetSprite {

        public static var BAR_HEIGHT:int = 40;

        private var _enabled:Boolean = false;
        private var _media:MediaElement;
        private var sc:SimpleCCDecoder;
        private var hasCaptionProvider:Boolean = false;
        private var nc:NetClient;
        private var listenedTrait:PlayTrait;
        private var _captionsFound:Boolean = false;

        public function RTE_CCDecoder(layoutMetadata:LayoutMetadata=null){
            if (!layoutMetadata){
                layoutMetadata = new LayoutMetadata();
                layoutMetadata.percentWidth = 100;
                layoutMetadata.percentHeight = 100;
                layoutMetadata.index = int.MAX_VALUE;
            };
            super(layoutMetadata);
            this.sc = new SimpleCCDecoder();
            this.sc.type = CCType.CEA708;
            this.sc.service = CEA708Service.CC1;
            addChild(this.sc.displayObject);
            this.sc.displayObject.visible = this.enabled;
        }
        public function forceHideCaptions(value:Boolean):void{
            if (this.sc){
                this.sc.displayObject.visible = ((!(value)) && (this.enabled));
            };
        }
        public function get enabled():Boolean{
            return (this._enabled);
        }
        public function set enabled(b:Boolean):void{
            if (b == this.enabled){
                return;
            };
            this._enabled = b;
            if (this.sc){
                this.sc.displayObject.visible = this.enabled;
            };
            dispatchEvent(new RTE_CCDecoderCaptionChangeEvent(RTE_CCDecoderCaptionChangeEvent.CAPTION_VISIBILITY_CHANGE));
        }
        public function get media():MediaElement{
            return (this._media);
        }
        public function set media(me:MediaElement):void{
            if (this.media){
                this.stopListening();
                this.media.removeEventListener(MediaElementEvent.TRAIT_ADD, this.checkTraits);
                this.media.removeEventListener(MediaElementEvent.TRAIT_REMOVE, this.checkTraits);
            };
            this._captionsFound = false;
            this._media = me;
            if (this.media){
                trace(("SETTING MEDIA TO " + this.media));
                this.media.addEventListener(MediaElementEvent.TRAIT_ADD, this.checkTraits);
                this.media.addEventListener(MediaElementEvent.TRAIT_REMOVE, this.checkTraits);
                if (this.media.hasTrait(MediaTraitType.PLAY)){
                    this.startListening();
                };
            };
        }
        override public function layout(availableWidth:Number, availableHeight:Number, deep:Boolean=true):void{
            var _local5:Rectangle;
            var _local4:Number = BAR_HEIGHT;
            if (availableWidth < availableHeight){
                _local5 = new Rectangle(0, 0, availableWidth, ((availableHeight * 4) / 3));
                _local5.y = ((availableHeight - _local5.height) / 2);
            } else {
                _local5 = new Rectangle(0, 0, ((availableHeight * 3) / 4), availableHeight);
                _local5.x = ((availableWidth - _local5.width) / 2);
            };
            var _local6 = 1;
            var _local7:Number = 1200;
            var _local8:Number = ((1.25 * (1 - Math.min(1, (_local5.height / _local7)))) + 0.75);
            this.sc.safeAreaHeightPercent = _local6;
            this.sc.videoBounds = _local5;
            this.sc.fontSize = _local8;
            removeChild(this.sc.displayObject);
            super.layout(availableWidth, availableHeight, deep);
            scaleX = (scaleY = 1);
            addChild(this.sc.displayObject);
        }
        protected function checkTraits(event:MediaElementEvent):void{
            if (event.traitType == MediaTraitType.PLAY){
                trace(((((event.traitType + " EVENT CHANGE ") + event.type) + " ") + this.hasCaptionProvider));
                if (event.type == MediaElementEvent.TRAIT_ADD){
                    trace(">>>>> Start");
                    this.startListening();
                } else {
                    if (event.type == MediaElementEvent.TRAIT_REMOVE){
                        trace("<<<<< Stop");
                        this.stopListening();
                    };
                };
            };
        }
        protected function recurseForProxies(element:MediaElement):MediaElement{
            var c:* = null;
            var pe:* = null;
            var n:* = 0;
            var i:* = 0;
            var element:* = element;
            try {
                if ((element is ParallelElement)){
                    pe = (element as ParallelElement);
                    n = pe.numChildren;
                    if (n == 0){
                        return (pe);
                    };
                    if (n == 1){
                        return (pe.getChildAt(0));
                    };
                    i = 0;
                    while (i < pe.numChildren) {
                        c = this.recurseForProxies(pe.getChildAt(i));
                        if (c != pe.getChildAt(i)){
                            trace(("FOUND ONE AT " + i));
                            return (c);
                        };
                        i = (i + 1);
                    };
                    trace("FAILED TO FIND ONE");
                    return (pe.getChildAt(0));
                };
                if ((((element is ProxyElement)) && ((element as ProxyElement).proxiedElement))){
                    return (this.recurseForProxies((element as ProxyElement).proxiedElement));
                };
                if ((((element is SerialElement)) && ((element as SerialElement).currentChild))){
                    return (this.recurseForProxies((element as SerialElement).currentChild));
                };
            } catch(e:Error) {
                return (element);
            };
            return (element);
        }
        protected function recurseForCandidates(element:MediaElement, ve:Vector.<MediaElement>):void{
            var pe:* = null;
            var i:* = 0;
            var me:* = null;
            var element:* = element;
            var ve:* = ve;
            try {
                if ((((element is ProxyElement)) && ((element as ProxyElement).proxiedElement))){
                    ve.push(this.recurseForProxies((element as ProxyElement).proxiedElement));
                };
                if ((((element is SerialElement)) && ((element as SerialElement).currentChild))){
                    ve.push(this.recurseForProxies((element as SerialElement).currentChild));
                };
                if ((((element is ParallelElement)) && ((element as ParallelElement).numChildren))){
                    pe = (element as ParallelElement);
                    i = 0;
                    while (i < pe.numChildren) {
                        me = this.recurseForProxies(pe.getChildAt(i));
                        ve.push(this.recurseForProxies(me));
                        i = (i + 1);
                    };
                };
            } catch(e:Error) {
                trace("ERROR RECURSING FOR CANDIDATES");
            };
        }
        protected function findNetStreams(me:MediaElement):Vector.<NetStreamLoadTrait>{
            var _local5:NetStreamLoadTrait;
            var _local2:Vector.<NetStreamLoadTrait> = new Vector.<NetStreamLoadTrait>();
            var _local3:Vector.<MediaElement> = new Vector.<MediaElement>();
            this.recurseForCandidates(me, _local3);
            var _local4:int;
            while (_local4 < _local3.length) {
                _local5 = this.findNetStreamLoadTrait(_local3[_local4]);
                if (_local5){
                    _local2.push(_local5);
                };
                _local4++;
            };
            return (_local2);
        }
        protected function findNetStreamLoadTrait(me:MediaElement):NetStreamLoadTrait{
            var _local2:NetStreamLoadTrait = (me.getTrait(MediaTraitType.LOAD) as NetStreamLoadTrait);
            if (_local2){
                return (_local2);
            };
            var _local3:LoadFromDocumentElement = (me as LoadFromDocumentElement);
            if (((_local3) && (_local3.proxiedElement))){
                return (this.findNetStreamLoadTrait(_local3.proxiedElement));
            };
            return (null);
        }
        protected function startListening():void{
            var _local2:NetClient;
            trace("START LISTENING CALLED");
            var _local1:Vector.<NetStreamLoadTrait> = this.findNetStreams(this.media);
            if (_local1.length == 1){
                trace("FOUND A NETSTREAM");
                _local2 = (_local1[0].netStream.client as NetClient);
                if (_local2){
                    trace("ADDED TO NC");
                    this.nc = _local2;
                    this.hasCaptionProvider = true;
                    _local2.addHandler("onCaptionInfo", this.onCaptionInfo);
                };
            } else {
                if (_local1.length > 1){
                    throw (new Error("Too many to handle"));
                };
                trace("None found");
                if (this.listenedTrait == null){
                    this.listenedTrait = (this.media.getTrait(MediaTraitType.PLAY) as PlayTrait);
                    if (this.listenedTrait){
                        trace("> add listener");
                        this.listenedTrait.addEventListener(PlayEvent.PLAY_STATE_CHANGE, this.onPlayStateChange);
                    };
                };
            };
        }
        public function get captionsFound():Boolean{
            return (this._captionsFound);
        }
        protected function captionsReceived():void{
            if (!this._captionsFound){
                this._captionsFound = true;
                dispatchEvent(new RTE_CCDecoderCaptionChangeEvent(RTE_CCDecoderCaptionChangeEvent.CAPTIONS_FOUND));
            };
        }
        protected function onCaptionInfo(o:Object):void{
            this.captionsReceived();
            this.sc.onCaptionInfo(o);
        }
        public function checkPlayStateEvenIfNoMediaChange():void{
            if (!this.media){
                return;
            };
            var _local1:PlayTrait = (this.media.getTrait(MediaTraitType.PLAY) as PlayTrait);
            if (((!(_local1)) || (!((_local1.playState == PlayState.PLAYING))))){
                return;
            };
            if (!this.hasCaptionProvider){
                this.startListening();
            };
        }
        protected function onPlayStateChange(event:PlayEvent):void{
            trace(("PLAY STATE CHANGE " + event.playState));
            if (((!(this.hasCaptionProvider)) && ((event.playState == PlayState.PLAYING)))){
                this.startListening();
            };
        }
        protected function stopListening():void{
            trace("STOP LISTENING");
            if (this.listenedTrait){
                this.listenedTrait.removeEventListener(PlayEvent.PLAY_STATE_CHANGE, this.onPlayStateChange);
                this.listenedTrait = null;
            };
            if (this.nc){
                this.nc.removeHandler("onCaptionInfo", this.onCaptionInfo);
                this.nc = null;
            };
            this.hasCaptionProvider = false;
        }

    }
}//package rte.osmf.captionDecoder 
﻿package rte.osmf {

    public class ShareProperties {

        public var programId:String;
        public var itemId:int;
        public var showId:String;
        public var channelId:int = -1;
        public var channelName:String = "";
        public var title:String;
        public var programTitle:String;
        public var itemType:String;
        public var description:String;
        public var thumbnailUrl:String;
        public var isFeed:Boolean = false;
        public var playThisUrl:String;
        public var shareThisUrl:String;
        public var shareThisFromPositionUrl:String;
        public var playPosition:Number;
        public var playStart:Number;
        public var playEnd:Number;
        public var published:Date;
        public var expiryDate:Date;
        public var genre:String = "";
        public var copyright:String = "";
        public var showNext:Boolean = false;
        public var schedule:ScheduleDescription;
        public var isLiveContent:Boolean = false;
        public var isAudioContent:Boolean = false;
        public var isMatureContent:Boolean = false;
        public var mediaRating:String = "GA";

        public function toString():String{
            return ((((("[ShareProperties " + this.title) + " ") + this.published) + "]"));
        }

    }
}//package rte.osmf 
﻿package rte.osmf {

    public interface IPINServices {

        function needsPin():Boolean;
        function checkPin(_arg1:String):Boolean;

    }
}//package rte.osmf 
﻿package rte.osmf.playlist {

    public class AtomPlaylistEntryThumbnail {

        private namespace atom = "http://www.w3.org/2005/Atom";
        private namespace media = "http://search.yahoo.com/mrss/";
        private namespace rte = "http://www.rte.ie/vod/";

        private var _source:XML;

        public function AtomPlaylistEntryThumbnail(source:XML){
            setSource(source);
        }
        public function getSource():XML{
            return (_source);
        }
        public function setSource(x:XML):void{
            _source = x;
        }
        public function get url():String{
            var _local1:String = _source.@url;
            if (!_local1){
                return (null);
            };
            if (_local1.indexOf("black_512x288.png") > -1){
                _local1 = _local1.replace("black_512x288.png", "no_thumbnail_512x288.png");
            };
            return (_local1);
        }
        public function get width():String{
            return (_source.@width);
        }
        public function get height():String{
            return (_source.@height);
        }
        public function toString():String{
            var _local4:int;
            var _local2 = null;
            var _local3:Array = ["url", "width", "height"];
            _local4 = 0;
            while (_local4 < _local3.length) {
                _local2 = new Array(2);
                _local2[0] = _local3[_local4];
                try {
                    _local2[1] = this[_local3[_local4]];
                } catch(e:Error) {
                    _local2[1] = e.message;
                };
                _local3[_local4] = _local2;
                _local4++;
            };
            var _local1:String = (("[AtomPlaylistEntryThumbnail:\n\t" + _local3.join("\n\t")) + "\t]");
            return (_local1);
        }

    }
}//package rte.osmf.playlist 
﻿package rte.osmf.playlist {
    import rte.osmf.*;
    import __AS3__.vec.*;
    import com.adobe.serialization.json.*;
    import com.adobe.utils.*;

    public class JSONPlaylistEntry implements IPlaylistEntry {

        public static var thumbnailReplacePattern:String = "http://img.rasset.ie/[[value]]-512.jpg";

        private var _sourceObject:Object;

        public function JSONPlaylistEntry(object:Object=null){
            var _local2 = null;
            super();
            if (!object){
                return;
            };
            if ((object is String)){
                _local2 = new JSONDecoder(object);
                _sourceObject = _local2.getValue();
            } else {
                _sourceObject = object;
            };
        }
        public static function readDateString(s:String):Date{
            var _local5 = null;
            var _local3 = null;
            var _local4 = null;
            var _local2 = null;
            if (!s){
                return (null);
            };
            try {
                _local5 = s.split("T");
                _local3 = _local5[0].toString().split("-");
                _local4 = _local5[1].toString().split(":");
                _local2 = new Date(_local3[0], (_local3[1] - 1), _local3[2], _local4[0], _local4[1], _local4[2]);
                var _local7 = _local2;
                return (_local7);
            } catch(e:Error) {
            };
            return (null);
        }

        protected function get sourceObject():Object{
            return (_sourceObject);
        }
        public function get source():String{
            return (((sourceObject.source) ? sourceObject.source : ""));
        }
        public function get copyright():String{
            return (sourceObject.provider);
        }
        public function get itemId():int{
            return (sourceObject.itemid);
        }
        public function get showId():String{
            return (sourceObject.showid);
        }
        public function get expiryDate():Date{
            return (readDateString(sourceObject.valid_end));
        }
        public function get id():String{
            return (sourceObject.id);
        }
        public function get showid():String{
            return (sourceObject.showid);
        }
        public function get durationMilliseconds():int{
            return (sourceObject.duration);
        }
        public function get rteBug():String{
            return (sourceObject["rte:bug"]);
        }
        public function get idurl():String{
            return (sourceObject.idurl);
        }
        public function get thumbnail():String{
            return (sourceObject.thumbnail);
        }
        public function get thumbnailUrl():String{
            return (thumbToUrl(thumbnail));
        }
        public function thumbToUrl(value:String):String{
            if (!value){
                return (null);
            };
            if (value.indexOf("://") > -1){
                return (value);
            };
            return (thumbnailReplacePattern.replace("[[value]]", value));
        }
        public function get channelName():String{
            return (sourceObject.channel);
        }
        public function get content():String{
            return (sourceObject.description);
        }
        public function get mediaRating():String{
            return (sourceObject.certcode);
        }
        public function get isMatureContent():Boolean{
            return ((mediaRating == "MA"));
        }
        public function get genreName():String{
            return (sourceObject.genre);
        }
        public function get briNumber():String{
            try {
                var _local2:String = sourceObject.BRINumber;
                return (_local2);
            } catch(e:Error) {
            };
            return ("");
        }
        public function get channelId():int{
            return (sourceObject.channelid);
        }
        public function get itemTypeTitle():String{
            return (sourceObject.item_title);
        }
        public function get programTitle():String{
            if (sourceObject.ptitle){
                return (sourceObject.ptitle);
            };
            return (episodeTitle);
        }
        public function get episodeTitle():String{
            if (sourceObject.title){
                return (sourceObject.title);
            };
            return (sourceObject.name);
        }
        public function get published():Date{
            var _local1:String = correctSourceObject().published;
            if (!_local1){
                return (null);
            };
            if (_local1.indexOf(".") == -1){
                _local1 = (_local1 + ".000+00:00");
            };
            return (DateUtil.parseW3CDTF(_local1));
        }
        protected function correctSourceObject():Object{
            return ((((sourceObject is Array)) ? sourceObject[0] : sourceObject));
        }
        public function get hasSchedule():Boolean{
            return (((scheduleStart) || (scheduleEnd)));
        }
        public function get scheduleDescription():ScheduleDescription{
            if (!hasSchedule){
                return (null);
            };
            var _local1:ScheduleDescription = new ScheduleDescription();
            _local1.startDateTime = scheduleStart;
            _local1.endDateTime = scheduleEnd;
            return (_local1);
        }
        public function get isLiveContent():Boolean{
            var _local1:int;
            if (nowNextType != ""){
                return (true);
            };
            _local1 = 0;
            while (_local1 < mediaItems.length) {
                if (((mediaItems[_local1].isLive) || (mediaItems[_local1].isDVR))){
                    return (true);
                };
                _local1++;
            };
            return (false);
        }
        public function get isAudioContent():Boolean{
            var _local1:int;
            _local1 = 0;
            while (_local1 < mediaItems.length) {
                if (mediaItems[_local1].isAudio){
                    return (true);
                };
                _local1++;
            };
            return (false);
        }
        public function get mediaItems():Vector.<IPlaylistMediaItem>{
            var _local4:int;
            var _local1 = null;
            var _local2:Vector.<IPlaylistMediaItem> = new Vector.<IPlaylistMediaItem>();
            var _local3:Array = sourceObject["media:group"];
            if (_local3){
                _local4 = 0;
                while (_local4 < _local3.length) {
                    _local1 = new JSONPlaylistMediaItem(_local3[_local4]);
                    _local2.push(_local1);
                    _local4++;
                };
            };
            return (_local2);
        }
        public function get supplementalItems():Vector.<IPlaylistMediaItem>{
            var _local4:int;
            var _local1 = null;
            var _local2:Vector.<IPlaylistMediaItem> = new Vector.<IPlaylistMediaItem>();
            var _local3:Array = sourceObject["rte:ads"];
            if (_local3){
                _local4 = 0;
                while (_local4 < _local3.length) {
                    _local1 = new JSONPlaylistMediaItem(_local3[_local4]);
                    _local2.push(_local1);
                    _local4++;
                };
            };
            return (_local2);
        }
        public function get nowNextType():String{
            var _local1:String = ((sourceObject.nownext) ? new String(sourceObject.nownext) : "");
            return (_local1);
        }
        public function get scheduleStart():Date{
            return (null);
        }
        public function get scheduleEnd():Date{
            return (null);
        }
        public function get programmeFormType():String{
            return (null);
        }

    }
}//package rte.osmf.playlist 
﻿package rte.osmf.playlist {
    import rte.osmf.*;
    import __AS3__.vec.*;
    import com.adobe.utils.*;

    public class JSONArrayPlaylistEntry implements IPlaylistEntry {

        protected var _source:Object;

        public function JSONArrayPlaylistEntry(object:Object){
            _source = object;
        }
        public function get id():String{
            return (_source.id);
        }
        public function get itemId():int{
            return (_source.itemid);
        }
        public function get showId():String{
            return (_source.showid);
        }
        public function get briNumber():String{
            try {
                var _local2:String = _source.BRINumber;
                return (_local2);
            } catch(e:Error) {
            };
            return ("");
        }
        public function get channelName():String{
            return (_source.channel);
        }
        public function get channelId():int{
            return (_source.channelId);
        }
        public function get episodeTitle():String{
            return (_source.progName);
        }
        public function get programTitle():String{
            return (episodeTitle);
        }
        public function get itemTypeTitle():String{
            return (null);
        }
        public function get rteBug():String{
            return (_source["rte:bug"]);
        }
        public function get content():String{
            return (_source.description);
        }
        public function get thumbnailUrl():String{
            return (_source.thumbnail);
        }
        public function get scheduleDescription():ScheduleDescription{
            return (null);
        }
        public function get genreName():String{
            return (_source.genre);
        }
        public function get mediaRating():String{
            return (((isMatureContent) ? "MA" : "GA"));
        }
        public function get nowNextType():String{
            var _local1:String = _source.nownext;
            return (_local1);
        }
        public function get isMatureContent():Boolean{
            return ((_source.isAgeRestricted > 0));
        }
        public function get isLiveContent():Boolean{
            return ((_source.apploc == "live"));
        }
        public function get isAudioContent():Boolean{
            var _local1:int;
            _local1 = 0;
            while (_local1 < mediaItems.length) {
                if (mediaItems[_local1].isAudio){
                    return (true);
                };
                _local1++;
            };
            return (false);
        }
        public function get programmeFormType():String{
            return (null);
        }
        public function get published():Date{
            var _local1:String = _source.progDate;
            if (!_local1){
                return (null);
            };
            if (_local1.indexOf(".") == -1){
                _local1 = (_local1 + ".000+00:00");
            };
            return (DateUtil.parseW3CDTF(_local1));
        }
        public function get expiryDate():Date{
            var _local1:String = _source.endDate;
            if (!_local1){
                return (null);
            };
            if (_local1.indexOf(".") == -1){
                _local1 = (_local1 + ".000+00:00");
            };
            return (DateUtil.parseW3CDTF(_local1));
        }
        public function get durationMilliseconds():int{
            return (_source.duration);
        }
        public function get copyright():String{
            return ("RTE");
        }
        public function get mediaItems():Vector.<IPlaylistMediaItem>{
            var _local1:Vector.<IPlaylistMediaItem> = new Vector.<IPlaylistMediaItem>();
            if (this.nowNextType.toLowerCase() != "now"){
                return (_local1);
            };
            var _local2:IPlaylistMediaItem = new JSONArrayPlaylistMediaItem(_source.fullUrl, _source.serverPath, _source.duration, (_source.isRadio == 1), false, isLiveContent);
            _local1.push(_local2);
            return (_local1);
        }
        public function get supplementalItems():Vector.<IPlaylistMediaItem>{
            var _local1:Vector.<IPlaylistMediaItem> = new Vector.<IPlaylistMediaItem>();
            if ((((_source.areAdsAllowed == 0)) || (!(_source.adLocationUrl)))){
                return (_local1);
            };
            var _local2:IPlaylistMediaItem = new JSONArrayPlaylistMediaItem(_source.adLocationUrl, "", 0, false, true, false);
            _local1.push(_local2);
            return (_local1);
        }
        public function get source():String{
            return (((_source.source) ? _source.source : ""));
        }

    }
}//package rte.osmf.playlist 
﻿package rte.osmf.playlist {
    import org.osmf.media.*;
    import flash.utils.*;
    import rte.osmf.*;
    import flash.net.*;
    import flash.external.*;
    import org.osmf.elements.*;
    import rte.playerInsights.*;
    import org.osmf.net.*;
    import rte.osmf.utils.*;
    import org.osmf.metadata.*;
    import __AS3__.vec.*;
    import rte.osmf.freewheel.*;

    public class AbstractSingleFilePlaylist implements IPlaylist {

        public static const CAPTIONING_METADATA_NAMESPACE:String = "http://www.osmf.org/captioning/1.0";
        public static const CAPTIONING_METADATA_KEY_URI:String = "uri";
        public static const CAPTIONING_TEMPORAL_METADATA_NAMESPACE:String = "http://www.osmf.org/temporal/captioning";

        public static var ON_PAUSE_AD_TAG:String;
        public static var CAPTIONING_DEMO_URL:String = "http://server.local/flexdev/RTE_OSMF_Player/timing%20test%20-%2000%20start.xml";
        public static var CAPTIONING_DEMO:Boolean = false;

        private var _additionalCustomAdTagParameters:Object;
        private var _adTagAppendParameters:Object;
        protected var _lastError;
        protected var cuePoints:Vector.<uint>;
        protected var mainClips:Vector.<Object>;
        protected var cuePointCount:uint = 0;
        protected var cueIndex:Dictionary;
        private var _correlator:String;

        public static function processAdTagUrlWith(s:String, pe:IPlaylistEntry, correlator:String, idIfNoExternalInterface:String="unknown", customAdTagParameters:Object=null, appendParameters:Object=null):String{
            var _local20 = null;
            var _local9 = null;
            var _local16 = null;
            var _local12 = null;
            var _local21:int;
            var _local17:int;
            var _local13:Boolean;
            var _local18:int;
            var _local14 = null;
            var _local11 = null;
            var _local8 = null;
            var _local10:int;
            var _local15 = null;
            var _local19 = null;
            var _local7 = null;
            try {
                _local16 = ((ExternalInterface.available) ? ExternalInterface.call("document.location.href.toString") : idIfNoExternalInterface);
                _local21 = s.indexOf("?");
                _local17 = s.indexOf("#");
                _local13 = false;
                _local18 = s.length;
                if (_local21 > -1){
                    _local18 = Math.min(_local21, _local18);
                };
                if (_local17 > -1){
                    _local18 = Math.min(_local17, _local18);
                };
                _local14 = s.substr(0, _local18);
                _local11 = "";
                _local8 = "";
                if ((((_local21 > -1)) && ((_local21 > _local17)))){
                    _local10 = s.length;
                    if (_local17 > -1){
                        _local10 = Math.min((_local17 + 1), _local10);
                    };
                    _local11 = s.substr((_local18 + 1), _local10);
                };
                if (_local17 > -1){
                    _local8 = s.substr((_local17 + 1));
                };
                try {
                    _local15 = new URLVariables(((_local11.length) ? _local11 : null));
                } catch(e:Error) {
                    _local15 = new URLVariables();
                    _local15.ERROR = e.toString();
                };
                _local15.correlator = correlator;
                _local15.url = _local16;
                _local19 = new URLVariables();
                if (customAdTagParameters){
                    for (_local12 in customAdTagParameters) {
                        _local19[_local12] = customAdTagParameters[_local12];
                    };
                };
                if (pe.isLiveContent){
                    _local19.progtitle = (RTEUtils.normaliseStr(pe.episodeTitle) + "-live");
                } else {
                    _local19.progtitle = ((RTEUtils.normaliseStr(pe.episodeTitle) + "-") + RTEUtils.normaliseStr(pe.copyright));
                };
                _local19.genre = RTEUtils.normaliseStr(pe.genreName);
                _local19.provider = RTEUtils.normaliseStr(pe.copyright);
                _local15.cust_params = _local19.toString();
                if (appendParameters){
                    for (_local12 in appendParameters) {
                        _local15[_local12] = appendParameters[_local12];
                    };
                };
                _local11 = _local15.toString();
                _local20 = ((_local14 + "?") + _local11);
                if (_local8){
                    _local20 = (_local20 + ("#" + _local8));
                };
            } catch(e:Error) {
                _local7 = new URLVariables();
                _local7.ERROR = e.toString();
                _local20 = ((s + ((s.indexOf("?"))==-1) ? "?" : "&") + _local7.toString());
            };
            return (_local20);
        }

        public function clone():IPlaylist{
            throw (new Error("MUST OVERRIDE THIS."));
        }
        public function getMediaHash():String{
            throw (new Error("MUST OVERRIDE THIS."));
        }
        public function get title():String{
            return (getQualifiedClassName(this));
        }
        public function getEntryAt(index:int):IPlaylistEntry{
            return (null);
        }
        protected function get entryList():Array{
            return (null);
        }
        public function get length():int{
            return (((entryList) ? entryList.length : 0));
        }
        public function get additionalCustomAdTagParameters():Object{
            return (_additionalCustomAdTagParameters);
        }
        public function set additionalCustomAdTagParameters(o:Object):void{
            _additionalCustomAdTagParameters = o;
        }
        public function get adTagAppendParameters():Object{
            return (_adTagAppendParameters);
        }
        public function set adTagAppendParameters(o:Object):void{
            _adTagAppendParameters = o;
        }
        public function generateMediaFromFactory(mf:MediaFactory):MediaElement{
            if (isError){
                return (null);
            };
            var _local4:IPlaylistEntry = getEntryAt(0);
            if (!_local4){
                throw (new Error("AbstractSingleFilePlaylist found no entry to play in this playlist."));
            };
            if (currentTerm == "next"){
                return (null);
            };
            var _local5:IPlaylistMediaItem = _local4.mediaItems[0];
            var _local6:URLResource = new URLResource(_local5.url);
            var _local3:String = ((_local4.isLiveContent) ? ("" + _local4.channelId) : _local4.id);
            var _local2:MediaElement = metaDataedUpFreewheel(_local5, 0, mf, 1, _local4.thumbnailUrl, 0, 0, 0, _local3);
            return (_local2);
        }
        public function mediaElementToIndices(me:MediaElement):Object{
            var _local3 = null;
            var _local5 = null;
            var _local4:Object = {};
            var _local2:MediaElement = C.recurseForProxies(me);
            if (_local2){
                _local3 = (_local2.resource as URLResource);
                if (_local3){
                    _local5 = _local3.url;
                    trace(("FOUND " + _local5));
                    _local4.url = _local5;
                };
            };
            return (_local4);
        }
        protected function validDuration(n:Number):Number{
            return (((isNaN(n)) ? 0 : Math.max(n, 0)));
        }
        protected function metaDataedUpFreewheel(mi:IPlaylistMediaItem, index:int, mf:MediaFactory, playlistLength:int, thumbnailUrl:String, startOffset:Number, advertisingPodNumber:uint, advertisingPositionNumber:uint, playlistId:String):MediaElement{
            var _local11 = null;
            var _local14 = null;
            var _local12:Metadata = new Metadata();
            _local12.addValue("index", index);
            _local12.addValue("audio", mi.isAudio);
            _local12.addValue("length", playlistLength);
            _local12.addValue("advertising", mi.isAdvertising);
            _local12.addValue("sting", mi.isSting);
            _local12.addValue("startpoint", startOffset);
            _local12.addValue("duration", validDuration(mi.durationSeconds));
            _local12.addValue("endpoint", (startOffset + validDuration(mi.durationSeconds)));
            _local12.addValue("playlistid", playlistId);
            var _local10:MediaResourceBase = mediaItemToResource(mi);
            prepareAdTagResource(_local10);
            FreewheelLoader.prepareForFreewheel(_local10);
            _local10.addMetadataValue("http://www.rte.ie/schemas/vod", _local12);
            var _local13:MediaElement = mf.createMediaElement(_local10);
            _local13.addMetadata("http://www.rte.ie/schemas/vod", _local12);
            if (((!(mi.isAdvertising)) && (mi.isAudio))){
                if (thumbnailUrl){
                    _local11 = new ParallelElement();
                    _local14 = mf.createMediaElement(new URLResource(thumbnailUrl));
                    _local11.addChild(_local14);
                    _local11.addChild(_local13);
                    _local13 = _local11;
                };
            };
            return (_local13);
        }
        protected function metaDataedUp(mi:IPlaylistMediaItem, index:int, mf:MediaFactory, playlistLength:int, thumbnailUrl:String, startOffset:Number, advertisingPodNumber:uint, advertisingPositionNumber:uint):MediaElement{
            var _local13 = null;
            var _local19 = null;
            var _local11:Boolean;
            var _local9:Boolean;
            var _local18 = null;
            var _local10 = null;
            var _local14 = null;
            var _local17 = null;
            var _local15:Metadata = new Metadata();
            _local15.addValue("index", index);
            _local15.addValue("audio", mi.isAudio);
            _local15.addValue("length", playlistLength);
            _local15.addValue("advertising", mi.isAdvertising);
            _local15.addValue("sting", mi.isSting);
            _local15.addValue("startpoint", startOffset);
            _local15.addValue("duration", validDuration(mi.durationSeconds));
            _local15.addValue("endpoint", (startOffset + validDuration(mi.durationSeconds)));
            _local15.addValue("playlistid", id);
            var _local12:MediaResourceBase = mediaItemToResource(mi);
            var _local16:MediaElement = mf.createMediaElement(_local12);
            _local16.addMetadata("http://www.rte.ie/schemas/vod", _local15);
            if (mi.isAdvertising){
                _local13 = getEntryAt(0);
                _local19 = _local13.mediaItems[(_local13.mediaItems.length - 1)];
                _local11 = (_local19.durationMilliseconds <= mi.cue);
                _local9 = (mi.cue == 0);
                _local18 = new AdvertPlayerInsight();
                _local18.contentId = id;
                _local18.position = ((advertisingPodNumber + "_") + advertisingPositionNumber);
                _local18.originatingAdTag = mi.url;
                _local18.preRoll = _local9;
                _local18.postRoll = _local11;
                _local10 = new Metadata();
                _local10.addValue("api", _local18);
                _local16.addMetadata("http://www.makeyuppey.com/advertisingDescriptorsNotTransmitted", _local10);
            };
            if (((!(mi.isAdvertising)) && (mi.isAudio))){
                if (thumbnailUrl){
                    _local14 = new ParallelElement();
                    _local17 = mf.createMediaElement(new URLResource(thumbnailUrl));
                    _local14.addChild(_local17);
                    _local14.addChild(_local16);
                    _local16 = _local14;
                };
            };
            return (_local16);
        }
        protected function onPauseAdInfo(id:String):AdvertPlayerInsight{
            var _local2:AdvertPlayerInsight = new AdvertPlayerInsight();
            _local2.contentId = id;
            _local2.position = "X_1";
            _local2.originatingAdTag = ON_PAUSE_AD_TAG;
            return (_local2);
        }
        protected function setCaptioningInfo(resource:MediaResourceBase):void{
            var _local2:Metadata = new Metadata();
            _local2.addValue("uri", CAPTIONING_DEMO_URL);
            resource.addMetadataValue("http://www.osmf.org/captioning/1.0", _local2);
        }
        protected function mediaItemToResource(mi:IPlaylistMediaItem):MediaResourceBase{
            var _local7 = null;
            var _local6 = null;
            var _local5:*;
            var _local3:String = mi.streamType;
            if ((((mi.url == "null")) || ((mi.url == null)))){
                throw (new Error("OOPS!"));
            };
            if (_local3 == null){
                _local7 = processAdTagUrl(mi.url);
                _local6 = new URLResource(_local7);
                _local6.mimeType = "codingshortcuts/advert";
                return (_local6);
            };
            var _local9:String = mi.url;
            var _local4:Number = mi.start;
            var _local8:Number = mi.end;
            if (((mi.isLive) || (mi.isDVR))){
                _local8 = NaN;
                _local4 = _local8;
            };
            var _local2:StreamingURLResource = new StreamingURLResource(_local9, _local3, _local4, _local8, _local5);
            if (CAPTIONING_DEMO){
                setCaptioningInfo(_local2);
            };
            return (_local2);
        }
        public function get isError():Boolean{
            return (!((_lastError == null)));
        }
        public function lastError(){
            return (_lastError);
        }
        public function dispose():void{
        }
        protected function emptyTempIndexes():void{
            var _local1 = null;
            cuePoints = null;
            if (cueIndex){
                for each (var _local2:Object in cueIndex) {
                    delete cueIndex[_local2];
                };
                cueIndex = null;
            };
            if (mainClips){
                while (mainClips.length) {
                    _local1 = mainClips.pop();
                    _local1.element = null;
                };
            };
            mainClips = null;
        }
        protected function clipDetails(me:MediaElement):PlayingItemClipDetails{
            var _local2:Metadata = (me.getMetadata("http://www.rte.ie/schemas/vod") as Metadata);
            if (!_local2){
                return (null);
            };
            return ((_local2.getValue("clipdetails") as PlayingItemClipDetails));
        }
        public function get id():String{
            return (null);
        }
        public function get playlistSource():String{
            return (null);
        }
        public function get sourceUrl():String{
            return (null);
        }
        public function get currentTerm():String{
            return (getEntryAt(0).nowNextType);
        }
        public function get programmeFormType():String{
            return (getEntryAt(0).programmeFormType);
        }
        public function prepareAdTagResource(url:MediaResourceBase):void{
            var _local4 = null;
            var _local3:Metadata = new Metadata();
            var _local2:IPlaylistEntry = getEntryAt(0);
            var _local5:URLVariables = new URLVariables();
            if (additionalCustomAdTagParameters){
                for (_local4 in additionalCustomAdTagParameters) {
                    _local5[_local4] = additionalCustomAdTagParameters[_local4];
                };
            };
            if (_local2){
                _local3.addValue("genre", RTEUtils.normaliseStr(_local2.genreName));
                _local3.addValue("progtitle", RTEUtils.normaliseStr(_local2.programTitle));
            } else {
                _local3.addValue("unknown", "Not an RTE playlist.");
            };
            _local3.addValue("cust_params", _local5.toString());
            url.addMetadataValue("http://www.rte.ie/additionalAdParameters/", _local3);
        }
        public function processAdTagUrl(s:String):String{
            return (processAdTagUrlWith(s, getEntryAt(0), correlator, id, additionalCustomAdTagParameters, adTagAppendParameters));
        }
        public function get correlator():String{
            if (!_correlator){
                _correlator = new Date().time.toString();
            };
            return (_correlator);
        }

    }
}//package rte.osmf.playlist 
﻿package rte.osmf.playlist {
    import rte.osmf.*;

    public class AtomPlaylistMediaItem extends AbstractPlaylistMediaItem implements IPlaylistMediaItem {

        private namespace atom = "http://www.w3.org/2005/Atom";
        private namespace media = "http://search.yahoo.com/mrss/";
        private namespace rte = "http://www.rte.ie/schemas/vod";

        public var source:XML;

        public function AtomPlaylistMediaItem(source:XML){
            this.source = source;
        }
        public function get data():Object{
            return (source);
        }
        public function get url():String{
            if (((((((source.@hds_server) && (source.@hds_url))) && (source.@hds_server.length()))) && (source.@hds_url.length()))){
                return ((source.@hds_server.valueOf() + source.@hds_url.valueOf()));
            };
            var _local1:String = source.@url.valueOf();
            return (_local1);
        }
        public function get server():String{
            if (((source.@hds_server) && (source.@hds_server.length()))){
                return (source.@hds_server.valueOf());
            };
            return (source.@server.valueOf());
        }
        public function get fileResource():String{
            if (((source.@hds_url) && (source.@hds_url.length()))){
                return (source.@hds_url.valueOf());
            };
            if (url.indexOf(server) > -1){
                return (url.substr(server.length, url.length));
            };
            return (url);
        }
        public function get durationMilliseconds():int{
            return (source.@duration);
        }
        public function get durationSeconds():Number{
            return ((durationMilliseconds / 1000));
        }
        public function get start():Number{
            if (source.@start.length()){
                return (parseTime(source.@start.valueOf()));
            };
            return (NaN);
        }
        public function get end():Number{
            if (source.@end.length()){
                return (parseTime(source.@end.valueOf()));
            };
            return (NaN);
        }
        public function get cue():Number{
            return (source.@cue.valueOf());
        }
        public function set cue(n:Number):void{
            source.@cue = n;
        }
        override public function get format():String{
            return (source.@format.valueOf());
        }
        override public function get medium():String{
            return (source.@medium.valueOf());
        }
        public function toString():String{
            return ((((("[AtomPlaylistMediaItem: " + this.url) + " ") + ((isNaN(cue)) ? "" : ("Cuepoint:" + cue))) + "]"));
        }

    }
}//package rte.osmf.playlist 
﻿package rte.osmf.playlist {
    import rte.osmf.*;

    public class PlaylistFactoryLoader extends AbstractPlaylistLoader {

        private namespace atom = "http://www.w3.org/2005/Atom";
        private namespace media = "http://search.yahoo.com/mrss/";
        private namespace rte = "http://www.rte.ie/schemas/vod";

        public static var deviceType:String = "unknown";
        public static var baseLiveNowNext:String = "http://feeds.rasset.ie/livelistings/nownext/";
        public static var baseFeed:String = "http://dj.rte.ie/rteavgen/player/";
        public static var basePlaylist:String = "http://dj.rte.ie/rteavgen/player/playlist/";
        public static var baseGenreList:String = "http://dj.rte.ie/rteavgen/player/genrelist/";
        public static var baseGenre:String = "http://dj.rte.ie/rteavgen/player/genre/";
        public static var baseChart:String = "http://dj.rte.ie/rteavgen/player/chart/?format=json&type=mobile-iptv&";
        public static var baseProgramme:String = "http://dj.rte.ie/rteavgen/player/programme/";
        public static var baseLatest:String = "http://dj.rte.ie/rteavgen/player/latest/";
        public static var baseLatestFront:String = "http://dj.rte.ie/rteavgen/player/latestfront/";
        public static var baseDateList:String = "http://dj.rte.ie/rteavgen/player/datelist/";
        public static var baseDate:String = "http://dj.rte.ie/rteavgen/player/date/";
        public static var baseAZList:String = "http://dj.rte.ie/rteavgen/player/az/";
        public static var baseLiveListings:String = "http://dj.rte.ie/livelistings/listing/";
        public static var baseLivePlaylist:String = "http://dj.rte.ie/livelistings/playlist/";
        public static var baseCL:String = "http://feeds.rasset.ie/rteavgen/player/cl/";
        public static var baseHelp:String = "http://www.rte.ie/player/";
        public static var baseParental:String = "http://www.rte.ie/tvplayer/help/parental/";

        public function PlaylistFactoryLoader(url:String=null){
            super(url);
        }
        public static function generateFeedUrlFromEntry(entry:IPlaylistEntry):String{
            if (entry.isLiveContent){
                return (generateLivePlaylistUrl(entry.channelId.toString()));
            };
            return (generateShowPlaylistUrl(entry.showId));
        }
        public static function generateLivePlaylistUrl(value:String):String{
            return (((baseLivePlaylist + "?channelid=") + value));
        }
        public static function generateShowPlaylistUrl(value:String):String{
            return (((((basePlaylist + "?type=") + deviceType) + "&format=json&showId=") + value));
        }

        override public function loadFromSource(s:String):void{
            var _local2 = null;
            var _local3 = s.charAt(0);
            while ("<" === _local3) {
                _local2 = new XML(s);
                playlist = new AtomSingleFilePlaylist(_local2);
                //unresolved jump
                playlist = new JSONSingleFilePlaylist(s);
                //unresolved jump
                playlist = new JSONArraySingleFilePlaylist(s);
                //unresolved jump
                throw (new Error("Unrecognised playlist type."));
            };
            //unresolved if
            //unresolved if
            //unresolved jump
            finaliseResult();
        }
        override public function cloneLoader():IPlaylistLoader{
            var _local1:PlaylistFactoryLoader = new PlaylistFactoryLoader();
            _local1.playlist = playlist.clone();
            _local1.finaliseResult();
            return (_local1);
        }
        public function relatedContentUrl(thisProgramme:Boolean, isJson:Boolean):String{
            var _local4:String = "";
            var _local3:IPlaylistEntry = requirePlayableGetPlayable();
            if (thisProgramme){
                _local4 = (_local4 + baseProgramme);
                _local4 = (_local4 + ("?id=" + encodeURIComponent(_local3.episodeTitle)));
            } else {
                _local4 = (_local4 + baseGenre);
                _local4 = (_local4 + ("?id=" + encodeURIComponent(_local3.genreName)));
            };
            if (isJson){
                _local4 = (_local4 + "&type=iptv&format=json");
            };
            return (_local4);
        }
        override public function get relatedContent():IPlaylistLoader{
            var _local2 = (playlist is JSONSingleFilePlaylist);
            var _local3:String = relatedContentUrl(false, _local2);
            var _local1:PlaylistFactoryLoader = new PlaylistFactoryLoader();
            if (((((playlist) && (playlist.length))) && (!((playlist.getEntryAt(0).nowNextType == ""))))){
                _local3 = baseLiveNowNext;
            };
            trace(("Related content, new playlist " + _local3));
            return (new PlaylistFactoryLoader(_local3));
        }
        override public function get moreFromThisProgramme():IPlaylistLoader{
            var _local1 = (playlist is JSONSingleFilePlaylist);
            var _local2:String = relatedContentUrl(true, _local1);
            trace(("More from content, new playlist " + _local2));
            return (new PlaylistFactoryLoader(_local2));
        }

    }
}//package rte.osmf.playlist 
﻿package rte.osmf.playlist {
    import rte.osmf.*;
    import com.adobe.serialization.json.*;
    import com.adobe.crypto.*;

    public class JSONArraySingleFilePlaylist extends AbstractSingleFilePlaylist {

        private var _sourceObject:Array;

        public function JSONArraySingleFilePlaylist(input:String=null){
            if (input){
                setSourceObject(input);
            };
        }
        override public function clone():IPlaylist{
            return (new JSONArraySingleFilePlaylist(getString()));
        }
        protected function getString():String{
            return (new JSONEncoder(_sourceObject).getString());
        }
        override public function getMediaHash():String{
            var _local2 = null;
            var _local1 = null;
            var _local4 = null;
            var _local3 = null;
            try {
                _local2 = getEntryAt(0).mediaItems;
                _local1 = new JSONEncoder(_local2);
                _local4 = _local1.getString();
                _local3 = SHA1.hash(_local4);
                trace(((("JSONArraySingleFilePlaylist getMediaHash " + _local4) + "\n") + _local3));
                var _local6 = _local3;
                return (_local6);
            } catch(e:Error) {
            };
            return (SHA1.hash("NothingFound"));
        }
        override public function getEntryAt(index:int):IPlaylistEntry{
            if (length > index){
                return (new JSONArrayPlaylistEntry(entryList[index]));
            };
            return (null);
        }
        override protected function get entryList():Array{
            return (_sourceObject);
        }
        public function setSourceObject(input:String):void{
            var _local2 = null;
            _lastError = null;
            try {
                _local2 = new JSONDecoder(input);
                _sourceObject = _local2.getValue();
            } catch(e:Error) {
                _lastError = e;
            };
        }
        override public function dispose():void{
            super.dispose();
            additionalCustomAdTagParameters = null;
            _sourceObject = null;
        }

    }
}//package rte.osmf.playlist 
﻿package rte.osmf.playlist {
    import rte.osmf.*;

    public class JSONPlaylistMediaItem extends AbstractPlaylistMediaItem implements IPlaylistMediaItem {

        public var source:Object;

        public function JSONPlaylistMediaItem(source:Object){
            this.source = source;
        }
        public function get url():String{
            return (((server) ? (server + fileResource) : fileResource));
        }
        public function get fileResource():String{
            if (source.hds_url){
                return (source.hds_url);
            };
            return (source.url);
        }
        public function get server():String{
            if (source.hds_server){
                return (source.hds_server);
            };
            return (source["rte:server"]);
        }
        public function get cue():Number{
            return (source["rte:cue"]);
        }
        public function set cue(n:Number):void{
            source["rte:cue"] = n;
        }
        public function get durationMilliseconds():int{
            return (source.duration);
        }
        public function get durationSeconds():Number{
            return ((durationMilliseconds / 1000));
        }
        public function get start():Number{
            return (parseTime(source["rte:start"]));
        }
        public function get end():Number{
            return (parseTime(source["rte:end"]));
        }
        override public function get format():String{
            return (source["rte:format"]);
        }
        override public function get medium():String{
            return (source.medium);
        }
        public function toString():String{
            return ((((("[JSONPlaylistMediaItem: " + this.url) + " ") + ((isNaN(cue)) ? "" : ("Cuepoint:" + cue))) + "]"));
        }

    }
}//package rte.osmf.playlist 
﻿package rte.osmf.playlist {

    public class AbstractPlaylistMediaItem {

        public static function parseTime(strTime:String, ignoreMilliseconds:Boolean=false):Number{
            var _local4:Array = ((((strTime) && (!((strTime == ""))))) ? strTime.split(":") : [0, 0, 0]);
            var _local6:Number = ((_local4.length)>=1) ? (_local4[0] * 3600) : 0;
            var _local5:Number = ((_local4.length)>=2) ? (_local4[1] * 60) : 0;
            var _local3:Number = ((_local4.length)>=3) ? _local4[2] : 0;
            if (ignoreMilliseconds){
                _local3 = Math.floor(_local3);
            };
            return (((_local6 + _local5) + _local3));
        }

        public function get streamType():String{
            var _local1 = format;
            while ("advertising" === _local1) {
                return (null);
                return ("liveOrRecorded");
            };
            //unresolved jump
        }
        public function get isAdvertising():Boolean{
            return ((format == "advertising"));
        }
        public function get isSting():Boolean{
            return ((format == "sting"));
        }
        public function get isLive():Boolean{
            return ((format == "live"));
        }
        public function get isDVR():Boolean{
            return ((format == "livedvr"));
        }
        public function get isAudio():Boolean{
            return ((medium == "audio"));
        }
        public function get isVideo():Boolean{
            return ((medium == "video"));
        }
        public function get medium():String{
            return ("OVERRIDE");
        }
        public function get format():String{
            return ("OVERRIDE");
        }

    }
}//package rte.osmf.playlist 
﻿package rte.osmf.playlist {
    import rte.osmf.*;
    import com.adobe.serialization.json.*;
    import com.adobe.crypto.*;

    public class JSONSingleFilePlaylist extends AbstractSingleFilePlaylist implements IPlaylist {

        private var _sourceObject:Object;

        public function JSONSingleFilePlaylist(input:String=null){
            if (input){
                setSourceObject(input);
            };
        }
        override public function clone():IPlaylist{
            return (new JSONSingleFilePlaylist(getString()));
        }
        public function getString():String{
            return (new JSONEncoder(sourceObject).getString());
        }
        protected function get sourceObject():Object{
            return (_sourceObject);
        }
        override public function getMediaHash():String{
            var _local2 = null;
            var _local1 = null;
            var _local4 = null;
            var _local3 = null;
            try {
                _local2 = getEntryAt(0).mediaItems;
                _local1 = new JSONEncoder(_local2);
                _local4 = _local1.getString();
                _local3 = SHA1.hash(_local4);
                trace(((("JSONSingleFilePlaylist getMediaHash " + _local4) + "\n") + _local3));
                var _local6 = _local3;
                return (_local6);
            } catch(e:Error) {
            };
            return (SHA1.hash("NothingFound"));
        }
        override public function getEntryAt(index:int):IPlaylistEntry{
            if (length > index){
                return (new JSONPlaylistEntry(entryList[index]));
            };
            return (null);
        }
        override protected function get entryList():Array{
            if (!sourceObject){
                return ([]);
            };
            if ((sourceObject is Array)){
                return ((sourceObject as Array));
            };
            if (sourceObject.shows){
                return ((sourceObject.shows as Array));
            };
            return ((sourceObject.feedlist as Array));
        }
        public function setSourceObject(input:String):void{
            var _local2 = null;
            _lastError = null;
            try {
                if (input.indexOf("\r") > -1){
                    input = input.split("\r").join("").split("\n").join("");
                };
                _local2 = new JSONDecoder(input);
                _sourceObject = _local2.getValue();
            } catch(e:Error) {
                _lastError = e;
            };
        }
        override public function dispose():void{
            super.dispose();
            additionalCustomAdTagParameters = null;
            _sourceObject = null;
        }
        override public function get title():String{
            return (sourceObject.feed_title);
        }
        override public function get id():String{
            return (sourceObject.feedid);
        }
        override public function get playlistSource():String{
            if (this.length){
                return (this.getEntryAt(0).source);
            };
            return ("NA");
        }
        override public function get sourceUrl():String{
            return (sourceObject.full_url);
        }

    }
}//package rte.osmf.playlist 
﻿package rte.osmf.playlist {
    import rte.osmf.*;
    import com.adobe.crypto.*;
    import com.adobe.utils.*;

    public class AtomSingleFilePlaylist extends AbstractSingleFilePlaylist {

        private namespace atom = "http://www.w3.org/2005/Atom";
        private namespace media = "http://search.yahoo.com/mrss/";
        private namespace rte = "http://www.rte.ie/schemas/vod";

        private var _source:XML;

        public function AtomSingleFilePlaylist(input:XML=null){
            if (input){
                setSource(input);
            };
        }
        public static function readDateString(s:String):Date{
            if (!s){
                return (null);
            };
            try {
                var _local3 = DateUtil.parseW3CDTF(s);
                return (_local3);
            } catch(e:Error) {
            };
            return (null);
        }
        public static function writeDateString(d:Date):String{
            if (!d){
                return (null);
            };
            try {
                var _local3 = DateUtil.toW3CDTF(d, true);
                return (_local3);
            } catch(e:Error) {
            };
            return (null);
        }

        override public function clone():IPlaylist{
            return (new AtomSingleFilePlaylist(getSource()));
        }
        override public function get title():String{
            return (_source.title[0]);
        }
        override public function get id():String{
            return (_source.id[0]);
        }
        override public function get sourceUrl():String{
            try {
                var _local2 = _source.link[0].@href;
                return (_local2);
            } catch(e:Error) {
            };
            return (null);
        }
        public function getSource():XML{
            return (_source);
        }
        public function setSource(x:XML):void{
            _source = x;
            var _local2:String = x.entry.message[0];
            if (((((_local2) && (_local2.length))) && (!((_local2 == "undefined"))))){
                _lastError = _local2;
            };
        }
        override public function getMediaHash():String{
            var _local3:XMLList = _source.entry.group;
            var _local2:String = _local3.toXMLString();
            var _local1:String = SHA1.hash(_local2);
            trace(((("AtomSingleFilePlaylist getMediaHash " + _local2) + "\n") + _local1));
            return (_local1);
        }
        override public function get playlistSource():String{
            var _local3:int;
            if (_source == null){
                return ("NA");
            };
            var _local1:String = "NA";
            var _local2:XMLList = _source.entry.category;
            _local3 = 0;
            while (_local3 < _local2.length()) {
                if (_local2[_local3].@type == "source"){
                    _local1 = _local2[_local3].@term;
                    break;
                };
                _local3++;
            };
            return (_local1);
        }
        override public function get length():int{
            if (!_source){
                return (0);
            };
            return (_source.entry.id.length());
        }
        override public function getEntryAt(i:int):IPlaylistEntry{
            var _local2:XML = _source.entry[i];
            if (_local2){
                return (new AtomPlaylistEntry(_local2, title));
            };
            return (null);
        }
        override protected function get entryList():Array{
            var _local3:int;
            var _local2:Array = [];
            var _local1:XMLList = _source.entry[0].group[0].content;
            _local3 = 0;
            while (_local3 < _local1.length()) {
                _local2.push(_local1[_local3]);
                _local3++;
            };
            return (_local2);
        }
        override public function dispose():void{
            super.dispose();
            additionalCustomAdTagParameters = null;
            _source = null;
        }

    }
}//package rte.osmf.playlist 
﻿package rte.osmf.playlist {
    import rte.osmf.*;

    public class JSONArrayPlaylistMediaItem implements IPlaylistMediaItem {

        protected var _url:String;
        protected var _server:String;
        protected var _durationSeconds:Number;
        protected var _isAdvert:Boolean = false;
        protected var _isLive:Boolean = false;
        protected var _isAudio:Boolean = false;
        protected var _cue:Number = 0;

        public function JSONArrayPlaylistMediaItem(urlX:String, serverX:String, durationSecondsX:int, isAudioX:Boolean, isAdvertX:Boolean, isLiveX:Boolean){
            _url = urlX;
            _server = serverX;
            _durationSeconds = durationSecondsX;
            _isAdvert = isAdvertX;
            _isLive = isLiveX;
            _isAudio = isAudioX;
        }
        public function get url():String{
            return (_url);
        }
        public function get server():String{
            return (_server);
        }
        public function get fileResource():String{
            return (url.substr(server.length));
        }
        public function get durationMilliseconds():int{
            return ((_durationSeconds * 1000));
        }
        public function get durationSeconds():Number{
            return (_durationSeconds);
        }
        public function get start():Number{
            return (0);
        }
        public function get end():Number{
            return (durationSeconds);
        }
        public function get cue():Number{
            return (_cue);
        }
        public function set cue(n:Number):void{
            _cue = n;
        }
        public function get streamType():String{
            if (this.isAdvertising){
                return (null);
            };
            if (this.isLive){
                return ("live");
            };
            return ("recorded");
        }
        public function get isAdvertising():Boolean{
            return (_isAdvert);
        }
        public function get isSting():Boolean{
            return (false);
        }
        public function get isLive():Boolean{
            return (_isLive);
        }
        public function get isDVR():Boolean{
            return (false);
        }
        public function get isAudio():Boolean{
            return (_isAudio);
        }
        public function get isVideo():Boolean{
            return (!(isAudio));
        }

    }
}//package rte.osmf.playlist 
﻿package rte.osmf.playlist {
    import rte.osmf.*;
    import __AS3__.vec.*;
    import com.adobe.utils.*;

    public class AtomPlaylistEntry implements IPlaylistEntry {

        private namespace atom = "http://www.w3.org/2005/Atom";
        private namespace media = "http://search.yahoo.com/mrss/";
        private namespace rte = "http://www.rte.ie/schemas/vod";

        private var _source:XML;
        private var _programTitle:String;

        public function AtomPlaylistEntry(source:XML, programTitle:String){
            setSource(source);
            this.programTitle = programTitle;
        }
        public static function readDateString(s:String):Date{
            if (!s){
                return (null);
            };
            try {
                var _local3 = DateUtil.parseW3CDTF(s);
                return (_local3);
            } catch(e:Error) {
            };
            return (null);
        }
        public static function writeDateString(d:Date):String{
            if (!d){
                return (null);
            };
            try {
                var _local3 = DateUtil.toW3CDTF(d, true);
                return (_local3);
            } catch(e:Error) {
            };
            return (null);
        }

        public function getSource():XML{
            return (_source);
        }
        public function setSource(x:XML):void{
            _source = x;
        }
        public function get briNumber():String{
            try {
                var _local2:String = _source.bri.@id;
                return (_local2);
            } catch(e:Error) {
            };
            return ("");
        }
        public function get id():String{
            return (_source.id[0]);
        }
        public function get showId():String{
            return (_source.showid[0]);
        }
        public function get piaId():int{
            try {
                var _local2:Number = _source.pia.@id;
                return (_local2);
            } catch(e:Error) {
            };
            return (0);
        }
        public function get channelId():int{
            try {
                var _local2:Number = _source.channel.@id;
                return (_local2);
            } catch(e:Error) {
            };
            return (0);
        }
        public function get channelName():String{
            var _local1 = null;
            try {
                _local1 = findTermFor("channel");
                _local1 = _local1.split("  ").join(" ").split("RTÃ‰").join("RTÉ");
                _local1 = StringUtil.trim(_local1);
                var _local3 = _local1;
                return (_local3);
            } catch(e:Error) {
            };
            return ("");
        }
        public function get itemId():int{
            var _local1:Number;
            try {
                if (_source.item.length()){
                    _local1 = _source.item.@id;
                    var _local3 = ((isNaN(_local1)) ? 0 : _local1);
                    return (_local3);
                };
            } catch(e:Error) {
            };
            if (!isNaN(this.id)){
                return (this.id);
            };
            return (0);
        }
        public function get episodeTitle():String{
            return (_source.title);
        }
        public function get programTitle():String{
            return (_programTitle);
        }
        public function set programTitle(s:String):void{
            _programTitle = s;
        }
        public function get itemTypeTitle():String{
            return (_source.item_title);
        }
        public function get content():String{
            return (_source.content);
        }
        public function get rteBug():String{
            return (_source.bug);
        }
        public function get mediaRating():String{
            return (_source.rating[0]);
        }
        public function get isMatureContent():Boolean{
            return ((mediaRating == "MA"));
        }
        public function get isLiveContent():Boolean{
            var _local1:int;
            if (nowNextType != ""){
                return (true);
            };
            _local1 = 0;
            while (_local1 < mediaItems.length) {
                if (((mediaItems[_local1].isLive) || (mediaItems[_local1].isDVR))){
                    return (true);
                };
                _local1++;
            };
            return (false);
        }
        public function get isAudioContent():Boolean{
            var _local1:int;
            _local1 = 0;
            while (_local1 < mediaItems.length) {
                if (mediaItems[_local1].isAudio){
                    return (true);
                };
                _local1++;
            };
            return (false);
        }
        public function contentsOfMediaContent():Vector.<IPlaylistMediaItem>{
            var _local2 = null;
            var _local5:int;
            var _local1 = null;
            var _local3:Vector.<IPlaylistMediaItem> = new Vector.<IPlaylistMediaItem>();
            var _local4 = 0;
            try {
                _local2 = _source.group[0].content;
                _local5 = 0;
                while (_local5 < _local2.length()) {
                    _local1 = new AtomPlaylistMediaItem(_local2[_local5]);
                    if (((_local1.isAdvertising) || (((_local1.isSting) && (!(_local1.cue)))))){
                        _local1.cue = _local4;
                    } else {
                        _local4 = (_local4 + _local1.durationMilliseconds);
                    };
                    _local3.push(_local1);
                    _local5++;
                };
            } catch(e:Error) {
            };
            return (_local3);
        }
        public function contentsOfRteAds():Vector.<IPlaylistMediaItem>{
            var _local2 = null;
            var _local4:int;
            var _local1 = null;
            var _local3:Vector.<IPlaylistMediaItem> = new Vector.<IPlaylistMediaItem>();
            try {
                _local2 = _source.ads[0].content;
                _local4 = 0;
                while (_local4 < _local2.length()) {
                    _local1 = new AtomPlaylistMediaItem(_local2[_local4]);
                    _local3.push(_local1);
                    _local4++;
                };
            } catch(e:Error) {
                var _local6 = null;
                return (_local6);
            };
            return (_local3);
        }
        public function get mediaItems():Vector.<IPlaylistMediaItem>{
            var _local4:int;
            var _local3 = null;
            var _local2:Vector.<IPlaylistMediaItem> = contentsOfMediaContent();
            var _local1:Vector.<IPlaylistMediaItem> = new Vector.<IPlaylistMediaItem>();
            _local4 = 0;
            while (_local4 < _local2.length) {
                _local3 = _local2[_local4];
                if (!((_local3.isAdvertising) || (_local3.isSting))){
                    _local1.push(_local3);
                };
                _local4++;
            };
            return (_local1);
        }
        public function get supplementalItems():Vector.<IPlaylistMediaItem>{
            var _local5:int;
            var _local4 = null;
            var _local2:Vector.<IPlaylistMediaItem> = contentsOfRteAds();
            if (_local2){
                return (_local2);
            };
            var _local3:Vector.<IPlaylistMediaItem> = contentsOfMediaContent();
            var _local1:Vector.<IPlaylistMediaItem> = new Vector.<IPlaylistMediaItem>();
            _local5 = 0;
            while (_local5 < _local3.length) {
                _local4 = _local3[_local5];
                if (((_local4.isAdvertising) || (_local4.isSting))){
                    _local1.push(_local4);
                };
                _local5++;
            };
            return (_local1);
        }
        public function get firstThumbnail():AtomPlaylistEntryThumbnail{
            if (numThumbnails){
                return (new AtomPlaylistEntryThumbnail(_source.thumbnail[0]));
            };
            return (null);
        }
        protected function get numThumbnails():uint{
            return (_source.thumbnail.length());
        }
        public function get thumbnailUrl():String{
            try {
                var _local2 = firstThumbnail.url;
                return (_local2);
            } catch(e:Error) {
            };
            return (null);
        }
        public function get hasSchedule():Boolean{
            return (((rawScheduleStart) || (rawScheduleEnd)));
        }
        public function get scheduleStart():Date{
            return (readDateString(rawScheduleStart));
        }
        protected function get rawScheduleStart():String{
            return (_source.schedule.@start);
        }
        public function get scheduleEnd():Date{
            return (readDateString(rawScheduleEnd));
        }
        protected function get rawScheduleEnd():String{
            return (_source.schedule.@end);
        }
        public function get scheduleDescription():ScheduleDescription{
            if (!hasSchedule){
                return (null);
            };
            var _local1:ScheduleDescription = new ScheduleDescription();
            _local1.startDateTime = scheduleStart;
            _local1.endDateTime = scheduleEnd;
            return (_local1);
        }
        public function get published():Date{
            return (readDateString(rawPublished));
        }
        public function get rawPublished():String{
            return (_source.published[0]);
        }
        public function get rawExpiryDate():String{
            return (_source.valid.@end);
        }
        public function get expiryDate():Date{
            return (readDateString(rawExpiryDate));
        }
        protected function findTermFor(termType:String):String{
            var _local4:int;
            if (_source == null){
                return ("");
            };
            var _local2:String = "";
            var _local3:XMLList = _source.category;
            _local4 = 0;
            while (_local4 < _local3.length()) {
                if (_local3[_local4].@type == termType){
                    _local2 = _local3[_local4].@term;
                    break;
                };
                _local4++;
            };
            return (_local2);
        }
        public function get genreName():String{
            try {
                var _local2 = findTermFor("genre");
                return (_local2);
            } catch(e:Error) {
            };
            return ("");
        }
        public function get nowNextType():String{
            try {
                var _local2 = findTermFor("now-next");
                return (_local2);
            } catch(e:Error) {
            };
            return ("");
        }
        public function get programmeFormType():String{
            try {
                var _local2 = findTermFor("form");
                return (_local2);
            } catch(e:Error) {
            };
            return ("");
        }
        public function get source():String{
            try {
                var _local2 = findTermFor("source");
                return (_local2);
            } catch(e:Error) {
            };
            return ("");
        }
        public function get copyright():String{
            return (_source.copyright);
        }
        public function get durationMilliseconds():int{
            return (_source.duration.@ms);
        }

    }
}//package rte.osmf.playlist 
﻿package rte.osmf.playlist {
    import org.osmf.media.*;
    import flash.events.*;
    import flash.utils.*;
    import rte.osmf.*;
    import flash.net.*;
    import __AS3__.vec.*;

    public class AbstractPlaylistLoader extends EventDispatcher implements IPlaylistLoader {

        public static const DEV_URL_TO_REWRITE_AS:String = "fmso1.rte.ie/testvod/";

        public static var DEV_THROW_ALL_ERRORS:Boolean = false;
        public static var defaultNowNextTimerInterval:int = 60000;
        private static var _overrideThumbnailSize:int = -1;

        protected var loadComplete:Boolean = false;
        private var _lastUrl:String;
        private var loader:URLLoader;
        private var _isReady:Boolean = false;
        private var _lastError;
        protected var previousTerm:String;
        protected var previousKey:String;
        private var _nowNextTimerInterval:int;
        protected var nowNextTimer:Timer;
        protected var _playlist:IPlaylist;
        private var _startPos:Number = -1;
        private var _playbackStarted:Boolean = false;
        private var _autoPlay:Boolean = true;
        private var _toggleBitRateInProgress:Boolean = false;
        private var _additionalCustomAdTagParameters:Object;
        private var _adTagAppendParameters:Object;
        private var _playInitedFirstTime:Boolean = false;
        private var _confirmedMaturity:Boolean = false;

        public function AbstractPlaylistLoader(url:String=null){
            nowNextTimerInterval = defaultNowNextTimerInterval;
            if (url){
                load(url);
            };
        }
        public static function get overrideThumbnailSize():int{
            return (_overrideThumbnailSize);
        }
        public static function set overrideThumbnailSize(i:int):void{
            _overrideThumbnailSize = i;
        }
        public static function formatRassetUrlForWidthValue(urlStr:String, i:int):String{
            if (!urlStr){
                return (urlStr);
            };
            var _local5:String = urlStr.split("/").pop();
            trace(("Found " + _local5));
            var _local3:String = ("000" + i.toString(16));
            _local3 = _local3.substr(-3);
            _local3 = (_local3 + ".jpg");
            trace(("REPLACE STRING IS: " + _local3));
            var _local4:int = parseInt(_local5.substr(0, (_local5.length - 4)), 16);
            if (!_local4){
                return (urlStr);
            };
            if (_local5.indexOf(".") == 8){
                urlStr = (urlStr.substr(0, (urlStr.length - 4)) + _local3);
            } else {
                if (urlStr.charAt((urlStr.length - 8)) == "-"){
                    urlStr = (urlStr.substr(0, (urlStr.length - 8)) + _local3);
                } else {
                    urlStr = (urlStr.substr(0, (urlStr.length - 7)) + _local3);
                };
            };
            return (urlStr);
        }

        public function load(url:String):void{
            var _local2 = null;
            try {
                unbuildLoader();
                loader = buildLoader();
                setLastUrl(url);
                if (url){
                    _local2 = new URLRequest(url);
                    loader.load(_local2);
                } else {
                    throw (new Error("Cannot load without a valid url."));
                };
            } catch(e:Error) {
                handleError(e);
            };
        }
        protected function buildLoader():URLLoader{
            loadComplete = false;
            var _local1:URLLoader = new URLLoader();
            _local1.addEventListener("complete", handleLoadComplete);
            _local1.addEventListener("ioError", handleError);
            _local1.addEventListener("securityError", handleError);
            return (_local1);
        }
        protected function unbuildLoader():void{
            if (loader){
                loader.removeEventListener("complete", handleLoadComplete);
                loader.removeEventListener("ioError", handleError);
                loader.removeEventListener("securityError", handleError);
                if (loadComplete){
                    if (!loadComplete){
                        loader.addEventListener("complete", function (_arg1):void{
                            return;
                            /*not popped
                            trace("(Ignored complete)")
                            */
                        });
                        loader.addEventListener("ioError", function (_arg1):void{
                            return;
                            /*not popped
                            trace("(Ignored error)")
                            */
                        });
                        loader.addEventListener("securityError", function (_arg1):void{
                            return;
                            /*not popped
                            trace("(Ignored error)")
                            */
                        });
                    };
                };
                loader = null;
            };
        }
        public function get lastUrl():String{
            return (_lastUrl);
        }
        protected function setLastUrl(s:String):void{
            _lastUrl = s;
        }
        protected function handleLoadComplete(event:Event):void{
            _isReady = true;
            loadComplete = true;
            var _local2:String = loader.data;
            loadFromSource(_local2);
        }
        public function get isReady():Boolean{
            return (_isReady);
        }
        public function get isError():Boolean{
            return (!((_lastError == null)));
        }
        public function lastError(){
            return (_lastError);
        }
        protected function handleError(e):void{
            if (DEV_THROW_ALL_ERRORS){
                throw (new Error(("Stopping in handleError " + e)));
            };
            _lastError = e;
            loadComplete = true;
            trace(("HANDLE ERROR " + e));
            dispatchEvent(new ErrorEvent("error", false, false, e));
        }
        public function loadFromSource(s:String):void{
        }
        public function clone():IPlaylist{
            return (cloneLoader());
        }
        public function cloneLoader():IPlaylistLoader{
            throw (new Error("Please override this."));
        }
        protected function finaliseResult():void{
            var _local1 = null;
            var _local2 = null;
            if (playlist.isError){
                _lastError = playlist.lastError();
                return (handleError(new Error(_lastError)));
            };
            trace(("LENGTH: " + length));
            if ((((length > 0)) && (playlist.currentTerm))){
                trace(("HAS CURRENT TERM " + playlist.currentTerm));
                _local1 = playlist.getMediaHash();
                _local2 = playlist.currentTerm;
                validateCurrentTerm(previousTerm, _local2, previousKey, _local1);
                previousKey = _local1;
                previousTerm = _local2;
                trace(((("RESET: " + previousKey) + " ") + previousTerm));
            } else {
                trace("RELOAD");
                stopNowNextTimer();
                dispatchEvent(new Event("complete"));
            };
        }
        protected function validateCurrentTerm(previousTerm:String, currentTerm:String, previousHash:String, currentHash:String):void{
            trace((("validateCurrentTerm(" + arguments) + ")"));
            if (previousHash == null){
                startNowNextTimer();
                dispatchEvent(new Event("complete"));
                return;
            };
            if (((!(nowNextTimer)) || (!(nowNextTimer.running)))){
                return;
            };
            var _local7 = (previousTerm == currentTerm);
            var _local6 = (currentTerm == "NOW");
            var _local8 = !((previousHash == currentHash));
            if (((_local6) && (_local8))){
                dispatchEvent(new Event("playingProgrammeChange"));
            } else {
                if (((_local7) && (!(_local6)))){
                    dispatchEvent(new Event("complete"));
                } else {
                    dispatchEvent(new Event("change"));
                };
            };
        }
        public function get nowNextTimerInterval():int{
            return (_nowNextTimerInterval);
        }
        public function set nowNextTimerInterval(i:int):void{
            _nowNextTimerInterval = i;
            if (((nowNextTimer) && (nowNextTimer.running))){
                stopNowNextTimer();
                startNowNextTimer();
            };
        }
        protected function startNowNextTimer():void{
            if (!nowNextTimer){
                nowNextTimer = new Timer(nowNextTimerInterval);
                nowNextTimer.addEventListener("timer", handleNowNextTimer);
                nowNextTimer.start();
            };
        }
        protected function stopNowNextTimer():void{
            if (nowNextTimer){
                if (nowNextTimer.running){
                    nowNextTimer.stop();
                };
                nowNextTimer.removeEventListener("timer", handleNowNextTimer);
                nowNextTimer = null;
            };
        }
        protected function handleNowNextTimer(event:TimerEvent):void{
            var _local2:String = this.getEntryAt(0).id;
            if (_local2){
                load(_local2);
            };
        }
        protected function get playlist():IPlaylist{
            return (_playlist);
        }
        protected function set playlist(pl:IPlaylist):void{
            _playlist = pl;
            if (playlist){
                playlist.additionalCustomAdTagParameters = additionalCustomAdTagParameters;
            };
        }
        public function get showNext():Boolean{
            try {
                var _local2 = (playlist.currentTerm.toLowerCase() == "next");
                return (_local2);
            } catch(e:Error) {
            };
            return (false);
        }
        public function get scheduleDescription():ScheduleDescription{
            if (((playlist) && ((playlist.length == 1)))){
                return (playlist.getEntryAt(0).scheduleDescription);
            };
            return (null);
        }
        public function get title():String{
            return (((playlist)==null) ? "" : playlist.title);
        }
        public function get currentTerm():String{
            return (((playlist)==null) ? "" : playlist.currentTerm);
        }
        public function get length():int{
            return (((playlist)==null) ? 0 : playlist.length);
        }
        public function getEntryAt(i:int):IPlaylistEntry{
            return (((playlist)==null) ? null : playlist.getEntryAt(i));
        }
        public function getMediaHash():String{
            requirePlaylist();
            return (playlist.getMediaHash());
        }
        public function get startPos():Number{
            return (_startPos);
        }
        public function set startPos(n:Number):void{
            _startPos = n;
        }
        public function get playbackStarted():Boolean{
            return (_playbackStarted);
        }
        public function set playbackStarted(b:Boolean):void{
            _playbackStarted = b;
        }
        public function get autoPlay():Boolean{
            return (_autoPlay);
        }
        public function set autoPlay(b:Boolean):void{
            _autoPlay = b;
        }
        public function get toggleBitRateInProgress():Boolean{
            return (_toggleBitRateInProgress);
        }
        public function set toggleBitRateInProgress(b:Boolean):void{
            _toggleBitRateInProgress = b;
        }
        public function generateMediaFromFactory(mf:MediaFactory):MediaElement{
            requirePlaylist();
            return (playlist.generateMediaFromFactory(mf));
        }
        public function cuePlaylistFromFactory(mf:MediaFactory):MediaElement{
            if (((!(playlist)) || (!((playlist.length == 1))))){
                return (null);
            };
            var _local3:IPlaylistEntry = playlist.getEntryAt(0);
            var _local4:String = _local3.thumbnailUrl;
            if (overrideThumbnailSize > 0){
                trace(((("URL WAS: " + _local4) + " with override of ") + overrideThumbnailSize));
                _local4 = formatRassetUrlForWidthValue(_local4, overrideThumbnailSize);
                trace(("\tResized url is: " + _local4));
            };
            var _local2:MediaElement = mf.createMediaElement(new URLResource(_local4));
            return (_local2);
        }
        public function get additionalCustomAdTagParameters():Object{
            return (_additionalCustomAdTagParameters);
        }
        public function set additionalCustomAdTagParameters(o:Object):void{
            _additionalCustomAdTagParameters = o;
            if (playlist){
                playlist.additionalCustomAdTagParameters = o;
            };
        }
        public function get adTagAppendParameters():Object{
            return (_adTagAppendParameters);
        }
        public function set adTagAppendParameters(o:Object):void{
            _adTagAppendParameters = o;
            if (playlist){
                playlist.adTagAppendParameters = o;
            };
        }
        public function getShareProperties(currentPositionInSeconds:Number=NaN, index:int=0, overrideUrl:String=null):ShareProperties{
            requirePlaylist();
            var _local4:IPlaylistEntry = getEntryAt(index);
            return (shareProperties(_local4, currentPositionInSeconds, overrideUrl));
        }
        protected function shareProperties(pe:IPlaylistEntry, currentPositionInSeconds:Number=NaN, overrideUrl:String=null):ShareProperties{
            if (!pe){
                return (null);
            };
            var _local5:String = ((overrideUrl)==null) ? pe.id : overrideUrl;
            var _local4:ShareProperties = new ShareProperties();
            _local4.title = pe.episodeTitle;
            _local4.programTitle = pe.programTitle;
            _local4.itemType = pe.itemTypeTitle;
            _local4.description = pe.content;
            _local4.thumbnailUrl = pe.thumbnailUrl;
            if (((pe.showId) || (pe.isLiveContent))){
                _local4.playThisUrl = PlaylistFactoryLoader.generateFeedUrlFromEntry(pe);
            } else {
                _local4.isFeed = true;
                _local4.playThisUrl = pe.id;
            };
            _local4.shareThisUrl = _local5;
            _local4.playPosition = currentPositionInSeconds;
            _local4.shareThisFromPositionUrl = appendStartPosition(_local5, currentPositionInSeconds);
            _local4.showId = pe.showId;
            _local4.programId = pe.id;
            _local4.itemId = pe.itemId;
            _local4.channelId = pe.channelId;
            _local4.published = pe.published;
            _local4.channelName = pe.channelName;
            _local4.schedule = pe.scheduleDescription;
            _local4.isLiveContent = pe.isLiveContent;
            _local4.isAudioContent = pe.isAudioContent;
            _local4.isMatureContent = pe.isMatureContent;
            _local4.mediaRating = pe.mediaRating;
            _local4.genre = pe.genreName;
            _local4.copyright = pe.copyright;
            return (_local4);
        }
        protected function appendStartPosition(url:String, currentPosition:Number):String{
            if (((isNaN(currentPosition)) || ((currentPosition == 0)))){
                return (url);
            };
            var _local3:Array = url.split("#");
            var _local5:String = _local3[0];
            var _local4:String = ((_local3.length)==2) ? _local3[1] : null;
            var _local6:URLVariables = new URLVariables();
            try {
                if (_local4){
                    _local6.decode(_local4);
                };
            } catch(e:Error) {
                trace(("INVALID URL FRAGMENT: " + _local4));
            };
            _local6.pos = Math.max(0, Math.floor(currentPosition));
            return (((_local5 + "#") + _local6.toString()));
        }
        public function dispose():void{
            if (playlist){
                playlist.dispose();
            };
            stopNowNextTimer();
            playlist = null;
        }
        public function get programmeFormType():String{
            requirePlaylist();
            return (playlist.programmeFormType);
        }
        public function get playlistSource():String{
            requirePlaylist();
            return (playlist.playlistSource);
        }
        public function get sourceUrl():String{
            requirePlaylist();
            return (playlist.sourceUrl);
        }
        public function get relatedContent():IPlaylistLoader{
            return (null);
        }
        public function get moreFromThisProgramme():IPlaylistLoader{
            return (null);
        }
        public function get entryList():Vector.<ShareProperties>{
            var _local2:int;
            var _local1:Vector.<ShareProperties> = new Vector.<ShareProperties>();
            if (playlist){
                _local2 = 0;
                while (_local2 < length) {
                    _local1.push(shareProperties(getEntryAt(_local2)));
                    _local2++;
                };
            };
            return (_local1);
        }
        public function get isMatureContent():Boolean{
            var _local1:IPlaylistEntry = requirePlayableGetPlayable();
            return (_local1.isMatureContent);
        }
        public function get playInitedFirstTime():Boolean{
            return (_playInitedFirstTime);
        }
        public function set playInitedFirstTime(b:Boolean):void{
            _playInitedFirstTime = b;
        }
        public function get confirmedMaturity():Boolean{
            return (_confirmedMaturity);
        }
        public function set confirmedMaturity(b:Boolean):void{
            var _local2:IPlaylistEntry = requirePlayableGetPlayable();
            _confirmedMaturity = b;
            dispatchEvent(new Event("confirmedMaturity"));
        }
        protected function requirePlayableGetPlayable():IPlaylistEntry{
            if (((!(playlist)) || (!((playlist.length == 1))))){
                throw (new Error("Playlist is not playable."));
            };
            return (getEntryAt(0));
        }
        protected function requirePlaylist():void{
            if (!playlist){
                throw (new Error("Must have completed playlist load before you can access this method."));
            };
        }
        public function get isPlayable():Boolean{
            if (((!(playlist)) || (!((playlist.length == 1))))){
                return (false);
            };
            if (requirePlayableGetPlayable().mediaItems.length == 0){
                return (false);
            };
            return (true);
        }

    }
}//package rte.osmf.playlist 
﻿package rte.osmf {

    public class PlayingItemClipDetails {

        public var clipNumber:uint;
        public var totalClips:uint;
        public var clipStartInMilliseconds:uint;
        public var clipEndInMilliseconds:uint;
        public var clipDurationInMilliseconds:uint;
        public var mediaUrl:String;
        public var adTimelineStartOffset:Number;
        public var partsInMainContent:Number;
        public var isAdvert:Boolean;
        public var isPreroll:Boolean;
        public var isOverlay:Boolean;
        public var isMidroll:Boolean;
        public var isPostroll:Boolean;

        public function toString():String{
            return ((("[ClipDetails: " + ["cn:", this.clipNumber, "of", this.totalClips, "\n", "start:", this.clipStartInMilliseconds, "duration:", this.clipDurationInMilliseconds, "end:", this.clipEndInMilliseconds, "timeline offset:", this.adTimelineStartOffset, "\n", "ad:", this.isAdvert, [this.isPreroll, this.isMidroll, this.isOverlay, this.isPostroll]].join(" ")) + "]"));
        }

    }
}//package rte.osmf 
﻿package rte.osmf {

    public interface IPlaylistMediaItem {

        function get url():String;
        function get server():String;
        function get fileResource():String;
        function get durationMilliseconds():int;
        function get durationSeconds():Number;
        function get start():Number;
        function get end():Number;
        function get cue():Number;
        function set cue(_arg1:Number):void;
        function get streamType():String;
        function get isAdvertising():Boolean;
        function get isSting():Boolean;
        function get isLive():Boolean;
        function get isDVR():Boolean;
        function get isAudio():Boolean;
        function get isVideo():Boolean;

    }
}//package rte.osmf 
﻿package rte.osmf.utils {

    public class RTEUtils {

        public static function normaliseStr(s:String):String{
            if (s == null){
                return ("");
            };
            var _local5 = s;
            _local5 = _local5.toLowerCase();
            var _local6:RegExp = /[á]/gi;
            var _local2:RegExp = /[é]/gi;
            var _local4:RegExp = /[í]/gi;
            var _local8:RegExp = /[ó]/gi;
            var _local3:RegExp = /[ú]/gi;
            var _local10:RegExp = /[\s]/gi;
            var _local9:RegExp = /[-]/gi;
            var _local7:RegExp = /[^A-Za-z0-9_]/gi;
            _local5 = _local5.replace(_local6, "a");
            _local5 = _local5.replace(_local2, "e");
            _local5 = _local5.replace(_local4, "i");
            _local5 = _local5.replace(_local8, "o");
            _local5 = _local5.replace(_local3, "u");
            _local5 = _local5.replace(_local10, "_");
            _local5 = _local5.replace(_local9, "");
            _local5 = _local5.replace(_local7, "");
            return (_local5);
        }

    }
}//package rte.osmf.utils 
﻿package rte.osmf.debug {
    import org.osmf.media.*;
    import org.osmf.containers.*;
    import flash.display.*;
    import org.osmf.events.*;
    import org.osmf.layout.*;
    import flash.events.*;
    import flash.utils.*;
    import flash.geom.*;
    import flash.net.*;
    import org.osmf.traits.*;
    import org.osmf.elements.*;
    import org.osmf.net.*;
    import org.osmf.metadata.*;
    import __AS3__.vec.*;
    import org.osmf.net.httpstreaming.*;
    import com.adobe.serialization.json.*;

    public class Profiler extends MediaContainer {

        protected var renderer:LayoutRendererBase;
        private var _mediaPlayer:MediaPlayer;
        protected var currentMedia:MediaElement;
        public var trackMetadata:Boolean = true;
        protected var metadataString:String = "";
        protected var drmText:String = "";
        protected var drmErrorText:String = "";
        protected var audioText:String = "";
        protected var seekText:String = "";
        protected var timeText:String = "";
        protected var dvrText:String = "";
        protected var loadText:String = "";
        protected var playText:String = "";
        protected var bufferText:String = "";
        protected var dstText:String = "";
        protected var dragButton:LayoutTargetSprite;
        protected var baseTitle:String = "<h1>RTÉ Profiler</h1>";
        protected var titleField:ProfilerTextField;
        protected var contentField:ProfilerTextField;
        protected var previousNetData:String = "";
        protected var previousNetStatus:String = "";
        protected var listenedNs:Dictionary;
        protected var latestResultsStr:String = "";
        protected var rollingAverage:Vector.<Number>;
        protected var frameCounter:int = 1;
        protected var lastTimes:Object;

        public function Profiler(layoutRenderer:LayoutRendererBase=null, layoutMetadata:LayoutMetadata=null){
            listenedNs = new Dictionary();
            super(layoutRenderer, layoutMetadata);
            createChildren();
            addEventListener("addToLayoutRenderer", setLayoutReference);
            addEventListener("removeFromLayoutRenderer", unsetLayoutReference);
            addEventListener("mouseUp", stopPropagationToContainer, false, 2147483647);
        }
        protected function stopPropagationToContainer(event:MouseEvent):void{
            event.preventDefault();
            event.stopImmediatePropagation();
        }
        protected function setLayoutReference(event:LayoutTargetEvent):void{
            renderer = event.layoutRenderer;
        }
        protected function unsetLayoutReference(event:LayoutTargetEvent):void{
            renderer = null;
        }
        protected function startDragClip(event:MouseEvent):void{
            var _local2:Rectangle = parent.getBounds(parent);
            _local2.width = (_local2.width - width);
            _local2.height = (_local2.height - height);
            startDrag(false, parent.getBounds(parent));
        }
        protected function endDragClip(event:MouseEvent):void{
            stopDrag();
            this.layoutMetadata.x = x;
            this.layoutMetadata.y = y;
            onScreen();
        }
        public function get mediaPlayer():MediaPlayer{
            return (_mediaPlayer);
        }
        public function set mediaPlayer(mp:MediaPlayer):void{
            if (mediaPlayer){
                removeMediaPlayerListeners();
            };
            _mediaPlayer = mp;
            if (mediaPlayer){
                addMediaPlayerListeners();
            };
        }
        protected function removeMediaPlayerListeners():void{
            if (currentMedia){
                removeMediaListeners();
            };
            mediaPlayer.removeEventListener("mediaElementChange", checkMedia);
            mediaPlayer.removeEventListener("currentTimeChange", updateTimeText);
            mediaPlayer.removeEventListener("durationChange", updateTimeText);
            mediaPlayer.removeEventListener("complete", updateTimeText);
        }
        protected function addMediaPlayerListeners():void{
            titleField.htmlText = baseTitle;
            mediaPlayer.addEventListener("mediaElementChange", checkMedia);
            checkMedia();
        }
        protected function checkMedia(event:Event=null):void{
            if (currentMedia){
                removeMediaListeners();
            };
            metadataString = "";
            currentMedia = mediaPlayer.media;
            if (currentMedia){
                addMediaListeners();
            };
        }
        protected function removeMediaListeners():void{
            var _local1:int;
            currentMedia.removeEventListener("metadataAdd", validateMetadata);
            currentMedia.removeEventListener("metadataRemove", validateMetadata);
            currentMedia.removeEventListener("traitAdd", validateTrait);
            currentMedia.removeEventListener("traitAdd", validateTrait);
            _local1 = 0;
            while (_local1 < currentMedia.traitTypes.length) {
                validateTrait(new MediaElementEvent("traitRemove", false, false, currentMedia.traitTypes[_local1]));
                _local1++;
            };
            updateTf();
            removeEventListener("enterFrame", everyFrame);
        }
        protected function addMediaListeners():void{
            var _local1:int;
            if (trackMetadata){
                currentMedia.addEventListener("metadataAdd", validateMetadata);
                currentMedia.addEventListener("metadataRemove", validateMetadata);
            };
            currentMedia.addEventListener("traitAdd", validateTrait);
            currentMedia.addEventListener("traitAdd", validateTrait);
            _local1 = 0;
            while (_local1 < currentMedia.traitTypes.length) {
                validateTrait(new MediaElementEvent("traitAdd", false, false, currentMedia.traitTypes[_local1]));
                _local1++;
            };
            addEventListener("enterFrame", everyFrame);
        }
        protected function validateMetadata(event:MediaElementEvent):void{
            var _local2 = (event.type == "metadataAdd");
            var _local3:Metadata = event.metadata;
            if (_local2){
                _local3.addEventListener("valueChange", validateMetadataChange);
            } else {
                _local3.removeEventListener("valueChange", validateMetadataChange);
            };
            setMetadataString();
        }
        protected function validateMetadataChange(event:MetadataEvent):void{
            trace(("METADATA CHANGE " + event.key));
            setMetadataString();
        }
        protected function setMetadataString():void{
            var _local2 = null;
            var _local4:int;
            var _local3:Metadata = currentMedia.getMetadata("http://www.rte.ie/schemas/vod");
            var _local5:Metadata = currentMedia.getMetadata("http://www.rte.ie/advertising/playback/");
            var _local1:String = metadataString;
            if (((_local3) || (_local5))){
                _local2 = "";
                if (_local3){
                    _local4 = 0;
                    while (_local4 < _local3.keys.length) {
                        _local2 = (_local2 + (((("<b>" + _local3.keys[_local4]) + "</b> = ") + _local3.getValue(_local3.keys[_local4])) + "\n"));
                        _local4++;
                    };
                };
                if (_local5){
                    _local4 = 0;
                    while (_local4 < _local5.keys.length) {
                        _local2 = (_local2 + (((("<b>ads." + _local5.keys[_local4]) + "</b> = ") + _local5.getValue(_local5.keys[_local4])) + "\n"));
                        _local4++;
                    };
                };
                metadataString = _local2;
            } else {
                metadataString = "";
            };
            if (_local1 != metadataString){
                updateTf();
            };
        }
        protected function validateTrait(event:MediaElementEvent):void{
            var _local3 = null;
            var _local2 = (event.type == "traitAdd");
            var _local4 = event.traitType;
            while ("seek" === _local4) {
                validateSeekTrait(_local2);
                //unresolved jump
                validateTimeTrait(_local2);
                //unresolved jump
                validateDynamicStreamTrait(_local2);
                //unresolved jump
                validateBufferTrait(_local2);
                //unresolved jump
                //unresolved jump
                validateLoadTrait(_local2);
                //unresolved jump
                validateDVRTrait(_local2);
                //unresolved jump
                //unresolved jump
                validateDRMTrait(_local2);
                //unresolved jump
            };
            //unresolved if
            //unresolved if
            //unresolved if
            //unresolved if
            //unresolved if
            //unresolved if
            //unresolved if
            //unresolved if
            updateTf();
        }
        protected function drmTrait():DRMTrait{
            return ((currentMedia.getTrait("drm") as DRMTrait));
        }
        protected function validateDRMTrait(add:Boolean):void{
            var _local2 = null;
            var _local3 = null;
            var _local4:DRMTrait = drmTrait();
            doListener(_local4, "drmStateChange", updateDrmText, add);
            doListener(_local4, "drmError", updateDrmErrorText, add);
            updateDrmText();
            updateDrmErrorText();
        }
        protected function updateDrmText(event:DRMEvent=null):void{
            var _local5:DRMTrait = drmTrait();
            var _local2:String = drmText;
            if (!_local5){
                if (_local2 != drmText){
                    updateTf();
                };
                return;
            };
            var _local3:String = "<h2>DRM status</h2>";
            var _local4:Array = [];
            _local4.push(("State:" + _local5.drmState));
            _local4.push(((("St:" + _local5.startDate) + " End:") + _local5.endDate));
            _local4.push(("Per:" + _local5.period));
            if (event){
                if (event.mediaError){
                    _local4.push(((("MediaError:" + event.mediaError.detail) + ",") + event.mediaError.errorID));
                };
                _local4.push(("Evt:" + event.type));
            };
            _local3 = (_local3 + (_local4.join(", ") + "\n"));
            trace(("@@ DRM " + _local3));
            drmText = _local3;
            updateTf();
        }
        protected function updateDrmErrorText(event:DRMErrorEvent=null):void{
            var _local3:DRMTrait = drmTrait();
            if (!_local3){
                return;
            };
            var _local2:String = drmErrorText;
            if (_local2 != ""){
                _local2 = (_local2 + "\n");
            };
            if (event){
                _local2 = (_local2 + (((((("Error:" + event.errorID) + " ") + event.text) + " at ") + new Date().toDateString()) + "\n"));
            };
            drmErrorText = _local2;
            updateTf();
        }
        protected function audioTrait():AudioTrait{
            return ((currentMedia.getTrait("audio") as AudioTrait));
        }
        protected function validateAudioTrait(add:Boolean):void{
            var _local2:AudioTrait = audioTrait();
            doListener(_local2, "mutedChange", updateAudioText, add);
            doListener(_local2, "panChange", updateAudioText, add);
            doListener(_local2, "volumeChange", updateAudioText, add);
            updateAudioText();
        }
        protected function updateAudioText(event:AudioEvent=null):void{
            var _local4:AudioTrait = audioTrait();
            var _local2:String = audioText;
            if (!_local4){
                audioText = "";
                if (_local2 != audioText){
                    updateTf();
                };
                return;
            };
            var _local3:String = "<h2>Audio status</h2>";
            _local3 = (_local3 + (((((("Volume: " + _local4.volume.toFixed(2)) + " Muted? ") + deboolise(_local4.muted)) + " Pan: ") + _local4.pan.toFixed(3)) + "\n"));
            if (_local2 != audioText){
                audioText = _local3;
            };
            updateTf();
        }
        protected function seekTrait():SeekTrait{
            return ((currentMedia.getTrait("seek") as SeekTrait));
        }
        protected function validateSeekTrait(add:Boolean):void{
            var _local2:SeekTrait = seekTrait();
            doListener(_local2, "seekingChange", updateSeekText, add);
            updateSeekText();
        }
        protected function updateSeekText(event:SeekEvent=null):void{
            var _local2:String = seekText;
            if (!event){
                seekText = "";
            } else {
                seekText = ((("<h2>Seek</h2>Seek to: " + event.time.toFixed(3)) + ((event.seeking) ? " (seeking)" : "")) + "\n");
            };
            if (_local2 != seekText){
                updateTf();
            };
        }
        protected function timeTrait():TimeTrait{
            return ((currentMedia.getTrait("time") as TimeTrait));
        }
        protected function validateTimeTrait(add:Boolean):void{
            var _local2:TimeTrait = timeTrait();
            doListener(mediaPlayer, "currentTimeChange", updateTimeText, add);
            doListener(_local2, "complete", updateTimeText, add);
            doListener(_local2, "durationChange", updateTimeText, add);
            updateTimeText();
        }
        protected function updateTimeText(event:TimeEvent=null):void{
            var _local2:String = timeText;
            if (((event) && ((event.type == "complete")))){
                timeText = "<h2>Time Status</h2>Media complete.\n";
                if (_local2 != timeText){
                    updateTf();
                };
                return;
            };
            var _local3:String = "<h2>Time status</h2>";
            _local3 = (_local3 + (((mediaPlayer.currentTime.toFixed(3) + " of ") + mediaPlayer.duration.toFixed(3)) + "\n"));
            timeText = _local3;
            if (_local2 != timeText){
                updateTf();
            };
        }
        protected function dvrTrait():DVRTrait{
            return ((currentMedia.getTrait("dvr") as DVRTrait));
        }
        protected function validateDVRTrait(add:Boolean):void{
            var _local2:DVRTrait = dvrTrait();
            doListener(_local2, "isRecordingChange", updateDVRText, add);
            updateDVRText();
        }
        protected function updateDVRText(event:DVREvent=null):void{
            var _local2:String = dvrText;
            var _local4:DVRTrait = dvrTrait();
            if (!_local4){
                dvrText = "";
                if (_local2 != dvrText){
                    updateTf();
                };
                return;
            };
            var _local3:String = "<h2>DVR status</h2>";
            _local3 = (_local3 + (("Is recording? " + deboolise(_local4.isRecording)) + "\n"));
            if (_local2 != dvrText){
                dvrText = _local3;
            };
            updateTf();
        }
        protected function loadTrait(acceptProxy:Boolean=true):LoadTrait{
            var _local2:MediaElement = ((acceptProxy) ? currentMedia : C.recurseForProxies(currentMedia));
            if (!_local2){
                return (null);
            };
            return ((_local2.getTrait("load") as LoadTrait));
        }
        protected function validateLoadTrait(add:Boolean):void{
            var _local2:LoadTrait = loadTrait();
            doListener(_local2, "bytesTotalChange", updateLoadText, add);
            doListener(_local2, "bytesTotalChange", updateLoadText, add);
            doListener(_local2, "loadStateChange", updateLoadText, add);
            updateLoadText();
        }
        protected function updateLoadText(event:LoadEvent=null):void{
            var _local4:LoadTrait = loadTrait();
            var _local2:String = loadText;
            if (((!(_local4)) || ((_local4.loadState == "ready")))){
                loadText = "";
                if (loadText != _local2){
                    updateTf();
                };
                return;
            };
            var _local3:String = "<h2>Load status</h2>";
            _local3 = (_local3 + (((((("Bytes " + _local4.bytesLoaded) + " of ") + _local4.bytesTotal) + " (state:") + _local4.loadState) + ")\n"));
            loadText = _local3;
            if (loadText != _local2){
                updateTf();
            };
        }
        protected function playTrait():PlayTrait{
            return ((currentMedia.getTrait("play") as PlayTrait));
        }
        protected function validatePlayTrait(add:Boolean):void{
            var _local2:PlayTrait = playTrait();
            doListener(_local2, "canPauseChange", updatePlayText, add);
            doListener(_local2, "playStateChange", updatePlayText, add);
            updatePlayText();
        }
        protected function updatePlayText(event:PlayEvent=null):void{
            var _local3:PlayTrait = playTrait();
            var _local2:String = playText;
            if (!_local3){
                playText = "";
                if (playText != _local2){
                    updateTf();
                };
                return;
            };
            playText = "<h2>Play status</h2>";
            playText = (playText + (((("" + _local3.playState) + " (Can pause? ") + deboolise(_local3.canPause)) + ")\n"));
            if (playText != _local2){
                updateTf();
            };
        }
        protected function bufferTrait():BufferTrait{
            return ((currentMedia.getTrait("buffer") as BufferTrait));
        }
        protected function validateBufferTrait(add:Boolean):void{
            var _local2:BufferTrait = bufferTrait();
            doListener(_local2, "bufferTimeChange", updateBuffer, add);
            doListener(_local2, "bufferingChange", updateBuffer, add);
            updateBuffer();
        }
        protected function updateBuffer(event:BufferEvent=null):void{
            var _local4:BufferTrait = bufferTrait();
            var _local2:String = bufferText;
            if (!_local4){
                bufferText = "";
                if (bufferText != _local2){
                    updateTf();
                };
                return;
            };
            var _local3:String = "<h2>Buffer Trait</h2>";
            _local3 = (_local3 + ((((((("Target: " + _local4.bufferTime) + " Length: ") + _local4.bufferLength) + " Time: ") + _local4.bufferTime.toFixed(3)) + ((_local4.buffering) ? " (buffering)" : "")) + "\n"));
            bufferText = _local3;
            if (bufferText != _local2){
                updateTf();
            };
        }
        protected function dynamicStreamTrait(acceptProxy:Boolean=true):DynamicStreamTrait{
            var _local2:MediaElement = ((acceptProxy) ? currentMedia : C.recurseForProxies(currentMedia));
            return ((_local2.getTrait("dynamicStream") as DynamicStreamTrait));
        }
        protected function validateDynamicStreamTrait(add:Boolean):void{
            var _local2:DynamicStreamTrait = dynamicStreamTrait();
            doListener(_local2, "autoSwitchChange", updateDST, add);
            doListener(_local2, "numDynamicStreamsChange", updateDST, add);
            doListener(_local2, "switchingChange", updateDST, add);
            updateDST();
        }
        protected function updateDST(event:DynamicStreamEvent=null):void{
            var _local8 = null;
            var _local4 = null;
            var _local10:Boolean;
            var _local9:int;
            var _local5:Number;
            var _local7:DynamicStreamTrait = dynamicStreamTrait(false);
            var _local2:String = dstText;
            if (!_local7){
                dstText = "";
                if (_local2 != dstText){
                    updateTf();
                };
                return;
            };
            var _local3:String = "<h2>Streaming</h2>";
            _local3 = (_local3 + (("Automatic selection? " + deboolise(_local7.autoSwitch)) + " "));
            _local3 = (_local3 + (((("Current bitrate? " + _local7.getBitrateForIndex(_local7.currentIndex)) + " kbps") + ((((event) && (event.switching))) ? " (switch in progress)" : "")) + "\n"));
            var _local6:NetStreamLoadTrait = (loadTrait(false) as NetStreamLoadTrait);
            if (_local6){
                if (_local6.netStream){
                    _local3 = (_local3 + "Netstream:");
                    _local3 = (_local3 + ("FPS:" + _local6.netStream.currentFPS.toFixed(3)));
                    _local3 = (_local3 + (" Live delay:" + _local6.netStream.liveDelay.toFixed(3)));
                    _local3 = (_local3 + (" B Length:" + _local6.netStream.bufferLength.toFixed(3)));
                    _local3 = (_local3 + (" B Time:" + _local6.netStream.bufferTime.toFixed(3)));
                    _local3 = (_local3 + (" B Max:" + _local6.netStream.bufferTimeMax.toFixed(3)));
                    _local3 = (_local3 + "\n");
                };
                _local8 = (_local6.switchManager as DefaultHTTPStreamingSwitchManager);
                if (_local8){
                    _local4 = "<h2>Reliability:</h2> ";
                    _local10 = false;
                    _local9 = 0;
                    while (_local9 < _local7.numDynamicStreams) {
                        _local5 = _local8.getCurrentReliability(_local9);
                        if (!isNaN(_local5)){
                            _local10 = true;
                            _local4 = (_local4 + (((_local7.getBitrateForIndex(_local9) + "kbps:") + _local5) + "; "));
                        };
                        _local9++;
                    };
                    if (_local10){
                        _local3 = (_local3 + (_local4 + "\n"));
                    };
                };
            };
            dstText = _local3;
            if (_local2 != dstText){
                updateTf();
            };
        }
        protected function updateTf():void{
            var _local1:String = this.baseTitle;
            _local1 = (_local1 + latestResultsStr);
            if (this.mediaPlayer){
                _local1 = (_local1 + (("(DRM:" + mediaPlayer.drmState) + ")\n"));
            };
            _local1 = (_local1 + this.drmText);
            if (this.drmErrorText != ""){
                _local1 = (_local1 + ("<h1>DRM ERRORS</h1>" + this.drmErrorText));
            };
            _local1 = (_local1 + metadataString);
            _local1 = (_local1 + dstText);
            _local1 = (_local1 + seekText);
            _local1 = (_local1 + playText);
            _local1 = (_local1 + timeText);
            _local1 = (_local1 + audioText);
            _local1 = (_local1 + bufferText);
            _local1 = (_local1 + dvrText);
            _local1 = (_local1 + loadText);
            var _local2 = 1;
            titleField.scaleY = _local2;
            titleField.scaleX = _local2;
            titleField.htmlText = _local1;
        }
        protected function createChildren():void{
            var _local3 = null;
            var _local1:Number = 300;
            var _local5:Number = 250;
            _local3 = layoutMetadata;
            backgroundColor = 0;
            backgroundAlpha = 0.5;
            _local3.width = _local1;
            _local3.height = _local5;
            _local3.x = 40;
            _local3.y = 40;
            _local3.index = 2147483647;
            titleField = new ProfilerTextField();
            titleField.border = true;
            titleField.wordWrap = true;
            titleField.multiline = true;
            titleField.headerFontSize = 13;
            titleField.header2FontSize = 12;
            titleField.textFormat.size = 12;
            titleField.selectable = true;
            _local3 = titleField.layoutMetadata;
            var _local4 = 3;
            _local3.top = _local4;
            _local3.left = _local4;
            _local3.width = (_local1 - (_local4 * 2));
            _local3.height = (_local5 - (_local4 * 2));
            layoutRenderer.addTarget(titleField);
            dragButton = new LayoutTargetSprite();
            var _local2:Graphics = dragButton.graphics;
            _local2.beginFill(0xC0C0C0, 1);
            _local2.lineStyle(1, 0, 1);
            _local2.drawCircle(10, 10, 10);
            _local3 = dragButton.layoutMetadata;
            _local3.top = 0;
            _local3.right = 0;
            _local3.width = 20;
            _local3.height = 20;
            layoutRenderer.addTarget(dragButton);
            dragButton.addEventListener("mouseDown", startDragClip);
            dragButton.addEventListener("mouseUp", endDragClip);
        }
        override public function layout(availableWidth:Number, availableHeight:Number, deep:Boolean=true):void{
            onScreen();
            super.layout(availableWidth, availableHeight, deep);
            processDrawBackground(availableWidth, availableHeight);
        }
        protected function onScreen():void{
            if (renderer){
                layoutMetadata.x = Math.max(0, Math.min((renderer.container.layoutMetadata.width - layoutMetadata.width), layoutMetadata.x));
                layoutMetadata.y = Math.max(0, Math.min((renderer.container.layoutMetadata.height - layoutMetadata.height), layoutMetadata.y));
            };
        }
        protected function doListener(tgt:EventDispatcher, type:String, fn:Function, add:Boolean):void{
            try {
                if (add){
                    tgt.addEventListener(type, fn);
                } else {
                    tgt.removeEventListener(type, fn);
                };
            } catch(e:Error) {
                trace(("ERROR SETTING LISTENERS IN " + getQualifiedClassName(this)));
                trace(e.toString());
                trace(("And arguments: " + arguments));
            };
        }
        protected function deboolise(b:Boolean):String{
            return (((b) ? "Yes" : "No"));
        }
        protected function processDrawBackground(availableWidth:Number, availableHeight:Number):void{
            if (isNaN((((backgroundColor * backgroundAlpha) * availableWidth) * availableHeight))){
                return;
            };
            this.graphics.clear();
            this.graphics.beginFill(this.backgroundColor, this.backgroundAlpha);
            this.graphics.drawRect(0, 0, availableWidth, availableHeight);
            this.graphics.endFill();
        }
        protected function everyFrame(event:Event):void{
            var _local10:Number;
            var _local18:Number;
            var _local12:Number;
            var _local21:Number;
            var _local6:Number;
            var _local4:Number;
            var _local13:Number;
            var _local7:Number;
            var _local17:Number;
            var _local11:Number;
            var _local20:Number;
            var _local2:Number;
            var _local16 = null;
            var _local19 = null;
            var _local5 = null;
            var _local8:MediaElement = C.recurseForProxies(currentMedia);
            if (!_local8){
                return;
            };
            var _local14:TimeTrait = (_local8.getTrait("time") as TimeTrait);
            if (!_local14){
                return;
            };
            if (isNaN(_local14.duration)){
                frameCounter = (frameCounter + 1);
                return;
            };
            var _local3:Object = {
                currentTime:_local14.currentTime,
                duration:_local14.duration,
                percents:0
            };
            var _local9:Boolean;
            if (!lastTimes){
                rollingAverage = new Vector.<Number>();
                _local9 = true;
                lastTimes = _local3;
            };
            if (((!((_local14.currentTime == lastTimes.currentTime))) || (!((_local14.duration == lastTimes.duration))))){
                _local9 = true;
            };
            if (_local9){
                _local10 = (_local14.currentTime - lastTimes.currentTime);
                _local18 = (_local14.duration - lastTimes.duration);
                _local12 = (_local14.duration - _local14.currentTime);
                _local21 = (100 * (_local14.currentTime / _local14.duration));
                _local6 = (_local21 - lastTimes.percents);
                if ((((_local6 < 0)) || ((_local14.currentTime == 0)))){
                    trace(("INITIALISE WITH\n" + ["timestamp", "duration", "time", "nstime", "%gap", "event", "netdata"].join("\t")));
                    _local6 = 0;
                    frameCounter = 1;
                };
                _local4 = (_local10 / frameCounter);
                _local13 = (_local6 / frameCounter);
                _local7 = getRollingAverage();
                _local17 = (_local14.currentTime - lastTimes.currentTime);
                _local11 = (_local14.duration - lastTimes.duration);
                _local20 = 0;
                _local2 = -1;
                latestResultsStr = "OEF\t";
                if ((_local8 is VideoElement)){
                    _local16 = (_local8 as VideoElement);
                    _local19 = (_local16.getTrait("load") as NetStreamLoadTrait);
                    _local5 = ((_local19) ? _local19.netStream : null);
                    if (_local5){
                        if (!listenedNs[_local5]){
                            for each (var _local15:NetStream in listenedNs) {
                                _local15.removeEventListener("netStatus", traceNetStatus);
                                _local15.removeEventListener("mediaTypeData", traceNetData);
                                delete listenedNs[_local15];
                            };
                            _local5.addEventListener("netStatus", traceNetStatus, false, 1, false);
                            _local5.addEventListener("mediaTypeData", traceNetData);
                            listenedNs[_local5] = _local5;
                        };
                        _local2 = _local5.time;
                    };
                };
                latestResultsStr = ((((((((((((getTimer() + "\t") + _local14.duration.toFixed(3)) + "\t") + _local14.currentTime.toFixed(3)) + "\t") + _local2.toFixed(3)) + "\t") + _local13.toFixed(3)) + "\t") + previousNetStatus) + "\t") + previousNetData);
                previousNetStatus = "";
                previousNetData = "";
                latestResultsStr = (latestResultsStr + "\n");
                updateTf();
                frameCounter = 1;
                lastTimes = _local3;
                lastTimes.percents = _local21;
                rollingAverage.push(_local4);
            } else {
                frameCounter = (frameCounter + 1);
            };
        }
        protected function traceNetData(event:NetDataEvent):void{
            var _local2:NetStream = (event.target as NetStream);
            var _local3:String = (((event.info.handler + " @ ") + getTimer()) + " ms");
            _local3 = (_local3 + JSON.encode(event.info.args));
            if (previousNetData){
                previousNetData = (previousNetData + " | ");
            };
            previousNetData = (previousNetData + _local3);
        }
        protected function traceNetStatus(event:NetStatusEvent):void{
            var _local2:String = (((event.info.code + " @ ") + getTimer()) + " ms");
            if (previousNetStatus){
                previousNetStatus = ((previousNetStatus + ",") + _local2);
            } else {
                previousNetStatus = _local2;
            };
        }
        protected function getRollingAverage():Number{
            var _local2:int;
            var _local1 = 0;
            _local2 = 0;
            while (_local2 < rollingAverage.length) {
                _local1 = (_local1 + rollingAverage[_local2]);
                _local2++;
            };
            return ((_local1 / rollingAverage.length));
        }

    }
}//package rte.osmf.debug 
﻿package rte.osmf.debug {
    import org.osmf.layout.*;
    import flash.events.*;
    import flash.geom.*;
    import flash.text.*;

    public class ProfilerTextField extends LayoutTargetSprite {

        public static const DEFAULT_CSS:String = "*  { fontSize:[SIZE]; fontWeight:normal;  color:[COLOR]; }\np  { fontSize:[SIZE]; fontWeight:normal;  color:[COLOR]; }\nh1 { fontSize:[SIZEHEADER]; fontWeight:bold;  }\nh2 { fontSize:[SIZEHEADERSMALL]; fontWeight:bold;  }\nli { fontSize:[SIZE];  color:[COLOR]; }\na  { color:[LINKCOLOR]; textDecoration:none; }\na:hover { color:[LINKCOLOR]; textDecoration:underline; }\nrte { color:[RTECOLOR]; }\ninfo {color:[LINKCOLOR]; }";

        private var _antiAliasType:String = "advanced";
        private var _multiline:Boolean = false;
        private var _wordWrap:Boolean = false;
        private var _border:Boolean = false;
        private var _embedFonts:Boolean = false;
        private var _background:Boolean = false;
        private var _selectable:Boolean = false;
        private var _backgroundColor:int = 0;
        private var _borderColor:int = 0xFFFFFF;
        protected var lastWidth:Number;
        protected var lastHeight:Number;
        protected var truncatedWidth:Number = NaN;
        protected var truncInProgress:Boolean = false;
        protected var _truncated:Boolean = false;
        private var _htmlText:String = "";
        protected var tf:TextField;
        private var _textColor:int = 0xFFFFFF;
        private var _linkColor:int = 0xFFCC00;
        private var _rteColor:int = 0xCACACA;
        private var _inputTextColor:int = 0;
        private var _styleSheet:StyleSheet;
        private var _textFormat:TextFormat;
        private var _inputTextFormat:TextFormat;
        private var _baseFontSize:int = 12;
        private var _headerFontSize:int = 16;
        private var _header2FontSize:int = 14;
        private var _styleSheetSource:String;
        protected var p:Point;

        public function ProfilerTextField(layoutMetadata:LayoutMetadata=null){
            super(layoutMetadata);
            createChildren();
            addEventListener("addedToStage", refreshLayoutOnStage);
        }
        protected static function toCssColor(i:int):String{
            var _local2:String = Math.abs(i).toString(16);
            _local2 = ("000000" + _local2);
            _local2 = _local2.substr(-6);
            return (("#" + _local2));
        }
        public static function setHtmlStyles(tf:TextField, styleSheet:StyleSheet=null, textFormat:TextFormat=null):void{
            if (textFormat){
                if (styleSheet){
                    tf.styleSheet = null;
                };
                tf.defaultTextFormat = textFormat;
                tf.setTextFormat(textFormat);
            };
            if (styleSheet){
                tf.styleSheet = styleSheet;
            };
        }

        public function checkTfSettings(tf:TextField):void{
            if (!tf){
                return;
            };
            tf.border = border;
            tf.borderColor = borderColor;
            tf.background = background;
            tf.backgroundColor = backgroundColor;
            tf.selectable = selectable;
            tf.embedFonts = embedFonts;
            tf.multiline = multiline;
            tf.wordWrap = wordWrap;
            tf.antiAliasType = antiAliasType;
            tf.autoSize = "none";
            setHtmlStyles(tf, styleSheet, textFormat);
        }
        public function get antiAliasType():String{
            return (_antiAliasType);
        }
        public function set antiAliasType(s:String):void{
            _antiAliasType = s;
        }
        public function get multiline():Boolean{
            return (_multiline);
        }
        public function set multiline(b:Boolean):void{
            _multiline = b;
        }
        public function get wordWrap():Boolean{
            return (_wordWrap);
        }
        public function set wordWrap(b:Boolean):void{
            _wordWrap = b;
        }
        public function get border():Boolean{
            return (_border);
        }
        public function set border(b:Boolean):void{
            _border = b;
        }
        public function get embedFonts():Boolean{
            return (_embedFonts);
        }
        public function set embedFonts(b:Boolean):void{
            _embedFonts = b;
        }
        public function get background():Boolean{
            return (_background);
        }
        public function set background(b:Boolean):void{
            _background = b;
        }
        public function get selectable():Boolean{
            return (_selectable);
        }
        public function set selectable(b:Boolean):void{
            _selectable = b;
        }
        public function get backgroundColor():int{
            return (_backgroundColor);
        }
        public function set backgroundColor(i:int):void{
            _backgroundColor = i;
        }
        public function get borderColor():int{
            return (_borderColor);
        }
        public function set borderColor(i:int):void{
            _borderColor = i;
        }
        protected function checkTruncate(n:Number, s:String):void{
            var _local5 = null;
            truncInProgress = true;
            var _local3:Rectangle = tf.getBounds(this);
            if ((((_local3.width == _local3.height)) && ((_local3.width == 0)))){
                truncInProgress = false;
                tf.text = s;
                return;
            };
            if (((!(isNaN(truncatedWidth))) && ((truncatedWidth == n)))){
                truncInProgress = false;
                return;
            };
            if (s == null){
                s = "";
            };
            tf.text = s;
            tf.setTextFormat(textFormat);
            _truncated = false;
            if (tf.textWidth < n){
                truncInProgress = false;
                return;
            };
            var _local6:String = "...";
            var _local4:String = (s.substr(0, (s.length - _local6.length)) + _local6);
            if (tf.textWidth > n){
                if (s.indexOf(" ") > -1){
                    _local5 = s.split(" ");
                    _local5.pop();
                    _local4 = (_local5.join(" ") + _local6);
                    tf.text = _local4;
                    tf.setTextFormat(textFormat);
                    _truncated = true;
                    //unresolved if
                };
                while ((((tf.textWidth > n)) && ((_local4.length > (_local6.length + 1))))) {
                    _local4 = (_local4.substr(0, ((_local4.length - _local6.length) - 1)) + _local6);
                    tf.text = _local4;
                    tf.setTextFormat(textFormat);
                    _truncated = true;
                };
            };
            truncatedWidth = n;
            truncInProgress = false;
        }
        public function get truncated():Boolean{
            return (_truncated);
        }
        public function get htmlText():String{
            return (_htmlText);
        }
        public function set htmlText(s:String):void{
            if (s == null){
                s = "";
            };
            _htmlText = s;
            truncatedWidth = NaN;
            refreshLayoutOnStage();
        }
        protected function createChildren():void{
            if (tf){
                throw (new Error("TF ALREADY CREATED"));
            };
            tf = new TextField();
            tf.antiAliasType = "advanced";
            addChild(tf);
        }
        public function get textColor():int{
            return (_textColor);
        }
        public function set textColor(i:int):void{
            _textColor = i;
        }
        public function get linkColor():int{
            return (_linkColor);
        }
        public function set linkColor(i:int):void{
            _linkColor = i;
        }
        public function get rteColor():int{
            return (_rteColor);
        }
        public function set rteColor(i:int):void{
            _rteColor = i;
        }
        public function get inputTextColor():int{
            return (_inputTextColor);
        }
        public function set inputTextColor(i:int):void{
            _inputTextColor = i;
        }
        public function get styleSheet():StyleSheet{
            if (_styleSheet == null){
                _styleSheet = new StyleSheet();
                _styleSheet.parseCSS(styleSheetSource);
            };
            return (_styleSheet);
        }
        public function get textFormat():TextFormat{
            if (_textFormat == null){
                _textFormat = textFormatClone();
            };
            return (_textFormat);
        }
        public function set textFormat(tft:TextFormat):void{
            _textFormat = tft;
        }
        public function textFormatClone():TextFormat{
            return (new TextFormat("StdFont", baseFontSize, textColor));
        }
        public function get inputTextFormat():TextFormat{
            if (_inputTextFormat == null){
                _inputTextFormat = inputTextFormatClone();
            };
            return (_inputTextFormat);
        }
        public function set inputTextFormat(tft:TextFormat):void{
            _inputTextFormat = tft;
        }
        public function inputTextFormatClone():TextFormat{
            return (new TextFormat("StdFont", baseFontSize, inputTextColor));
        }
        public function get baseFontSize():int{
            return (_baseFontSize);
        }
        public function set baseFontSize(i:int):void{
            _baseFontSize = i;
        }
        public function get headerFontSize():int{
            return (_headerFontSize);
        }
        public function set headerFontSize(i:int):void{
            _headerFontSize = i;
        }
        public function get header2FontSize():int{
            return (_header2FontSize);
        }
        public function set header2FontSize(i:int):void{
            _header2FontSize = i;
        }
        public function get styleSheetSource():String{
            var _local1:String = _styleSheetSource;
            if (!_local1){
                _local1 = "*  { fontSize:[SIZE]; fontWeight:normal;  color:[COLOR]; }\np  { fontSize:[SIZE]; fontWeight:normal;  color:[COLOR]; }\nh1 { fontSize:[SIZEHEADER]; fontWeight:bold;  }\nh2 { fontSize:[SIZEHEADERSMALL]; fontWeight:bold;  }\nli { fontSize:[SIZE];  color:[COLOR]; }\na  { color:[LINKCOLOR]; textDecoration:none; }\na:hover { color:[LINKCOLOR]; textDecoration:underline; }\nrte { color:[RTECOLOR]; }\ninfo {color:[LINKCOLOR]; }";
            };
            if (_local1.indexOf("[") > -1){
                _local1 = _local1.split("[SIZE]").join(baseFontSize);
                _local1 = _local1.split("[SIZEHEADER]").join(headerFontSize);
                _local1 = _local1.split("[SIZEHEADERSMALL]").join(header2FontSize);
                _local1 = _local1.split("[COLOR]").join(toCssColor(textColor));
                _local1 = _local1.split("[LINKCOLOR]").join(toCssColor(linkColor));
                _local1 = _local1.split("[RTECOLOR]").join(toCssColor(rteColor));
            };
            return (_local1);
        }
        public function set styleSheetSource(s:String):void{
            var _local2:String = styleSheetSource;
            if (styleSheetSource){
                try {
                    styleSheet.parseCSS(styleSheetSource);
                } catch(e:Error) {
                    trace((("Could not parse CSS, reverting to previous CSS. Stylesheet supplied was:\n" + s) + "-----"));
                    s = _local2;
                    styleSheet.parseCSS(_local2);
                };
            };
            _styleSheetSource = s;
        }
        protected function populateTextField(startW:Number, startH:Number):void{
            checkTfSettings(tf);
            setHtmlStyles(tf, styleSheet, textFormat);
            if (tf.width != startW){
                tf.width = startW;
            };
            if (tf.height != startW){
                tf.height = startH;
            };
            tf.htmlText = ((htmlText) ? htmlText : "");
            if (tf.width != startW){
                tf.width = startW;
            };
            if (tf.height != startW){
                tf.height = startH;
            };
        }
        protected function refreshLayoutOnStage(event:Event=null):void{
            if (p){
                layout(p.x, p.y);
            };
        }
        override public function layout(availableWidth:Number, availableHeight:Number, deep:Boolean=true):void{
            p = new Point(availableWidth, availableHeight);
            populateTextField(availableWidth, availableHeight);
            var _local4:int;
            tf.y = _local4;
            tf.x = _local4;
            super.layout(availableWidth, availableHeight, deep);
        }

    }
}//package rte.osmf.debug 
﻿package rte.domainChecking {
    import flash.events.*;
    import flash.utils.*;
    import flash.net.*;
    import __AS3__.vec.*;
    import flash.errors.*;

    public class BlockedDomainChecker extends EventDispatcher {

        private static var _instance:BlockedDomainChecker;

        private var checksInProgress:Dictionary;
        private var blockedDomainResults:Dictionary;
        private var unreachableDomains:Dictionary;
        private var validatedDomains:Dictionary;
        private var checkedDomains:Dictionary;

        public function BlockedDomainChecker(se:SingletonEnforcer, target:IEventDispatcher=null){
            super(target);
            this.checksInProgress = new Dictionary();
            this.blockedDomainResults = new Dictionary();
            this.unreachableDomains = new Dictionary();
            this.validatedDomains = new Dictionary();
            this.checkedDomains = new Dictionary();
        }
        public static function get instance():BlockedDomainChecker{
            if (!_instance){
                _instance = new BlockedDomainChecker(new SingletonEnforcer());
            };
            return (_instance);
        }
        public static function checkDomains(... _args):void{
            instance.checkDomains.apply(instance, _args);
        }
        public static function checkDomain(url:String):void{
            instance.checkDomain(url);
        }
        public static function isChecked(url:String):Boolean{
            return (instance.isChecked(url));
        }
        public static function isInProgress(url:String):Boolean{
            return (instance.isInProgress(url));
        }
        public static function isBlocked(url:String):Boolean{
            return (instance.isBlocked(url));
        }
        public static function isUnreachable(url:String):Boolean{
            return (instance.isUnreachable(url));
        }
        public static function isValid(url:String):Boolean{
            return (instance.isValid(url));
        }
        public static function get checksAreInProgress():Boolean{
            return (instance.checksAreInProgress);
        }
        public static function get domainsAreBlocked():Boolean{
            return (instance.domainsAreBlocked);
        }
        public static function get blockedDomains():Vector.<String>{
            return (instance.blockedDomains);
        }
        public static function setBlocked(url:String):void{
            instance.setBlocked(url);
        }

        public function checkDomains(... _args):void{
            var _local3:String;
            var _local4:Array;
            trace(((("CHECK DOMAINS WITH " + _args.length) + " items as ") + _args));
            var _local2:int;
            while (_local2 < _args.length) {
                _local3 = (_args[_local2] as String);
                _local4 = (_args[_local2] as Array);
                if (((_local3) && (_local3.length))){
                    this.checkDomain(_local3);
                } else {
                    if (((_local4) && (_local4.length))){
                        this.checkDomains.apply(this, _local4);
                    };
                };
                _local2++;
            };
        }
        public function checkDomain(url:String):void{
            var ul:* = null;
            var url:* = url;
            if (url.substr(0, 4) != "http"){
                url = ("http://" + url);
            };
            var cd:* = "crossdomain.xml";
            if (url.indexOf(cd) == -1){
                if (url.substr(-1) != "/"){
                    url = (url + "/");
                };
                url = (url + cd);
            };
            ul = new URLLoader();
            var ur:* = new URLRequest(url);
            this.checksInProgress[ul] = url;
            try {
                ul.addEventListener(IOErrorEvent.IO_ERROR, this.handleResponseEvent);
                ul.addEventListener(SecurityErrorEvent.SECURITY_ERROR, this.handleResponseEvent);
                ul.addEventListener(Event.COMPLETE, this.handleResponseEvent);
                ul.load(ur);
            } catch(e:Error) {
                handleResponse(ul, e);
            };
        }
        protected function handleResponseEvent(e:Event):void{
            var _local2:URLLoader = (e.target as URLLoader);
            this.handleResponse(_local2, e);
        }
        protected function handleResponse(ul:URLLoader, result):void{
            var _local3:String = this.checksInProgress[ul];
            ul.removeEventListener(IOErrorEvent.IO_ERROR, this.handleResponseEvent);
            ul.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, this.handleResponseEvent);
            ul.removeEventListener(Event.COMPLETE, this.handleResponseEvent);
            delete this.checksInProgress[ul];
            this.processResponseAfterClearingLoader(_local3, result);
        }
        protected function processResponseAfterClearingLoader(url:String, result):void{
            var _local8:Object;
            this.checkedDomains[url] = true;
            delete this.blockedDomainResults[url];
            delete this.unreachableDomains[url];
            delete this.validatedDomains[url];
            var _local3:Event = (result as Event);
            var _local4:SecurityError = (result as SecurityError);
            var _local5:SecurityErrorEvent = (result as SecurityErrorEvent);
            var _local6:IOError = (result as IOError);
            var _local7:IOErrorEvent = (result as IOErrorEvent);
            if (((_local3) && ((_local3.type == Event.COMPLETE)))){
                this.validatedDomains[url] = true;
            } else {
                if (((_local4) || (_local5))){
                    this.blockedDomainResults[url] = true;
                } else {
                    if (((_local6) || (_local7))){
                        this.unreachableDomains[url] = true;
                    };
                };
            };
            dispatchEvent(this.getResult(url));
            for (_local8 in this.checksInProgress) {
                return;
            };
            trace(("COMPLETION:\n" + this.toString()));
            dispatchEvent(new Event(Event.COMPLETE));
        }
        public function getResult(url:String):DomainCheckerResult{
            if (this.isChecked(url)){
                return (new DomainCheckerResult(url, this.isInProgress(url), this.isChecked(url), this.isBlocked(url), this.isUnreachable(url), this.isValid(url)));
            };
            return (new DomainCheckerResult(url, this.isInProgress(url), false, false, false, false));
        }
        private function onlyIfChecked(url:String):void{
            if (!this.isChecked(url)){
                throw (new Error((("Unable to determine status until domain " + url) + " is checked.")));
            };
        }
        public function isChecked(url:String):Boolean{
            return (!((this.checkedDomains[url] == undefined)));
        }
        public function isInProgress(url:String):Boolean{
            return (Boolean(this.checksInProgress[url]));
        }
        public function isBlocked(url:String):Boolean{
            this.onlyIfChecked(url);
            return (!((this.blockedDomainResults[url] == undefined)));
        }
        public function isUnreachable(url:String):Boolean{
            this.onlyIfChecked(url);
            return (!((this.unreachableDomains[url] == undefined)));
        }
        public function isValid(url:String):Boolean{
            this.onlyIfChecked(url);
            return (!((this.validatedDomains[url] == undefined)));
        }
        override public function toString():String{
            var _local2:String;
            var _local1:Vector.<String> = new Vector.<String>();
            _local1.push("BlockedDomainChecker:");
            _local1.push("Known:");
            for (_local2 in this.checkedDomains) {
                for (_local2 in this.checkedDomains) {
                    _local1.push(this.getResult(_local2).toString());
                };
                break;
            };
            for (_local2 in this.checksInProgress) {
                _local1.push("Uncertain:");
                for (_local2 in this.checksInProgress) {
                    _local1.push(this.getResult(_local2).toString());
                };
                break;
            };
            return (_local1.join("\n"));
        }
        public function get checksAreInProgress():Boolean{
            var _local1:Object;
            for (_local1 in this.checksInProgress) {
                return (true);
            };
            return (false);
        }
        public function get domainsAreBlocked():Boolean{
            var _local1:Object;
            if (this.checksAreInProgress){
                throw (new Error("Please wait until all checks are complete before checking."));
            };
            for (_local1 in this.blockedDomainResults) {
                return (true);
            };
            return (false);
        }
        public function get blockedDomains():Vector.<String>{
            var _local2:String;
            var _local1:Vector.<String> = new Vector.<String>();
            for (_local2 in this.blockedDomainResults) {
                _local2 = _local2.split("://").pop();
                _local2 = _local2.split("/").shift();
                _local1.push(_local2.replace("crossdomain.xml", ""));
            };
            return (_local1);
        }
        public function setBlocked(url:String):void{
            var _local2:Object;
            var _local3:String;
            for (_local2 in this.checksInProgress) {
                _local3 = this.checksInProgress[_local2];
                if (_local3.indexOf(url) > -1){
                    this.handleResponse(this.checksInProgress[url], new SecurityError());
                    return;
                };
            };
            this.processResponseAfterClearingLoader(url, new SecurityError());
        }

    }
}//package rte.domainChecking 

class SingletonEnforcer {

    public function SingletonEnforcer(){
    }
}
﻿package rte.domainChecking {
    import flash.events.*;

    public class DomainCheckerResult extends Event {

        public static const DOMAIN_CHECKER_RESULT:String = "domainCheckerResult";
        public static const DOMAIN_CHECK_IN_PROGRESS:String = "domainCheckInProgress";
        public static const DOMAIN_NOT_CHECKED:String = "domainNotChecked";
        public static const DOMAIN_UNREACHABLE:String = "domainUnreachable";
        public static const DOMAIN_BLOCKED:String = "domainBlocked";
        public static const DOMAIN_VALID:String = "domainValid";

        public var url:String;
        public var isInProgress:Boolean;
        public var isChecked:Boolean;
        public var isBlocked:Boolean;
        public var isUnreachable:Boolean;
        public var isValid:Boolean;

        public function DomainCheckerResult(urlVal:String, isInProgressVal:Boolean, isCheckedVal:Boolean, isBlockedVal:Boolean, isUnreachableVal:Boolean, isValidVal:Boolean, bubbles:Boolean=false, cancelable:Boolean=false){
            super(DOMAIN_CHECKER_RESULT, bubbles, cancelable);
            this.url = urlVal;
            this.isChecked = isCheckedVal;
            this.isBlocked = isBlockedVal;
            this.isUnreachable = isUnreachableVal;
            this.isValid = isValidVal;
        }
        public function get formattedResult():String{
            if (this.isInProgress){
                return (DomainCheckerResult.DOMAIN_CHECK_IN_PROGRESS);
            };
            if (this.isChecked){
                if (this.isValid){
                    return (DomainCheckerResult.DOMAIN_VALID);
                };
                if (this.isBlocked){
                    return (DomainCheckerResult.DOMAIN_BLOCKED);
                };
                if (this.isUnreachable){
                    return (DomainCheckerResult.DOMAIN_UNREACHABLE);
                };
            };
            return (DomainCheckerResult.DOMAIN_NOT_CHECKED);
        }
        override public function toString():String{
            return (formatToString("DomainCheckerResult", "url", "formattedResult"));
        }
        override public function clone():Event{
            return (new DomainCheckerResult(this.url, this.isInProgress, this.isChecked, this.isBlocked, this.isUnreachable, this.isValid, bubbles, cancelable));
        }

    }
}//package rte.domainChecking 
﻿package rte.playerInsights {

    public class AdvertPlayerInsight {

        public static const PREROLL:String = "preroll";
        public static const MIDROLL:String = "midroll";
        public static const POSTROLL:String = "postroll";
        public static const OVERLAY:String = "overlay";
        public static const UNKNOWN:String = "unknown";

        public var position:String;
        public var mediaUrl:String;
        public var originatingAdTag:String;
        public var contentId:String;
        public var preRoll:Boolean = false;
        public var postRoll:Boolean = false;

        public function getPlayingIndex():int{
            return (((this.position) ? int(this.position.split("_").pop()) : 0));
        }
        public function getAdType():String{
            var _local1:String = this.position.substr(0, this.position.indexOf("_"));
            if (_local1 == "X"){
                return (OVERLAY);
            };
            if (this.preRoll){
                return (PREROLL);
            };
            if (this.postRoll){
                return (POSTROLL);
            };
            return (MIDROLL);
        }
        public function toString():String{
            return ((("[AdvertPlayerInsight : " + [this.getAdType(), this.position, this.originatingAdTag, this.mediaUrl, this.contentId].join(" : ")) + "]"));
        }

    }
}//package rte.playerInsights 
﻿package rte.playerInsights {
    import flash.events.*;

    public class PlayerInsightsEvent extends Event {

        public static const AD_REQUEST_INSIGHT:String = "adRequestInsight";
        public static const AD_START_INSIGHT:String = "adStartInsight";
        public static const AD_END_INSIGHT:String = "adEndInsight";
        public static const AD_CLICK_INSIGHT:String = "adClickInsight";

        public var insightData:AdvertPlayerInsight;

        public function PlayerInsightsEvent(type:String, insightData:AdvertPlayerInsight, bubbles:Boolean=false, cancelable:Boolean=false){
            super(type, bubbles, cancelable);
            this.insightData = insightData;
        }
        override public function clone():Event{
            return (new PlayerInsightsEvent(type, this.insightData, bubbles, cancelable));
        }

    }
}//package rte.playerInsights 
﻿package rte.playerInsights {
    import flash.events.*;

    public class AdvertisingEventDispatcher extends EventDispatcher {

        public static const ADVERTISING_DESCRIPTOR_NAMESPACE:String = "http://www.makeyuppey.com/advertisingDescriptorsNotTransmitted";
        public static const ADVERTISING_DESCRIPTOR_KEY:String = "api";

        private static var _instance:AdvertisingEventDispatcher;

        public function AdvertisingEventDispatcher(pleaseUseSingletonMethods:SingletonEnforcer){
        }
        public static function get instance():AdvertisingEventDispatcher{
            if (!_instance){
                _instance = new AdvertisingEventDispatcher(new SingletonEnforcer());
            };
            return (_instance);
        }

    }
}//package rte.playerInsights 

class SingletonEnforcer {

    public function SingletonEnforcer(){
    }
}
﻿package rte.utils {
    import rte.osmf.skinshared.*;
    import flash.external.*;

    public class JSInterface {

        public var clbkPlayPause:Function;
        public var clbkSetMute:Function;
        public var clbkSetVolume:Function;
        public var clbkSeek:Function;
        public var clbkLoadFeed:Function;
        public var clbkShowShare:Function;
        public var clbkChangeDSRate:Function;
        public var clbkCurrentPosition:Function;
        public var clbkCurrentState:Function;
        public var clbkIsPlaying:Function;
        public var clbkGetMute:Function;
        public var clbkGetVolume:Function;
        public var clbkOSMFLoadRaw:Function;
        public var clbkTotalDuration:Function;
        public var clbkOnVolumeChange:Function;
        public var clbkDSAuto:Function;
        public var clbkDSIncrease:Function;
        public var clbkDSDecrease:Function;
        public var clbkIsEighteen:Function;
        public var clbkIsEighteenWithPin:Function;
        public var clbkCompanion:Function;
        public var clbkFlexBrowser:Function;
        public var clbkGetEnableStageVideo:Function;
        public var clbkSetEnableStageVideo:Function;
        private var lastState:int = -1;

        public function mapCallbacks():void{
            mapJSFunction(clbkPlayPause, "playPauseMedia");
            mapJSFunction(clbkSetMute, "setMute");
            mapJSFunction(clbkSetVolume, "setVolume");
            mapJSFunction(clbkSeek, "seekMedia");
            mapJSFunction(clbkLoadFeed, "loadFeed");
            mapJSFunction(clbkShowShare, "showShare");
            mapJSFunction(clbkChangeDSRate, "changeDSRate");
            mapJSFunction(clbkCurrentPosition, "currentPosition");
            mapJSFunction(clbkCurrentState, "getStatus");
            mapJSFunction(clbkOSMFLoadRaw, "loadRaw");
            mapJSFunction(clbkIsPlaying, "getIsPlaying");
            mapJSFunction(clbkGetMute, "getMute");
            mapJSFunction(clbkGetVolume, "getVolume");
            mapJSFunction(clbkTotalDuration, "totalDuration");
            mapJSFunction(clbkDSAuto, "setDSAuto");
            mapJSFunction(clbkDSIncrease, "setDSIncrease");
            mapJSFunction(clbkDSDecrease, "setDSDecrease");
            mapJSFunction(clbkIsEighteen, "confirmViewerIsMature");
            mapJSFunction(clbkIsEighteenWithPin, "confirmViewerIsMatureWithPin");
            mapJSFunction(clbkCompanion, "onCompanionAdlist");
            mapJSFunction(clbkFlexBrowser, "browserURLChange");
            mapJSFunction(clbkSetEnableStageVideo, "setEnableStageVideo");
            mapJSFunction(clbkGetEnableStageVideo, "getEnableStageVideo");
        }
        protected function mapJSFunction(callback:Function, jsFunctionName:String):void{
            if (((ExternalInterface.available) && (!((callback == null))))){
                try {
                    ExternalInterface.addCallback(jsFunctionName, callback);
                } catch(e:Error) {
                };
            };
        }
        public function notifyCommandReceived(sc:SkinCommand, id:String):void{
            if (ExternalInterface.available){
                try {
                    ExternalInterface.call("userCommandReceived", sc.type, sc.value, id);
                } catch(e:Error) {
                    trace(("ExternalInterface call failed;\n" + e.getStackTrace()));
                };
            };
        }
        public function notifyPlayState(state:int, id:String):void{
            if (lastState == state){
                return;
                /*not popped
                trace("Not notifying same state.")
                */
            };
            lastState = state;
            if (ExternalInterface.available){
                try {
                    ExternalInterface.call("onPlayerStateChanged", state, id);
                } catch(e:Error) {
                    trace(("ExternalInterface call failed;\n" + e.getStackTrace()));
                };
            };
        }
        public function notifyVolumeChange(volume:Number, muted:Boolean):void{
            if (ExternalInterface.available){
                ExternalInterface.call("onVolumeChange", volume, muted);
            };
        }
        public function notifyPlayPosition(position:Number, duration:Number):void{
            if (isNaN(position)){
                position = 0;
            };
            if (isNaN(duration)){
                duration = 0;
            };
            if (((ExternalInterface.available) && ((position >= 0)))){
                if (duration < 0){
                    return;
                };
                try {
                    ExternalInterface.call("onPositionChange", position.toFixed(3), duration.toFixed(3));
                } catch(e:SecurityError) {
                    trace("SecurityError in ExternalInterface");
                };
            };
        }
        public function notifyDataRates(autoSelect:Boolean, selectedRate:Number=NaN, availableRates:Array=null):void{
            if (ExternalInterface.available){
                ExternalInterface.call("onDataRatesChange", autoSelect, selectedRate, availableRates);
            };
        }
        public function notifyNowNextChange(showNext:Boolean):void{
            if (ExternalInterface.available){
                ExternalInterface.call("onNowNextChange", showNext);
            };
        }
        public function notifyAgeRestriction(needsPin:Boolean):void{
            if (ExternalInterface.available){
                trace((("CALLING onAgeRestrictedContent(" + needsPin) + ")"));
                ExternalInterface.call("onAgeRestrictedContent", needsPin);
            };
        }
        public function notifyCompanions(vs:Array=null):void{
        }

    }
}//package rte.utils 
﻿package rte.utils {
    import flash.utils.*;
    import flash.net.*;

    public class Storage {

        private var _sharedObj:SharedObject;

        public function Storage(storageId:String){
            _sharedObj = SharedObject.getLocal(storageId, "/");
        }
        public static function save(storageId:String, key:String, value:Object):void{
            var _local4 = null;
            if (storageId == null){
                throw (new Error("Storage id should not be null"));
            };
            var _local5:int;
            try {
                try {
                    _local4 = new Storage(storageId);
                    _local4.setValue(key, value);
                } catch(e:Error) {
                    trace(((("ERROR SAVING " + storageId) + "\n") + e));
                    _local5 = 0;
                    //unresolved jump
                    !ERROR!                    _local5 = 1;
                };
            } catch(#InvalidMultinameIndex#) {
                _local6 = !NULL!;
                _local5 = 1;
            };
            if (_local4 != null){
                _local4.close();
            };
            //unexpected switch
            throw (_local6);
            return;
            /*not popped
            _local5
            */
        }
        public static function load(storageId:String, key:String):Object{
            var _local4 = null;
            if (storageId == null){
                throw (new Error("Storage id should not be null"));
            };
            var _local3:Object;
            var _local5:int;
            try {
                try {
                    _local4 = new Storage(storageId);
                    _local3 = _local4.getValue(key);
                } catch(e:Error) {
                    trace(((("ERROR LOADING " + storageId) + "\n") + e));
                    _local3 = null;
                    _local5 = 0;
                    //unresolved jump
                    !ERROR!                    _local5 = 1;
                };
            } catch(#InvalidMultinameIndex#) {
                _local6 = !NULL!;
                _local5 = 1;
            };
            if (_local4 != null){
                _local4.close();
            };
            //unexpected switch
            throw (_local6);
            return (_local3);
            /*not popped
            _local5
            */
        }
        public static function clear(storageId:String):void{
            var _local2 = null;
            if (storageId == null){
                throw (new Error("Storage id should not be null"));
            };
            var _local3:int;
            try {
                try {
                    _local2 = new Storage(storageId);
                    _local2.clear();
                } catch(e:Error) {
                    trace(((("ERROR CLEARING " + storageId) + "\n") + e));
                    _local3 = 0;
                    //unresolved jump
                    !ERROR!                    _local3 = 1;
                };
            } catch(#InvalidMultinameIndex#) {
                _local4 = !NULL!;
                _local3 = 1;
            };
            if (_local2 != null){
                _local2.close();
            };
            //unexpected switch
            throw (_local4);
            return;
            /*not popped
            _local3
            */
        }

        private function getValue(key:String):Object{
            var _local2:Object;
            try {
                if (((!((_sharedObj == null))) && (!((_sharedObj.data.values == null))))){
                    _local2 = _sharedObj.data.values[key];
                };
            } catch(e:Error) {
            };
            return (_local2);
        }
        private function setValue(key:String, value:Object):void{
            if (_sharedObj != null){
                if (_sharedObj.data.values == null){
                    _sharedObj.data.values = new Dictionary();
                };
                if (value == null){
                    delete _sharedObj.data.values[key];
                } else {
                    _sharedObj.data.values[key] = value;
                };
                try {
                    _sharedObj.flush();
                } catch(e:Error) {
                };
            };
        }
        private function clear():void{
            _sharedObj.clear();
        }
        private function close():void{
            if (_sharedObj != null){
                _sharedObj.close();
            };
        }

    }
}//package rte.utils 
﻿package rte.accessControl {
    import rte.osmf.*;
    import flash.external.*;

    public class JavaScriptPinService implements IPINServices {

        public function needsPin():Boolean{
            var _local1:Boolean;
            try {
                if (ExternalInterface.available){
                    _local1 = ExternalInterface.call("$.fn.pin", "hasPIN");
                };
            } catch(e:Error) {
                trace(("COULDN'T CHECK JAVASCRIPT NEEDS PIN!\n" + e));
                _local1 = false;
            };
            return (_local1);
        }
        public function checkPin(pin:String):Boolean{
            var _local2:Boolean;
            try {
                if (ExternalInterface.available){
                    _local2 = ExternalInterface.call("$.fn.pin", "checkPIN", pin);
                };
            } catch(e:Error) {
                trace(("COULDN'T CHECK JAVASCRIPT PIN!\n" + e));
                _local2 = false;
            };
            return (_local2);
        }

    }
}//package rte.accessControl 
﻿package com.comscore.metrics {
    import flash.events.*;
    import flash.net.*;
    import com.comscore.analytics.*;
    import com.comscore.utils.*;
    import com.comscore.measurement.*;

    public class Request implements ICacheObserver {

        private static const TAG:String = "Request";

        protected var core:Core;
        private var dispatchProperties:DispatchProperties;
        private var measurement:Measurement;

        public function Request(core:Core, props:DispatchProperties, m:Measurement){
            this.core = core;
            this.dispatchProperties = props;
            this.measurement = m;
        }
        public function process(basePixelURL:String):String{
            var _local3:uint;
            var _local4:String;
            basePixelURL = basePixelURL.concat(this.measurement.retrieveLabelsAsString(this.dispatchProperties.getMeasurementLabelOrder()));
            var _local2:Number = ((Utils.isWebEnvironment) ? 0x0800 : Constants.URL_LENGTH_LIMIT);
            if ((((basePixelURL.length > _local2)) && ((basePixelURL.indexOf("&") > 0)))){
                _local3 = basePixelURL.substring(0, (_local2 - 8)).lastIndexOf("&");
                _local4 = encodeURIComponent(basePixelURL.substring((_local3 + 1)));
                basePixelURL = ((basePixelURL.substring(0, _local3) + "&ns_cut=") + _local4);
            };
            if (basePixelURL.length > _local2){
                basePixelURL = basePixelURL.substring(0, _local2);
            };
            return (basePixelURL);
        }
        public function send():Boolean{
            var _local2:OfflineMeasurementsCache;
            this.core.getStorage().set(Constants.LAST_TRANSMISSION_KEY, CSDate.unixTime().toString());
            var _local1:TransmissionMode = this.dispatchProperties.getLiveTransmissionMode();
            if ((((_local1 == TransmissionMode.NEVER)) || ((_local1 == TransmissionMode.DISABLED)))){
                this.core.getOfflineCache().saveEvent(this.measurement.retrieveLabelsAsString(this.dispatchProperties.getMeasurementLabelOrder()), this.dispatchProperties);
                this.core.getQueue().endDispatching();
            } else {
                if (((!((this.dispatchProperties.getOfflineTransmissionMode() == TransmissionMode.NEVER))) && ((this.core.getOfflineCache().getEventCount() > 0)))){
                    _local2 = this.core.getOfflineCache();
                    _local2.subscribe(this);
                    _local2.flush(this.dispatchProperties);
                } else {
                    this.sendRequest(true);
                };
            };
            return (true);
        }
        private function sendRequest(cacheEnabled:Boolean):void{
            var _local2:String = this.process(this.measurement.getPixelURL());
            Log.d(TAG, ("send: " + _local2));
            var _local3:URLLoader = new URLLoader();
            var _local4:URLRequest = new URLRequest(_local2);
            _local4.method = URLRequestMethod.GET;
            _local3.addEventListener(IOErrorEvent.IO_ERROR, Utils.passParameters(this.catchIOError, [cacheEnabled]));
            if (Utils.isAirEnvironment){
                _local3.addEventListener(HTTPStatusEvent.HTTP_RESPONSE_STATUS, Utils.passParameters(this.on_status_air, [cacheEnabled]));
            } else {
                _local3.addEventListener(HTTPStatusEvent.HTTP_STATUS, Utils.passParameters(this.on_status, [cacheEnabled]));
            };
            _local3.addEventListener(Event.COMPLETE, this.on_complete);
            _local3.load(_local4);
        }
        public function send_NoCache():void{
            var _local1:TransmissionMode = this.dispatchProperties.getLiveTransmissionMode();
            if ((((_local1 == TransmissionMode.NEVER)) || ((_local1 == TransmissionMode.DISABLED)))){
                this.core.getQueue().endDispatching();
            } else {
                this.sendRequest(false);
            };
        }
        private function catchIOError(e:IOErrorEvent, cacheEnabled:Boolean):void{
            Log.e(TAG, (("catchIOError(" + e.toString()) + ")"));
            e.currentTarget.removeEventListener(IOErrorEvent.IO_ERROR, this.catchIOError);
            e.currentTarget.removeEventListener(Event.COMPLETE, this.on_complete);
            if (Utils.isAirEnvironment){
                e.currentTarget.removeEventListener(HTTPStatusEvent.HTTP_RESPONSE_STATUS, this.on_status_air);
            } else {
                e.currentTarget.removeEventListener(HTTPStatusEvent.HTTP_STATUS, this.on_status);
            };
            if (cacheEnabled){
                this.core.getOfflineCache().saveEvent(this.measurement.retrieveLabelsAsString(this.dispatchProperties.getMeasurementLabelOrder()), this.dispatchProperties);
            };
            this.core.getQueue().endDispatching();
        }
        private function on_complete(e:Event):void{
            Log.d(TAG, (("on_complete(" + e.toString()) + ")"));
            e.currentTarget.removeEventListener(IOErrorEvent.IO_ERROR, this.catchIOError);
            e.currentTarget.removeEventListener(Event.COMPLETE, this.on_complete);
            if (Utils.isAirEnvironment){
                e.currentTarget.removeEventListener(HTTPStatusEvent.HTTP_RESPONSE_STATUS, this.on_status_air);
            } else {
                e.currentTarget.removeEventListener(HTTPStatusEvent.HTTP_STATUS, this.on_status);
            };
            this.core.getKeepAlive().reset();
            this.core.getQueue().endDispatching();
        }
        private function on_status(e:HTTPStatusEvent, cacheEnabled:Boolean):void{
            Log.d(TAG, (("on_status(" + e.status.toString()) + ")"));
            if ((((e.status >= 400)) && (cacheEnabled))){
                this.core.getOfflineCache().saveEvent(this.measurement.retrieveLabelsAsString(this.dispatchProperties.getMeasurementLabelOrder()), this.dispatchProperties);
            };
        }
        private function on_status_air(e:HTTPStatusEvent, cacheEnabled:Boolean):void{
            var _local3:Boolean;
            Log.d(TAG, (("on_status(" + e.status.toString()) + ")"));
            if (cacheEnabled){
                _local3 = this.processResponseHeaders(e.responseHeaders, e.status);
                if (!_local3){
                    this.core.getOfflineCache().saveEvent(this.measurement.retrieveLabelsAsString(this.dispatchProperties.getMeasurementLabelOrder()), this.dispatchProperties);
                };
            };
        }
        private function processResponseHeaders(headers:Array, responseCode:int):Boolean{
            var _local5:URLRequestHeader;
            var _local6:String;
            var _local3:Boolean;
            var _local4:Object = new Object();
            for each (_local5 in headers) {
                if ((((_local5.name == "Content-Type")) || ((_local5.name == "Content-Length")))){
                    _local4[_local5.name] = _local5.value;
                };
            };
            _local6 = _local4["Content-Type"];
            switch (responseCode){
                case 200:
                    if (((((Utils.isNotEmpty(_local6)) && ((_local6.indexOf("image/") == 0)))) && ((_local4["Content-Length"] > 0)))){
                        _local3 = true;
                    };
                    break;
                case 204:
                    if (_local4["Content-Length"] == 0){
                        _local3 = true;
                    };
                    break;
            };
            return (_local3);
        }
        public function onCacheFlushed(result:Boolean):void{
            this.core.getOfflineCache().unsubscribe(this);
            this.sendRequest(true);
        }

    }
}//package com.comscore.metrics 
﻿package com.comscore.metrics {

    public class EventType {

        public static const VIEW:EventType = new EventType("view");
;
        public static const HIDDEN:EventType = new EventType("hidden");
;

        private var value:String = null;

        public function EventType(value:String){
            this.value = value;
        }
        public function getValue():String{
            return (this.value);
        }

    }
}//package com.comscore.metrics 
﻿package com.comscore.applications {
    import flash.events.*;
    import flash.utils.*;
    import com.comscore.analytics.*;
    import com.comscore.utils.*;

    public class KeepAlive {

        private static const TAG:String = "KeepAlive";

        protected var TIMEOUT:Number;
        protected var nextKeepAliveTime:Number = -1;
        private var core:Core;
        private var isForeground:Boolean = false;
        private var keepAliveTimer:Timer;

        public function KeepAlive(core:Core, timeout:Number){
            this.TIMEOUT = timeout;
            this.core = core;
        }
        public function sendKeepAlive(event:TimerEvent=null):void{
            this.reset();
            this.processKeepAlive(false);
        }
        public function reset():void{
            this.cancel();
            this.nextKeepAliveTime = (CSDate.unixTime() + this.TIMEOUT);
            if (this.isForeground){
                this.start(0);
            };
        }
        public function processKeepAlive(cache:Boolean):void{
            var _local2:OfflineMeasurementsCache;
            var _local3:Storage;
            var _local4:Number;
            if (this.core.isKeepAliveEnabled()){
                _local2 = this.core.getOfflineCache();
                _local3 = this.core.getStorage();
                _local4 = this.getLastTransmissionTime(_local3);
                if ((((_local4 > 0)) && (((CSDate.unixTime() - _local4) > (this.TIMEOUT - Constants.KEEPALIVE_INACCURACY_MS))))){
                    if (!cache){
                        this.core.notify(EventType.KEEPALIVE);
                    } else {
                        _local2.saveApplicationMeasurement(ApplicationMeasurement.newApplicationMeasurement(this.core, EventType.KEEPALIVE, null, null), this.core.getDispatchProperties(), true);
                    };
                    this.core.getStorage().set(Constants.LAST_TRANSMISSION_KEY, CSDate.unixTime().toString(10));
                };
            };
        }
        private function getLastTransmissionTime(storage:Storage):Number{
            var _local2:Number = Utils.getNumber(storage.get(Constants.LAST_TRANSMISSION_KEY), 0);
            if (_local2 == 0){
                storage.set(Constants.LAST_TRANSMISSION_KEY, CSDate.unixTime().toString(10));
            };
            return (_local2);
        }
        public function start(millis:Number):void{
            var _local2:Number;
            this.cancel();
            this.isForeground = true;
            if (this.core.isKeepAliveEnabled()){
                _local2 = CSDate.unixTime();
                if (this.nextKeepAliveTime < _local2){
                    this.nextKeepAliveTime = (_local2 + millis);
                };
                this.setKeepAliveAlarm();
            };
        }
        protected function setKeepAliveAlarm():void{
            this.keepAliveTimer = new Timer((this.nextKeepAliveTime - CSDate.unixTime()), 1);
            this.keepAliveTimer.addEventListener(TimerEvent.TIMER, this.sendKeepAlive);
            this.keepAliveTimer.start();
        }
        public function stop():void{
            this.isForeground = false;
            this.cancel();
            this.processKeepAlive(true);
        }
        public function cancel():void{
            if (((!((this.keepAliveTimer == null))) && (this.keepAliveTimer.running))){
                this.keepAliveTimer.stop();
            };
            this.keepAliveTimer = null;
        }

    }
}//package com.comscore.applications 
﻿package com.comscore.applications {
    import com.comscore.analytics.*;
    import com.comscore.utils.*;
    import com.comscore.measurement.*;

    public class AggregateMeasurement extends ApplicationMeasurement {

        public function AggregateMeasurement(core:Core, eventType:EventType, _pixelURL:String){
            super(core, eventType, _pixelURL, false, false);
        }
        public function getAggregateLabels():Array{
            var _local2:Label;
            var _local1:Array = new Array();
            for each (_local2 in labels) {
                if (((!((_local2 == null))) && (_local2.aggregate))){
                    _local1.push(_local2);
                };
            };
            return (_local1);
        }
        public function aggregateLabels(labelList:Array):void{
            var _local2:String;
            var _local3:String;
            var _local5:Label;
            var _local6:Label;
            var _local4:int;
            while (_local4 < labelList.length) {
                _local5 = Label(labelList[_local4]);
                _local6 = getLabel(_local5.name);
                if (_local6 === null){
                    if (this.isList(_local5.value)){
                        _local2 = this.addValue(_local5.value, "");
                        this.setLabelAggr(_local5.name, _local2, true);
                    } else {
                        this.setLabel(_local5);
                    };
                } else {
                    if (((this.isInteger(_local6.value)) && (this.isInteger(_local5.value)))){
                        _local3 = String((int(_local6.value) + int(_local5.value)));
                        this.setLabelAggr(_local6.name, _local3, true);
                    } else {
                        if (this.isList(_local5.value)){
                            _local2 = this.addValue(_local5.value, _local6.value);
                            this.setLabelAggr(_local5.name, _local2, true);
                        } else {
                            if (!this.existingString(_local6.value, _local5.value)){
                                _local3 = ((_local6.value + ",") + _local5.value);
                                this.setLabelAggr(_local6.name, _local3, true);
                            };
                        };
                    };
                };
                _local4++;
            };
        }
        private function isInteger(value:String):Boolean{
            var _local2:String = "0123456789";
            var _local3:int;
            while (_local3 < value.length) {
                if (_local2.indexOf(value.charAt(_local3)) == -1){
                    return (false);
                };
                _local3++;
            };
            return (true);
        }
        private function isList(value:String):Boolean{
            var _local3:String;
            if (value == null){
                return (false);
            };
            var _local2:String = ",";
            if (value.indexOf(_local2) == -1){
                return (false);
            };
            _local3 = " ";
            if (value.indexOf(_local3) == -1){
                return (true);
            };
            return (false);
        }
        private function existingString(value:String, newString:String):Boolean{
            return (!((value.indexOf(newString) == -1)));
        }
        private function addValue(value:String, list:String):String{
            var _local6:String;
            var _local7:Array;
            var _local8:int;
            var _local9:Array;
            var _local10:String;
            var _local11:String;
            var _local3:String = list;
            var _local4:Array = this.getElementsFromList(value);
            var _local5:int;
            while (_local5 < _local4.length) {
                _local6 = String(_local4[_local5]);
                if (_local3.indexOf(_local6) == -1){
                    if (_local3 == ""){
                        _local3 = (_local3 + (_local6 + ":1"));
                    } else {
                        _local3 = (_local3 + ((";" + _local6) + ":1"));
                    };
                } else {
                    _local7 = Utils.split(_local3, ";");
                    _local8 = 0;
                    while (_local8 < _local7.length) {
                        if (_local7[_local8].indexOf(_local6) != -1){
                            _local9 = Utils.split(_local7[_local8], ":");
                            _local10 = String((int(_local9[1]) + 1));
                            _local11 = ((_local9[0] + ":") + _local10);
                            _local3 = _local3.replace(_local7[_local8], _local11);
                        };
                        _local8++;
                    };
                };
                _local5++;
            };
            return (_local3);
        }
        private function getElementsFromList(list:String):Array{
            var _local2:Array = Utils.split(list, ",");
            var _local3:Array = new Array();
            var _local4:int;
            while (_local4 < _local2.length) {
                _local3.push(_local2[_local4]);
                _local4++;
            };
            return (_local3);
        }
        public function formatLists():void{
            var _local1:Label;
            for each (_local1 in labels) {
                if (this.isList(_local1.value)){
                    this.setLabelAggr(_local1.name, this.addValue(_local1.value, ""), true);
                };
            };
        }

    }
}//package com.comscore.applications 
﻿package com.comscore.applications {
    import flash.system.*;
    import com.comscore.analytics.*;
    import com.comscore.utils.*;
    import com.comscore.measurement.*;
    import com.comscore.metrics.*;

    public class ApplicationMeasurement extends Measurement {

        public function ApplicationMeasurement(core:Core, eventType:EventType, _pixelURL:String, coldBoot:Boolean=false, resetTimings:Boolean=true, includeTimings:Boolean=true):void{
            var _local10:String;
            var _local14:Number;
            var _local16:Number;
            var _local17:Number;
            var _local18:Number;
            var _local19:Number;
            var _local20:Number;
            var _local21:Number;
            var _local22:Number;
            var _local23:Number;
            var _local24:Number;
            var _local25:Number;
            var _local26:Number;
            var _local27:Number;
            var _local28:Number;
            var _local29:Number;
            var _local30:Number;
            var _local31:Number;
            var _local32:int;
            super(core);
            core.update(includeTimings);
            if (includeTimings){
                _local16 = core.getForegroundTransitionsCountDelta(resetTimings);
                _local17 = core.getForegroundTotalTime(coldBoot);
                _local18 = core.getBackgroundTotalTime(coldBoot);
                _local19 = core.getInactiveTotalTime(coldBoot);
                _local20 = core.getForegroundTimeDelta(resetTimings);
                _local21 = core.getBackgroundTimeDelta(resetTimings);
                _local22 = core.getInactiveTimeDelta(resetTimings);
                _local23 = core.getApplicationSessionTimeDelta(resetTimings);
                _local24 = core.getActiveUserSessionTimeDelta(resetTimings);
                _local25 = core.getUserSessionTimeDelta(resetTimings);
                _local26 = core.getAutoUpdateInterval();
                _local27 = core.getApplicationSessionCountDelta(resetTimings);
                _local28 = core.getActiveUserSessionCountDelta(resetTimings);
                _local29 = core.getUserSessionCountDelta(resetTimings);
                _local30 = core.getUserInteractionCount(resetTimings);
                this.setLabel(new Label("ns_ap_fg", _local16.toString(10), false));
                this.setLabel(new Label("ns_ap_ft", _local17.toString(10), false));
                this.setLabel(new Label("ns_ap_bt", _local18.toString(10), false));
                this.setLabel(new Label("ns_ap_it", _local19.toString(10), false));
                this.setLabel(new Label("ns_ap_dft", _local20.toString(10), false));
                this.setLabel(new Label("ns_ap_dbt", _local21.toString(10), false));
                this.setLabel(new Label("ns_ap_dit", _local22.toString(10), false));
                if (_local26 >= Constants.MINIMAL_AUTOUPDATE_INTERVAL){
                    this.setLabel(new Label("ns_ap_ut", _local26.toString(10), false));
                };
                this.setLabel(new Label("ns_ap_as", _local27.toString(10), false));
                this.setLabel(new Label("ns_ap_das", _local23.toString(10), false));
                if (_local28 >= 0){
                    this.setLabel(new Label("ns_ap_aus", _local28.toString(10), false));
                    this.setLabel(new Label("ns_ap_daus", _local24.toString(10), false));
                    this.setLabel(new Label("ns_ap_uc", _local30.toString(10), false));
                };
                if (_local29 >= 0){
                    this.setLabel(new Label("ns_ap_us", _local29.toString(10), false));
                    this.setLabel(new Label("ns_ap_dus", _local25.toString(10), false));
                };
                this.setLabel(new Label("ns_ap_cs", _local14.toString(10), false));
                _local31 = (this.created - core.getGenesis());
                this.setLabel(new Label("ns_ap_usage", _local31.toString(10), false));
            };
            if (_pixelURL != null){
                setPixelURL(_pixelURL);
            };
            this.setLabel(new Label("c1", "19", false));
            this.setLabel(new Label("ns_ap_an", core.getAppName(), false));
            if (Utils.isWebEnvironment){
                this.setLabel(new Label("c7", Utils.getPageUrl(), false));
                this.setLabel(new Label("c8", Utils.getPageTitle(), false));
                this.setLabel(new Label("c9", Utils.getReferrer(), false));
            };
            this.setLabel(new Label("ns_ap_pn", "as3", false));
            if (Utils.isBlackberryDevice()){
                this.setLabel(new Label("ns_ap_pfv", Blackberry.OS(), false));
            } else {
                this.setLabel(new Label("ns_ap_pfv", ((Utils.isAndroidDevice) ? Android.OS : ((Utils.isIOSDevice) ? Utils.iOSVersion : Utils.playerVersion)), false));
            };
            this.setLabel(new Label("c12", core.getVisitorId(), false));
            if (Utils.isBlackberryDevice()){
                this.setLabel(new Label("ns_ap_device", Blackberry.DeviceName(), false));
            } else {
                this.setLabel(new Label("ns_ap_device", ((Utils.isAndroidDevice) ? Android.Device : ((Utils.isIOSDevice) ? Utils.iOSDeviceName : Capabilities.manufacturer)), false));
            };
            this.setLabel(new Label("ns_type", this.convertEventType(eventType).getValue(), false));
            this.setLabel(new Label("ns_ts", this.created.toString(10), false));
            var _local7:Label = new Label("ns_ap_pfm", Utils.runtimeName, false);
            this.setLabel(_local7);
            this.setLabel(new Label("ns_ap_pv", Utils.playerVersion, false));
            if (!Utils.isWebEnvironment){
                this.setLabel(new Label("ns_nc", "1", false));
            };
            var _local8:Label = new Label("ns_ap_ev", eventType.getValue(), false);
            this.setLabel(_local8);
            var _local9:String = core.getAppVersion();
            if (((!((_local9 == null))) && (!((_local9 == ""))))){
                this.setLabel(new Label("ns_ap_ver", _local9, false));
            };
            this.setLabel(new Label("ns_ap_sv", core.getVersion(), false));
            if (Utils.isBlackberryDevice()){
                _local10 = ((Blackberry.DisplayWidth() + "x") + Blackberry.DisplayHeight());
            } else {
                _local10 = ((core.getAppContext().width.toString() + "x") + core.getAppContext().height.toString());
            };
            var _local11:Label = new Label("ns_ap_res", _local10, false);
            this.setLabel(_local11);
            var _local12:Label = new Label("ns_ap_lang", Capabilities.language, false);
            this.setLabel(_local12);
            if (eventType == EventType.KEEPALIVE){
                _local32 = ((Utils.supportsFileStreams()) ? core.getOfflineCache().getEventCount() : 0);
                this.setLabel(new Label("ns_ap_oc", _local32.toString(), false));
            };
            var _local13:Number = core.getColdStartId();
            _local14 = core.getColdStartCount();
            this.setLabel(new Label("ns_ap_id", _local13.toString(10), false));
            var _local15:Label = new Label("ns_ap_bi", Utils.getBundleId(), false);
            this.setLabel(_local15);
        }
        public static function newApplicationMeasurement(core:Core, type:EventType, labels:Object, pixelURL:String):ApplicationMeasurement{
            var _local6:Boolean;
            var _local7:Boolean;
            var _local5:ApplicationMeasurement;
            if (type == EventType.START){
                core.incrementRunsCount();
                _local5 = new AppStartMeasurement(core, type, pixelURL, core.handleColdStart());
            } else {
                if (type == EventType.AGGREGATE){
                    _local5 = new AggregateMeasurement(core, type, pixelURL);
                } else {
                    _local6 = !(((((!((labels == null))) && (labels.hasOwnProperty("ns_st_ev")))) && ((labels["ns_st_ev"] == "hb"))));
                    _local7 = !(((!((labels == null))) && (labels.hasOwnProperty("ns_st_ev"))));
                    _local5 = new ApplicationMeasurement(core, type, pixelURL, false, _local6, _local7);
                };
            };
            if (type != EventType.AGGREGATE){
                _local5.addLabels(core.getLabels());
            };
            _local5.addLabels(labels, (type == EventType.AGGREGATE));
            if (!_local5.hasLabel(Constants.PAGENAME_LABEL)){
                if (type == EventType.START){
                    _local5.setLabelNoTags(Constants.PAGENAME_LABEL, Constants.DEFAULT_START_PAGE_NAME);
                } else {
                    if (core.getApplicationState() == ApplicationState.FOREGROUND){
                        _local5.setLabelNoTags(Constants.PAGENAME_LABEL, Constants.DEFAULT_FOREGROUND_PAGE_NAME);
                    } else {
                        _local5.setLabelNoTags(Constants.PAGENAME_LABEL, Constants.DEFAULT_BACKGROUND_PAGE_NAME);
                    };
                };
            };
            return (_local5);
        }

        private function convertEventType(eventType:EventType):EventType{
            var _local2:EventType;
            if ((((((eventType == EventType.START)) || ((eventType == EventType.VIEW)))) || ((eventType == EventType.CLOSE)))){
                _local2 = EventType.VIEW;
            } else {
                _local2 = EventType.HIDDEN;
            };
            return (_local2);
        }

    }
}//package com.comscore.applications 
﻿package com.comscore.applications {
    import com.comscore.analytics.*;
    import com.comscore.utils.*;
    import com.comscore.measurement.*;

    public class AppStartMeasurement extends ApplicationMeasurement {

        public function AppStartMeasurement(core:Core, eventType:EventType, _pixelURL:String, coldBoot:Boolean){
            var _local9:Label;
            var _local10:Label;
            var _local11:Label;
            super(core, eventType, _pixelURL, coldBoot);
            var _local5:Label = new Label("ns_ap_install", core.getInstallId().toString(10), false);
            this.setLabel(_local5);
            var _local6:Label = new Label("ns_ap_runs", core.getRunsCount().toString(10), false);
            this.setLabel(_local6);
            if (coldBoot){
                _local9 = new Label("ns_ap_csf", "1", false);
                this.setLabel(_local9);
            };
            this.setLabel(new Label("ns_ap_gs", core.getFirstInstallId().toString(10), false));
            this.setLabel(new Label("ns_ap_lastrun", core.getPreviousGenesis().toString(10), false));
            var _local7:Number = core.getExitCode();
            if ((((_local7 > 0)) && (Utils.isExitCodeHandled))){
                _local10 = new Label("ns_ap_miss", new String(_local7), false);
                this.setLabel(_local10);
            };
            var _local8:String = core.getPreviousVersion();
            if (((!((_local8 == null))) && ((_local8.length > 0)))){
                _local11 = new Label("ns_ap_updated", _local8, false);
                this.setLabel(_local11);
            };
        }
    }
}//package com.comscore.applications 
﻿package com.comscore.applications {

    public class EventType {

        public static const START:EventType = new EventType("start");
;
        public static const VIEW:EventType = new EventType("view");
;
        public static const HIDDEN:EventType = new EventType("hidden");
;
        public static const CLOSE:EventType = new EventType("close");
;
        public static const AGGREGATE:EventType = new EventType("aggregate");
;
        public static const KEEPALIVE:EventType = new EventType("keep-alive");
;

        private var value:String = null;

        public function EventType(value:String){
            this.value = value;
        }
        public function getValue():String{
            return (this.value);
        }

    }
}//package com.comscore.applications 
﻿package com.comscore.streaming {
    import flash.events.*;
    import flash.utils.*;
    import flash.net.*;
    import flash.system.*;
    import flash.media.*;

    public class StreamSenseSound extends Sound {

        private var streamSense:StreamSense;
        protected var _channel:SoundChannel;
        public var isPlaying:Boolean = false;
        private var timer:Timer;

        public function StreamSenseSound(stream:URLRequest=null, context:SoundLoaderContext=null){
            this.timer = new Timer(Constants.PLAYHEAD_UPDATE_TIME);
            super(stream, context);
            if (!this.timer.hasEventListener(TimerEvent.TIMER)){
                this.timer.addEventListener(TimerEvent.TIMER, this.onPlayheadUpdateHandler);
            };
        }
        public function setStreamSense(streamSense:StreamSense):void{
            this.streamSense = streamSense;
            this.streamSense.setLabel("ns_st_pv", Constants.STREAMSENSESOUND_VERSION);
            this.streamSense.setLabel("ns_st_mp", Constants.PLAYER_NAME_SOUND);
            this.streamSense.setLabel("ns_st_mv", Capabilities.version);
        }
        private function soundCompleteHandler(event:Event):void{
            this.streamSense.notify(StreamSenseEventType.END, this.playheadTime, this.packLabels());
        }
        override public function play(startTime:Number=0, loops:int=0, sndTransform:SoundTransform=null):SoundChannel{
            this._channel = super.play.apply(this, arguments);
            this._channel.addEventListener(Event.SOUND_COMPLETE, this.soundCompleteHandler);
            this.streamSense.notify(StreamSenseEventType.PLAY, this.playheadTime, this.packLabels());
            this.isPlaying = true;
            this.timer.start();
            return (this._channel);
        }
        public function get playheadTime():Number{
            return (((this._channel) ? Math.floor(this._channel.position) : 0));
        }
        public function get bitrate():Number{
            return (Math.floor(((this.bytesTotal * 8) / (this.duration / 1000))));
        }
        public function get volume():Number{
            if (this._channel){
                return ((this._channel.soundTransform.volume * 100));
            };
            return (0);
        }
        public function get duration():int{
            return (this.length);
        }
        public function get source():String{
            return (this.url);
        }
        private function packLabels():Object{
            var _local1:Object = new Object();
            _local1["ns_st_cl"] = this.duration;
            _local1["ns_st_br"] = this.bitrate;
            _local1["ns_st_vo"] = Math.floor(this.volume);
            _local1["ns_st_cu"] = this.source;
            return (_local1);
        }
        override public function close():void{
            this.streamSense.notify(StreamSenseEventType.END, this.playheadTime, this.packLabels());
            super.close();
        }
        private function onPlayheadUpdateHandler(e:TimerEvent):void{
            if (this.isPlaying){
                if (((((this.playheadTime) && (length))) && (((this.playheadTime * 1000) == this.length)))){
                    this.timer.reset();
                    this._channel.dispatchEvent(new Event(Event.SOUND_COMPLETE));
                };
            } else {
                this.streamSense.notify(StreamSenseEventType.PAUSE, this.playheadTime, this.packLabels());
                this.timer.reset();
            };
        }

    }
}//package com.comscore.streaming 
﻿package com.comscore.streaming {

    public class Constants {

        public static const STREAMSENSE_VERSION:String = "4.1311.19";
        public static const DEFAULT_HEARTBEAT_INTERVAL:Array = [{
            playingtime:60000,
            interval:10000
        }, {
            playingtime:null,
            interval:60000
        }];
        public static const KEEP_ALIVE_PERIOD:uint = 1200000;
        public static const PAUSE_ON_BUFFER_TIME:uint = 500;
        public static const PAUSE_PLAY_SWITCH_DELAY:uint = 500;
        public static const PLAYHEAD_UPDATE_TIME:Number = 250;
        public static const PLAYER_NAME:String = "as3_puppet";
        public static const HEARTBEAT_PLAYING_TIME_KEY:String = "playingtime";
        public static const HEARTBEAT_INTERVAL_KEY:String = "interval";
        public static const STREAMSENSEFLVPLAYBACK_VERSION:String = "2.0.0";
        public static const STREAMSENSENETSTREAM_VERSION:String = "2.0.0";
        public static const STREAMSENSESOUND_VERSION:String = "2.0.0";
        public static const PLAYER_NAME_NETSTREAM:String = "NetStream";
        public static const PLAYER_NAME_SOUND:String = "Sound";
        public static const PLAYER_NAME_FLVPLAYBACK:String = "FLVPlayback";
        public static const DEBUG_KEY:String = "debug";
        public static const PAGEVIEW_KEY:String = "pageview";
        public static const LOGURL_KEY:String = "logurl";
        public static const SECURE_KEY:String = "secure";
        public static const C2_KEY:String = "c2";
        public static const RENDITIONS_KEY:String = "renditions";
        public static const INCLUDE_KEY:String = "include";
        public static const INCLUDE_PREFIXES_KEY:String = "include_prefixes";
        public static const EXCLUDE_KEY:String = "exclude";
        public static const EXCLUDE_PREFIXES_KEY:String = "exclude_prefixes";
        public static const PERSISTENT_LABELS_KEY:String = "persistentlabels";
        public static const LABEL_MAPPING_KEY:String = "labelmapping";

    }
}//package com.comscore.streaming 
﻿package com.comscore.streaming {
    import flash.display.*;
    import flash.events.*;
    import flash.utils.*;
    import __AS3__.vec.*;
    import com.comscore.analytics.*;
    import com.comscore.utils.*;
    import com.comscore.applications.*;

    public class StreamSense {

        private const TAG:String = "StreamSense";

        private var pixelURL:String = null;
        private var previousState:State;
        private var currentState:State;
        private var nextEventCounter:uint;
        private var lastStateChangePosition:Number;
        private var lastSentState:State;
        private var persistentLabels:Object;
        private var pauseOnRebufferingEnabled:Boolean;
        private var pausePlaySwitchDelayEnabled:Boolean;
        private var lastStateChange:Number;
        private var heartBeatCount:uint;
        private var nextHeartBeatInterval:uint;
        private var mediaPlayerName:String;
        private var mediaPlayerVersion:String;
        private var delayedTransitionTimer:Timer = null;
        private var keepAliveTimer:Timer = null;
        private var heartBeatTimer:Timer = null;
        private var bufferingTimer:Timer = null;
        private var heartbeatIntervals:Array;
        private var playlist:Playlist;
        protected var core:Core;
        private var listenerList:Vector.<StreamSenseListener>;
        private var measurementSnapshot:Object;

        public function StreamSense(){
            this.heartbeatIntervals = Constants.DEFAULT_HEARTBEAT_INTERVAL;
            super();
            this.core = comScore.getCore();
            this.pauseOnRebufferingEnabled = true;
            this.pausePlaySwitchDelayEnabled = false;
            this.initializeTimers();
            this.playlist = new Playlist();
            this.listenerList = new Vector.<StreamSenseListener>();
            this.reset();
        }
        public static function analyticsForNetStream(player:StreamSenseNetStream):StreamSense{
            var _local2:StreamSense = new (StreamSense)();
            _local2.engageToNetStream(player);
            return (_local2);
        }
        public static function analyticsForFLVPlayback(player):StreamSense{
            var _local2:StreamSense = new (StreamSense)();
            var _local3:StreamSenseFLVPlayback = new StreamSenseFLVPlayback(player);
            _local2.engageToFLVPlayback(_local3);
            return (_local2);
        }
        public static function analyticsForSound(player:StreamSenseSound):StreamSense{
            var _local2:StreamSense = new (StreamSense)();
            _local2.engageToSound(player);
            return (_local2);
        }
        public static function getVersion():String{
            return (Constants.STREAMSENSE_VERSION);
        }

        public function reset(keepLabels:Array=null):void{
            var _local2:String;
            this.playlist.reset(keepLabels);
            this.playlist.setSetPlaylist(0);
            this.playlist.setId(((CSDate.unixTime().toString(10) + "_") + this.playlist.getSetPlaylistCounter().toString(10)));
            this.playlist.getClip().reset(keepLabels);
            if (keepLabels == null){
                this.persistentLabels = new Object();
            } else {
                for (_local2 in this.persistentLabels) {
                    if (keepLabels.indexOf(_local2) == -1){
                        delete this.persistentLabels[_local2];
                    };
                };
            };
            this.nextEventCounter = 1;
            this.previousState = State.IDLE;
            this.currentState = State.IDLE;
            this.lastSentState = State.IDLE;
            this.lastStateChange = 0;
            this.lastStateChangePosition = 0;
            this.heartBeatCount = 0;
            this.nextHeartBeatInterval = 0;
            this.mediaPlayerName = Constants.PLAYER_NAME;
            this.mediaPlayerVersion = Constants.STREAMSENSE_VERSION;
            this.measurementSnapshot = new Object();
        }
        private function engageToNetStream(player:StreamSenseNetStream):void{
            player.setStreamSense(this);
        }
        private function engageToFLVPlayback(player:StreamSenseFLVPlayback):void{
            player.setStreamSense(this);
        }
        private function engageToSound(player:StreamSenseSound):void{
            player.setStreamSense(this);
        }
        private function initializeTimers():void{
            Log.d(this.TAG, "initializeTimers()");
            this.heartBeatTimer = new Timer(0, 0);
            this.heartBeatTimer.addEventListener(TimerEvent.TIMER, this.fireHeartBeat);
            this.keepAliveTimer = new Timer(Constants.KEEP_ALIVE_PERIOD, 0);
            this.keepAliveTimer.addEventListener(TimerEvent.TIMER, this.fireKeepAlive);
            this.bufferingTimer = new Timer(Constants.PAUSE_ON_BUFFER_TIME, 1);
            this.bufferingTimer.addEventListener(TimerEvent.TIMER, this.firePauseOnBuffering);
        }
        public function notify(eventType:StreamSenseEventType, position:Number, eventLabels:Object=null):void{
            var _local5:State;
            var _local6:Object;
            Log.dLabels(this.TAG, ((("notifyWithLabels " + ((eventType)!=null) ? eventType.getName() : "null") + " position:") + position), eventLabels);
            if (eventLabels == null){
                eventLabels = new Object();
            };
            var _local4:Object = new Object();
            Utils.putAll(_local4, eventLabels);
            if (this.getTime(_local4) < 0){
                _local4["ns_ts"] = CSDate.unixTime().toString(10);
            };
            if (this.getPlayerPosition(_local4) < 0){
                _local4["ns_st_po"] = position.toString(10);
            };
            if (_local4["ns_st_ev"] == null){
                _local4["ns_st_ev"] = eventType.getName();
            };
            if ((((((((eventType == StreamSenseEventType.PLAY)) || ((eventType == StreamSenseEventType.PAUSE)))) || ((eventType == StreamSenseEventType.BUFFER)))) || ((eventType == StreamSenseEventType.END)))){
                _local5 = this.eventToState(eventType);
                if (((((((this.isPausePlaySwitchDelayEnabled()) && (this.canTransitionTo(_local5)))) && (this.isPlayOrPause(this.currentState)))) && (this.isPlayOrPause(_local5)))){
                    this.transitionToDelayed(_local5, _local4, Constants.PAUSE_PLAY_SWITCH_DELAY);
                } else {
                    this.transitionTo(_local5, _local4);
                };
            } else {
                _local6 = this.createMeasurementLabels(eventType, _local4);
                Utils.putAll(_local6, _local4);
                this.dispatchWithSnapshot(_local6, false);
                this.nextEventCounter++;
            };
        }
        private function isPlayOrPause(state:State):Boolean{
            return ((((state == State.PLAYING)) || ((state == State.PAUSED))));
        }
        private function transitionTo(newState:State, eventLabels:Object):void{
            var _local3:Number;
            var _local4:Number;
            var _local5:StreamSenseListener;
            var _local6:Object;
            Log.d(this.TAG, ("transitionTo " + newState.getName()));
            this.stopDelayedTransitionTimer();
            if (this.canTransitionTo(newState)){
                this.onExit(this.getState(), eventLabels);
                _local3 = this.lastStateChange;
                this.lastStateChange = this.getTime(eventLabels);
                this.lastStateChangePosition = this.getPlayerPosition(eventLabels);
                this.onEnter(newState, eventLabels);
                this.setState(newState);
                _local4 = (this.lastStateChange - _local3);
                for each (_local5 in this.listenerList) {
                    _local5.onStateChange(this.getPreviousState(), newState, eventLabels, _local4);
                };
                this.setRegisters(eventLabels);
                this.playlist.setRegisters(eventLabels, newState);
                this.playlist.getClip().setRegisters(eventLabels, newState);
                if (this.willCauseMeasurement(newState)){
                    _local6 = this.createMeasurementLabels(newState.toEventType(), eventLabels);
                    Utils.putAll(_local6, eventLabels);
                    this.dispatch(_local6);
                    this.lastSentState = newState;
                    this.nextEventCounter++;
                };
            };
        }
        private function stopDelayedTransitionTimer():void{
            Log.d(this.TAG, "stopDelayedTransitionTimer()");
            if (this.delayedTransitionTimer != null){
                this.delayedTransitionTimer.stop();
                this.delayedTransitionTimer = null;
            };
        }
        private function transitionToDelayed(newState:State, eventLabelMap:Object, delay:Number):void{
            var newState:* = newState;
            var eventLabelMap:* = eventLabelMap;
            var delay:* = delay;
            Log.d(this.TAG, (((((("transitionTo(" + newState) + ", ") + eventLabelMap) + ", ") + delay) + ")"));
            this.stopDelayedTransitionTimer();
            if (this.canTransitionTo(newState)){
                this.delayedTransitionTimer = new Timer(delay, 1);
                this.delayedTransitionTimer.addEventListener(TimerEvent.TIMER, function (event:TimerEvent):void{
                    fireDelayedTransition(newState, eventLabelMap);
                });
                this.delayedTransitionTimer.start();
            };
        }
        private function fireDelayedTransition(newState:State, eventLabelMap:Object):void{
            Log.d(this.TAG, "Performing delayed transition");
            this.transitionTo(newState, eventLabelMap);
        }
        private function onEnter(newState:State, labels:Object):void{
            Log.d(this.TAG, ("onEnter " + newState.getName()));
            var _local3:Number = this.getTime(labels);
            switch (newState){
                case State.PLAYING:
                    this.playlist.getClip().setPlaybackTimestamp(_local3);
                    if (this.willCauseMeasurement(newState)){
                        this.playlist.getClip().incrementStarts();
                        if (this.playlist.getStarts() < 1){
                            this.playlist.setStarts(1);
                        };
                    };
                    this.startHeartBeatTimer();
                    this.startKeepAliveTimer();
                    break;
                case State.PAUSED:
                    if (this.willCauseMeasurement(newState)){
                        this.playlist.incrementPauses();
                    };
                    break;
                case State.IDLE:
                    this.resetHeartBeatTimer();
                    break;
                case State.BUFFERING:
                    this.playlist.getClip().setBufferingTimestamp(_local3);
                    if (((this.isPauseOnBufferingEnabled()) && (this.willCauseMeasurement(State.PAUSED)))){
                        Log.d(this.TAG, "Start PauseOnBuffering timer");
                        this.bufferingTimer.start();
                    };
                    break;
            };
        }
        private function onExit(oldState:State, labels:Object):void{
            var _local4:Array;
            var _local5:String;
            Log.d(this.TAG, ("onExit " + oldState.getName()));
            var _local3:Number = this.getTime(labels);
            switch (oldState){
                case State.PLAYING:
                    this.playlist.addPlaybackTime(_local3);
                    this.stopKeepAliveTimer();
                    this.stopHeartBeatTimer();
                    break;
                case State.BUFFERING:
                    Log.d(this.TAG, "Reset PauseOnBuffering timer");
                    this.bufferingTimer.reset();
                    this.playlist.addBufferingTime(_local3);
                    break;
                case State.IDLE:
                    _local4 = new Array();
                    for (_local5 in this.getClip().getLabels()) {
                        _local4.push(_local5);
                    };
                    this.getClip().reset(_local4);
                    break;
            };
        }
        private function willCauseMeasurement(state:State):Boolean{
            if ((((state == State.PAUSED)) && ((this.getLastSentState() == State.IDLE)))){
                return (false);
            };
            return (((!((state == State.BUFFERING))) && (!((state == this.getLastSentState())))));
        }
        public function setClip(labels:Object, hasLooped:Boolean=false):void{
            Log.d(this.TAG, ("setClip(), looping=" + hasLooped));
            if (this.getState() == State.IDLE){
                this.playlist.getClip().reset();
                this.playlist.getClip().setLabelsState(labels, State.IDLE);
                if (hasLooped){
                    this.playlist.incrementStarts();
                };
            };
        }
        public function setPlaylist(labels:Object=null):void{
            Log.d(this.TAG, "setPlaylist()");
            if (labels == null){
                labels = {};
            };
            if (this.getState() == State.IDLE){
                this.playlist.incrementSetPlaylistCounter();
                this.playlist.reset();
                this.playlist.getClip().reset();
                this.playlist.setLabelsState(labels, State.IDLE);
            };
        }
        private function getNextEventCounter():uint{
            return (this.nextEventCounter);
        }
        private function canTransitionTo(newState:State):Boolean{
            if ((((this.getState() == State.IDLE)) && ((((newState == State.BUFFERING)) || ((newState == State.PLAYING)))))){
                return (true);
            };
            return (!((newState == this.getState())));
        }
        private function getState():State{
            return (this.currentState);
        }
        private function getLastSentState():State{
            return (this.lastSentState);
        }
        private function eventToState(event:StreamSenseEventType):State{
            Log.d(this.TAG, "eventToState()");
            if (event == StreamSenseEventType.PLAY){
                return (State.PLAYING);
            };
            if (event == StreamSenseEventType.BUFFER){
                return (State.BUFFERING);
            };
            if (event == StreamSenseEventType.PAUSE){
                return (State.PAUSED);
            };
            return (State.IDLE);
        }
        private function getPreviousState():State{
            return (this.previousState);
        }
        private function setState(newState:State):void{
            this.previousState = this.currentState;
            this.currentState = newState;
        }
        private function getPlayerPosition(labelMap:Object):Number{
            Log.d(this.TAG, "getPlayerPosition()");
            var _local2:Number = new Number(labelMap["ns_st_po"]);
            if (isNaN(_local2)){
                _local2 = -1;
            };
            return (_local2);
        }
        private function getTime(labelMap:Object):Number{
            Log.d(this.TAG, "getTime()");
            var _local2:Number = new Number(labelMap["ns_ts"]);
            if (isNaN(_local2)){
                _local2 = -1;
            };
            return (_local2);
        }
        private function firePauseOnBuffering(e:TimerEvent):void{
            var _local2:Object;
            Log.d(this.TAG, "firePauseOnBuffering()");
            if (this.lastSentState == State.PLAYING){
                this.playlist.incrementRebufferCount();
                this.playlist.incrementPauses();
                _local2 = this.createMeasurementLabels(StreamSenseEventType.PAUSE, null);
                this.dispatch(_local2);
                this.nextEventCounter++;
                this.lastSentState = State.PAUSED;
            };
        }
        private function getHeartBeatInterval(playbackTime:Number):uint{
            var _local3:Object;
            var _local4:Number;
            var _local2:uint;
            if (this.heartbeatIntervals != null){
                for each (_local3 in this.heartbeatIntervals) {
                    _local4 = new Number(_local3[Constants.HEARTBEAT_PLAYING_TIME_KEY]);
                    if (((((isNaN(_local4)) || ((_local4 == 0)))) || ((playbackTime < _local4)))){
                        _local2 = _local3[Constants.HEARTBEAT_INTERVAL_KEY];
                        break;
                    };
                };
            };
            return (_local2);
        }
        private function startHeartBeatTimer():void{
            Log.d(this.TAG, "startHeartBeatTimer()");
            var _local1:uint = this.getHeartBeatInterval(this.playlist.getClip().getPlaybackTime());
            if (_local1 > 0){
                this.heartBeatTimer.delay = ((this.nextHeartBeatInterval)>0) ? this.nextHeartBeatInterval : _local1;
                this.heartBeatTimer.start();
            };
            this.nextHeartBeatInterval = 0;
        }
        protected function fireHeartBeat(e:TimerEvent):void{
            Log.d(this.TAG, "fireHeartBeat()");
            this.heartBeatCount++;
            var _local2:Object = this.createMeasurementLabels(StreamSenseEventType.HEART_BEAT);
            this.dispatch(_local2);
            var _local3:uint = this.getHeartBeatInterval(this.playlist.getClip().getPlaybackTime());
            if (_local3 == 0){
                this.heartBeatTimer.stop();
            };
            if (this.heartBeatTimer.delay != _local3){
                this.heartBeatTimer.delay = _local3;
            };
        }
        private function getHeartBeatCount():uint{
            return (this.heartBeatCount);
        }
        private function resetHeartBeatTimer():void{
            Log.d(this.TAG, "Resetting heartbeat timer.");
            this.nextHeartBeatInterval = 0;
            this.heartBeatCount = 0;
        }
        private function stopHeartBeatTimer():void{
            Log.d(this.TAG, "stopHeartBeatTimer");
            var _local1:uint = this.getHeartBeatInterval(this.playlist.getClip().getPlaybackTime());
            this.nextHeartBeatInterval = (_local1 - (this.playlist.getClip().getPlaybackTime() % _local1));
            if (this.heartBeatTimer != null){
                this.heartBeatTimer.reset();
            };
        }
        private function startKeepAliveTimer():void{
            Log.d(this.TAG, "startKeepAliveTimer");
            this.keepAliveTimer.start();
        }
        private function stopKeepAliveTimer():void{
            Log.d(this.TAG, "stopKeepAliveTimer");
            if (this.keepAliveTimer != null){
                this.keepAliveTimer.reset();
            };
        }
        protected function fireKeepAlive(e:TimerEvent):void{
            Log.d(this.TAG, "fireKeepAlive");
            var _local2:Object = this.createMeasurementLabels(StreamSenseEventType.KEEP_ALIVE);
            this.dispatch(_local2);
            this.nextEventCounter++;
        }
        private function createMeasurementLabels(eventType:StreamSenseEventType, initialLabels:Object=null):Object{
            Log.d(this.TAG, (("createMeasurementLabels(" + eventType) + ")"));
            var _local3:Object = new Object();
            if (initialLabels != null){
                Utils.putAll(_local3, initialLabels);
            };
            if (_local3["ns_ts"] == null){
                _local3["ns_ts"] = CSDate.unixTime().toString(10);
            };
            if (((!((eventType == null))) && ((_local3["ns_st_ev"] == null)))){
                _local3["ns_st_ev"] = eventType.toString();
            };
            Utils.putAll(_local3, this.getLabels());
            this.createLabels(eventType, _local3);
            this.playlist.createLabels(eventType, _local3);
            this.playlist.getClip().createLabels(eventType, _local3);
            if (_local3["ns_st_mp"] == null){
                _local3["ns_st_mp"] = this.mediaPlayerName;
            };
            if (_local3["ns_st_mv"] == null){
                _local3["ns_st_mv"] = this.mediaPlayerVersion;
            };
            if (_local3["ns_st_ub"] == null){
                _local3["ns_st_ub"] = "0";
            };
            if (_local3["ns_st_br"] == null){
                _local3["ns_st_br"] = "0";
            };
            if (_local3["ns_st_pn"] == null){
                _local3["ns_st_pn"] = "1";
            };
            if (_local3["ns_st_tp"] == null){
                _local3["ns_st_tp"] = "1";
            };
            if (_local3["ns_st_it"] == null){
                _local3["ns_st_it"] = "c";
            };
            _local3["ns_st_sv"] = Constants.STREAMSENSE_VERSION;
            return (_local3);
        }
        private function setRegisters(labels:Object):void{
            var _local2:String = labels["ns_st_mp"];
            if (_local2 != null){
                this.mediaPlayerName = _local2;
                delete labels["ns_st_mp"];
            };
            _local2 = labels["ns_st_mv"];
            if (_local2 != null){
                this.mediaPlayerVersion = _local2;
                delete labels["ns_st_mv"];
            };
            _local2 = labels["ns_st_ec"];
            if (_local2 != null){
                this.nextEventCounter = uint(_local2);
                delete labels["ns_st_ec"];
            };
        }
        private function createLabels(eventType:StreamSenseEventType, initialLabels:Object):Object{
            var _local4:Number;
            var _local5:Number;
            var _local3:Object = ((initialLabels)!=null) ? initialLabels : new Object();
            _local3["ns_st_ec"] = this.nextEventCounter.toString(10);
            if (_local3["ns_st_po"] == null){
                _local4 = this.lastStateChangePosition;
                _local5 = this.getTime(_local3);
                if ((((((((eventType == StreamSenseEventType.PLAY)) || ((eventType == StreamSenseEventType.HEART_BEAT)))) || ((eventType == StreamSenseEventType.KEEP_ALIVE)))) || ((((eventType == null)) && ((this.currentState == State.PLAYING)))))){
                    _local4 = (_local4 + (_local5 - this.playlist.getClip().getPlaybackTimestamp()));
                };
                _local3["ns_st_po"] = _local4.toString(10);
            };
            if (eventType == StreamSenseEventType.HEART_BEAT){
                _local3["ns_st_hc"] = this.heartBeatCount.toString(10);
                _local3["ns_st_pe"] = "1";
            };
            return (_local3);
        }
        public function setPixelURL(value:String):String{
            var _local2:Object;
            var _local3:String;
            var _local4:Object;
            var _local5:String;
            var _local6:Object;
            if (Utils.isEmpty(value)){
                return (null);
            };
            if (value.indexOf("?") >= 0){
                if (value.charAt((value.length - 1)) != "?"){
                    _local2 = new Object();
                    _local3 = "";
                    _local4 = value.substring((value.indexOf("?") + 1)).split("&");
                    _local5 = "";
                    for (_local5 in _local4) {
                        _local6 = _local4[_local5].split("=");
                        if (_local6.length == 2){
                            this.setLabel(_local6[0], _local6[1]);
                        } else {
                            if (_local6.length == 1){
                                this.setLabel(Constants.PAGENAME_LABEL, _local6[0]);
                            };
                        };
                    };
                    value = value.substring(0, (value.indexOf("?") + 1));
                };
            } else {
                value = (value + "?");
            };
            this.pixelURL = value;
            return (this.pixelURL);
        }
        public function getPixelURL():String{
            return (this.pixelURL);
        }
        private function makeMeasurementSnapshot(labels:Object):void{
            var _local2:Object = this.createMeasurementLabels(this.currentState.toEventType());
            Utils.putAll(_local2, labels);
            this.measurementSnapshot = _local2;
        }
        protected function dispatch(eventLabels:Object):void{
            this.dispatchWithSnapshot(eventLabels, true);
        }
        protected function dispatchWithSnapshot(eventLabels:Object, snapshot:Boolean):void{
            var _local3:ApplicationMeasurement;
            Log.dLabels(this.TAG, "dispatch:", eventLabels);
            if (snapshot){
                this.makeMeasurementSnapshot(eventLabels);
            };
            if (!this.isNotProperlyInitialized()){
                _local3 = ApplicationMeasurement.newApplicationMeasurement(this.core, EventType.HIDDEN, eventLabels, this.pixelURL);
                this.core.getQueue().offer(_local3);
            };
        }
        private function isNotProperlyInitialized():Boolean{
            var _local1:DisplayObject = this.core.getAppContext();
            var _local2:String = this.core.getPublisherSecret();
            var _local3:String = this.core.getPixelURL();
            if (Utils.isWebEnvironment){
                return ((((((_local1 == null)) || ((_local3 == null)))) || ((_local3.length == 0))));
            };
            return ((((((((((_local1 == null)) || ((_local2 == null)))) || ((_local2.length == 0)))) || ((_local3 == null)))) || ((_local3.length == 0))));
        }
        public function isPausePlaySwitchDelayEnabled():Boolean{
            return (this.pausePlaySwitchDelayEnabled);
        }
        public function setPausePlaySwitchDelayEnabled(pausePlaySwitchDelayEnabled:Boolean):void{
            this.pausePlaySwitchDelayEnabled = pausePlaySwitchDelayEnabled;
        }
        public function isPauseOnBufferingEnabled():Boolean{
            return (this.pauseOnRebufferingEnabled);
        }
        public function setPauseOnBufferingEnabled(enable:Boolean):void{
            this.pauseOnRebufferingEnabled = enable;
        }
        public function getLabels():Object{
            return (this.persistentLabels);
        }
        public function setLabels(labels:Object):void{
            if (labels != null){
                if (this.persistentLabels == null){
                    this.persistentLabels = labels;
                } else {
                    Utils.putAll(this.persistentLabels, labels);
                };
            };
        }
        public function getLabel(name:String):String{
            return (this.persistentLabels[name]);
        }
        public function setLabel(name:String, value:String):void{
            if (value == null){
                delete this.persistentLabels[name];
            } else {
                this.persistentLabels[name] = value;
            };
        }
        public function addListener(listener:StreamSenseListener):void{
            this.listenerList.push(listener);
        }
        public function removeListener(listener:StreamSenseListener):void{
            this.listenerList.splice(this.listenerList.indexOf(listener), 1);
        }
        public function importState(labels:Object):void{
            Log.dLabels(this.TAG, "importState:", labels);
            this.playlist.setRegisters(labels, null);
            this.playlist.getClip().setRegisters(labels, null);
            this.setRegisters(labels);
            this.nextEventCounter++;
        }
        public function exportState():Object{
            Log.dLabels(this.TAG, "exported labels:", this.measurementSnapshot);
            return (this.measurementSnapshot);
        }
        public function getClip():Clip{
            return (this.playlist.getClip());
        }
        public function getPlaylist():Playlist{
            return (this.playlist);
        }
        public function setHeartbeatIntervals(intervals:Array):void{
            this.heartbeatIntervals = intervals;
        }

    }
}//package com.comscore.streaming 
﻿package com.comscore.streaming {
    import flash.events.*;
    import flash.utils.*;
    import flash.net.*;
    import flash.system.*;

    public class StreamSenseNetStream extends NetStream {

        private var streamSense:StreamSense = null;
        public var playing:Boolean = false;
        private var playerPausedForSeeking:Boolean = false;
        private var bufferingTime:Number = -1;
        private var playheadTimer:Timer = null;

        public function StreamSenseNetStream(connection:NetConnection){
            super(connection);
            var _local2:Object = new Object();
            this.client = _local2;
            _local2.onMetaData = this.getMetadata;
            this.playheadTimer = new Timer(Constants.PLAYHEAD_UPDATE_TIME);
        }
        public function setStreamSense(streamSense:StreamSense):void{
            this.streamSense = streamSense;
            this.streamSense.setLabel("ns_st_pv", Constants.STREAMSENSENETSTREAM_VERSION);
            this.streamSense.setLabel("ns_st_mp", Constants.PLAYER_NAME_NETSTREAM);
            this.streamSense.setLabel("ns_st_mv", Capabilities.version);
            this.addEventListener(NetStatusEvent.NET_STATUS, this.onNetStatusHandler);
        }
        private function getMetadata(mdata:Object):void{
            if (mdata.hasOwnProperty("duration")){
                this.streamSense.getClip().setLabel("ns_st_br", Math.floor(((this.bytesTotal * 8) / mdata.duration)).toString(10));
                this.streamSense.getClip().setLabel("ns_st_cl", Math.floor((mdata.duration * 1000)).toString(10));
            };
            if (this.info.hasOwnProperty("resourceName")){
                this.streamSense.getClip().setLabel("ns_st_cu", this.info.resourceName);
            };
        }
        override public function resume():void{
            super.resume.call(this);
            this.streamSense.notify(StreamSenseEventType.PLAY, this.position());
            this.playing = true;
        }
        override public function pause():void{
            super.pause();
            this.streamSense.notify(StreamSenseEventType.PAUSE, this.position());
            this.playing = false;
        }
        override public function close():void{
            super.close.call(this);
            this.playing = false;
            this.streamSense.notify(StreamSenseEventType.END, this.position());
        }
        override public function togglePause():void{
            super.togglePause();
            if (this.playing){
                this.streamSense.notify(StreamSenseEventType.PAUSE, this.position());
            } else {
                this.streamSense.notify(StreamSenseEventType.PLAY, this.position());
            };
            this.playing = !(this.playing);
        }
        override public function play(... _args):void{
            var playhead:* = NaN;
            var parameters:* = _args;
            playhead = this.position();
            super.play.apply(this, parameters);
            this.playing = true;
            this.playheadTimer.addEventListener(TimerEvent.TIMER, function (event:TimerEvent):void{
                if (position() > playhead){
                    streamSense.notify(StreamSenseEventType.PLAY, playhead);
                    playheadTimer.stop();
                } else {
                    streamSense.notify(StreamSenseEventType.BUFFER, playhead);
                };
            });
            this.playheadTimer.start();
        }
        override public function seek(offset:Number):void{
            if (this.playing){
                this.streamSense.notify(StreamSenseEventType.PAUSE, this.position());
                this.playerPausedForSeeking = true;
            };
            super.seek(offset);
        }
        public function position():Number{
            return (Math.floor((this.time * 1000)));
        }
        private function onNetStatusHandler(event:NetStatusEvent):void{
            switch (event.info.code){
                case "NetStream.Play.Stop":
                    this.streamSense.notify(StreamSenseEventType.END, this.position());
                    this.playing = false;
                    break;
                case "NetStream.Seek.Complete":
                    if (this.playerPausedForSeeking){
                        this.resumeAfterSeek();
                    };
                    break;
                case "NetStream.Buffer.Empty":
                    this.streamSense.notify(StreamSenseEventType.BUFFER, this.position());
                    break;
                case "NetStream.Buffer.Full":
                    if (this.playing){
                        this.streamSense.notify(StreamSenseEventType.PLAY, this.position());
                    };
                    break;
            };
        }
        private function resumeAfterSeek():void{
            this.streamSense.notify(StreamSenseEventType.PLAY, this.position());
            this.playerPausedForSeeking = false;
        }

    }
}//package com.comscore.streaming 
﻿package com.comscore.streaming {
    import com.comscore.utils.*;

    public class Playlist {

        private const TAG:String = "Playlist";

        private var clip:Clip = null;
        private var labels:Object;
        private var id:String;
        private var sequence:uint;
        private var pauses:uint;
        private var starts:uint;
        private var bufferingTime:Number;
        private var playbackTime:Number;
        private var rebufferingCount:Number;
        private var setPlaylistCounter:uint = 0;
        private var firstPlayOccurred:Boolean;

        public function Playlist(){
            this.clip = new Clip();
            this.reset();
        }
        public function reset(keepLabels:Array=null):void{
            var _local2:String;
            this.setId(((CSDate.unixTime().toString(10) + "_") + this.setPlaylistCounter.toString(10)));
            this.setStarts(0);
            this.setPauses(0);
            this.setBufferingTime(0);
            this.setPlaybackTime(0);
            this.setRebufferCount(0);
            this.firstPlayOccurred = false;
            if (keepLabels == null){
                this.labels = new Object();
            } else {
                for (_local2 in this.labels) {
                    if (keepLabels.indexOf(_local2) == -1){
                        delete this.labels[_local2];
                    };
                };
            };
        }
        public function getId():String{
            return (this.id);
        }
        public function setId(id:String):void{
            this.id = id;
        }
        function getStarts():uint{
            return (this.starts);
        }
        function incrementStarts():void{
            this.starts++;
        }
        function setStarts(starts:uint):void{
            this.starts = starts;
        }
        function getPauses():uint{
            return (this.pauses);
        }
        function setPauses(pauses:uint):void{
            this.pauses = pauses;
        }
        function incrementPauses():void{
            this.pauses++;
            this.clip.incrementPauses();
        }
        function incrementRebufferCount():void{
            this.rebufferingCount++;
        }
        function getRebufferCount():uint{
            return (this.rebufferingCount);
        }
        function setRebufferCount(rebufferCount:uint):void{
            this.rebufferingCount = rebufferCount;
        }
        function incrementSetPlaylistCounter():void{
            this.setPlaylistCounter++;
        }
        function setSetPlaylist(setPlaylistCounter:uint):void{
            this.setPlaylistCounter = setPlaylistCounter;
        }
        function getSetPlaylistCounter():uint{
            return (this.setPlaylistCounter);
        }
        function addPlaybackTime(now:Number):void{
            var _local2:Number;
            Log.d(this.TAG, (("addPlaybackTime(" + now) + ")"));
            if (this.clip.getPlaybackTimestamp() >= 0){
                _local2 = (now - this.clip.getPlaybackTimestamp());
                this.clip.setPlaybackTimestamp(-1);
                this.clip.setPlaybackTime((this.clip.getPlaybackTime() + _local2));
                this.setPlaybackTime((this.getPlaybackTime() + _local2));
                Log.d(this.TAG, ((("addPlaybackTime(" + now) + ") ->") + _local2));
            };
        }
        function addBufferingTime(now:Number):void{
            var _local2:Number;
            Log.d(this.TAG, (("addBufferingTime(" + now) + ")"));
            if (this.clip.getBufferingTimestamp() >= 0){
                _local2 = (now - this.clip.getBufferingTimestamp());
                this.clip.setBufferingTimestamp(-1);
                this.clip.setBufferingTime((this.clip.getBufferingTime() + _local2));
                this.setBufferingTime((this.getBufferingTime() + _local2));
                Log.d(this.TAG, ((("addBufferingTime(" + now) + ") ->") + _local2));
            };
        }
        function getBufferingTime():Number{
            var _local1:Number = this.bufferingTime;
            if (this.clip.getBufferingTimestamp() >= 0){
                _local1 = (_local1 + (CSDate.unixTime() - this.clip.getBufferingTimestamp()));
            };
            return (_local1);
        }
        function setBufferingTime(bufferingTime:Number):void{
            this.bufferingTime = bufferingTime;
        }
        function getPlaybackTime():Number{
            var _local1:Number = this.playbackTime;
            if (this.clip.getPlaybackTimestamp() >= 0){
                _local1 = (_local1 + (CSDate.unixTime() - this.clip.getPlaybackTimestamp()));
            };
            return (_local1);
        }
        function setPlaybackTime(playbackTime:Number):void{
            this.playbackTime = playbackTime;
        }
        function didFirstPlayOccurred():Boolean{
            return (this.firstPlayOccurred);
        }
        function setFirstPlayOccurred(firstPlayOccurred:Boolean):void{
            this.firstPlayOccurred = firstPlayOccurred;
        }
        public function getClip():Clip{
            return (this.clip);
        }
        public function getLabels():Object{
            return (this.labels);
        }
        public function getLabel(name:String):String{
            return (this.labels[name]);
        }
        function setLabelsState(labels:Object, state:State):void{
            if (labels != null){
                Utils.putAll(this.labels, labels);
                this.setRegisters(this.labels, state);
            };
        }
        public function setLabels(labels:Object):void{
            this.setLabelsState(labels, null);
        }
        public function setLabel(name:String, value:String):void{
            var _local3:Object = new Object();
            _local3[name] = value;
            this.setLabelsState(_local3, null);
        }
        function setRegisters(_labels:Object, state:State):void{
            var _local3:String = _labels["ns_st_id"];
            if (_local3 != null){
                this.id = _local3;
                delete _labels["ns_st_id"];
            };
            if ((((((state == State.PAUSED)) || ((state == State.IDLE)))) || ((state == null)))){
                _local3 = _labels["ns_st_pp"];
                if (_local3 != null){
                    this.pauses = uint(_local3);
                    delete _labels["ns_st_pp"];
                };
            };
            _local3 = _labels["ns_st_sp"];
            if (_local3 != null){
                this.starts = uint(_local3);
                delete _labels["ns_st_sp"];
            };
            _local3 = _labels["ns_st_bp"];
            if (_local3 != null){
                this.bufferingTime = new Number(_local3);
                delete _labels["ns_st_bp"];
            };
            if (state != State.BUFFERING){
                _local3 = _labels["ns_st_pa"];
                if (_local3 != null){
                    this.playbackTime = new Number(_local3);
                    delete _labels["ns_st_pa"];
                };
            };
            _local3 = _labels["ns_st_bc"];
            if (_local3 != null){
                this.rebufferingCount = uint(_local3);
                delete _labels["ns_st_bc"];
            };
        }
        function createLabels(eventType:StreamSenseEventType, initialLabels:Object):Object{
            var _local3:Object = ((initialLabels)!=null) ? initialLabels : new Object();
            _local3["ns_st_bp"] = this.getBufferingTime().toString(10);
            _local3["ns_st_sp"] = this.starts.toString(10);
            _local3["ns_st_id"] = this.getId();
            if (this.rebufferingCount > 0){
                _local3["ns_st_bc"] = this.getRebufferCount();
            };
            if ((((((((((eventType == StreamSenseEventType.PAUSE)) || ((eventType == StreamSenseEventType.END)))) || ((eventType == StreamSenseEventType.HEART_BEAT)))) || ((eventType == StreamSenseEventType.KEEP_ALIVE)))) || ((eventType == null)))){
                _local3["ns_st_pa"] = this.getPlaybackTime().toString(10);
                _local3["ns_st_pp"] = this.pauses.toString(10);
            };
            if ((((eventType == StreamSenseEventType.PLAY)) || ((eventType == null)))){
                if (!this.didFirstPlayOccurred()){
                    _local3["ns_st_pb"] = "1";
                    this.setFirstPlayOccurred(true);
                };
            };
            Utils.putAll(_local3, this.getLabels());
            return (_local3);
        }

    }
}//package com.comscore.streaming 
﻿package com.comscore.streaming {
    import com.comscore.utils.*;

    public class Clip {

        private const TAG:String = "Clip";

        private var id:String;
        private var pauses:uint;
        private var starts:uint;
        private var bufferingTime:Number;
        private var playbackTimestamp:Number;
        private var bufferingTimestamp:Number;
        private var playbackTime:Number;
        private var labels:Object;

        public function Clip(){
            this.reset();
        }
        public function reset(keepLabels:Array=null):void{
            var _local2:String;
            this.setPauses(0);
            this.setStarts(0);
            this.setBufferingTime(0);
            this.setPlaybackTime(0);
            this.setBufferingTimestamp(-1);
            this.setPlaybackTimestamp(-1);
            if (keepLabels == null){
                this.labels = new Object();
            } else {
                for (_local2 in this.labels) {
                    if (keepLabels.indexOf(_local2) == -1){
                        delete this.labels[_local2];
                    };
                };
            };
            if (!this.labels.hasOwnProperty("ns_st_cl")){
                this.labels["ns_st_cl"] = "0";
            };
            if (!this.labels.hasOwnProperty("ns_st_pn")){
                this.labels["ns_st_pn"] = "1";
            };
            if (!this.labels.hasOwnProperty("ns_st_tp")){
                this.labels["ns_st_tp"] = "1";
            };
        }
        public function getId():String{
            return (((this.id)==null) ? "1" : this.id);
        }
        public function setId(clipId:String):void{
            this.id = clipId;
        }
        function addBufferingTime(buff_time:Number):void{
            this.bufferingTime = (this.bufferingTime + buff_time);
        }
        function getPauses():uint{
            return (this.pauses);
        }
        function setPauses(pauses:uint):void{
            this.pauses = pauses;
        }
        function incrementPauses():void{
            this.pauses++;
        }
        function getStarts():uint{
            return (this.starts);
        }
        function setStarts(starts:uint):void{
            this.starts = starts;
        }
        function incrementStarts():void{
            this.starts++;
        }
        function setBufferingTime(bufferingTime:Number):void{
            this.bufferingTime = bufferingTime;
        }
        function getBufferingTime():Number{
            var _local1:Number = this.bufferingTime;
            if (this.bufferingTimestamp >= 0){
                _local1 = (_local1 + (CSDate.unixTime() - this.bufferingTimestamp));
            };
            return (_local1);
        }
        function getPlaybackTime():Number{
            var _local1:Number = this.playbackTime;
            if (this.playbackTimestamp >= 0){
                _local1 = (_local1 + (CSDate.unixTime() - this.playbackTimestamp));
            };
            return (_local1);
        }
        function setPlaybackTime(playbackTime:Number):void{
            this.playbackTime = playbackTime;
        }
        function addPlaybackTime(playbackTime:Number):void{
            Log.d(this.TAG, ("addPlaybackTime=" + playbackTime));
            this.playbackTime = (this.playbackTime + playbackTime);
        }
        function getPlaybackTimestamp():Number{
            return (this.playbackTimestamp);
        }
        function setPlaybackTimestamp(playbackTimestamp:Number):void{
            this.playbackTimestamp = playbackTimestamp;
        }
        function getBufferingTimestamp():Number{
            return (this.bufferingTimestamp);
        }
        function setBufferingTimestamp(bufferingTimestamp:Number):void{
            this.bufferingTimestamp = bufferingTimestamp;
        }
        public function getLabels():Object{
            return (this.labels);
        }
        function setLabelsState(labels:Object, state:State):void{
            if (labels != null){
                Utils.putAll(this.labels, labels);
                this.setRegisters(this.labels, state);
            };
        }
        public function setLabels(labels:Object):void{
            this.setLabelsState(labels, null);
        }
        public function getLabel(name:String):String{
            return (this.labels[name]);
        }
        public function setLabel(name:String, value:String):void{
            var _local3:Object = new Object();
            _local3[name] = value;
            this.setLabelsState(_local3, null);
        }
        function setRegisters(_labels:Object, state:State):void{
            var _local3:String = _labels["ns_st_cn"];
            if (_local3 != null){
                this.id = _local3;
                delete _labels["ns_st_cn"];
            };
            if ((((state == State.PLAYING)) || ((state == null)))){
                _local3 = _labels["ns_st_sq"];
                if (_local3 != null){
                    this.starts = uint(_local3);
                    delete _labels["ns_st_sq"];
                };
            };
            _local3 = _labels["ns_st_bt"];
            if (_local3 != null){
                this.bufferingTime = new Number(_local3);
                delete _labels["ns_st_bt"];
            };
            if (state != State.BUFFERING){
                _local3 = _labels["ns_st_pt"];
                if (_local3 != null){
                    this.playbackTime = new Number(_local3);
                    delete _labels["ns_st_pt"];
                };
            };
            if ((((((state == State.PAUSED)) || ((state == State.IDLE)))) || ((state == null)))){
                _local3 = _labels["ns_st_pc"];
                if (_local3 != null){
                    this.pauses = uint(_local3);
                    delete _labels["ns_st_pc"];
                };
            };
            _local3 = _labels["ns_st_cl"];
            if (_local3 != null){
                this.labels["ns_st_cl"] = _local3;
            };
            _local3 = _labels["ns_st_pn"];
            if (_local3 != null){
                this.labels["ns_st_pn"] = _local3;
            };
            _local3 = _labels["ns_st_tp"];
            if (_local3 != null){
                this.labels["ns_st_tp"] = _local3;
            };
            _local3 = _labels["ns_st_ub"];
            if (_local3 != null){
                this.labels["ns_st_ub"] = _local3;
            };
            _local3 = _labels["ns_st_br"];
            if (_local3 != null){
                this.labels["ns_st_br"] = _local3;
            };
        }
        function createLabels(eventType:StreamSenseEventType, initialLabels:Object):Object{
            var _local3:Object = ((initialLabels)!=null) ? initialLabels : new Object();
            _local3["ns_st_cn"] = this.getId();
            _local3["ns_st_bt"] = this.getBufferingTime().toString(10);
            if ((((eventType == StreamSenseEventType.PLAY)) || ((eventType == null)))){
                _local3["ns_st_sq"] = this.starts.toString(10);
            };
            if ((((((((((eventType == StreamSenseEventType.PAUSE)) || ((eventType == StreamSenseEventType.END)))) || ((eventType == StreamSenseEventType.HEART_BEAT)))) || ((eventType == StreamSenseEventType.KEEP_ALIVE)))) || ((eventType == null)))){
                _local3["ns_st_pc"] = this.pauses.toString(10);
                _local3["ns_st_pt"] = this.getPlaybackTime().toString(10);
            };
            Utils.putAll(_local3, this.getLabels());
            return (_local3);
        }

    }
}//package com.comscore.streaming 
﻿package com.comscore.streaming {

    public interface StreamSenseListener {

        function onStateChange(_arg1:State, _arg2:State, _arg3:Object, _arg4:Number):void;

    }
}//package com.comscore.streaming 
﻿package com.comscore.streaming {

    public class State {

        public static var IDLE:State = new State("idle", 0, StreamSenseEventType.END);
;
        public static var PLAYING:State = new State("playing", 1, StreamSenseEventType.PLAY);
;
        public static var PAUSED:State = new State("paused", 2, StreamSenseEventType.PAUSE);
;
        public static var BUFFERING:State = new State("buffering", 3, StreamSenseEventType.BUFFER);
;

        private var name:String;
        private var code:Number;
        private var eventType:StreamSenseEventType;

        public function State(name:String, code:Number, eventType:StreamSenseEventType){
            this.name = name;
            this.code = code;
            this.eventType = eventType;
        }
        public function getName():String{
            return (this.name);
        }
        public function getCode():Number{
            return (this.code);
        }
        public function toEventType():StreamSenseEventType{
            return (this.eventType);
        }
        public function toString():String{
            return (this.getName());
        }

    }
}//package com.comscore.streaming 
﻿package com.comscore.streaming {
    import flash.display.*;
    import flash.events.*;
    import flash.system.*;

    public class StreamSenseFLVPlayback {

        private var streamSense:StreamSense = null;
        protected var _component:Object;

        public function StreamSenseFLVPlayback(component){
            this._component = component;
        }
        public function setStreamSense(streamSense:StreamSense):void{
            this.streamSense = streamSense;
            this.streamSense.setLabel("ns_st_pv", Constants.STREAMSENSEFLVPLAYBACK_VERSION);
            this.streamSense.setLabel("ns_st_mp", Constants.PLAYER_NAME_FLVPLAYBACK);
            this.streamSense.setLabel("ns_st_mv", Capabilities.version);
            this.initInternalListeners();
        }
        private function initInternalListeners():void{
            this._component.addEventListener("stateChange", this.VidState);
        }
        private function VidState(e:Event):void{
            switch (e.currentTarget.state){
                case "stopped":
                    this.streamSense.notify(StreamSenseEventType.END, this.playheadTime, this.packLabels());
                    break;
                case "buffering":
                    this.streamSense.notify(StreamSenseEventType.BUFFER, this.playheadTime);
                    break;
                case "playing":
                    this.streamSense.notify(StreamSenseEventType.PLAY, this.playheadTime, this.packLabels());
                    break;
                case "paused":
                    this.streamSense.notify(StreamSenseEventType.PAUSE, this.playheadTime, this.packLabels());
                    break;
                case "seeking":
                    this.streamSense.notify(StreamSenseEventType.PAUSE, this.playheadTime, this.packLabels());
                    break;
            };
        }
        private function packLabels():Object{
            var _local1:Object = new Object();
            _local1["ns_st_cl"] = this.duration.toString(10);
            _local1["ns_st_br"] = this.bitrate.toString(10);
            _local1["ns_st_vo"] = Math.floor((this.volume * 100));
            _local1["ns_st_cu"] = this.source;
            _local1["ns_st_cs"] = this.resolution;
            return (_local1);
        }
        public function get duration():int{
            return (Math.floor((this._component.totalTime * 1000)));
        }
        public function get bytesTotal():int{
            return (this._component.bytesTotal);
        }
        public function get playheadTime():Number{
            return (((((this._component.hasOwnProperty("playheadTime")) && ((typeof(this._component.playheadTime) == "number")))) ? Math.floor((this._component.playheadTime * 1000)) : -1));
        }
        public function get volume():Number{
            return (Math.floor(this._component.volume));
        }
        public function get resolution():String{
            return (((((((((this._component.hasOwnProperty("width")) && (this._component.hasOwnProperty("height")))) && ((typeof(this._component.height) == "number")))) && ((typeof(this._component.width) == "number")))) ? ((Math.floor(this._component.width) + "x") + Math.floor(this._component.height)) : "0x0"));
        }
        public function get bitrate():int{
            var _local1:int;
            if (this._component.metadata){
                if (this._component.metadata.hasOwnProperty("videodatarate")){
                    if (typeof(this._component.metadata.videodatarate) == "number"){
                        _local1 = (_local1 + this._component.metadata.videodatarate);
                    };
                };
                if (this._component.metadata.hasOwnProperty("audiodatarate")){
                    if (typeof(this._component.metadata.audiodatarate) == "number"){
                        _local1 = (_local1 + this._component.metadata.audiodatarate);
                    };
                };
            };
            return (((_local1) ? Math.floor((_local1 * 1000)) : 0));
        }
        public function get window():String{
            return (((((((((this._component) && (this._component.hasOwnProperty("stage")))) && (this._component.stage))) && (this._component.stage.displayState))) ? ((this._component.stage.displayState)==StageDisplayState.NORMAL) ? "norm" : "full" : null));
        }
        public function get source():String{
            return (this._component.source);
        }

    }
}//package com.comscore.streaming 
﻿package com.comscore.streaming {

    public class StreamSenseEventType {

        public static var PLAY:StreamSenseEventType = new StreamSenseEventType("play", 0);
;
        public static var PAUSE:StreamSenseEventType = new StreamSenseEventType("pause", 1);
;
        public static var END:StreamSenseEventType = new StreamSenseEventType("end", 2);
;
        public static var BUFFER:StreamSenseEventType = new StreamSenseEventType("buffer", 3);
;
        public static var KEEP_ALIVE:StreamSenseEventType = new StreamSenseEventType("keep-alive", 4);
;
        public static var HEART_BEAT:StreamSenseEventType = new StreamSenseEventType("hb", 5);
;
        public static var CUSTOM:StreamSenseEventType = new StreamSenseEventType("custom", 6);
;
        public static var AD_PLAY:StreamSenseEventType = new StreamSenseEventType("ad_play", 7);
;
        public static var AD_PAUSE:StreamSenseEventType = new StreamSenseEventType("ad_pause", 8);
;
        public static var AD_END:StreamSenseEventType = new StreamSenseEventType("ad_end", 9);
;
        public static var AD_CLICK:StreamSenseEventType = new StreamSenseEventType("ad_click", 10);
;

        private var name:String;
        private var code:Number;

        public function StreamSenseEventType(string:String, code:Number){
            this.name = string;
            this.code = code;
        }
        public function getName():String{
            return (this.name);
        }
        public function getCode():Number{
            return (this.code);
        }
        public function toString():String{
            return (this.getName());
        }

    }
}//package com.comscore.streaming 
﻿package com.comscore.measurement {

    public class Label {

        public var name:String;
        public var value:String;
        public var aggregate:Boolean;

        public function Label(name:String, value:String, aggr:Boolean){
            this.name = name;
            this.value = value;
            this.aggregate = aggr;
        }
        public function pack():String{
            var _local1:String;
            if (((!((this.name == null))) && (!((this.value == null))))){
                _local1 = this.name.toLowerCase().replace(/[^a-z0-9_.-]/g, "");
                if (_local1 != ""){
                    return (((("&" + _local1) + "=") + encodeURIComponent(this.value)));
                };
            };
            return ("");
        }

    }
}//package com.comscore.measurement 
﻿package com.comscore.measurement {
    import com.comscore.analytics.*;
    import com.comscore.utils.*;

    public class Measurement {

        protected var labels:Object;
        protected var created:Number;
        protected var pixelURL:String;

        public function Measurement(core:Core){
            this.labels = new Object();
            this.setPixelURL(core.getPixelURL());
            this.created = CSDate.unixTime();
        }
        public function getLabelValue(name:String):String{
            var _local2:Label = this.labels[name];
            if (_local2 != null){
                return (_local2.value);
            };
            return ("");
        }
        public function retrieveLabelsAsString(orderedLabels:Array):String{
            var _local3:String;
            var _local5:String;
            var _local6:Label;
            var _local2:Object = Utils.putAll({}, this.labels);
            var _local4:Array = [];
            for each (_local3 in orderedLabels) {
                _local6 = _local2[_local3];
                if (_local6 != null){
                    _local4.push(_local6.pack());
                    delete _local2[_local3];
                };
            };
            if (orderedLabels != Constants.LABELS_ORDER){
                for each (_local3 in Constants.LABELS_ORDER) {
                    _local6 = _local2[_local3];
                    if (_local6 != null){
                        _local4.push(_local6.pack());
                        delete _local2[_local3];
                    };
                };
            };
            for (_local3 in _local2) {
                _local4.push(_local2[_local3].pack());
            };
            _local5 = _local4.join("");
            if ((((_local5.length > 0)) && ((_local5.charAt(0) == "&")))){
                _local5 = _local5.substring(1);
            };
            return (_local5);
        }
        public function removeLabel(name:String, aggregate:Boolean, comscorePrivilege:Boolean):void{
            var _local4:Label = this.getLabel(name);
            if (_local4 != null){
                if (((((!((_local4 is PrivilegedLabel))) || (comscorePrivilege))) || (aggregate))){
                    delete this.labels[name];
                };
            };
        }
        protected function appendLabel(label:Label):void{
            if (!this.labels.hasOwnProperty(label.name)){
                this.labels[label.name] = label;
            };
        }
        protected function appendLabelTags(name:String, value:String, aggregate:Boolean, comscorePrivilege:Boolean):void{
            if (comscorePrivilege){
                this.appendLabel(new PrivilegedLabel(name, value, aggregate));
            } else {
                this.appendLabel(new Label(name, value, aggregate));
            };
        }
        protected function setLabelWithTags(name:String, value:String, aggregate:Boolean, comscorePrivilege:Boolean):void{
            this.removeLabel(name, aggregate, comscorePrivilege);
            this.appendLabelTags(name, value, aggregate, comscorePrivilege);
        }
        public function setLabel(label:Label):void{
            this.removeLabel(label.name, label.aggregate, (label is PrivilegedLabel));
            this.appendLabel(label);
        }
        public function setLabelAggr(name:String, value:String, aggregate:Boolean):void{
            this.removeLabel(name, aggregate, false);
            this.appendLabelTags(name, value, aggregate, false);
        }
        public function setLabelNoTags(name:String, value:String):void{
            this.setLabelAggr(name, value, false);
        }
        public function getLabel(name:String):Label{
            return (this.labels[name]);
        }
        public function hasLabel(name:String):Boolean{
            return (!((this.getLabel(name) == null)));
        }
        public function addLabels(labels:Object, aggregate:Boolean=false):void{
            var _local3:String;
            if (labels != null){
                for (_local3 in labels) {
                    if (_local3 !== null){
                        this.setLabelAggr(_local3, labels[_local3], aggregate);
                    };
                };
            };
        }
        public function getPixelURL():String{
            return (this.pixelURL);
        }
        public function setPixelURL(pixelURL:String):void{
            var _local2:int;
            if (pixelURL != null){
                _local2 = pixelURL.indexOf("?");
                if ((((_local2 >= 0)) && ((pixelURL.length > (_local2 + 1))))){
                    this.setLabel(new Label(Constants.PAGENAME_LABEL, pixelURL.substring((_local2 + 1)), false));
                    this.pixelURL = pixelURL.substring(0, (_local2 + 1));
                } else {
                    this.pixelURL = pixelURL;
                };
            };
        }

    }
}//package com.comscore.measurement 
﻿package com.comscore.measurement {

    public class PrivilegedLabel extends Label {

        private var privileged:Boolean;

        public function PrivilegedLabel(name:String, value:String, aggr:Boolean){
            super(name, value, aggr);
            this.privileged = true;
        }
        public function getPrivileged():Boolean{
            return (this.privileged);
        }

    }
}//package com.comscore.measurement 
﻿package com.comscore.analytics {

    public class SessionState {

        public static const INACTIVE:SessionState = new SessionState("INACTIVE");
;
        public static const APPLICATION:SessionState = new SessionState("APPLICATION");
;
        public static const USER:SessionState = new SessionState("USER");
;
        public static const ACTIVE_USER:SessionState = new SessionState("ACTIVE_USER");
;

        private var state:String = null;

        public function SessionState(state:String){
            this.state = state;
        }
        public function getValue():String{
            return (this.state);
        }

    }
}//package com.comscore.analytics 
﻿package com.comscore.analytics {

    public class ApplicationState {

        public static const FOREGROUND:ApplicationState = new ApplicationState("FOREGROUND");
;
        public static const BACKGROUND_UX_ACTIVE:ApplicationState = new ApplicationState("BACKGROUND_UX_ACTIVE");
;
        public static const INACTIVE:ApplicationState = new ApplicationState("INACTIVE");
;

        private var state:String = null;

        public function ApplicationState(state:String){
            this.state = state;
        }
        public function getValue():String{
            return (this.state);
        }

    }
}//package com.comscore.analytics 
﻿package com.comscore.analytics {
    import flash.display.*;
    import com.comscore.utils.*;
    import com.comscore.applications.*;

    public class comScore {

        private static var core:Core = new Core();

        public static function setAppContext(displayobject:DisplayObject):void{
            core.setAppContext(displayobject);
        }
        public static function start(labels:Object=null):void{
            core.notify(EventType.START, labels);
        }
        public static function view(labels:Object=null):void{
            core.notify(EventType.VIEW, labels);
        }
        public static function hidden(labels:Object=null):void{
            core.notify(EventType.HIDDEN, labels);
        }
        public static function aggregate(labels:Object):void{
            core.notify(EventType.AGGREGATE, labels);
        }
        public static function close(labels:Object=null):void{
            core.notify(EventType.CLOSE, labels);
        }
        public static function onUxActive():void{
            core.onUxActive();
        }
        public static function onUxInactive():void{
            core.onUxInactive();
        }
        public static function onEnterForeground():void{
            core.onEnterForeground();
        }
        public static function onExitForeground():void{
            core.onExitForeground();
        }
        public static function onUserInteraction():void{
            core.onUserInteraction();
        }
        public static function update():void{
            core.update();
        }
        public static function enableAutoUpdate(intervalInSeconds:Number=60, foregroundOnly:Boolean=true):void{
            core.enableAutoUpdate(intervalInSeconds, foregroundOnly);
        }
        public static function disableAutoUpdate():void{
            core.disableAutoUpdate();
        }
        public static function isAutoUpdateEnabled():Boolean{
            return (core.isAutoUpdateEnabled());
        }
        public static function getPixelURL():String{
            return (core.getPixelURL());
        }
        public static function setPixelURL(pixelURL:String):void{
            core.setPixelURL(pixelURL);
        }
        public static function getVisitorID():String{
            return (core.getVisitorId());
        }
        public static function getPublisherSecret():String{
            return (core.getPublisherSecret());
        }
        public static function setPublisherSecret(value:String):void{
            core.setPublisherSecret(value);
        }
        public static function getAppName():String{
            return (core.getAppName());
        }
        public static function setAppName(value:String):void{
            core.setAppName(value);
        }
        public static function setAppVersion(value:String):void{
            core.setAppVersion(value);
        }
        public static function getAppVersion():String{
            return (core.getAppVersion());
        }
        public static function getVersion():String{
            return (core.getVersion());
        }
        public static function getGenesis():Number{
            return (core.getGenesis());
        }
        public static function setCustomerC2(customerC2:String):void{
            core.setCustomerC2(customerC2);
        }
        public static function getCustomerC2():String{
            return (core.getCustomerC2());
        }
        public static function getLabels():Object{
            return (core.getLabels());
        }
        public static function getLabel(label:String):String{
            return (core.getLabel(label));
        }
        public static function setLabel(name:String, value:String):void{
            core.setLabel(name, value);
        }
        public static function setLabels(labels:Object):void{
            core.setLabels(labels);
        }
        public static function getAutoStartLabels():Object{
            return (core.getAutoStartLabels());
        }
        public static function getAutoStartLabel(label:String):String{
            return (core.getAutoStartLabel(label));
        }
        public static function setAutoStartLabel(name:String, value:String):void{
            core.setAutoStartLabel(name, value);
        }
        public static function setAutoStartLabels(labels:Object):void{
            core.setAutoStartLabels(labels);
        }
        public static function setKeepAliveEnabled(keepAliveEnabled:Boolean):void{
            core.setKeepAliveEnabled(keepAliveEnabled);
        }
        public static function isKeepAliveEnabled():Boolean{
            return (core.isKeepAliveEnabled());
        }
        public static function isAutoStartEnabled():Boolean{
            return (core.isAutoStartEnabled());
        }
        public static function setAutoStartEnabled(autoStartEnabled:Boolean):void{
            core.setAutoStartEnabled(autoStartEnabled);
        }
        public static function flushCache():void{
            core.flush();
        }
        public static function allowOfflineTransmission(mode:TransmissionMode):void{
            core.allowOfflineTransmission(mode);
        }
        public static function allowLiveTransmission(mode:TransmissionMode):void{
            core.allowLiveTransmission(mode);
        }
        public static function getOfflineTransmissionMode():TransmissionMode{
            return (core.getOfflineTransmissionMode());
        }
        public static function getLiveTransmissionMode():TransmissionMode{
            return (core.getLiveTransmissionMode());
        }
        public static function setSecure(secure:Boolean):void{
            core.setSecure(secure);
        }
        public static function isSecure():Boolean{
            return (core.isSecure());
        }
        public static function getCore():Core{
            return (core);
        }
        public static function setCacheMaxMeasurements(max:int):void{
            core.setCacheMaxMeasurements(max);
        }
        public static function getCacheMaxMeasurements():int{
            return (core.getCacheMaxMeasurements());
        }
        public static function setCacheMaxBatchFiles(max:int):void{
            core.setCacheMaxBatchFiles(max);
        }
        public static function getCacheMaxBatchFiles():int{
            return (core.getCacheMaxBatchFiles());
        }
        public static function setCacheMaxFlushesInARow(max:int):void{
            core.setCacheMaxFlushesInARow(max);
        }
        public static function getCacheMaxFlushesInARow():int{
            return (core.getCacheMaxFlushesInARow());
        }
        public static function setCacheMinutesToRetry(minutes:int):void{
            core.setCacheMinutesToRetry(minutes);
        }
        public static function getCacheMinutesToRetry():int{
            return (core.getCacheMinutesToRetry());
        }
        public static function setCacheMeasurementExpiry(days:int):void{
            core.setCacheMeasurementExpiry(days);
        }
        public static function getCacheMeasurementExpiry():int{
            return (core.getCacheMeasurementExpiry());
        }
        public static function getCacheFlushingInterval():Number{
            return (core.getCacheFlushingInterval());
        }
        public static function setCacheFlushingInterval(seconds:Number):void{
            return (core.setCacheFlushingInterval(seconds));
        }
        public static function errorHandlingEnabled(enable:Boolean):void{
            core.setErrorHandlingEnabled(enable);
        }
        public static function isErrorHandlingEnabled():Boolean{
            return (core.isErrorHandlingEnabled());
        }
        public static function getMeasurementLabelOrder():Array{
            return (core.getMeasurementLabelOrder());
        }
        public static function setMeasurementLabelOrder(labelOrder:Array):void{
            core.setMeasurementLabelOrder(labelOrder);
        }

    }
}//package com.comscore.analytics 
﻿package com.comscore.analytics {
    import flash.display.*;
    import flash.events.*;
    import flash.utils.*;
    import com.comscore.utils.*;
    import com.comscore.applications.*;
    import flash.filesystem.*;

    public class Core {

        private static const TAG:String = "Core";

        protected var offlineCache:OfflineMeasurementsCache;
        protected var storage:Storage;
        protected var dispatchQueue:DispatchQueue;
        protected var keepAlive:KeepAlive;
        protected var cacheFlusher:CacheFlusher;
        protected var measurementLabelOrder:Array;
        protected var autoUpdateTimer:Timer;
        protected var dispatchProperties:DispatchProperties;
        protected var autoUpdateInterval:Number;
        protected var autoUpdateInForegroundOnly:Boolean = true;
        protected var coldStartDispatched:Boolean = false;
        protected var runsCount:Number;
        protected var coldStartId:Number;
        protected var coldStartCount:Number;
        protected var installId:Number;
        protected var firstInstallId:Number;
        protected var currentVersion:String;
        protected var previousVersion:String;
        protected var currentApplicationState:ApplicationState;
        protected var foregroundComponentsCount:Number;
        protected var activeUxComponentsCount:Number;
        protected var foregroundTransitionsCount:Number;
        protected var totalForegroundTime:Number;
        protected var totalBackgroundTime:Number;
        protected var totalInactiveTime:Number;
        protected var accumulatedBackgroundTime:Number;
        protected var accumulatedForegroundTime:Number;
        protected var accumulatedInactiveTime:Number;
        protected var genesis:Number;
        protected var previousGenesis:Number;
        protected var lastApplicationAccumulationTimestamp:Number;
        protected var currentSessionState:SessionState;
        protected var accumulatedApplicationSessionTime:Number;
        protected var accumulatedUserSessionTime:Number;
        protected var accumulatedActiveUserSessionTime:Number;
        protected var applicationSessionCount:Number;
        protected var userSessionCount:Number;
        protected var activeUserSessionCount:Number;
        protected var lastApplicationSessionTimestamp:Number;
        protected var lastUserSessionTimestamp:Number;
        protected var lastActiveUserSessionTimestamp:Number;
        protected var userInteractionCount:Number;
        protected var lastUserInteractionTimestamp:Number;
        protected var lastSessionAccumulationTimestamp:Number;
        protected var userInteractionTimer:Timer;
        private var version:String;
        private var pixelURL:String;
        private var appVersion:String;
        private var visitorID:String;
        protected var publisherSecret:String;
        private var appName:String;
        private var exitCode:Number;
        private var secure:Boolean;
        private var appContext:DisplayObject;
        private var customLabels:Object;
        private var autoStartLabels:Object;
        private var keepAliveEnabled:Boolean;
        private var autoStartEnabled:Boolean;
        private var errorHandlingEnable:Boolean;
        private var flushingInterval:Number = 0;
        private var liveTransmissionMode:TransmissionMode;
        private var offlineTransmissionMode:TransmissionMode;

        public function Core(){
            this.currentApplicationState = ApplicationState.INACTIVE;
            this.currentSessionState = SessionState.INACTIVE;
            super();
            this.keepAliveEnabled = true;
            this.errorHandlingEnable = false;
            this.autoStartEnabled = true;
            this.secure = false;
            this.liveTransmissionMode = TransmissionMode.DEFAULT;
            this.offlineTransmissionMode = TransmissionMode.DEFAULT;
            this.customLabels = new Object();
            this.autoStartLabels = new Object();
            this.dispatchProperties = new DispatchProperties();
            this.reset();
        }
        protected function reset():void{
            this.dispatchProperties.reset();
            this.currentApplicationState = ApplicationState.INACTIVE;
            this.currentSessionState = SessionState.INACTIVE;
            this.coldStartDispatched = false;
            this.runsCount = 0;
            this.coldStartId = -1;
            this.coldStartCount = 0;
            this.firstInstallId = -1;
            this.installId = -1;
            this.currentVersion = null;
            this.previousVersion = null;
            this.foregroundComponentsCount = 0;
            this.activeUxComponentsCount = 0;
            this.totalForegroundTime = 0;
            this.totalBackgroundTime = 0;
            this.totalInactiveTime = 0;
            this.accumulatedBackgroundTime = 0;
            this.accumulatedForegroundTime = 0;
            this.accumulatedInactiveTime = 0;
            this.accumulatedApplicationSessionTime = 0;
            this.accumulatedActiveUserSessionTime = 0;
            this.accumulatedUserSessionTime = 0;
            this.genesis = -1;
            this.previousGenesis = 0;
            this.activeUserSessionCount = -1;
            this.userSessionCount = -1;
            this.userInteractionCount = 0;
            this.lastUserInteractionTimestamp = -1;
            this.lastApplicationAccumulationTimestamp = -1;
            this.lastSessionAccumulationTimestamp = -1;
            this.lastApplicationSessionTimestamp = -1;
            this.lastUserSessionTimestamp = -1;
            this.lastActiveUserSessionTimestamp = -1;
            this.measurementLabelOrder = Constants.LABELS_ORDER;
            this.installId = -1;
            this.firstInstallId = -1;
            this.exitCode = 0;
            this.disableAutoUpdate();
            if (this.userInteractionTimer != null){
                this.userInteractionTimer.stop();
                this.userInteractionTimer = null;
            };
            if (this.keepAlive != null){
                this.keepAlive.cancel();
            };
            if (this.cacheFlusher != null){
                this.cacheFlusher.stop();
            };
        }
        private function migrateOldStorageKeys():void{
            var _local1:Array = new Array();
            _local1.push(Constants.LAST_APPLICATION_ACCUMULATION_TIMESTAMP_KEY);
            _local1.push(Constants.LAST_SESSION_ACCUMULATION_TIMESTAMP_KEY);
            this.migrateOldKeys("lastActivityTime", _local1);
            this.migrateOldKey("ns_ap_fg", Constants.FOREGROUND_TRANSITION_COUNT_KEY);
            this.migrateOldKey("installTime", Constants.INSTALL_ID_KEY);
            this.migrateOldKey("ns_ap_ver", Constants.PREVIOUS_VERSION_KEY);
        }
        private function migrateOldKey(oldKey:String, newKey:String):void{
            var _local3:Array = new Array();
            _local3.push(newKey);
            this.migrateOldKeys(oldKey, _local3);
        }
        private function migrateOldKeys(oldKey:String, newKeyArray:Array):void{
            var _local3:String;
            var _local4:String;
            var _local5:String;
            for each (_local3 in newKeyArray) {
                _local4 = this.storage.get(oldKey);
                _local5 = this.storage.get(_local3);
                if (((Utils.isNotEmpty(_local4)) && (Utils.isEmpty(_local5)))){
                    this.storage.set(_local3, _local4);
                };
            };
            this.storage.remove(oldKey);
        }
        protected function initializeContextDependant():void{
            this.initializeStorage();
            this.initializeQueue();
            this.initializeOfflineCache();
            this.initializeKeepAlive();
            this.initializeCacheFlusher();
            this.initializeStateMachines();
        }
        protected function initializeStorage():void{
            this.storage = new Storage(this);
            this.migrateOldStorageKeys();
        }
        protected function initializeQueue():void{
            this.dispatchQueue = new DispatchQueue(this);
        }
        protected function initializeOfflineCache():void{
            this.offlineCache = new OfflineMeasurementsCache(this);
        }
        protected function initializeKeepAlive():void{
            this.keepAlive = new KeepAlive(this, Constants.KEEPALIVE_TIMER_PERIOD);
        }
        protected function initializeCacheFlusher():void{
            this.cacheFlusher = new CacheFlusher(this);
        }
        protected function initializeStateMachines():void{
            var _local2:Number;
            this.lastApplicationAccumulationTimestamp = Utils.getNumber(this.storage.get(Constants.LAST_APPLICATION_ACCUMULATION_TIMESTAMP_KEY), -1);
            this.lastSessionAccumulationTimestamp = Utils.getNumber(this.storage.get(Constants.LAST_SESSION_ACCUMULATION_TIMESTAMP_KEY), -1);
            this.lastApplicationSessionTimestamp = Utils.getNumber(this.storage.get(Constants.LAST_APPLICATION_SESSION_TIMESTAMP_KEY), -1);
            this.lastUserSessionTimestamp = Utils.getNumber(this.storage.get(Constants.LAST_USER_SESSION_TIMESTAMP_KEY), -1);
            this.lastActiveUserSessionTimestamp = Utils.getNumber(this.storage.get(Constants.LAST_ACTIVE_USER_SESSION_TIMESTAMP_KEY), -1);
            this.foregroundTransitionsCount = Utils.getNumber(this.storage.get(Constants.FOREGROUND_TRANSITION_COUNT_KEY));
            this.accumulatedForegroundTime = Utils.getNumber(this.storage.get(Constants.ACCUMULATED_FOREGROUND_TIME_KEY));
            this.accumulatedBackgroundTime = Utils.getNumber(this.storage.get(Constants.ACCUMULATED_BACKGROUND_TIME_KEY));
            this.accumulatedInactiveTime = Utils.getNumber(this.storage.get(Constants.ACCUMULATED_INACTIVE_TIME_KEY));
            this.accumulatedApplicationSessionTime = Utils.getNumber(this.storage.get(Constants.ACCUMULATED_APPLICATION_SESSION_TIME_KEY));
            this.accumulatedActiveUserSessionTime = Utils.getNumber(this.storage.get(Constants.ACCUMULATED_ACTIVE_USER_SESSION_TIME_KEY));
            this.accumulatedUserSessionTime = Utils.getNumber(this.storage.get(Constants.ACCUMULATED_USER_SESSION_TIME_KEY));
            this.totalForegroundTime = Utils.getNumber(this.storage.get(Constants.TOTAL_FOREGROUND_TIME_KEY));
            this.totalBackgroundTime = Utils.getNumber(this.storage.get(Constants.TOTAL_BACKGROUND_TIME_KEY));
            this.totalInactiveTime = Utils.getNumber(this.storage.get(Constants.TOTAL_INACTIVE_TIME_KEY));
            this.activeUserSessionCount = Utils.getNumber(this.storage.get(Constants.ACTIVE_USER_SESSION_COUNT_KEY), -1);
            this.userSessionCount = Utils.getNumber(this.storage.get(Constants.USER_SESSION_COUNT_KEY), -1);
            this.lastUserInteractionTimestamp = Utils.getNumber(this.storage.get(Constants.LAST_USER_INTERACTION_TIMESTAMP_KEY), -1);
            this.userInteractionCount = Utils.getNumber(this.storage.get(Constants.USER_INTERACTION_COUNT_KEY), 0);
            this.applicationSessionCount = Utils.getNumber(this.storage.get(Constants.APPLICATION_SESSION_COUNT_KEY), 0);
            this.exitCode = Utils.getNumber(this.storage.get(Constants.EXIT_CODE_KEY), 0);
            this.currentVersion = this.getAppVersion();
            this.previousGenesis = Utils.getNumber(this.storage.get(Constants.PREVIOUS_GENESIS_KEY), 0);
            this.genesis = Utils.getNumber(this.storage.get(Constants.GENESIS_KEY), -1);
            if (this.genesis < 0){
                this.genesis = CSDate.unixTime();
                this.previousGenesis = 0;
                this.lastApplicationSessionTimestamp = this.genesis;
                this.applicationSessionCount++;
            } else {
                if (!this.validateApplicationSession()){
                    this.accumulatedApplicationSessionTime = (this.accumulatedApplicationSessionTime + (CSDate.unixTime() - this.lastSessionAccumulationTimestamp));
                    this.storage.set(Constants.ACCUMULATED_APPLICATION_SESSION_TIME_KEY, this.accumulatedApplicationSessionTime.toString(10));
                };
                this.lastApplicationSessionTimestamp = this.genesis;
            };
            this.firstInstallId = Utils.getNumber(this.storage.get(Constants.FIRST_INSTALL_ID_KEY), -1);
            if (this.firstInstallId < 0){
                this.firstInstallId = this.genesis;
                this.installId = this.genesis;
                if (this.currentVersion != Constants.APPLICATION_DEFAULT_NAME){
                    this.storage.set(Constants.CURRENT_VERSION_KEY, this.currentVersion);
                };
                this.storage.set(Constants.FIRST_INSTALL_ID_KEY, this.firstInstallId.toString(10));
                this.storage.set(Constants.INSTALL_ID_KEY, this.installId.toString(10));
            } else {
                this.setAppVersion(this.currentVersion);
            };
            this.storage.set(Constants.GENESIS_KEY, this.genesis.toString(10));
            this.storage.set(Constants.PREVIOUS_GENESIS_KEY, this.previousGenesis.toString(10));
            this.setExitCode(this.genesis);
            var _local1:Number = CSDate.unixTime();
            if (this.lastApplicationAccumulationTimestamp >= 0){
                _local2 = (_local1 - this.lastApplicationAccumulationTimestamp);
                this.accumulatedInactiveTime = (this.accumulatedInactiveTime + _local2);
                this.storage.set(Constants.ACCUMULATED_INACTIVE_TIME_KEY, this.accumulatedInactiveTime.toString(10));
                this.totalInactiveTime = (this.totalInactiveTime + _local2);
                this.storage.set(Constants.TOTAL_INACTIVE_TIME_KEY, this.totalInactiveTime.toString(10));
            };
            this.lastSessionAccumulationTimestamp = (this.lastApplicationAccumulationTimestamp = _local1);
            this.storage.set(Constants.LAST_APPLICATION_ACCUMULATION_TIMESTAMP_KEY, this.lastApplicationAccumulationTimestamp.toString(10));
            this.storage.set(Constants.LAST_SESSION_ACCUMULATION_TIMESTAMP_KEY, this.lastSessionAccumulationTimestamp.toString(10));
            this.storage.set(Constants.LAST_APPLICATION_SESSION_TIMESTAMP_KEY, this.lastApplicationSessionTimestamp.toString(10));
            if (!this.storage.hasKey(Constants.RUNS_COUNT_KEY)){
                this.storage.set(Constants.RUNS_COUNT_KEY, "0");
            };
            this.runsCount = Utils.getNumber(this.storage.get(Constants.RUNS_COUNT_KEY));
            this.coldStartCount = Utils.getNumber(this.storage.get(Constants.COLD_START_COUNT_KEY));
        }
        public function handleColdStart():Boolean{
            if (!this.coldStartDispatched){
                this.coldStartDispatched = true;
                this.coldStartCount++;
                this.storage.set(Constants.COLD_START_COUNT_KEY, this.coldStartCount.toString(10));
                this.coldStartId = CSDate.unixTime();
                return (true);
            };
            return (false);
        }
        protected function loadInitialSettings():void{
            var _local2:FileStream;
            var _local3:XML;
            var _local4:Boolean;
            var _local5:String;
            var _local6:String;
            var _local7:String;
            var _local8:String;
            var _local9:Boolean;
            var _local10:Boolean;
            var _local11:Boolean;
            var _local12:String;
            var _local13:String;
            var _local14:Number;
            var _local15:Number;
            var _local16:Number;
            var _local17:Number;
            var _local18:Number;
            var _local19:Number;
            var _local20:Boolean;
            var _local21:Number;
            var _local1:File = File.applicationDirectory.resolvePath("comScore.xml");
            if (((!((_local1 == null))) && (_local1.exists))){
                _local2 = new FileStream();
                _local2.open(_local1, FileMode.READ);
                _local3 = XML(_local2.readUTFBytes(_local2.bytesAvailable));
                _local2.close();
                _local4 = Utils.getBoolean(_local3.Secure);
                this.setSecure(_local4);
                _local5 = _local3.PublisherSecret;
                if (((!((_local5 == null))) && (!((_local5 == ""))))){
                    this.setPublisherSecret(_local5);
                };
                _local6 = _local3.AppName;
                if (((!((_local6 == null))) && (!((_local6 == ""))))){
                    this.setAppName(_local6);
                };
                _local7 = _local3.CustomerC2;
                if (((!((_local7 == null))) && (!((_local7 == ""))))){
                    this.setCustomerC2(_local7);
                };
                _local8 = _local3.PixelURL;
                if (((!((_local8 == null))) && (!((_local8 == ""))))){
                    this.setPixelURL(_local8);
                };
                _local9 = Utils.getBoolean(_local3.KeepAliveEnabled, true);
                this.setKeepAliveEnabled(_local9);
                _local10 = Utils.getBoolean(_local3.AutoStartEnabled, true);
                this.setAutoStartEnabled(_local10);
                _local11 = Utils.getBoolean(_local3.ErrorHandlingEnabled, true);
                this.setErrorHandlingEnabled(_local11);
                _local12 = _local3.LiveTransmissionMode;
                if (((!((_local12 == null))) && (!((_local12 == ""))))){
                    this.allowLiveTransmission(TransmissionMode.valueOf(_local12.toUpperCase()));
                };
                _local13 = _local3.OfflineTransmissionMode;
                if (((!((_local13 == null))) && (!((_local13 == ""))))){
                    this.allowOfflineTransmission(TransmissionMode.valueOf(_local13.toUpperCase()));
                };
                _local14 = Utils.getNumber(_local3.CacheMaxSize, -1);
                if (_local14 >= 0){
                    this.setCacheMaxMeasurements(_local14);
                };
                _local15 = Utils.getNumber(_local3.CacheMaxBatchSize, -1);
                if (_local15 >= 0){
                    this.setCacheMaxBatchFiles(_local15);
                };
                _local16 = Utils.getNumber(_local3.CacheMaxFlushesInARow, -1);
                if (_local16 >= 0){
                    this.setCacheMaxFlushesInARow(_local16);
                };
                _local17 = Utils.getNumber(_local3.CacheMinutesToRetry, -1);
                if (_local17 >= 0){
                    this.setCacheMinutesToRetry(_local17);
                };
                _local18 = Utils.getNumber(_local3.CacheExpiryInDays, -1);
                if (_local18 >= 0){
                    this.setCacheMeasurementExpiry(_local18);
                };
                _local19 = Utils.getNumber(_local3.CacheFlushingInterval, -1);
                if (_local19 >= 0){
                    this.setCacheFlushingInterval(_local19);
                };
                _local20 = Utils.getBoolean(_local3.AutoUpdateInForegroundOnly, true);
                _local21 = Utils.getNumber(_local3.AutoUpdateInterval, -1);
                if (_local21 >= Constants.DEFAULT_AUTOUPDATE_INTERVAL_IN_SECONDS){
                    this.enableAutoUpdate(_local21, _local20);
                };
                this.dispatchQueue.getDispatchProperties().copyFrom(this.dispatchProperties);
            };
        }
        public function getOfflineCache():OfflineMeasurementsCache{
            return (this.offlineCache);
        }
        public function getStorage():Storage{
            return (this.storage);
        }
        public function getQueue():DispatchQueue{
            return (this.dispatchQueue);
        }
        public function getKeepAlive():KeepAlive{
            return (this.keepAlive);
        }
        public function getCacheFlusher():CacheFlusher{
            return (this.cacheFlusher);
        }
        public function getDispatchProperties():DispatchProperties{
            return (this.dispatchProperties);
        }
        public function onUxActive():void{
            if (this.isNotProperlyInitialized()){
                return;
            };
            if (this.userSessionCount < 0){
                this.userSessionCount = 0;
            };
            this.activeUxComponentsCount++;
            this.updateState();
        }
        public function onUxInactive():void{
            if (this.isNotProperlyInitialized()){
                return;
            };
            if (this.activeUxComponentsCount > 0){
                this.activeUxComponentsCount--;
                this.updateState();
            };
        }
        public function onEnterForeground():void{
            if (this.isNotProperlyInitialized()){
                return;
            };
            this.foregroundComponentsCount++;
            this.updateState();
        }
        public function onExitForeground():void{
            if (this.isNotProperlyInitialized()){
                return;
            };
            if (this.foregroundComponentsCount > 0){
                this.foregroundComponentsCount--;
                this.updateState();
            };
        }
        public function onUserInteraction():void{
            if (this.isNotProperlyInitialized()){
                return;
            };
            if (this.userSessionCount < 0){
                this.userSessionCount = 0;
            };
            if (this.activeUserSessionCount < 0){
                this.activeUserSessionCount = 0;
            };
            this.lastUserInteractionTimestamp = CSDate.unixTime();
            this.userInteractionCount++;
            if (this.currentSessionState != SessionState.ACTIVE_USER){
                this.updateState();
            } else {
                this.scheduleUserInteractionTask();
            };
        }
        protected function updateState():void{
            var _local2:ApplicationState;
            var _local3:SessionState;
            var _local6:Boolean;
            var _local7:Boolean;
            var _local1:Number = CSDate.unixTime();
            if (this.foregroundComponentsCount > 0){
                _local2 = ApplicationState.FOREGROUND;
            } else {
                if (this.activeUxComponentsCount > 0){
                    _local2 = ApplicationState.BACKGROUND_UX_ACTIVE;
                } else {
                    _local2 = ApplicationState.INACTIVE;
                };
            };
            if ((_local1 - this.lastUserInteractionTimestamp) < Constants.USER_SESSION_INACTIVE_PERIOD){
                _local3 = SessionState.ACTIVE_USER;
            } else {
                if (this.activeUxComponentsCount > 0){
                    _local3 = SessionState.USER;
                } else {
                    if (this.foregroundComponentsCount > 0){
                        _local3 = SessionState.APPLICATION;
                    } else {
                        _local3 = SessionState.INACTIVE;
                    };
                };
            };
            var _local4:ApplicationState = this.currentApplicationState;
            var _local5:SessionState = this.currentSessionState;
            if (((!((_local2 == _local4))) || (!((_local3 == _local5))))){
                _local6 = false;
                _local7 = false;
                if (_local4 != _local2){
                    this.onExitApplicationState(this.currentApplicationState);
                    this.onEnterApplicationState(_local2);
                    this.accumulateApplicationData();
                    this.currentApplicationState = _local2;
                    _local6 = true;
                };
                if (_local5 != _local3){
                    this.onExitSessionState(this.currentSessionState);
                    this.onEnterSessionState(_local3);
                    this.accumulateSessionData();
                    this.currentSessionState = _local3;
                    _local7 = true;
                };
                if (_local6){
                    this.onApplicationStateChanged(_local4, this.currentApplicationState);
                };
                if (_local7){
                    this.onSessionStateChanged(_local5, this.currentSessionState);
                };
            };
        }
        protected function onApplicationStateChanged(oldState:ApplicationState, newState:ApplicationState):void{
            if (((((!((newState == ApplicationState.INACTIVE))) && (this.isAutoStartEnabled()))) && (!(this.coldStartDispatched)))){
                this.notify(EventType.START, this.autoStartLabels);
            };
        }
        protected function onSessionStateChanged(oldState:SessionState, newState:SessionState):void{
        }
        protected function onExitApplicationState(state:ApplicationState):void{
            Log.d(TAG, ("Leaving application state: " + state.getValue()));
            switch (state){
                case ApplicationState.INACTIVE:
                    this.keepAlive.start(Constants.KEEPALIVE_TIMER_PERIOD_ONSTART);
                    this.cacheFlusher.start();
                    break;
                case ApplicationState.BACKGROUND_UX_ACTIVE:
                    this.stopAutoUpdateTimer();
                    break;
                case ApplicationState.FOREGROUND:
                    this.stopAutoUpdateTimer();
                    break;
            };
        }
        protected function onEnterApplicationState(state:ApplicationState):void{
            Log.d(TAG, ("Entering application state: " + state.getValue()));
            switch (state){
                case ApplicationState.INACTIVE:
                    this.keepAlive.cancel();
                    this.cacheFlusher.stop();
                    this.stopAutoUpdateTimer();
                    break;
                case ApplicationState.BACKGROUND_UX_ACTIVE:
                    if (!this.autoUpdateInForegroundOnly){
                        this.startAutoUpdateTimer();
                    };
                    break;
                case ApplicationState.FOREGROUND:
                    this.startAutoUpdateTimer();
                    this.foregroundTransitionsCount++;
                    break;
            };
        }
        protected function onExitSessionState(state:SessionState):void{
            Log.d(TAG, ("Leaving session state: " + state.getValue()));
            var _local2:Number = CSDate.unixTime();
            switch (state){
                case SessionState.ACTIVE_USER:
                    if (this.userInteractionTimer != null){
                        this.userInteractionTimer.stop();
                        this.userInteractionTimer = null;
                    };
                    this.lastActiveUserSessionTimestamp = _local2;
                case SessionState.USER:
                    this.lastUserSessionTimestamp = _local2;
                case SessionState.APPLICATION:
                    this.lastApplicationSessionTimestamp = _local2;
                    break;
                case SessionState.INACTIVE:
                    if (!this.validateApplicationSession()){
                        this.accumulatedApplicationSessionTime = (this.accumulatedApplicationSessionTime + (_local2 - this.lastSessionAccumulationTimestamp));
                    };
                    break;
            };
        }
        protected function onEnterSessionState(state:SessionState):void{
            Log.d(TAG, ("Entering session state: " + state.getValue()));
            switch (state){
                case SessionState.ACTIVE_USER:
                    this.validateActiveUserSession();
                    this.scheduleUserInteractionTask();
                case SessionState.USER:
                    this.validateUserSession();
                case SessionState.APPLICATION:
                    this.validateApplicationSession();
                    break;
                case SessionState.INACTIVE:
                    break;
            };
        }
        protected function scheduleUserInteractionTask():void{
            if (this.userInteractionTimer != null){
                this.userInteractionTimer.stop();
                this.userInteractionTimer = null;
            };
            this.userInteractionTimer = new Timer(Constants.USER_SESSION_INACTIVE_PERIOD, 1);
            this.userInteractionTimer.addEventListener(TimerEvent.TIMER, this.onUserInteractionTask);
            this.userInteractionTimer.start();
        }
        private function onUserInteractionTask(event:TimerEvent):void{
            if (this.userInteractionTimer != null){
                this.userInteractionTimer.stop();
                this.userInteractionTimer = null;
                this.updateState();
            };
        }
        protected function validateApplicationSession():Boolean{
            var _local1:Number = CSDate.unixTime();
            var _local2:Boolean;
            if ((_local1 - this.lastApplicationSessionTimestamp) > Constants.SESSION_INACTIVE_PERIOD){
                this.previousGenesis = this.genesis;
                this.genesis = _local1;
                this.applicationSessionCount++;
                _local2 = true;
            };
            this.lastApplicationSessionTimestamp = _local1;
            return (_local2);
        }
        protected function validateActiveUserSession():void{
            var _local1:Number = CSDate.unixTime();
            if ((_local1 - this.lastActiveUserSessionTimestamp) >= Constants.USER_SESSION_INACTIVE_PERIOD){
                this.activeUserSessionCount++;
            };
            this.lastActiveUserSessionTimestamp = _local1;
        }
        protected function validateUserSession():void{
            var _local1:Number = CSDate.unixTime();
            if ((_local1 - this.lastUserSessionTimestamp) >= Constants.USER_SESSION_INACTIVE_PERIOD){
                this.userSessionCount++;
            };
            this.lastUserSessionTimestamp = _local1;
        }
        public function getApplicationState():ApplicationState{
            return (this.currentApplicationState);
        }
        public function getSessionState():SessionState{
            return (this.currentSessionState);
        }
        protected function accumulateApplicationData(store:Boolean=true):void{
            var _local2:Number = CSDate.unixTime();
            var _local3:Number = (_local2 - this.lastApplicationAccumulationTimestamp);
            switch (this.currentApplicationState){
                case ApplicationState.FOREGROUND:
                    this.accumulatedForegroundTime = (this.accumulatedForegroundTime + _local3);
                    this.totalForegroundTime = (this.totalForegroundTime + _local3);
                    break;
                case ApplicationState.BACKGROUND_UX_ACTIVE:
                    this.accumulatedBackgroundTime = (this.accumulatedBackgroundTime + _local3);
                    this.totalBackgroundTime = (this.totalBackgroundTime + _local3);
                    break;
                case ApplicationState.INACTIVE:
                    this.accumulatedInactiveTime = (this.accumulatedInactiveTime + _local3);
                    this.totalInactiveTime = (this.totalInactiveTime + _local3);
                    break;
            };
            this.lastApplicationAccumulationTimestamp = _local2;
            if (store){
                this.storage.set(Constants.LAST_APPLICATION_ACCUMULATION_TIMESTAMP_KEY, this.lastApplicationAccumulationTimestamp.toString(10));
                this.storage.set(Constants.FOREGROUND_TRANSITION_COUNT_KEY, this.foregroundTransitionsCount.toString(10));
                this.storage.set(Constants.ACCUMULATED_FOREGROUND_TIME_KEY, this.accumulatedForegroundTime.toString(10));
                this.storage.set(Constants.ACCUMULATED_BACKGROUND_TIME_KEY, this.accumulatedBackgroundTime.toString(10));
                this.storage.set(Constants.ACCUMULATED_INACTIVE_TIME_KEY, this.accumulatedInactiveTime.toString(10));
                this.storage.set(Constants.TOTAL_FOREGROUND_TIME_KEY, this.totalForegroundTime.toString(10));
                this.storage.set(Constants.TOTAL_BACKGROUND_TIME_KEY, this.totalBackgroundTime.toString(10));
                this.storage.set(Constants.TOTAL_INACTIVE_TIME_KEY, this.totalInactiveTime.toString(10));
            };
        }
        protected function accumulateSessionData(store:Boolean=true):void{
            var _local2:Number = CSDate.unixTime();
            var _local3:Number = (_local2 - this.lastSessionAccumulationTimestamp);
            switch (this.currentSessionState){
                case SessionState.ACTIVE_USER:
                    this.accumulatedActiveUserSessionTime = (this.accumulatedActiveUserSessionTime + _local3);
                    this.lastActiveUserSessionTimestamp = _local2;
                case SessionState.USER:
                    this.accumulatedUserSessionTime = (this.accumulatedUserSessionTime + _local3);
                    this.lastUserSessionTimestamp = _local2;
                case SessionState.APPLICATION:
                    this.accumulatedApplicationSessionTime = (this.accumulatedApplicationSessionTime + _local3);
                    this.lastApplicationSessionTimestamp = _local2;
                    break;
                case SessionState.INACTIVE:
                    break;
            };
            this.lastSessionAccumulationTimestamp = _local2;
            if (store){
                this.storage.set(Constants.LAST_SESSION_ACCUMULATION_TIMESTAMP_KEY, this.lastSessionAccumulationTimestamp.toString(10));
                this.storage.set(Constants.LAST_APPLICATION_SESSION_TIMESTAMP_KEY, this.lastApplicationSessionTimestamp.toString(10));
                this.storage.set(Constants.LAST_USER_SESSION_TIMESTAMP_KEY, this.lastUserSessionTimestamp.toString(10));
                this.storage.set(Constants.LAST_ACTIVE_USER_SESSION_TIMESTAMP_KEY, this.lastActiveUserSessionTimestamp.toString(10));
                this.storage.set(Constants.ACCUMULATED_APPLICATION_SESSION_TIME_KEY, this.accumulatedApplicationSessionTime.toString(10));
                this.storage.set(Constants.ACCUMULATED_ACTIVE_USER_SESSION_TIME_KEY, this.accumulatedActiveUserSessionTime.toString(10));
                this.storage.set(Constants.ACCUMULATED_USER_SESSION_TIME_KEY, this.accumulatedUserSessionTime.toString(10));
                this.storage.set(Constants.ACTIVE_USER_SESSION_COUNT_KEY, this.activeUserSessionCount.toString(10));
                this.storage.set(Constants.USER_SESSION_COUNT_KEY, this.userSessionCount.toString(10));
                this.storage.set(Constants.LAST_USER_INTERACTION_TIMESTAMP_KEY, this.lastUserInteractionTimestamp.toString(10));
                this.storage.set(Constants.USER_INTERACTION_COUNT_KEY, this.userInteractionCount.toString(10));
                this.storage.set(Constants.PREVIOUS_GENESIS_KEY, this.previousGenesis.toString(10));
                this.storage.set(Constants.GENESIS_KEY, this.genesis.toString(10));
                this.storage.set(Constants.APPLICATION_SESSION_COUNT_KEY, this.applicationSessionCount.toString(10));
            };
        }
        public function incrementRunsCount():void{
            this.runsCount++;
            this.storage.set(Constants.RUNS_COUNT_KEY, this.runsCount.toString(10));
        }
        public function getRunsCount():Number{
            return (this.runsCount);
        }
        public function getInstallId():Number{
            return (this.installId);
        }
        public function getFirstInstallId():Number{
            return (this.firstInstallId);
        }
        public function getColdStartId():Number{
            return (this.coldStartId);
        }
        public function getColdStartCount():Number{
            return (this.coldStartCount);
        }
        public function getCurrentVersion():String{
            return (this.currentVersion);
        }
        public function getPreviousVersion():String{
            var _local1:String = this.previousVersion;
            if (((!((this.previousVersion == null))) && ((this.previousVersion.length > 0)))){
                this.storage.remove(Constants.PREVIOUS_VERSION_KEY);
                this.previousVersion = null;
            };
            return (_local1);
        }
        public function getForegroundTransitionsCountDelta(reset:Boolean):Number{
            var _local2:Number = this.foregroundTransitionsCount;
            if (reset){
                this.foregroundTransitionsCount = 0;
                this.storage.set(Constants.FOREGROUND_TRANSITION_COUNT_KEY, this.foregroundTransitionsCount.toString(10));
            };
            return (_local2);
        }
        public function getForegroundTotalTime(reset:Boolean):Number{
            var _local2:Number = this.totalForegroundTime;
            if (reset){
                this.totalForegroundTime = 0;
                this.storage.set(Constants.TOTAL_FOREGROUND_TIME_KEY, this.totalForegroundTime.toString(10));
            };
            return (_local2);
        }
        public function getForegroundTimeDelta(reset:Boolean):Number{
            var _local2:Number = this.accumulatedForegroundTime;
            if (reset){
                this.accumulatedForegroundTime = 0;
                this.storage.set(Constants.ACCUMULATED_FOREGROUND_TIME_KEY, this.accumulatedForegroundTime.toString(10));
            };
            return (_local2);
        }
        public function getBackgroundTotalTime(reset:Boolean):Number{
            var _local2:Number = this.totalBackgroundTime;
            if (reset){
                this.totalBackgroundTime = 0;
                this.storage.set(Constants.TOTAL_BACKGROUND_TIME_KEY, this.totalBackgroundTime.toString(10));
            };
            return (_local2);
        }
        public function getInactiveTotalTime(reset:Boolean):Number{
            var _local2:Number = this.totalInactiveTime;
            if (reset){
                this.totalInactiveTime = 0;
                this.storage.set(Constants.TOTAL_INACTIVE_TIME_KEY, this.totalInactiveTime.toString(10));
            };
            return (_local2);
        }
        public function getBackgroundTimeDelta(reset:Boolean):Number{
            var _local2:Number = this.accumulatedBackgroundTime;
            if (reset){
                this.accumulatedBackgroundTime = 0;
                this.storage.set(Constants.ACCUMULATED_BACKGROUND_TIME_KEY, this.accumulatedBackgroundTime.toString(10));
            };
            return (_local2);
        }
        public function getInactiveTimeDelta(reset:Boolean):Number{
            var _local2:Number = this.accumulatedInactiveTime;
            if (reset){
                this.accumulatedInactiveTime = 0;
                this.storage.set(Constants.ACCUMULATED_INACTIVE_TIME_KEY, this.accumulatedInactiveTime.toString(10));
            };
            return (_local2);
        }
        public function getApplicationSessionTimeDelta(reset:Boolean):Number{
            var _local2:Number = this.accumulatedApplicationSessionTime;
            if (reset){
                this.accumulatedApplicationSessionTime = 0;
                this.storage.set(Constants.ACCUMULATED_APPLICATION_SESSION_TIME_KEY, this.accumulatedApplicationSessionTime.toString(10));
            };
            return (_local2);
        }
        public function getActiveUserSessionTimeDelta(reset:Boolean):Number{
            var _local2:Number = this.accumulatedActiveUserSessionTime;
            if (reset){
                this.accumulatedActiveUserSessionTime = 0;
                this.storage.set(Constants.ACCUMULATED_ACTIVE_USER_SESSION_TIME_KEY, this.accumulatedActiveUserSessionTime.toString(10));
            };
            return (_local2);
        }
        public function getUserSessionTimeDelta(reset:Boolean):Number{
            var _local2:Number = this.accumulatedUserSessionTime;
            if (reset){
                this.accumulatedUserSessionTime = 0;
                this.storage.set(Constants.ACCUMULATED_USER_SESSION_TIME_KEY, this.accumulatedUserSessionTime.toString(10));
            };
            return (_local2);
        }
        public function getAutoUpdateInterval():Number{
            return (this.autoUpdateInterval);
        }
        public function getApplicationSessionCountDelta(reset:Boolean):Number{
            var _local2:Number = this.applicationSessionCount;
            if (reset){
                this.applicationSessionCount = 0;
                this.storage.set(Constants.APPLICATION_SESSION_COUNT_KEY, this.applicationSessionCount.toString(10));
            };
            return (_local2);
        }
        public function getActiveUserSessionCountDelta(reset:Boolean):Number{
            var _local2 = -1;
            if (this.activeUserSessionCount >= 0){
                _local2 = this.activeUserSessionCount;
                if (reset){
                    this.activeUserSessionCount = 0;
                    this.storage.set(Constants.ACTIVE_USER_SESSION_COUNT_KEY, this.activeUserSessionCount.toString(10));
                };
            };
            return (_local2);
        }
        public function getUserSessionCountDelta(reset:Boolean):Number{
            var _local2 = -1;
            if (this.userSessionCount >= 0){
                _local2 = this.userSessionCount;
                if (reset){
                    this.userSessionCount = 0;
                    this.storage.set(Constants.USER_SESSION_COUNT_KEY, this.userSessionCount.toString(10));
                };
            };
            return (_local2);
        }
        public function getUserInteractionCount(reset:Boolean):Number{
            var _local2:Number = this.userInteractionCount;
            if (reset){
                this.userInteractionCount = 0;
                this.storage.set(Constants.USER_INTERACTION_COUNT_KEY, this.userInteractionCount.toString(10));
            };
            return (_local2);
        }
        public function setAppContext(appDescr:DisplayObject):void{
            if (((!((this.appContext == null))) || ((appDescr == null)))){
                return;
            };
            this.appContext = appDescr;
            this.initializeContextDependant();
            if (Utils.supportsFileStreams()){
                this.loadInitialSettings();
            };
        }
        public function getAppContext():DisplayObject{
            return (this.appContext);
        }
        public function setPixelURL(value:String):String{
            var _local2:Object;
            var _local3:String;
            var _local4:Object;
            var _local5:String;
            var _local6:Object;
            if (Utils.isEmpty(value)){
                return (null);
            };
            if (value.indexOf("?") >= 0){
                if (value.charAt((value.length - 1)) != "?"){
                    _local2 = new Object();
                    _local3 = "";
                    _local4 = value.substring((value.indexOf("?") + 1)).split("&");
                    _local5 = "";
                    for (_local5 in _local4) {
                        _local6 = _local4[_local5].split("=");
                        if (_local6.length == 2){
                            this.setLabel(_local6[0], _local6[1]);
                        } else {
                            if (_local6.length == 1){
                                this.setLabel(Constants.PAGENAME_LABEL, _local6[0]);
                            };
                        };
                    };
                    value = value.substring(0, (value.indexOf("?") + 1));
                };
            } else {
                value = (value + "?");
            };
            this.pixelURL = value;
            return (this.pixelURL);
        }
        public function getPixelURL():String{
            return (this.pixelURL);
        }
        private function setVisitorId():void{
            var _local1:String;
            var _local2:String;
            if (this.visitorID == null){
                if (Utils.isBlackberryDevice()){
                    _local2 = Blackberry.Pin();
                    if (Utils.isNotEmpty(_local2)){
                        try {
                            _local1 = (Utils.md5((_local2 + this.getPublisherSecret())) + Constants.PIN_NUMBER_SUFFIX);
                            if (this.storage != null){
                                this.storage.remove(Constants.VID_KEY);
                            };
                        } catch(e:Error) {
                        };
                    };
                };
                if (((Utils.isEmpty(_local2)) || ((_local1 == null)))){
                    if (this.storage != null){
                        _local1 = this.storage.get(Constants.VID_KEY);
                    };
                    if (Utils.isEmpty(_local1)){
                        _local2 = String(UUIDGenerator.createUID());
                        try {
                            _local1 = (Utils.md5((_local2 + this.getPublisherSecret())) + Constants.GENERATED_ID_SUFFIX);
                            if (this.storage != null){
                                this.storage.set(Constants.VID_KEY, _local1);
                            };
                        } catch(e:Error) {
                        };
                    };
                };
                this.visitorID = _local1;
            };
        }
        public function getVisitorId():String{
            if (this.visitorID == null){
                this.setVisitorId();
            };
            return (this.visitorID);
        }
        private function uncaughtErrorHandler(event:UncaughtErrorEvent):void{
            var _local2:String;
            if ((event.error is Error)){
                _local2 = Error(event.error).getStackTrace();
            };
            var _local3:Object = new Object();
            if (((!((_local2 == null))) && ((_local2.length > 0)))){
                _local3["ns_ap_uxc"] = _local2;
            };
            _local3["ns_ap_uxs"] = event.toString();
            this.offlineCache.saveApplicationMeasurement(ApplicationMeasurement.newApplicationMeasurement(this, EventType.HIDDEN, _local3, this.getPixelURL()), this.dispatchProperties, true);
        }
        public function setPublisherSecret(value:String):Core{
            if (Utils.isNotEmpty(value)){
                this.publisherSecret = value;
            };
            return (this);
        }
        public function getPublisherSecret():String{
            if (Utils.isEmpty(this.publisherSecret)){
                this.publisherSecret = "";
            };
            return (this.publisherSecret);
        }
        public function setAppName(value:String):void{
            this.appName = value;
        }
        public function setAppVersion(value:String):void{
            var _local2:String;
            if (this.storage != null){
                if (value != Constants.APPLICATION_DEFAULT_NAME){
                    if (this.storage.hasKey(Constants.PREVIOUS_VERSION_KEY)){
                        this.previousVersion = this.storage.get(Constants.PREVIOUS_VERSION_KEY);
                    };
                    _local2 = this.storage.get(Constants.CURRENT_VERSION_KEY);
                    if (((Utils.isNotEmpty(_local2)) && (!((_local2 == value))))){
                        this.previousVersion = _local2;
                        this.storage.set(Constants.PREVIOUS_VERSION_KEY, this.previousVersion);
                        this.installId = this.genesis;
                        this.storage.set(Constants.INSTALL_ID_KEY, this.installId.toString(10));
                    } else {
                        this.installId = Utils.getNumber(this.storage.get(Constants.INSTALL_ID_KEY), -1);
                    };
                    this.storage.set(Constants.CURRENT_VERSION_KEY, value);
                } else {
                    this.installId = Utils.getNumber(this.storage.get(Constants.INSTALL_ID_KEY), -1);
                };
            };
            this.appVersion = value;
        }
        public function getAppVersion():String{
            if (Utils.isEmpty(this.appVersion)){
                this.setAppVersion(Utils.getAppVersion());
            };
            return (this.appVersion);
        }
        public function getAppName():String{
            if (Utils.isEmpty(this.appName)){
                if (this.appContext != null){
                    this.setAppName(Utils.getAppName(this.appContext));
                };
            };
            return (this.appName);
        }
        public function isKeepAliveEnabled():Boolean{
            return (this.keepAliveEnabled);
        }
        public function setKeepAliveEnabled(enabled:Boolean):void{
            this.keepAliveEnabled = enabled;
        }
        public function isAutoStartEnabled():Boolean{
            return (this.autoStartEnabled);
        }
        public function setAutoStartEnabled(enabled:Boolean):void{
            this.autoStartEnabled = enabled;
        }
        public function getVersion():String{
            return (Constants.SDK_VERSION);
        }
        public function getGenesis():Number{
            return (this.genesis);
        }
        public function getPreviousGenesis():Number{
            return (this.previousGenesis);
        }
        private function setExitCode(exitCode:Number):void{
            this.storage.set(Constants.EXIT_CODE_KEY, exitCode.toString(10));
        }
        public function getExitCode():Number{
            return (this.exitCode);
        }
        public function getLabels():Object{
            return (this.customLabels);
        }
        public function getLabel(label:String):String{
            return (this.customLabels[label]);
        }
        public function setLabel(name:String, value:String):void{
            if (Utils.isEmpty(name)){
                return;
            };
            this.customLabels[name] = value;
        }
        public function setLabels(labels:Object):void{
            if (labels != null){
                Utils.putAll(this.customLabels, labels);
            };
        }
        public function getAutoStartLabels():Object{
            return (this.autoStartLabels);
        }
        public function getAutoStartLabel(label:String):String{
            return (this.autoStartLabels[label]);
        }
        public function setAutoStartLabel(name:String, value:String):void{
            if (Utils.isEmpty(name)){
                return;
            };
            this.autoStartLabels[name] = value;
        }
        public function setAutoStartLabels(labels:Object):void{
            if (labels != null){
                Utils.putAll(this.autoStartLabels, labels);
            };
        }
        public function setCustomerC2(customerC2:String):void{
            if (Utils.isEmpty(customerC2)){
                return;
            };
            if (Utils.isWebEnvironment){
                if (this.isSecure()){
                    this.setPixelURL(Constants.CENSUS_URL_WEB_SECURE);
                } else {
                    this.setPixelURL(Constants.CENSUS_URL_WEB);
                };
            } else {
                if (this.isSecure()){
                    this.setPixelURL(Constants.CENSUS_URL_SECURE);
                } else {
                    this.setPixelURL(Constants.CENSUS_URL);
                };
            };
            this.setLabel("c2", customerC2);
        }
        public function getCustomerC2():String{
            return (this.getLabel("c2"));
        }
        public function getLiveTransmissionMode():TransmissionMode{
            return (this.dispatchProperties.getLiveTransmissionMode());
        }
        public function allowLiveTransmission(mode:TransmissionMode):void{
            if (this.dispatchProperties.getLiveTransmissionMode() != mode){
                this.dispatchProperties.allowLiveTransmission(mode);
                if (this.dispatchQueue != null){
                    this.dispatchQueue.enqueueSettingChange(DispatchProperties.LIVE_TRANSMISSION_MODE, mode);
                };
            };
        }
        public function getOfflineTransmissionMode():TransmissionMode{
            return (this.dispatchProperties.getOfflineTransmissionMode());
        }
        public function allowOfflineTransmission(mode:TransmissionMode):void{
            if (this.dispatchProperties.getOfflineTransmissionMode() != mode){
                this.dispatchProperties.allowOfflineTransmission(mode);
                if (this.dispatchQueue != null){
                    this.dispatchQueue.enqueueSettingChange(DispatchProperties.OFFLINE_TRANSMISSION_MODE, mode);
                };
            };
        }
        public function isSecure():Boolean{
            return (this.dispatchProperties.isSecure());
        }
        public function setSecure(secure:Boolean):void{
            if (this.dispatchProperties.isSecure() != secure){
                this.dispatchProperties.setSecure(secure);
                if (this.dispatchQueue != null){
                    this.dispatchQueue.enqueueSettingChange(DispatchProperties.SECURE_MODE, new Boolean(secure));
                };
            };
        }
        public function setCacheMaxMeasurements(max:int):void{
            if (this.offlineCache != null){
                this.offlineCache.setCacheMaxMeasurements(max);
            };
        }
        public function getCacheMaxMeasurements():int{
            return (((this.offlineCache)!=null) ? this.offlineCache.getCacheMaxMeasurements() : Constants.CACHE_MAX_SIZE);
        }
        public function setCacheMaxBatchFiles(max:int):void{
            if (this.offlineCache != null){
                this.offlineCache.setCacheMaxBatchFiles(max);
            };
        }
        public function getCacheMaxBatchFiles():int{
            return (((this.offlineCache)!=null) ? this.offlineCache.getCacheMaxBatchFiles() : Constants.CACHE_MAX_BATCH_SIZE);
        }
        public function setCacheMaxFlushesInARow(max:int):void{
            if (this.offlineCache != null){
                this.offlineCache.setCacheMaxPosts(max);
            };
        }
        public function getCacheMaxFlushesInARow():int{
            return (((this.offlineCache)!=null) ? this.offlineCache.getCacheMaxPosts() : Constants.CACHE_MAX_FLUSHES_IN_A_ROW);
        }
        public function setCacheMinutesToRetry(minutes:int):void{
            if (this.offlineCache != null){
                this.offlineCache.setCacheWaitMinutes(minutes);
            };
        }
        public function getCacheMinutesToRetry():int{
            return (((this.offlineCache)!=null) ? this.offlineCache.getCacheWaitMinutes() : Constants.CACHE_WAIT_MINUTES);
        }
        public function setCacheMeasurementExpiry(days:int):void{
            if (this.offlineCache != null){
                this.offlineCache.setCacheMeasurementExpiry(days);
            };
        }
        public function getCacheMeasurementExpiry():int{
            return (((this.offlineCache)!=null) ? this.offlineCache.getCacheMeasurementExpiry() : Constants.CACHE_EXPIRY_DAYS);
        }
        public function getCacheFlushingInterval():Number{
            return (this.flushingInterval);
        }
        public function setCacheFlushingInterval(interval:Number):void{
            if (!isNaN(interval)){
                this.flushingInterval = interval;
                if (this.cacheFlusher != null){
                    this.cacheFlusher.update();
                };
            };
        }
        public function setErrorHandlingEnabled(enable:Boolean):void{
            this.errorHandlingEnable = enable;
            if (enable){
                this.getAppContext().addEventListener(UncaughtErrorEvent.UNCAUGHT_ERROR, this.uncaughtErrorHandler);
            } else {
                this.getAppContext().removeEventListener(UncaughtErrorEvent.UNCAUGHT_ERROR, this.uncaughtErrorHandler);
            };
        }
        public function isErrorHandlingEnabled():Boolean{
            return (this.errorHandlingEnable);
        }
        public function getMeasurementLabelOrder():Array{
            return (this.dispatchProperties.getMeasurementLabelOrder());
        }
        public function setMeasurementLabelOrder(labelOrder:Array):void{
            if (labelOrder != this.dispatchProperties.getMeasurementLabelOrder()){
                this.dispatchProperties.setMeasurementLabelOrder(labelOrder);
                this.dispatchQueue.enqueueSettingChange(DispatchProperties.MEASUREMENT_LABEL_ORDER, labelOrder);
            };
        }
        public function flush():void{
            if (this.dispatchQueue != null){
                this.dispatchQueue.enqueueCacheFlush();
            };
        }
        public function update(store:Boolean=true):void{
            this.accumulateApplicationData(store);
            this.accumulateSessionData(store);
        }
        public function enableAutoUpdate(intervalInSeconds:Number, foregroundOnly:Boolean):void{
            this.stopAutoUpdateTimer();
            if (intervalInSeconds < Constants.DEFAULT_AUTOUPDATE_INTERVAL_IN_SECONDS){
                intervalInSeconds = Constants.DEFAULT_AUTOUPDATE_INTERVAL_IN_SECONDS;
            };
            this.autoUpdateInForegroundOnly = foregroundOnly;
            this.autoUpdateInterval = (intervalInSeconds * 1000);
            if (this.currentApplicationState == ApplicationState.FOREGROUND){
                this.startAutoUpdateTimer();
            } else {
                if ((((this.currentApplicationState == ApplicationState.BACKGROUND_UX_ACTIVE)) && (!(this.autoUpdateInForegroundOnly)))){
                    this.startAutoUpdateTimer();
                };
            };
        }
        public function disableAutoUpdate():void{
            this.stopAutoUpdateTimer();
            this.autoUpdateInForegroundOnly = true;
            this.autoUpdateInterval = -1;
        }
        public function isAutoUpdateEnabled():Boolean{
            return ((this.autoUpdateInterval > 0));
        }
        protected function startAutoUpdateTimer():void{
            this.stopAutoUpdateTimer();
            if (this.autoUpdateInterval >= Constants.MINIMAL_AUTOUPDATE_INTERVAL){
                this.autoUpdateTimer = new Timer(this.autoUpdateInterval, 0);
                this.autoUpdateTimer.addEventListener(TimerEvent.TIMER, this.update);
                this.autoUpdateTimer.start();
            };
        }
        protected function stopAutoUpdateTimer():void{
            if (this.autoUpdateTimer != null){
                this.autoUpdateTimer.stop();
                this.autoUpdateTimer = null;
            };
        }
        public function notify(type:EventType=null, labels:Object=null):void{
            if (this.isNotProperlyInitialized()){
                return;
            };
            if (type == null){
                type = EventType.VIEW;
            };
            this.doNotify(type, labels);
        }
        private function doNotify(type:EventType, labels:Object):void{
            if (((!(this.coldStartDispatched)) && (!((type == EventType.START))))){
                this.dispatchQueue.offer(ApplicationMeasurement.newApplicationMeasurement(this, EventType.START, new Object(), this.pixelURL));
            };
            var _local3:ApplicationMeasurement = ApplicationMeasurement.newApplicationMeasurement(this, type, labels, this.pixelURL);
            if (type == EventType.CLOSE){
                this.setExitCode(0);
                this.offlineCache.saveApplicationMeasurement(_local3, this.dispatchProperties);
            } else {
                this.dispatchQueue.offer(_local3);
            };
        }
        private function isNotProperlyInitialized():Boolean{
            if (Utils.isWebEnvironment){
                return ((((this.appContext == null)) || (Utils.isEmpty(this.pixelURL))));
            };
            return ((((((this.appContext == null)) || (Utils.isEmpty(this.publisherSecret)))) || (Utils.isEmpty(this.pixelURL))));
        }

    }
}//package com.comscore.analytics 
﻿package com.comscore.utils {

    public class Constants {

        public static const SDK_VERSION:String = "2.1311.14";
        public static const URL_LENGTH_LIMIT:Number = 0x1000;
        public static const LOG_ENABLED:Boolean = false;
        public static const CACHE_FILENAME:String = "cs_cache_";
        static const ANDROID_PROP_FILE:String = "/system/build.prop";
        public static const RESPONSE_MASK:String = "OK";
        public static const PAGENAME_LABEL:String = "name";
        public static const APPLICATION_DEFAULT_NAME:String = "unknown";
        public static const KEEPALIVE_TIMER_PERIOD:Number = 86400000;
        public static const KEEPALIVE_TIMER_PERIOD_ONSTART:Number = 3000;
        public static const KEEPALIVE_INACCURACY_MS:Number = 1000;
        public static const SESSION_INACTIVE_PERIOD:Number = 1200000;
        public static const USER_SESSION_INACTIVE_PERIOD:Number = 300000;
        public static const CENSUS_URL:String = "http://b.scorecardresearch.com/p2?";
        public static const CENSUS_URL_SECURE:String = "https://sb.scorecardresearch.com/p2?";
        public static const CENSUS_URL_WEB:String = "http://b.scorecardresearch.com/p?";
        public static const CENSUS_URL_WEB_SECURE:String = "https://sb.scorecardresearch.com/p?";
        public static const OFFLINE_RECEIVER_URL:String = "http://udm.scorecardresearch.com/offline";
        public static const OFFLINE_RECEIVER_URL_SECURE:String = "https://udm.scorecardresearch.com/offline";
        public static const CACHE_MAX_SIZE:Number = 2000;
        public static const CACHE_MAX_BATCH_SIZE:Number = 100;
        public static const CACHE_WAIT_MINUTES:Number = 30;
        public static const CACHE_MIN_SECS_ONLINE:Number = 30;
        public static const CACHE_MAX_FLUSHES_IN_A_ROW:Number = 10;
        public static const CACHE_EXPIRY_DAYS:Number = 31;
        public static const OFFLINE_CACHE_FLUSHING_INTERVAL:Number = 0;
        public static const CACHE_DROPPED_MEASUREMENTS:String = "CACHE_DROPPED_MEASUREMENTS";
        public static const EVENTS_LIMIT_PER_SECOND:Number = 20;
        public static const EVENTS_LIMIT_PER_DAY:Number = 6000;
        public static const GENERATED_ID_SUFFIX:String = "-cs72";
        public static const PIN_NUMBER_SUFFIX:String = "-cs31";
        public static const PLANNED_FLUSH_TIME:String = "plannedFlushTime";
        public static const STORAGE_LIFECYCLE_BACKGROUND:String = "lifecycle_background";
        public static const STORAGE_LIFECYCLE_FOREGROUND:String = "lifecycle_foreground";
        public static const DEFAULT_AUTOUPDATE_INTERVAL_IN_SECONDS:Number = 60;
        public static const MINIMAL_AUTOUPDATE_INTERVAL:Number = 60000;
        public static const LAST_APPLICATION_ACCUMULATION_TIMESTAMP_KEY:String = "lastApplicationAccumulationTimestamp";
        public static const LAST_SESSION_ACCUMULATION_TIMESTAMP_KEY:String = "lastSessionAccumulationTimestamp";
        public static const LAST_APPLICATION_SESSION_TIMESTAMP_KEY:String = "lastApplicationSessionTimestamp";
        public static const LAST_USER_SESSION_TIMESTAMP_KEY:String = "lastUserSessionTimestamp";
        public static const LAST_ACTIVE_USER_SESSION_TIMESTAMP_KEY:String = "lastActiveUserSessionTimestamp";
        public static const FOREGROUND_TRANSITION_COUNT_KEY:String = "foregroundTransitionsCount";
        public static const TOTAL_FOREGROUND_TIME_KEY:String = "totalForegroundTime";
        public static const TOTAL_BACKGROUND_TIME_KEY:String = "totalBackgroundTime";
        public static const TOTAL_INACTIVE_TIME_KEY:String = "totalInactiveTime";
        public static const ACCUMULATED_FOREGROUND_TIME_KEY:String = "accumulatedForegroundTime";
        public static const ACCUMULATED_BACKGROUND_TIME_KEY:String = "accumulatedBackgroundTime";
        public static const ACCUMULATED_INACTIVE_TIME_KEY:String = "accumulatedInactiveTime";
        public static const ACCUMULATED_APPLICATION_SESSION_TIME_KEY:String = "accumulatedApplicationSessionTime";
        public static const ACCUMULATED_ACTIVE_USER_SESSION_TIME_KEY:String = "accumulatedActiveUserSessionTime";
        public static const ACCUMULATED_USER_SESSION_TIME_KEY:String = "accumulatedUserSessionTime";
        public static const ACTIVE_USER_SESSION_COUNT_KEY:String = "activeUserSessionCount";
        public static const LAST_USER_INTERACTION_TIMESTAMP_KEY:String = "lastUserInteractionTimestamp";
        public static const USER_INTERACTION_COUNT_KEY:String = "userInteractionCount";
        public static const USER_SESSION_COUNT_KEY:String = "userSessionCount";
        public static const APPLICATION_SESSION_COUNT_KEY:String = "applicationSessionCountKey";
        public static const GENESIS_KEY:String = "genesis";
        public static const PREVIOUS_GENESIS_KEY:String = "previousGenesis";
        public static const INSTALL_ID_KEY:String = "installId";
        public static const FIRST_INSTALL_ID_KEY:String = "firstInstallId";
        public static const CURRENT_VERSION_KEY:String = "currentVersion";
        public static const PREVIOUS_VERSION_KEY:String = "previousVersion";
        public static const RUNS_COUNT_KEY:String = "runs";
        public static const COLD_START_COUNT_KEY:String = "coldStartCount";
        public static const VID_KEY:String = "vid";
        public static const CROSS_PUBLISHER_ID_KEY:String = "crossPublisherId";
        public static const EXIT_CODE_KEY:String = "exitCode";
        public static const LAST_TRANSMISSION_KEY:String = "lastTransmission";
        public static const DEFAULT_START_PAGE_NAME:String = "start";
        public static const DEFAULT_FOREGROUND_PAGE_NAME:String = "foreground";
        public static const DEFAULT_BACKGROUND_PAGE_NAME:String = "background";
        public static const LABELS_ORDER:Array = ["c1", "c2", "ns_site", "ns_vsite", "ns_ap_an", "ns_ap_pv", "ns_ap_pn", "c12", "name", "ns_ak", "ns_ap_ec", "ns_ap_ev", "ns_ap_device", "ns_ap_id", "ns_ap_csf", "ns_ap_bi", "ns_ap_pfm", "ns_ap_pfv", "ns_ap_ver", "ns_ap_sv", "ns_type", "ns_radio", "ns_nc", "ns_ap_ui", "ns_ap_gs", "ns_st_sv", "ns_st_pv", "ns_st_it", "ns_st_id", "ns_st_ec", "ns_st_sp", "ns_st_sq", "ns_st_cn", "ns_st_ev", "ns_st_po", "ns_st_cl", "ns_st_el", "ns_st_pb", "ns_st_hc", "ns_st_mp", "ns_st_mv", "ns_st_pn", "ns_st_tp", "ns_st_pt", "ns_st_pa", "ns_st_ad", "ns_st_li", "ns_st_ci", "ns_ap_jb", "ns_ap_res", "ns_ap_c12m", "ns_ap_install", "ns_ap_updated", "ns_ap_lastrun", "ns_ap_cs", "ns_ap_runs", "ns_ap_usage", "ns_ap_fg", "ns_ap_ft", "ns_ap_dft", "ns_ap_bt", "ns_ap_dbt", "ns_ap_dit", "ns_ap_as", "ns_ap_das", "ns_ap_it", "ns_ap_uc", "ns_ap_aus", "ns_ap_daus", "ns_ap_us", "ns_ap_dus", "ns_ap_ut", "ns_ap_oc", "ns_ap_uxc", "ns_ap_uxs", "ns_ap_lang", "ns_ap_miss", "ns_ts", "ns_st_ca", "ns_st_cp", "ns_st_er", "ns_st_pe", "ns_st_ui", "ns_st_bc", "ns_st_bt", "ns_st_bp", "ns_st_pc", "ns_st_pp", "ns_st_br", "ns_st_ub", "ns_st_vo", "ns_st_ws", "ns_st_pl", "ns_st_pr", "ns_st_ep", "ns_st_ty", "ns_st_cs", "ns_st_ge", "ns_st_st", "ns_st_dt", "ns_st_ct", "ns_st_de", "ns_st_pu", "ns_st_cu", "ns_st_fee", "c7", "c8", "c9"];
        static const ANDROID_DEVICE_PROPERTIES:Array = [{
            key:"DEVICE",
            value:"ro.product.model"
        }, {
            key:"OS",
            value:"ro.build.version.release"
        }];

    }
}//package com.comscore.utils 
﻿package com.comscore.utils {

    public class FlushOp implements Runnable, ICacheObserver {

        public var cache:OfflineMeasurementsCache;
        protected var queue:DispatchQueue;

        public function FlushOp(cache:OfflineMeasurementsCache, queue:DispatchQueue){
            this.cache = cache;
            this.queue = queue;
        }
        public function run():void{
            this.cache.subscribe(this);
            this.cache.flush(this.queue.getDispatchProperties());
        }
        public function onCacheFlushed(result:Boolean):void{
            this.cache.unsubscribe(this);
            this.queue.endDispatching();
        }

    }
}//package com.comscore.utils 
﻿package com.comscore.utils {
    import com.comscore.analytics.*;
    import com.comscore.applications.*;
    import com.comscore.measurement.*;
    import com.comscore.metrics.*;

    public class MeasurementOp implements Runnable {

        public var measurement:Measurement;
        public var core:Core;
        public var queue:DispatchQueue;

        public function MeasurementOp(measurement:Measurement, core:Core, queue:DispatchQueue){
            this.measurement = measurement;
            this.core = core;
            this.queue = queue;
        }
        public function run():void{
            var _local1:Request;
            if (this.measurement != null){
                this.queue.processAggregateData(this.measurement);
                if (!(this.measurement is AggregateMeasurement)){
                    this.queue.processEventCounter(this.measurement);
                    _local1 = new Request(this.core, this.queue.getDispatchProperties(), this.measurement);
                    if (Utils.supportsFileStreams()){
                        _local1.send();
                    } else {
                        _local1.send_NoCache();
                    };
                } else {
                    this.queue.endDispatching();
                };
            };
        }

    }
}//package com.comscore.utils 
﻿package com.comscore.utils {
    import flash.filesystem.*;

    public class Android {

        private static var DETECTED:Boolean = false;
        private static var device:String = null;
        private static var os:String = null;

        public static function get Device():String{
            if (!DETECTED){
                retriveData();
            };
            return (device);
        }
        public static function get OS():String{
            if (!DETECTED){
                retriveData();
            };
            return (os);
        }
        private static function retriveData():void{
            var _local1:File;
            var _local2:FileStream;
            var _local3:String;
            var _local4:RegExp;
            var _local5:Array;
            var _local6:int;
            var _local7:String;
            var _local8:int;
            try {
                _local1 = new File();
                _local1.nativePath = Constants.ANDROID_PROP_FILE;
                if (_local1.exists){
                    _local2 = new FileStream();
                    _local2.open(_local1, FileMode.READ);
                    _local3 = _local2.readUTFBytes(_local2.bytesAvailable);
                    _local3 = _local3.replace(File.lineEnding, "\n");
                    _local2.close();
                    _local4 = /\r?\n/;
                    _local5 = _local3.split(_local4);
                    _local6 = 0;
                    while (_local6 < _local5.length) {
                        _local7 = String(_local5[_local6]);
                        if (_local7 != ""){
                            if (_local7.search("#") == -1){
                                _local8 = 0;
                                while (_local8 < Constants.ANDROID_DEVICE_PROPERTIES.length) {
                                    if (_local7.search(Constants.ANDROID_DEVICE_PROPERTIES[_local8].value) != -1){
                                        switch (Constants.ANDROID_DEVICE_PROPERTIES[_local8].key){
                                            case "DEVICE":
                                                device = _local7.split("=")[1];
                                                break;
                                            case "OS":
                                                os = _local7.split("=")[1];
                                                break;
                                        };
                                        break;
                                    };
                                    _local8++;
                                };
                            };
                        };
                        _local6++;
                    };
                };
                DETECTED = true;
            } catch(e:Error) {
            };
        }

    }
}//package com.comscore.utils 
﻿package com.comscore.utils {

    public class SaveMeasurementOp implements Runnable {

        private var cache:OfflineMeasurementsCache;
        private var props:DispatchProperties;
        private var event:String;
        private var queue:DispatchQueue;

        public function SaveMeasurementOp(cache:OfflineMeasurementsCache, event:String, props:DispatchProperties, queue:DispatchQueue){
            this.cache = cache;
            this.event = event;
            this.props = props;
            this.queue = queue;
        }
        public function run():void{
            this.cache.saveEvent(this.event, this.props);
            this.queue.endDispatching();
        }

    }
}//package com.comscore.utils 
﻿package com.comscore.utils {

    public interface ICacheObserver {

        function onCacheFlushed(_arg1:Boolean):void;

    }
}//package com.comscore.utils 
﻿package com.comscore.utils {
    import flash.display.*;
    import flash.events.*;
    import flash.utils.*;
    import flash.system.*;
    import flash.external.*;
    import flash.desktop.*;

    public class Utils {

        private static const TAG:String = "Utils";

        private static var DETECTED:Boolean = false;
        private static var AVAILABLE:Boolean = false;

        public static function md5(s:String):String{
            return (MD5.encrypt(s));
        }
        public static function get isWebEnvironment():Boolean{
            var _local1:String = Capabilities.playerType;
            return ((((_local1 == "PlugIn")) || ((_local1 == "ActiveX"))));
        }
        public static function putAll(baseArray:Object, addArray:Object):Object{
            var _local3:String;
            for (_local3 in addArray) {
                baseArray[_local3] = addArray[_local3];
            };
            return (baseArray);
        }
        public static function getNumber(value:String, defaultValue:Number=0):Number{
            var _local3:Number = (((((value == null)) || ((value.length == 0)))) ? defaultValue : new Number(value));
            if (isNaN(_local3)){
                _local3 = defaultValue;
            };
            return (_local3);
        }
        public static function getBoolean(value:String, defaultValue:Boolean=false):Boolean{
            var _local3:Boolean = defaultValue;
            if (value != null){
                if ((((value == "yes")) || ((value == "true")))){
                    _local3 = true;
                } else {
                    if ((((value == "no")) || ((value == "false")))){
                        _local3 = false;
                    };
                };
            };
            return (_local3);
        }
        public static function supportsFileStreams():Boolean{
            return (supportsClass("flash.filesystem.FileStream"));
        }
        public static function isBlackberryDevice():Boolean{
            var _local1:Boolean = ((supportsClass("qnx.system.Device")) && (supportsClass("qnx.display.Display")));
            Log.d(TAG, ("isBlackberryTablet() = " + _local1));
            return (_local1);
        }
        private static function supportsClass(className:String):Boolean{
            var ClassReference:* = null;
            var className:* = className;
            var result:* = true;
            try {
                ClassReference = (getDefinitionByName(className) as Class);
            } catch(e:Error) {
                result = false;
                Log.e(TAG, e.toString());
            };
            return (result);
        }
        public static function getPageUrl():String{
            if (available){
                return (ExternalInterface.call("window.location.href.toString"));
            };
            return ("");
        }
        public static function getReferrer():String{
            if (available){
                return (ExternalInterface.call("document.referrer.toString"));
            };
            return ("");
        }
        public static function getPageTitle():String{
            if (available){
                return (ExternalInterface.call("document.title.toString"));
            };
            return ("");
        }
        public static function get available():Boolean{
            if (!DETECTED){
                DETECTED = true;
                try {
                    AVAILABLE = ((ExternalInterface.available) && ((typeof(ExternalInterface.call("function(){return true;}")) == "boolean")));
                } catch(e:Error) {
                    AVAILABLE = false;
                };
            };
            return (AVAILABLE);
        }
        public static function split(str:String, separator:String):Array{
            var _local7:String;
            var _local3:Array = new Array();
            var _local4:Boolean;
            var _local5:int = str.length;
            var _local6:int;
            while (_local6 < _local5) {
                _local7 = str.charAt(_local6);
                if (_local7 == separator){
                    _local4 = true;
                } else {
                    if (_local4){
                        _local3.push("");
                        _local4 = false;
                    };
                    _local3[(_local3.length - 1)] = (_local3[(_local3.length - 1)] + _local7);
                };
                _local6++;
            };
            return (_local3);
        }
        public static function getAppVersion():String{
            var _local2:XML;
            var _local3:Namespace;
            var _local1:String = Constants.APPLICATION_DEFAULT_NAME;
            if (isAirEnvironment){
                try {
                    _local2 = NativeApplication.nativeApplication.applicationDescriptor;
                    _local3 = _local2.namespace();
                    _local1 = _local2._local3::versionNumber[0];
                } catch(e:Error) {
                };
            };
            return (_local1);
        }
        public static function trim(string:String):String{
            return (string.replace(/\s/g, ""));
        }
        public static function getBundleId():String{
            var _local1:XML;
            var _local2:Namespace;
            var _local3:String;
            if (isAirEnvironment){
                try {
                    _local1 = NativeApplication.nativeApplication.applicationDescriptor;
                    _local2 = _local1.namespace();
                    _local3 = _local1._local2::id[0];
                    return (_local3);
                } catch(e:Error) {
                };
            };
            return ("");
        }
        public static function getAppName(object:DisplayObject):String{
            var _local3:XML;
            var _local4:Namespace;
            var _local2:String = object.name;
            try {
                if (isAirEnvironment){
                    _local3 = NativeApplication.nativeApplication.applicationDescriptor;
                    _local4 = _local3.namespace();
                    _local2 = _local3._local4::name[0];
                } else {
                    _local2 = object.loaderInfo.url.substring((object.loaderInfo.url.lastIndexOf("/") + 1), object.loaderInfo.url.lastIndexOf("."));
                };
            } catch(e:Error) {
            };
            return (_local2);
        }
        public static function isEmpty(value:String):Boolean{
            return ((((value == null)) || ((value.length == 0))));
        }
        public static function isNotEmpty(value:String):Boolean{
            return (((!((value == null))) && ((value.length > 0))));
        }
        public static function passParameters(method:Function, additionalArguments:Array):Function{
            var method:* = method;
            var additionalArguments:* = additionalArguments;
            return (function (event:Event):void{
                method.apply(null, [event].concat(additionalArguments));
            });
        }
        public static function get isAirEnvironment():Boolean{
            return ((Capabilities.playerType == "Desktop"));
        }
        public static function get isExitCodeHandled():Boolean{
            var _local1:String = Capabilities.version.toUpperCase();
            return (((((!(Utils.isWebEnvironment)) && ((_local1.indexOf("IOS") == -1)))) && ((_local1.indexOf("AND") == -1))));
        }
        public static function get ns_pixelUrl():String{
            var _local1:String;
            var _local2:String;
            if (available){
                _local1 = ExternalInterface.call("(window.ns_p && window.ns_p.src) ? window.ns_p.src.toString() : function(){ return \"\"; }");
                _local2 = ExternalInterface.call("(window.ns_pixelUrl) ? window.ns_pixelUrl.toString() : function(){ return \"\"; }");
                if (((!((_local1 == null))) && (!((_local1 == ""))))){
                    return (_local1);
                };
                if (((!((_local2 == null))) && (!((_local2 == ""))))){
                    return (_local2);
                };
            };
            return (null);
        }
        public static function get isAndroidDevice():Boolean{
            var _local1:String = Capabilities.version.toUpperCase();
            return (!((_local1.indexOf("AND") == -1)));
        }
        public static function get isIOSDevice():Boolean{
            var _local1:String = Capabilities.version.toUpperCase();
            return (!((_local1.indexOf("IOS") == -1)));
        }
        public static function get playerVersion():String{
            var _local1:String = Capabilities.version.toUpperCase();
            try {
                if (_local1.indexOf(" ") != -1){
                    _local1 = _local1.split(" ")[1];
                };
            } catch(e:Error) {
            };
            return (_local1);
        }
        public static function get runtimeName():String{
            var _local1:String = Capabilities.playerType;
            return (_local1);
        }
        public static function get iOSDeviceName():String{
            var _local1:String = Capabilities.os;
            try {
                if (_local1.indexOf(" ") != -1){
                    _local1 = _local1.split(" ")[3];
                };
            } catch(e:Error) {
            };
            return (_local1);
        }
        public static function get iOSVersion():String{
            var _local1:String = Capabilities.os;
            try {
                if (_local1.indexOf(" ") != -1){
                    _local1 = _local1.split(" ")[2];
                };
            } catch(e:Error) {
            };
            return (_local1);
        }

    }
}//package com.comscore.utils 
﻿package com.comscore.utils {

    public class DispatchProperties {

        public static const LIVE_TRANSMISSION_MODE:int = 0;
        public static const OFFLINE_TRANSMISSION_MODE:int = 1;
        public static const SECURE_MODE:int = 2;
        public static const MEASUREMENT_LABEL_ORDER:int = 3;

        protected var liveTransmissionMode:TransmissionMode;
        protected var offlineTransmissionMode:TransmissionMode;
        protected var secure:Boolean;
        protected var measurementLabelOrder:Array;

        public function DispatchProperties():void{
            this.reset();
        }
        public function reset():void{
            this.liveTransmissionMode = TransmissionMode.DEFAULT;
            this.offlineTransmissionMode = TransmissionMode.DEFAULT;
            this.secure = false;
            this.measurementLabelOrder = Constants.LABELS_ORDER;
        }
        public function copyFrom(props:DispatchProperties):void{
            this.liveTransmissionMode = props.liveTransmissionMode;
            this.offlineTransmissionMode = props.offlineTransmissionMode;
            this.measurementLabelOrder = props.measurementLabelOrder;
            this.secure = props.secure;
        }
        public function updateSetting(type:int, value:Object):void{
            switch (type){
                case LIVE_TRANSMISSION_MODE:
                    this.allowLiveTransmission(TransmissionMode(value));
                    break;
                case OFFLINE_TRANSMISSION_MODE:
                    this.allowOfflineTransmission(TransmissionMode(value));
                    break;
                case SECURE_MODE:
                    this.setSecure((value as Boolean));
                    break;
                case MEASUREMENT_LABEL_ORDER:
                    this.setMeasurementLabelOrder((value as Array));
                    break;
            };
        }
        public function getLiveTransmissionMode():TransmissionMode{
            return (this.liveTransmissionMode);
        }
        public function allowLiveTransmission(mode:TransmissionMode):void{
            if (mode == null){
                return;
            };
            this.liveTransmissionMode = mode;
        }
        public function getOfflineTransmissionMode():TransmissionMode{
            return (this.offlineTransmissionMode);
        }
        public function allowOfflineTransmission(mode:TransmissionMode):void{
            if (mode == null){
                return;
            };
            this.offlineTransmissionMode = mode;
        }
        public function isSecure():Boolean{
            return (this.secure);
        }
        public function setSecure(secure:Boolean):void{
            this.secure = secure;
        }
        public function getMeasurementLabelOrder():Array{
            return (this.measurementLabelOrder);
        }
        public function setMeasurementLabelOrder(labelOrder:Array):void{
            if (((!((labelOrder == null))) && ((labelOrder.length > 0)))){
                this.measurementLabelOrder = labelOrder;
            };
        }

    }
}//package com.comscore.utils 
﻿package com.comscore.utils {

    public class SettingChangeOp implements Runnable {

        public var type:int;
        public var value:Object;
        public var queue:DispatchQueue;

        public function SettingChangeOp(type:int, value:Object, queue:DispatchQueue):void{
            this.type = type;
            this.value = value;
            this.queue = queue;
        }
        public function run():void{
            this.queue.getDispatchProperties().updateSetting(this.type, this.value);
            this.queue.endDispatching();
        }

    }
}//package com.comscore.utils 
﻿package com.comscore.utils {

    public class MD5 {

        public static const HEX_FORMAT_LOWERCASE:uint = 0;
        public static const HEX_FORMAT_UPPERCASE:uint = 1;
        public static const BASE64_PAD_CHARACTER_DEFAULT_COMPLIANCE:String = "";
        public static const BASE64_PAD_CHARACTER_RFC_COMPLIANCE:String = "=";

        public static var hexcase:uint = 0;
        public static var b64pad:String = "";

        public static function encrypt(string:String):String{
            return (hex_md5(string));
        }
        public static function hex_md5(string:String):String{
            return (rstr2hex(rstr_md5(str2rstr_utf8(string))));
        }
        public static function b64_md5(string:String):String{
            return (rstr2b64(rstr_md5(str2rstr_utf8(string))));
        }
        public static function any_md5(string:String, encoding:String):String{
            return (rstr2any(rstr_md5(str2rstr_utf8(string)), encoding));
        }
        public static function hex_hmac_md5(key:String, data:String):String{
            return (rstr2hex(rstr_hmac_md5(str2rstr_utf8(key), str2rstr_utf8(data))));
        }
        public static function b64_hmac_md5(key:String, data:String):String{
            return (rstr2b64(rstr_hmac_md5(str2rstr_utf8(key), str2rstr_utf8(data))));
        }
        public static function any_hmac_md5(key:String, data:String, encoding:String):String{
            return (rstr2any(rstr_hmac_md5(str2rstr_utf8(key), str2rstr_utf8(data)), encoding));
        }
        public static function md5_vm_test():Boolean{
            return ((hex_md5("abc") == "900150983cd24fb0d6963f7d28e17f72"));
        }
        public static function rstr_md5(string:String):String{
            return (binl2rstr(binl_md5(rstr2binl(string), (string.length * 8))));
        }
        public static function rstr_hmac_md5(key:String, data:String):String{
            var _local3:Array = rstr2binl(key);
            if (_local3.length > 16){
                _local3 = binl_md5(_local3, (key.length * 8));
            };
            var _local4:Array = new Array(16);
            var _local5:Array = new Array(16);
            var _local6 = 0;
            while (_local6 < 16) {
                _local4[_local6] = (_local3[_local6] ^ 0x36363636);
                _local5[_local6] = (_local3[_local6] ^ 0x5C5C5C5C);
                _local6++;
            };
            var _local7:Array = binl_md5(_local4.concat(rstr2binl(data)), (0x0200 + (data.length * 8)));
            return (binl2rstr(binl_md5(_local5.concat(_local7), (0x0200 + 128))));
        }
        public static function rstr2hex(input:String):String{
            var _local4:Number;
            var _local2:String = ((hexcase) ? "0123456789ABCDEF" : "0123456789abcdef");
            var _local3:String = "";
            var _local5 = 0;
            while (_local5 < input.length) {
                _local4 = input.charCodeAt(_local5);
                _local3 = (_local3 + (_local2.charAt(((_local4 >>> 4) & 15)) + _local2.charAt((_local4 & 15))));
                _local5++;
            };
            return (_local3);
        }
        public static function rstr2b64(input:String):String{
            var _local6:Number;
            var _local7:Number;
            var _local2:String = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
            var _local3:String = "";
            var _local4:Number = input.length;
            var _local5 = 0;
            while (_local5 < _local4) {
                _local6 = (((input.charCodeAt(_local5) << 16) | (((_local5 + 1))<_local4) ? (input.charCodeAt((_local5 + 1)) << 8) : 0) | (((_local5 + 2))<_local4) ? input.charCodeAt((_local5 + 2)) : 0);
                _local7 = 0;
                while (_local7 < 4) {
                    if (((_local5 * 8) + (_local7 * 6)) > (input.length * 8)){
                        _local3 = (_local3 + b64pad);
                    } else {
                        _local3 = (_local3 + _local2.charAt(((_local6 >>> (6 * (3 - _local7))) & 63)));
                    };
                    _local7++;
                };
                _local5 = (_local5 + 3);
            };
            return (_local3);
        }
        public static function rstr2any(input:String, encoding:String):String{
            var _local5:Number;
            var _local6:Number;
            var _local7:Number;
            var _local8:Array;
            var _local3:Number = encoding.length;
            var _local4:Array = [];
            var _local9:Array = new Array((input.length / 2));
            _local5 = 0;
            while (_local5 < _local9.length) {
                _local9[_local5] = ((input.charCodeAt((_local5 * 2)) << 8) | input.charCodeAt(((_local5 * 2) + 1)));
                _local5++;
            };
            while (_local9.length > 0) {
                _local8 = [];
                _local7 = 0;
                _local5 = 0;
                while (_local5 < _local9.length) {
                    _local7 = ((_local7 << 16) + _local9[_local5]);
                    _local6 = Math.floor((_local7 / _local3));
                    _local7 = (_local7 - (_local6 * _local3));
                    if ((((_local8.length > 0)) || ((_local6 > 0)))){
                        _local8[_local8.length] = _local6;
                    };
                    _local5++;
                };
                _local4[_local4.length] = _local7;
                _local9 = _local8;
            };
            var _local10:String = "";
            _local5 = (_local4.length - 1);
            while (_local5 >= 0) {
                _local10 = (_local10 + encoding.charAt(_local4[_local5]));
                _local5--;
            };
            return (_local10);
        }
        public static function str2rstr_utf8(input:String):String{
            var _local4:Number;
            var _local5:Number;
            var _local2:String = "";
            var _local3 = -1;
            while (++_local3 < input.length) {
                _local4 = input.charCodeAt(_local3);
                _local5 = (((_local3 + 1))<input.length) ? input.charCodeAt((_local3 + 1)) : 0;
                if ((((((((0xD800 <= _local4)) && ((_local4 <= 56319)))) && ((0xDC00 <= _local5)))) && ((_local5 <= 57343)))){
                    _local4 = ((65536 + ((_local4 & 1023) << 10)) + (_local5 & 1023));
                    _local3++;
                };
                if (_local4 <= 127){
                    _local2 = (_local2 + String.fromCharCode(_local4));
                } else {
                    if (_local4 <= 2047){
                        _local2 = (_local2 + String.fromCharCode((192 | ((_local4 >>> 6) & 31)), (128 | (_local4 & 63))));
                    } else {
                        if (_local4 <= 0xFFFF){
                            _local2 = (_local2 + String.fromCharCode((224 | ((_local4 >>> 12) & 15)), (128 | ((_local4 >>> 6) & 63)), (128 | (_local4 & 63))));
                        } else {
                            if (_local4 <= 2097151){
                                _local2 = (_local2 + String.fromCharCode((240 | ((_local4 >>> 18) & 7)), (128 | ((_local4 >>> 12) & 63)), (128 | ((_local4 >>> 6) & 63)), (128 | (_local4 & 63))));
                            };
                        };
                    };
                };
            };
            return (_local2);
        }
        public static function str2rstr_utf16le(input:String):String{
            var _local2:String = "";
            var _local3 = 0;
            while (_local3 < input.length) {
                _local2 = (_local2 + String.fromCharCode((input.charCodeAt(_local3) & 0xFF), ((input.charCodeAt(_local3) >>> 8) & 0xFF)));
                _local3++;
            };
            return (_local2);
        }
        public static function str2rstr_utf16be(input:String):String{
            var _local2:String = "";
            var _local3 = 0;
            while (_local3 < input.length) {
                _local2 = (_local2 + String.fromCharCode(((input.charCodeAt(_local3) >>> 8) & 0xFF), (input.charCodeAt(_local3) & 0xFF)));
                _local3++;
            };
            return (_local2);
        }
        public static function rstr2binl(input:String):Array{
            var _local3:Number;
            var _local2:Array = new Array((input.length >> 2));
            _local3 = 0;
            while (_local3 < _local2.length) {
                _local2[_local3] = 0;
                _local3++;
            };
            _local3 = 0;
            while (_local3 < (input.length * 8)) {
                _local2[(_local3 >> 5)] = (_local2[(_local3 >> 5)] | ((input.charCodeAt((_local3 / 8)) & 0xFF) << (_local3 % 32)));
                _local3 = (_local3 + 8);
            };
            return (_local2);
        }
        public static function binl2rstr(input:Array):String{
            var _local2:String = "";
            var _local3 = 0;
            while (_local3 < (input.length * 32)) {
                _local2 = (_local2 + String.fromCharCode(((input[(_local3 >> 5)] >>> (_local3 % 32)) & 0xFF)));
                _local3 = (_local3 + 8);
            };
            return (_local2);
        }
        public static function binl_md5(x:Array, len:Number):Array{
            var _local8:Number;
            var _local9:Number;
            var _local10:Number;
            var _local11:Number;
            x[(len >> 5)] = (x[(len >> 5)] | (128 << (len % 32)));
            x[((((len + 64) >>> 9) << 4) + 14)] = len;
            var _local3 = 1732584193;
            var _local4 = -271733879;
            var _local5 = -1732584194;
            var _local6 = 271733878;
            var _local7 = 0;
            while (_local7 < x.length) {
                _local8 = _local3;
                _local9 = _local4;
                _local10 = _local5;
                _local11 = _local6;
                _local3 = md5_ff(_local3, _local4, _local5, _local6, x[(_local7 + 0)], 7, -680876936);
                _local6 = md5_ff(_local6, _local3, _local4, _local5, x[(_local7 + 1)], 12, -389564586);
                _local5 = md5_ff(_local5, _local6, _local3, _local4, x[(_local7 + 2)], 17, 606105819);
                _local4 = md5_ff(_local4, _local5, _local6, _local3, x[(_local7 + 3)], 22, -1044525330);
                _local3 = md5_ff(_local3, _local4, _local5, _local6, x[(_local7 + 4)], 7, -176418897);
                _local6 = md5_ff(_local6, _local3, _local4, _local5, x[(_local7 + 5)], 12, 1200080426);
                _local5 = md5_ff(_local5, _local6, _local3, _local4, x[(_local7 + 6)], 17, -1473231341);
                _local4 = md5_ff(_local4, _local5, _local6, _local3, x[(_local7 + 7)], 22, -45705983);
                _local3 = md5_ff(_local3, _local4, _local5, _local6, x[(_local7 + 8)], 7, 1770035416);
                _local6 = md5_ff(_local6, _local3, _local4, _local5, x[(_local7 + 9)], 12, -1958414417);
                _local5 = md5_ff(_local5, _local6, _local3, _local4, x[(_local7 + 10)], 17, -42063);
                _local4 = md5_ff(_local4, _local5, _local6, _local3, x[(_local7 + 11)], 22, -1990404162);
                _local3 = md5_ff(_local3, _local4, _local5, _local6, x[(_local7 + 12)], 7, 1804603682);
                _local6 = md5_ff(_local6, _local3, _local4, _local5, x[(_local7 + 13)], 12, -40341101);
                _local5 = md5_ff(_local5, _local6, _local3, _local4, x[(_local7 + 14)], 17, -1502002290);
                _local4 = md5_ff(_local4, _local5, _local6, _local3, x[(_local7 + 15)], 22, 1236535329);
                _local3 = md5_gg(_local3, _local4, _local5, _local6, x[(_local7 + 1)], 5, -165796510);
                _local6 = md5_gg(_local6, _local3, _local4, _local5, x[(_local7 + 6)], 9, -1069501632);
                _local5 = md5_gg(_local5, _local6, _local3, _local4, x[(_local7 + 11)], 14, 643717713);
                _local4 = md5_gg(_local4, _local5, _local6, _local3, x[(_local7 + 0)], 20, -373897302);
                _local3 = md5_gg(_local3, _local4, _local5, _local6, x[(_local7 + 5)], 5, -701558691);
                _local6 = md5_gg(_local6, _local3, _local4, _local5, x[(_local7 + 10)], 9, 38016083);
                _local5 = md5_gg(_local5, _local6, _local3, _local4, x[(_local7 + 15)], 14, -660478335);
                _local4 = md5_gg(_local4, _local5, _local6, _local3, x[(_local7 + 4)], 20, -405537848);
                _local3 = md5_gg(_local3, _local4, _local5, _local6, x[(_local7 + 9)], 5, 568446438);
                _local6 = md5_gg(_local6, _local3, _local4, _local5, x[(_local7 + 14)], 9, -1019803690);
                _local5 = md5_gg(_local5, _local6, _local3, _local4, x[(_local7 + 3)], 14, -187363961);
                _local4 = md5_gg(_local4, _local5, _local6, _local3, x[(_local7 + 8)], 20, 1163531501);
                _local3 = md5_gg(_local3, _local4, _local5, _local6, x[(_local7 + 13)], 5, -1444681467);
                _local6 = md5_gg(_local6, _local3, _local4, _local5, x[(_local7 + 2)], 9, -51403784);
                _local5 = md5_gg(_local5, _local6, _local3, _local4, x[(_local7 + 7)], 14, 1735328473);
                _local4 = md5_gg(_local4, _local5, _local6, _local3, x[(_local7 + 12)], 20, -1926607734);
                _local3 = md5_hh(_local3, _local4, _local5, _local6, x[(_local7 + 5)], 4, -378558);
                _local6 = md5_hh(_local6, _local3, _local4, _local5, x[(_local7 + 8)], 11, -2022574463);
                _local5 = md5_hh(_local5, _local6, _local3, _local4, x[(_local7 + 11)], 16, 1839030562);
                _local4 = md5_hh(_local4, _local5, _local6, _local3, x[(_local7 + 14)], 23, -35309556);
                _local3 = md5_hh(_local3, _local4, _local5, _local6, x[(_local7 + 1)], 4, -1530992060);
                _local6 = md5_hh(_local6, _local3, _local4, _local5, x[(_local7 + 4)], 11, 1272893353);
                _local5 = md5_hh(_local5, _local6, _local3, _local4, x[(_local7 + 7)], 16, -155497632);
                _local4 = md5_hh(_local4, _local5, _local6, _local3, x[(_local7 + 10)], 23, -1094730640);
                _local3 = md5_hh(_local3, _local4, _local5, _local6, x[(_local7 + 13)], 4, 681279174);
                _local6 = md5_hh(_local6, _local3, _local4, _local5, x[(_local7 + 0)], 11, -358537222);
                _local5 = md5_hh(_local5, _local6, _local3, _local4, x[(_local7 + 3)], 16, -722521979);
                _local4 = md5_hh(_local4, _local5, _local6, _local3, x[(_local7 + 6)], 23, 76029189);
                _local3 = md5_hh(_local3, _local4, _local5, _local6, x[(_local7 + 9)], 4, -640364487);
                _local6 = md5_hh(_local6, _local3, _local4, _local5, x[(_local7 + 12)], 11, -421815835);
                _local5 = md5_hh(_local5, _local6, _local3, _local4, x[(_local7 + 15)], 16, 530742520);
                _local4 = md5_hh(_local4, _local5, _local6, _local3, x[(_local7 + 2)], 23, -995338651);
                _local3 = md5_ii(_local3, _local4, _local5, _local6, x[(_local7 + 0)], 6, -198630844);
                _local6 = md5_ii(_local6, _local3, _local4, _local5, x[(_local7 + 7)], 10, 1126891415);
                _local5 = md5_ii(_local5, _local6, _local3, _local4, x[(_local7 + 14)], 15, -1416354905);
                _local4 = md5_ii(_local4, _local5, _local6, _local3, x[(_local7 + 5)], 21, -57434055);
                _local3 = md5_ii(_local3, _local4, _local5, _local6, x[(_local7 + 12)], 6, 1700485571);
                _local6 = md5_ii(_local6, _local3, _local4, _local5, x[(_local7 + 3)], 10, -1894986606);
                _local5 = md5_ii(_local5, _local6, _local3, _local4, x[(_local7 + 10)], 15, -1051523);
                _local4 = md5_ii(_local4, _local5, _local6, _local3, x[(_local7 + 1)], 21, -2054922799);
                _local3 = md5_ii(_local3, _local4, _local5, _local6, x[(_local7 + 8)], 6, 1873313359);
                _local6 = md5_ii(_local6, _local3, _local4, _local5, x[(_local7 + 15)], 10, -30611744);
                _local5 = md5_ii(_local5, _local6, _local3, _local4, x[(_local7 + 6)], 15, -1560198380);
                _local4 = md5_ii(_local4, _local5, _local6, _local3, x[(_local7 + 13)], 21, 1309151649);
                _local3 = md5_ii(_local3, _local4, _local5, _local6, x[(_local7 + 4)], 6, -145523070);
                _local6 = md5_ii(_local6, _local3, _local4, _local5, x[(_local7 + 11)], 10, -1120210379);
                _local5 = md5_ii(_local5, _local6, _local3, _local4, x[(_local7 + 2)], 15, 718787259);
                _local4 = md5_ii(_local4, _local5, _local6, _local3, x[(_local7 + 9)], 21, -343485551);
                _local3 = safe_add(_local3, _local8);
                _local4 = safe_add(_local4, _local9);
                _local5 = safe_add(_local5, _local10);
                _local6 = safe_add(_local6, _local11);
                _local7 = (_local7 + 16);
            };
            return ([_local3, _local4, _local5, _local6]);
        }
        public static function md5_cmn(q:Number, a:Number, b:Number, x:Number, s:Number, t:Number):Number{
            return (safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b));
        }
        public static function md5_ff(a:Number, b:Number, c:Number, d:Number, x:Number, s:Number, t:Number):Number{
            return (md5_cmn(((b & c) | (~(b) & d)), a, b, x, s, t));
        }
        public static function md5_gg(a:Number, b:Number, c:Number, d:Number, x:Number, s:Number, t:Number):Number{
            return (md5_cmn(((b & d) | (c & ~(d))), a, b, x, s, t));
        }
        public static function md5_hh(a:Number, b:Number, c:Number, d:Number, x:Number, s:Number, t:Number):Number{
            return (md5_cmn(((b ^ c) ^ d), a, b, x, s, t));
        }
        public static function md5_ii(a:Number, b:Number, c:Number, d:Number, x:Number, s:Number, t:Number):Number{
            return (md5_cmn((c ^ (b | ~(d))), a, b, x, s, t));
        }
        public static function safe_add(x:Number, y:Number):Number{
            var _local3:Number = ((x & 0xFFFF) + (y & 0xFFFF));
            var _local4:Number = (((x >> 16) + (y >> 16)) + (_local3 >> 16));
            return (((_local4 << 16) | (_local3 & 0xFFFF)));
        }
        public static function bit_rol(num:Number, cnt:Number):Number{
            return (((num << cnt) | (num >>> (32 - cnt))));
        }

    }
}//package com.comscore.utils 
﻿package com.comscore.utils {

    public class CSDate {

        public static function unixTime():Number{
            var _local1:Date = new Date();
            return (_local1.getTime());
        }

    }
}//package com.comscore.utils 
﻿package com.comscore.utils {
    import flash.errors.*;
    import com.comscore.analytics.*;
    import flash.filesystem.*;

    public class FileUtils {

        private static const TAG:String = "FileUtils";

        public static function getArrayOfCacheFiles():Array{
            var _local3:String;
            var _local4:File;
            var _local1:Array = new Array();
            var _local2:Array = File.applicationStorageDirectory.getDirectoryListing();
            _local2.sortOn("name", Array.DESCENDING);
            for (_local3 in _local2) {
                _local4 = _local2[_local3];
                if (_local4.name.indexOf(Constants.CACHE_FILENAME) == 0){
                    _local1.push(_local4.name);
                };
            };
            return (_local1);
        }
        public static function readCachedEvents(filename:String):Array{
            var file:* = null;
            var readingStream:* = null;
            var eventsString:* = null;
            var filename:* = filename;
            var events:* = new Array();
            try {
                file = File.applicationStorageDirectory.resolvePath(filename);
                if (file.exists){
                    readingStream = new FileStream();
                    readingStream.open(file, FileMode.READ);
                    eventsString = readingStream.readUTFBytes(readingStream.bytesAvailable);
                    readingStream.close();
                    events = eventsString.split("\n");
                };
            } catch(error:Error) {
                Log.e(TAG, error.toString());
            };
            return (events);
        }
        public static function writeEvent(core:Core, filename:String, event:String):Boolean{
            var file:* = null;
            var stream:* = null;
            var storage:* = null;
            var counter:* = NaN;
            var core:* = core;
            var filename:* = filename;
            var event:* = event;
            var result:* = false;
            try {
                file = File.applicationStorageDirectory.resolvePath(filename);
                stream = new FileStream();
                stream.open(file, FileMode.APPEND);
                stream.writeUTFBytes((event + "\n"));
                stream.close();
                result = true;
            } catch(error:Error) {
                Log.e(TAG, error.toString());
            };
            if (result){
                storage = core.getStorage();
                counter = new Number(storage.get(filename));
                counter = (counter + 1);
                storage.set(filename, counter.toString());
            };
            return (result);
        }
        public static function deleteFile(core:Core, filename:String):Boolean{
            var file:* = null;
            var core:* = core;
            var filename:* = filename;
            var result:* = false;
            try {
                file = File.applicationStorageDirectory.resolvePath(filename);
                if (file != null){
                    file.deleteFile();
                    result = true;
                    Log.d(TAG, (("File" + filename) + " was removed"));
                    core.getStorage().remove(filename);
                };
            } catch(error:IOError) {
                Log.e(TAG, error.toString());
            };
            return (result);
        }

    }
}//package com.comscore.utils 
﻿package com.comscore.utils {

    public class XMLBuilder {

        private static var c12:String = null;
        private static var c1:String = null;
        private static var ns_ap_an:String = null;
        private static var ns_ap_pn:String = null;
        private static var ns_ap_device:String = null;
        private static var concatedProcessedEvents:String;

        public static function generateXMLRequestString(events:Array, droppedCount:String):String{
            var _local4:String;
            var _local3:String = "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>";
            events = getEventsFormatted(events);
            _local3 = (_local3 + getXMLHeader(droppedCount));
            for each (_local4 in events) {
                _local3 = (_local3 + _local4);
            };
            _local3 = (_local3 + "</events>");
            return (_local3);
        }
        private static function getXMLHeader(droppedCount:String):String{
            var _local2:String = CSDate.unixTime().toString(10);
            var _local3:String = (("<events t=\"" + _local2) + "\" ");
            if (c12 != null){
                _local3 = (_local3 + (("c12=\"" + c12) + "\" "));
            };
            if (c1 != null){
                _local3 = (_local3 + (("c1=\"" + c1) + "\" "));
            };
            if (ns_ap_an != null){
                _local3 = (_local3 + (("ns_ap_an=\"" + ns_ap_an) + "\" "));
            };
            if (ns_ap_pn != null){
                _local3 = (_local3 + (("ns_ap_pn=\"" + ns_ap_pn) + "\" "));
            };
            if (ns_ap_device != null){
                _local3 = (_local3 + (("ns_ap_device=\"" + ns_ap_device) + "\" "));
            };
            if (droppedCount != null){
                _local3 = (_local3 + (("dropped=\"" + droppedCount) + "\" "));
            };
            if (concatedProcessedEvents != null){
                _local3 = (_local3 + (("md5=\"" + MD5.hex_md5(concatedProcessedEvents).toLowerCase()) + "\""));
            };
            _local3 = (_local3 + ">");
            return (_local3);
        }
        private static function processCommonLabelsInEvent(event:String):String{
            var _local2:String = getLabelFromEvent(event, "c12");
            if (_local2 != null){
                c12 = _local2;
                event = removeLabelFromEvent(event, "c12");
            };
            var _local3:String = getLabelFromEvent(event, "c1");
            if (_local3 != null){
                c1 = _local3;
                event = removeLabelFromEvent(event, "c1");
            };
            var _local4:String = getLabelFromEvent(event, "ns_ap_an");
            if (_local4 != null){
                ns_ap_an = _local4;
                event = removeLabelFromEvent(event, "ns_ap_an");
            };
            var _local5:String = getLabelFromEvent(event, "ns_ap_pn");
            if (_local5 != null){
                ns_ap_pn = _local5;
                event = removeLabelFromEvent(event, "ns_ap_pn");
            };
            var _local6:String = getLabelFromEvent(event, "ns_ap_device");
            if (_local6 != null){
                ns_ap_device = _local6;
                event = removeLabelFromEvent(event, "ns_ap_device");
            };
            return (event);
        }
        private static function getEventsFormatted(events:Array):Array{
            var _local3:String;
            var _local4:String;
            var _local5:String;
            var _local2:Array = new Array();
            concatedProcessedEvents = "";
            for each (_local3 in events) {
                _local4 = getLabelFromEvent(_local3, "ns_ts");
                _local5 = removeLabelFromEvent(_local3, "ns_ts");
                _local5 = processCommonLabelsInEvent(_local5);
                concatedProcessedEvents = (concatedProcessedEvents + _local5);
                if (Utils.isNotEmpty(_local4)){
                    _local2.push((((("<event t=\"" + _local4) + "\">") + _local5) + "</event>"));
                };
            };
            return (_local2);
        }
        public static function getLabelFromEvent(event:String, labelName:String):String{
            var _local5:int;
            var _local3:String;
            var _local4:int = indexOf(event, labelName);
            if (_local4 != -1){
                _local3 = event.substring(((_local4 + labelName.length) + 1));
                _local5 = _local3.indexOf("&");
                if (_local5 != -1){
                    _local3 = _local3.substring(0, _local5);
                };
            };
            return (_local3);
        }
        private static function indexOf(event:String, labelName:String):int{
            var _local3 = -1;
            do  {
                _local3 = event.indexOf((labelName + "="), (_local3 + 1));
            } while ((((_local3 > 0)) && (!((event.charAt((_local3 - 1)) == "&")))));
            return (_local3);
        }
        private static function removeLabelFromEvent(event:String, labelName:String):String{
            var _local5:int;
            var _local6:String;
            var _local3:String;
            var _local4:int = indexOf(event, labelName);
            if (_local4 != -1){
                _local3 = event.substring(((_local4 + labelName.length) + 1));
                _local5 = _local3.indexOf("&");
                if (_local5 != -1){
                    _local3 = _local3.substring(0, _local5);
                };
                _local6 = ((labelName + "=") + _local3);
                event = event.replace(("&" + _local6), "");
                event = event.replace(_local6, "");
                if ((((event.charAt(0) == "&")) && ((event.length > 1)))){
                    event = event.substring(1);
                };
            };
            return (event);
        }

    }
}//package com.comscore.utils 
﻿package com.comscore.utils {
    import flash.system.*;

    public class UUIDGenerator {

        private static var counter:Number = 0;

        public static function createUID():String{
            var _local1:Number = CSDate.unixTime();
            var _local2:Number = (Math.random() * Number.MAX_VALUE);
            var _local3:String = Capabilities.serverString;
            var _local4:String = hex_sha1((((_local1 + _local3) + _local2) + counter++)).toUpperCase();
            var _local5:String = ((((((((_local4.substring(0, 8) + "-") + _local4.substring(8, 12)) + "-") + _local4.substring(12, 16)) + "-") + _local4.substring(16, 20)) + "-") + _local4.substring(20, 32));
            return (_local5);
        }
        private static function hex_sha1(src:String):String{
            return (binb2hex(core_sha1(str2binb(src), (src.length * 8))));
        }
        private static function core_sha1(x:Array, len:Number):Array{
            var _local10:Number;
            var _local11:Number;
            var _local12:Number;
            var _local13:Number;
            var _local14:Number;
            var _local15:Number;
            var _local16:Number;
            x[(len >> 5)] = (x[(len >> 5)] | (128 << (24 - (len % 32))));
            x[((((len + 64) >> 9) << 4) + 15)] = len;
            var _local3:Array = new Array(80);
            var _local4 = 1732584193;
            var _local5 = -271733879;
            var _local6 = -1732584194;
            var _local7 = 271733878;
            var _local8 = -1009589776;
            var _local9 = 0;
            while (_local9 < x.length) {
                _local10 = _local4;
                _local11 = _local5;
                _local12 = _local6;
                _local13 = _local7;
                _local14 = _local8;
                _local15 = 0;
                while (_local15 < 80) {
                    if (_local15 < 16){
                        _local3[_local15] = x[(_local9 + _local15)];
                    } else {
                        _local3[_local15] = rol((((_local3[(_local15 - 3)] ^ _local3[(_local15 - 8)]) ^ _local3[(_local15 - 14)]) ^ _local3[(_local15 - 16)]), 1);
                    };
                    _local16 = safe_add(safe_add(rol(_local4, 5), sha1_ft(_local15, _local5, _local6, _local7)), safe_add(safe_add(_local8, _local3[_local15]), sha1_kt(_local15)));
                    _local8 = _local7;
                    _local7 = _local6;
                    _local6 = rol(_local5, 30);
                    _local5 = _local4;
                    _local4 = _local16;
                    _local15++;
                };
                _local4 = safe_add(_local4, _local10);
                _local5 = safe_add(_local5, _local11);
                _local6 = safe_add(_local6, _local12);
                _local7 = safe_add(_local7, _local13);
                _local8 = safe_add(_local8, _local14);
                _local9 = (_local9 + 16);
            };
            return (new Array(_local4, _local5, _local6, _local7, _local8));
        }
        private static function sha1_ft(t:Number, b:Number, c:Number, d:Number):Number{
            if (t < 20){
                return (((b & c) | (~(b) & d)));
            };
            if (t < 40){
                return (((b ^ c) ^ d));
            };
            if (t < 60){
                return ((((b & c) | (b & d)) | (c & d)));
            };
            return (((b ^ c) ^ d));
        }
        private static function sha1_kt(t:Number):Number{
            return (((t)<20) ? 1518500249 : ((t)<40) ? 1859775393 : ((t)<60) ? -1894007588 : -899497514);
        }
        private static function safe_add(x:Number, y:Number):Number{
            var _local3:Number = ((x & 0xFFFF) + (y & 0xFFFF));
            var _local4:Number = (((x >> 16) + (y >> 16)) + (_local3 >> 16));
            return (((_local4 << 16) | (_local3 & 0xFFFF)));
        }
        private static function rol(num:Number, cnt:Number):Number{
            return (((num << cnt) | (num >>> (32 - cnt))));
        }
        private static function str2binb(str:String):Array{
            var _local2:Array = new Array();
            var _local3:Number = ((1 << 8) - 1);
            var _local4 = 0;
            while (_local4 < (str.length * 8)) {
                _local2[(_local4 >> 5)] = (_local2[(_local4 >> 5)] | ((str.charCodeAt((_local4 / 8)) & _local3) << (24 - (_local4 % 32))));
                _local4 = (_local4 + 8);
            };
            return (_local2);
        }
        private static function binb2hex(binarray:Array):String{
            var _local2:String = new String("");
            var _local3:String = new String("0123456789abcdef");
            var _local4 = 0;
            while (_local4 < (binarray.length * 4)) {
                _local2 = (_local2 + (_local3.charAt(((binarray[(_local4 >> 2)] >> (((3 - (_local4 % 4)) * 8) + 4)) & 15)) + _local3.charAt(((binarray[(_local4 >> 2)] >> ((3 - (_local4 % 4)) * 8)) & 15))));
                _local4++;
            };
            return (_local2);
        }

    }
}//package com.comscore.utils 
﻿package com.comscore.utils {

    public class TransmissionMode {

        public static const DEFAULT:TransmissionMode = new TransmissionMode("DEFAULT");
;
        public static const NEVER:TransmissionMode = new TransmissionMode("NEVER");
;
        public static const DISABLED:TransmissionMode = new TransmissionMode("DISABLED");
;

        private var mode:String = null;

        public function TransmissionMode(mode:String){
            this.mode = mode;
        }
        public static function valueOf(mode:String):TransmissionMode{
            if (mode == NEVER.getValue()){
                return (NEVER);
            };
            if (mode == DISABLED.getValue()){
                return (DISABLED);
            };
            return (DEFAULT);
        }

        public function getValue():String{
            return (this.mode);
        }

    }
}//package com.comscore.utils 
﻿package com.comscore.utils {
    import flash.events.*;
    import flash.net.*;
    import com.comscore.analytics.*;
    import com.comscore.applications.*;

    public class OfflineMeasurementsCache {

        private static const TAG:String = "OfflineMeasurementsCache";

        protected var core:Core;
        private var cacheFilename:String;
        private var maxSize:int;
        private var maxBatchSize:int;
        private var maxFlushesInARow:int;
        private var minutesToRetry:int;
        private var expiryInDays:int;
        private var postsSentInARow:uint = 0;
        private var lastPOSTFailedTime:Number = 0;
        private var lastFlushDate:Number = 0;
        private var xmlPOST:String = null;
        private var arrayOfCacheFiles:Array = null;
        private var observerData:Array;
        private var responseCode:int = 0;

        public function OfflineMeasurementsCache(core:Core, cacheFilename:String="cs_cache_"){
            this.core = core;
            this.cacheFilename = cacheFilename;
            this.setCacheMaxMeasurements(Constants.CACHE_MAX_SIZE);
            this.setCacheMaxBatchFiles(Constants.CACHE_MAX_BATCH_SIZE);
            this.setCacheMaxPosts(Constants.CACHE_MAX_FLUSHES_IN_A_ROW);
            this.setCacheWaitMinutes(Constants.CACHE_WAIT_MINUTES);
            this.setCacheMeasurementExpiry(Constants.CACHE_EXPIRY_DAYS);
            if (Utils.supportsFileStreams()){
                this.removeExpiredFiles();
            };
            this.observerData = new Array();
        }
        public function setCacheMaxMeasurements(max:int):void{
            this.maxSize = max;
        }
        public function getCacheMaxMeasurements():int{
            return (this.maxSize);
        }
        public function setCacheMaxBatchFiles(max:int):void{
            if (max <= 0){
                return;
            };
            this.maxBatchSize = max;
        }
        public function getCacheMaxBatchFiles():int{
            return (this.maxBatchSize);
        }
        public function setCacheMaxPosts(max:int):void{
            this.maxFlushesInARow = max;
        }
        public function getCacheMaxPosts():int{
            return (this.maxFlushesInARow);
        }
        public function setCacheWaitMinutes(minutes:int):void{
            this.minutesToRetry = minutes;
        }
        public function getCacheWaitMinutes():int{
            return (this.minutesToRetry);
        }
        public function setCacheMeasurementExpiry(days:int):void{
            this.expiryInDays = days;
        }
        public function getCacheMeasurementExpiry():int{
            return (this.expiryInDays);
        }
        protected function createFlushingURL(props:DispatchProperties):String{
            var _local2:String = ((props.isSecure()) ? Constants.OFFLINE_RECEIVER_URL_SECURE : Constants.OFFLINE_RECEIVER_URL);
            var _local3:Boolean;
            if (_local2.indexOf("?") == -1){
                _local2 = (_local2 + "?");
                _local3 = false;
            };
            var _local4:String = this.core.getCustomerC2();
            if (((!((_local4 == null))) && (!((_local4 == ""))))){
                if (_local3){
                    _local2 = (_local2 + "&");
                };
                _local2 = (_local2 + ("c2=" + _local4));
                _local3 = true;
            };
            var _local5:String = MD5.encrypt((("JetportGotAMaskOfThe" + this.core.getPublisherSecret()) + "S.D_K-"));
            if (((!((_local5 == null))) && (!((_local5 == ""))))){
                if (_local3){
                    _local2 = (_local2 + "&");
                };
                _local2 = (_local2 + ("s=" + _local5));
            };
            return (_local2.toLowerCase());
        }
        public function saveApplicationMeasurement(m:ApplicationMeasurement, props:DispatchProperties, inBackground:Boolean=false):void{
            var _local4:DispatchQueue = this.core.getQueue();
            _local4.processAggregateData(m);
            _local4.processEventCounter(m);
            this.saveEventInBackground(m.retrieveLabelsAsString(props.getMeasurementLabelOrder()), props, inBackground);
        }
        public function saveEventInBackground(event:String, props:DispatchProperties, inBackground:Boolean=false):void{
            var _local4:DispatchQueue;
            if (inBackground){
                _local4 = this.core.getQueue();
                _local4.enqueueSaveMeasurement(this, event, props);
            } else {
                this.saveEvent(event, props);
            };
        }
        public function saveEvent(event:String, props:DispatchProperties):void{
            var _local3:String;
            var _local4:Number;
            if (((((((!((props.getOfflineTransmissionMode() == TransmissionMode.DISABLED))) && (Utils.supportsFileStreams()))) && (!((this.core.getCustomerC2() == null))))) && (Utils.isNotEmpty(XMLBuilder.getLabelFromEvent(event, "ns_ts"))))){
                _local3 = this.getNewestFile();
                if (_local3 != null){
                    _local4 = this.measurementCountIn(_local3);
                    if (_local4 < this.getCacheMaxBatchFiles()){
                        FileUtils.writeEvent(this.core, _local3, event);
                        this.destroyPreviousPost();
                    } else {
                        Log.d(TAG, "The newest cache batch file is full");
                        if (this.getListOfCacheFiles().length >= (this.getCacheMaxMeasurements() / this.getCacheMaxBatchFiles())){
                            Log.d(TAG, (("reached the cache max (" + this.getCacheMaxMeasurements()) + ") size"));
                            this.deleteCacheFile(this.getOldestFile(), true);
                        };
                        this.createNewCacheFile(event);
                    };
                } else {
                    this.createNewCacheFile(event);
                };
            };
        }
        public function flush(props:DispatchProperties):Boolean{
            var _local3:Array;
            var _local4:String;
            var _local5:String;
            var _local6:URLLoader;
            var _local7:URLRequest;
            var _local8:String;
            Log.d(TAG, "flush()");
            var _local2:Boolean;
            if (Utils.supportsFileStreams()){
                this.removeExpiredFiles();
                if (this.isFlushingAllowed()){
                    _local3 = null;
                    _local4 = null;
                    this.lastPOSTFailedTime = 0;
                    Log.d(TAG, (("Cache is not empty, contains " + this.arrayOfCacheFiles.length) + " files"));
                    if (this.xmlPOST == null){
                        _local4 = this.getNewestFile();
                        Log.d(TAG, ("reading events from the file " + _local4));
                        _local3 = this.validateEvents(_local4);
                        if (((!((_local3 == null))) && ((_local3.length > 0)))){
                            _local8 = this.core.getStorage().get(Constants.CACHE_DROPPED_MEASUREMENTS);
                            if ((((_local8 == null)) || ((_local8.length == 0)))){
                                _local8 = "0";
                            };
                            this.xmlPOST = XMLBuilder.generateXMLRequestString(_local3, _local8);
                        };
                    };
                    this.core.getStorage().set(Constants.LAST_TRANSMISSION_KEY, CSDate.unixTime().toString());
                    _local5 = this.createFlushingURL(props);
                    _local6 = new URLLoader();
                    _local7 = new URLRequest(_local5);
                    _local7.method = URLRequestMethod.POST;
                    _local7.contentType = "text/xml";
                    _local7.data = this.xmlPOST;
                    Log.d(TAG, ("flush: " + _local7.data));
                    _local6.addEventListener(IOErrorEvent.IO_ERROR, this.catchIOError);
                    _local6.addEventListener(HTTPStatusEvent.HTTP_STATUS, this.on_status);
                    _local6.addEventListener(Event.COMPLETE, Utils.passParameters(this.on_complete, [_local4, props]));
                    _local6.load(_local7);
                    _local2 = true;
                };
            };
            this.notifyToObserver(true);
            return (_local2);
        }
        private function catchIOError(e:IOErrorEvent):void{
            Log.d(TAG, (("catchIOError(" + e.toString()) + ")"));
            e.currentTarget.removeEventListener(IOErrorEvent.IO_ERROR, this.catchIOError);
            e.currentTarget.removeEventListener(Event.COMPLETE, this.on_complete);
            e.currentTarget.removeEventListener(HTTPStatusEvent.HTTP_STATUS, this.on_status);
            this.responseCode = 0;
            this.lastPOSTFailedTime = CSDate.unixTime();
            this.notifyToObserver(true);
        }
        private function on_complete(e:Event, filename:String, props:DispatchProperties):void{
            Log.d(TAG, (("on_complete(" + e.toString()) + ")"));
            e.currentTarget.removeEventListener(IOErrorEvent.IO_ERROR, this.catchIOError);
            e.currentTarget.removeEventListener(Event.COMPLETE, this.on_complete);
            e.currentTarget.removeEventListener(HTTPStatusEvent.HTTP_STATUS, this.on_status);
            var _local4:String = (e.target.data as String);
            var _local5:Boolean = ((((_local4) && (Utils.isNotEmpty(_local4)))) ? (_local4.indexOf(Constants.RESPONSE_MASK) == 0) : false);
            if (((_local5) && ((this.responseCode == 200)))){
                this.postsSentInARow++;
                this.deleteCacheFile(filename, false);
                this.destroyPreviousPost();
                this.lastFlushDate = CSDate.unixTime();
                this.core.getStorage().remove(Constants.CACHE_DROPPED_MEASUREMENTS);
                this.flush(props);
            } else {
                this.lastPOSTFailedTime = CSDate.unixTime();
            };
            this.responseCode = 0;
            this.notifyToObserver(true);
        }
        private function on_status(e:HTTPStatusEvent):void{
            Log.d(TAG, (("on_status(" + e.status.toString()) + ")"));
            this.responseCode = e.status;
        }
        private function getListOfCacheFiles():Array{
            if (this.arrayOfCacheFiles == null){
                this.arrayOfCacheFiles = FileUtils.getArrayOfCacheFiles();
            };
            return (this.arrayOfCacheFiles);
        }
        private function createNewCacheFile(event:String):void{
            Log.d(TAG, "Creating new cache batch file");
            var _local2:String = (this.cacheFilename + XMLBuilder.getLabelFromEvent(event, "ns_ts"));
            FileUtils.writeEvent(this.core, _local2, event);
            if (this.arrayOfCacheFiles == null){
                this.arrayOfCacheFiles = new Array();
            };
            this.arrayOfCacheFiles.push(_local2);
            this.destroyPreviousPost();
        }
        private function getNewestCacheFilePath():String{
            if (((!((this.arrayOfCacheFiles == null))) && ((this.arrayOfCacheFiles.length > 0)))){
                return (this.arrayOfCacheFiles[(this.arrayOfCacheFiles.length - 1)]);
            };
            return (null);
        }
        private function getOldestFile():String{
            if (((!((this.arrayOfCacheFiles == null))) && ((this.arrayOfCacheFiles.length > 0)))){
                return (this.arrayOfCacheFiles[0]);
            };
            return (null);
        }
        private function deleteCacheFile(filename:String, isDropped:Boolean):void{
            if (filename != null){
                if (isDropped){
                    this.updateDroppedCounter(filename);
                };
                FileUtils.deleteFile(this.core, filename);
                this.arrayOfCacheFiles.splice(this.arrayOfCacheFiles.indexOf(filename), 1);
            };
        }
        private function measurementCountIn(filename:String):Number{
            var _local2:Number = Number(this.core.getStorage().get(filename));
            if (_local2 > 0){
                return (_local2);
            };
            return (0);
        }
        private function getNewestFile():String{
            if (((!((this.arrayOfCacheFiles == null))) && ((this.arrayOfCacheFiles.length > 0)))){
                return (String(this.arrayOfCacheFiles[(this.arrayOfCacheFiles.length - 1)]));
            };
            return (null);
        }
        public function getEventCount():int{
            var _local1:int = this.measurementCountIn(this.getNewestFile());
            if (this.getListOfCacheFiles().length > 0){
                _local1 = (_local1 + ((this.getListOfCacheFiles().length - 1) * this.getCacheMaxBatchFiles()));
            };
            Log.d(TAG, ("getEventCount()=" + _local1));
            return (_local1);
        }
        public function subscribe(observer:ICacheObserver):void{
            this.observerData.push(observer);
        }
        public function unsubscribe(observer:ICacheObserver):void{
            var _local2:int = this.observerData.length;
            var _local3:int;
            while (_local3 < _local2) {
                if (observer === this.observerData[_local3]){
                    this.observerData.splice(_local3, 1);
                    break;
                };
                _local3++;
            };
        }
        private function destroyPreviousPost():void{
            this.lastPOSTFailedTime = 0;
            if (this.xmlPOST != null){
                this.xmlPOST = null;
            };
        }
        private function notifyToObserver(result:Boolean):void{
            var _local2:int = this.observerData.length;
            var _local3:int;
            while (_local3 < _local2) {
                if (this.observerData[_local3]){
                    this.observerData[_local3].onCacheFlushed(result);
                };
                _local3++;
            };
        }
        private function validateEvents(filename:String):Array{
            var _local5:Number;
            var _local2:uint;
            var _local3:Array = FileUtils.readCachedEvents(filename);
            var _local4:Boolean;
            _local2 = 0;
            while (_local2 < _local3.length) {
                _local5 = new Number(XMLBuilder.getLabelFromEvent(_local3[_local2], "ns_ts"));
                _local4 = !(this.isExpired(_local5));
                if (_local4){
                    Log.d(TAG, ("Valid timestamp found: " + _local5));
                    break;
                };
                _local2++;
            };
            if (!_local4){
                Log.d(TAG, (("All events in the file " + filename) + " are expired"));
                this.deleteCacheFile(filename, true);
                _local3 = null;
            } else {
                this.updateDroppedCounterValue(_local2);
                _local3 = _local3.slice(_local2, _local3.length);
            };
            return (_local3);
        }
        public function isEmpty():Boolean{
            return ((this.getEventCount() == 0));
        }
        public function clear():void{
            var _local1:Array = this.getListOfCacheFiles();
            var _local2:uint = _local1.length;
            while (_local2 > 0) {
                this.deleteCacheFile(_local1[(_local2 - 1)], true);
                _local2--;
            };
        }
        private function isFlushingAllowed():Boolean{
            var _local2:Number;
            var _local1:Number = (((this.minutesToRetry * 1000) * 60) - (CSDate.unixTime() - this.lastPOSTFailedTime));
            if (_local1 > 0){
                Log.d(TAG, (("Waiting " + ((_local1 / 1000) / 60)) + " minutes"));
                return (false);
            };
            if (((!(this.isEmpty())) && (!((this.core.getCustomerC2() == null))))){
                if (this.postsSentInARow >= this.maxFlushesInARow){
                    _local2 = (((this.minutesToRetry * 1000) * 60) - (CSDate.unixTime() - this.lastFlushDate));
                    if (_local2 <= 0){
                        this.postsSentInARow = 0;
                        this.lastFlushDate = 0;
                        return (true);
                    };
                    Log.d(TAG, (((("Max flushes in a row (" + this.maxFlushesInARow) + ") reached. Waiting ") + ((_local2 / 1000) / 60)) + " minutes"));
                } else {
                    return (true);
                };
            };
            return (false);
        }
        private function removeExpiredFiles():void{
            var _local4:Number;
            var _local1:Array = this.getListOfCacheFiles();
            var _local2:Boolean;
            var _local3:uint = _local1.length;
            while (_local3 > 0) {
                _local4 = this.getTimestampFromFilename(_local1[(_local3 - 1)]);
                if (!_local2){
                    _local2 = this.isExpired(_local4);
                } else {
                    Log.d(TAG, ("Deleting expired cache file " + _local1[(_local3 - 1)]));
                    this.deleteCacheFile(_local1[(_local3 - 1)], true);
                };
                _local3--;
            };
        }
        private function updateDroppedCounter(filename:String):void{
            var _local2:Storage = this.core.getStorage();
            var _local3 = 0;
            if (_local2.hasKey(filename)){
                _local3 = new Number(_local2.get(filename));
                this.updateDroppedCounterValue(_local3);
            };
        }
        private function updateDroppedCounterValue(valueToAdd:Number):void{
            var _local2:Storage = this.core.getStorage();
            if (_local2.hasKey(Constants.CACHE_DROPPED_MEASUREMENTS)){
                valueToAdd = (valueToAdd + new Number(_local2.get(Constants.CACHE_DROPPED_MEASUREMENTS)));
            };
            _local2.set(Constants.CACHE_DROPPED_MEASUREMENTS, valueToAdd.toString());
        }
        private function getTimestampFromFilename(filename:String):Number{
            var _local2:Number = new Number(filename.substring(this.cacheFilename.length));
            return (_local2);
        }
        private function isExpired(timestamp:Number):Boolean{
            var _local2:Number = CSDate.unixTime();
            var _local3:Number = (_local2 - timestamp);
            var _local4:Number = (((((this.expiryInDays * 24) * 60) * 60) * 1000) - _local3);
            return ((_local4 <= 0));
        }

    }
}//package com.comscore.utils 
﻿package com.comscore.utils {

    public interface Runnable {

        function run():void;

    }
}//package com.comscore.utils 
﻿package com.comscore.utils {
    import flash.net.*;
    import com.comscore.analytics.*;

    public class Storage {

        private static const STORE_NAME_SPACE:String = "com.comscore.";

        protected var core:Core;
        private var prefs:SharedObject;
        public var enabled:Boolean;

        public function Storage(core:Core):void{
            this.core = core;
            this.enabled = true;
            try {
                this.prefs = SharedObject.getLocal((STORE_NAME_SPACE + core.getAppName()));
            } catch(ex:Error) {
            };
        }
        private function getContents():Object{
            var _local1:Object;
            if (((this.enabled) && (!((this.prefs == null))))){
                _local1 = this.prefs.data.array;
                return (_local1);
            };
            return (null);
        }
        public function hasKey(key:String):Boolean{
            var _local2:Object = this.getContents();
            return (((_local2)!=null) ? _local2.hasOwnProperty(key) : false);
        }
        public function get(key:String):String{
            if (((this.enabled) && (this.hasKey(key)))){
                return (this.getContents()[key]);
            };
            return ("");
        }
        public function remove(key:String):void{
            var _local2:Object;
            try {
                if (((this.enabled) && (this.hasKey(key)))){
                    _local2 = this.getContents();
                    delete _local2[key];
                    this.prefs.data.array = _local2;
                    this.prefs.flush();
                };
            } catch(ex:Error) {
            };
        }
        public function clear():void{
            try {
                if (((this.enabled) && (!((this.prefs == null))))){
                    this.prefs.data.array = {};
                    this.prefs.flush();
                };
            } catch(ex:Error) {
            };
        }
        public function set(key:String, value:String):void{
            var _local3:*;
            var _local4:Object;
            try {
                if (((this.enabled) && (!((this.prefs == null))))){
                    _local3 = this.getContents();
                    _local4 = ((_local3)==null) ? new Object() : _local3;
                    _local4[key] = value;
                    this.prefs.data.array = _local4;
                    this.prefs.flush();
                };
            } catch(ex:Error) {
            };
        }
        public function add(key:String, value:Number):void{
            var _local3:Number;
            try {
                if (((this.enabled) && (!((this.prefs == null))))){
                    _local3 = new Number(this.get(key));
                    if (isNaN(_local3)){
                        _local3 = 0;
                    };
                    this.set(key, (value + _local3).toString());
                };
            } catch(ex:Error) {
            };
        }

    }
}//package com.comscore.utils 
﻿package com.comscore.utils {
    import com.comscore.analytics.*;
    import com.comscore.applications.*;
    import com.comscore.measurement.*;

    public dynamic class DispatchQueue extends Array {

        public static const MILLIS_PER_SECOND:Number = 1000;
        public static const MILLIS_PER_DAY:Number = 86400000;
        public static const DAY_CHECK_OFFSET:String = "q_dcf";
        public static const DAY_CHECK_COUNTER:String = "q_dcc";

        protected var core:Core;
        private var dispatchProperties:DispatchProperties;
        private var aggr:AggregateMeasurement;
        private var isDispatching:Boolean = false;
        protected var eventCounter:Number;
        protected var secondEventCheckOffset:Number;
        protected var secondEventCheckCounter:Number;
        protected var dayEventCheckOffset:Number;
        protected var dayEventCheckCounter:Number;

        public function DispatchQueue(core:Core){
            this.core = core;
            this.dispatchProperties = new DispatchProperties();
            this.reset();
        }
        public function getDispatchProperties():DispatchProperties{
            return (this.dispatchProperties);
        }
        protected function reset():void{
            this.eventCounter = 0;
            this.secondEventCheckCounter = 0;
            this.secondEventCheckOffset = -1;
            this.dayEventCheckCounter = 0;
            this.dayEventCheckOffset = -1;
            this.loadEventData();
        }
        protected function loadEventData():void{
            var _local2:Number;
            var _local3:Number;
            var _local1:Storage = this.core.getStorage();
            if (((_local1.hasKey(DAY_CHECK_COUNTER)) && (_local1.hasKey(DAY_CHECK_OFFSET)))){
                try {
                    _local2 = new Number(_local1.get(DAY_CHECK_COUNTER));
                    _local3 = new Number(_local1.get(DAY_CHECK_OFFSET));
                    if (CSDate.unixTime() >= _local3){
                        this.dayEventCheckCounter = _local2;
                        this.dayEventCheckOffset = _local3;
                    };
                } catch(e:Error) {
                };
            };
        }
        public function offer(measurement:Measurement):Boolean{
            return (this.enqueue(new MeasurementOp(measurement, this.core, this)));
        }
        protected function enqueue(operation:Runnable):Boolean{
            if (this.checkCounters()){
                super.push(operation);
                if (!this.isDispatching){
                    this.dispatch();
                };
                return (true);
            };
            return (false);
        }
        private function checkCounters():Boolean{
            var _local1:Storage = this.core.getStorage();
            var _local2:Number = CSDate.unixTime();
            if (_local2 < this.secondEventCheckOffset){
                this.secondEventCheckCounter = 0;
                this.secondEventCheckOffset = _local2;
                this.dayEventCheckCounter = 0;
                this.dayEventCheckOffset = _local2;
                _local1.set(DAY_CHECK_COUNTER, this.dayEventCheckCounter.toString(10));
                _local1.set(DAY_CHECK_OFFSET, this.dayEventCheckOffset.toString(10));
            } else {
                if ((_local2 - this.secondEventCheckOffset) > MILLIS_PER_SECOND){
                    this.secondEventCheckCounter = 0;
                    this.secondEventCheckOffset = _local2;
                };
                if ((_local2 - this.dayEventCheckOffset) > MILLIS_PER_DAY){
                    this.dayEventCheckCounter = 0;
                    this.dayEventCheckOffset = _local2;
                    _local1.set(DAY_CHECK_COUNTER, this.dayEventCheckCounter.toString(10));
                    _local1.set(DAY_CHECK_OFFSET, this.dayEventCheckOffset.toString(10));
                };
            };
            if ((((this.secondEventCheckCounter < Constants.EVENTS_LIMIT_PER_SECOND)) && ((this.dayEventCheckCounter < Constants.EVENTS_LIMIT_PER_DAY)))){
                this.secondEventCheckCounter++;
                this.dayEventCheckCounter++;
                _local1.set(DAY_CHECK_COUNTER, this.dayEventCheckCounter.toString(10));
                return (true);
            };
            return (false);
        }
        private function dispatch():void{
            this.isDispatching = true;
            var _local1:Runnable = super.shift();
            if (_local1){
                _local1.run();
            };
        }
        public function endDispatching():void{
            if (this.length > 0){
                this.dispatch();
            } else {
                this.isDispatching = false;
            };
        }
        public function processAggregateData(measurement:Measurement):void{
            var _local2:Array;
            var _local3:int;
            if ((measurement is AggregateMeasurement)){
                if (this.aggr == null){
                    this.aggr = AggregateMeasurement(measurement);
                    this.aggr.formatLists();
                } else {
                    this.aggr.aggregateLabels(AggregateMeasurement(measurement).getAggregateLabels());
                };
            } else {
                if (this.aggr != null){
                    _local2 = this.aggr.getAggregateLabels();
                    _local3 = 0;
                    while (_local3 < _local2.length) {
                        measurement.setLabel(Label(_local2[_local3]));
                        _local3++;
                    };
                    this.aggr = null;
                };
            };
        }
        public function processEventCounter(measurement:Measurement):void{
            this.eventCounter++;
            measurement.setLabel(new Label("ns_ap_ec", this.eventCounter.toString(), false));
        }
        public function enqueueCacheFlush():void{
            this.enqueue(new FlushOp(this.core.getOfflineCache(), this));
        }
        public function enqueueSettingChange(type:int, value:Object):void{
            this.enqueue(new SettingChangeOp(type, value, this));
        }
        public function enqueueSaveMeasurement(cache:OfflineMeasurementsCache, event:String, props:DispatchProperties):void{
            this.enqueue(new SaveMeasurementOp(cache, event, props, this));
        }

    }
}//package com.comscore.utils 
﻿package com.comscore.utils {
    import qnx.system.*;
    import qnx.display.*;

    public class Blackberry {

        public static function Pin():String{
            return (Device.device.pin);
        }
        public static function DeviceName():String{
            var _local1:String = Device.device.os.replace(" OS", "");
            if (Device.device.hardwareID){
                _local1 = ((_local1 + ";") + Device.device.hardwareID.toString(10));
            };
            return (_local1);
        }
        public static function DisplayWidth():int{
            return (Display.display.getDisplayWidth(0));
        }
        public static function DisplayHeight():int{
            return (Display.display.getDisplayHeight(0));
        }
        public static function OS():String{
            return (Device.device.scmBundle);
        }

    }
}//package com.comscore.utils 
﻿package com.comscore.utils {
    import flash.events.*;
    import flash.utils.*;
    import com.comscore.analytics.*;

    public class CacheFlusher {

        private static const TAG:String = "CacheFlusher";

        protected var timer:Timer;
        protected var core:Core;
        protected var storage:Storage;
        protected var foreground:Boolean = false;
        protected var nextFlushingTime:Number = -1;

        public function CacheFlusher(core:Core):void{
            this.core = core;
            this.storage = core.getStorage();
            this.timer = new Timer(0, 0);
            this.timer.addEventListener(TimerEvent.TIMER, this.executeFlush);
        }
        public function cancel():void{
            if (((!((this.timer == null))) && (this.timer.running))){
                this.timer.stop();
            };
        }
        public function start():void{
            this.foreground = true;
            if (((((!(this.timer.running)) && ((this.core.getCacheFlushingInterval() > 0)))) && (!((this.core.getCustomerC2() == null))))){
                this.readNextFlushTime();
                this.scheduleFlush();
            };
        }
        public function stop():void{
            this.foreground = false;
            this.cancel();
        }
        protected function scheduleFlush():void{
            var _local1:Number = CSDate.unixTime();
            var _local2:Number = (this.nextFlushingTime - _local1);
            if ((((_local2 < 0)) && ((this.nextFlushingTime > 0)))){
                this.core.flush();
                this.nextFlushingTime = 0;
            };
            if (this.nextFlushingTime <= 0){
                this.setNextFlushTime((_local1 + (this.core.getCacheFlushingInterval() * 1000)));
                _local2 = (this.nextFlushingTime - _local1);
            };
            this.timer.delay = _local2;
            this.timer.start();
        }
        private function executeFlush(event:TimerEvent):void{
            var _local2:Number = (this.core.getCacheFlushingInterval() * 1000);
            var _local3:Number = CSDate.unixTime();
            this.setNextFlushTime((_local3 + _local2));
            this.core.flush();
            if (_local2 != this.timer.delay){
                this.timer.delay = (this.nextFlushingTime - _local3);
            };
        }
        public function update():void{
            var _local1:Number = this.core.getCacheFlushingInterval();
            if ((((_local1 > 0)) && (!((this.core.getCustomerC2() == null))))){
                if (((!(this.timer.running)) && (this.foreground))){
                    this.setNextFlushTime(-1);
                    this.start();
                } else {
                    if (this.timer.running){
                        this.reset();
                    };
                };
            } else {
                this.setNextFlushTime(-1);
                this.cancel();
            };
        }
        protected function reset():void{
            this.setNextFlushTime(((this.core.getCacheFlushingInterval())>0) ? (CSDate.unixTime() + (this.core.getCacheFlushingInterval() * 1000)) : -1);
            if (this.timer.running){
                this.scheduleFlush();
            };
        }
        protected function readNextFlushTime():void{
            this.nextFlushingTime = new Number(this.storage.get(Constants.PLANNED_FLUSH_TIME));
        }
        private function setNextFlushTime(time:Number):void{
            this.nextFlushingTime = time;
            this.storage.set(Constants.PLANNED_FLUSH_TIME, this.nextFlushingTime.toString(10));
        }

    }
}//package com.comscore.utils 
﻿package com.comscore.utils {

    public class Log {

        public static function d(tag:String, msg:String):void{
            if (Constants.LOG_ENABLED){
                trace(((tag + ": ") + msg));
            };
        }
        public static function dLabels(tag:String, msg:String, labels:Object):void{
            if (Constants.LOG_ENABLED){
                trace(((((tag + ": ") + msg) + "->") + labelsToString(labels)));
            };
        }
        public static function e(tag:String, msg:String):void{
            if (Constants.LOG_ENABLED){
                trace(((tag + ": ") + msg));
            };
        }
        private static function labelsToString(labelArray:Object):String{
            var _local3:String;
            var _local2:String = "";
            if (labelArray != null){
                for (_local3 in labelArray) {
                    _local2 = (_local2 + (((_local3 + "=") + labelArray[_local3]) + " "));
                };
            };
            return (_local2);
        }

    }
}//package com.comscore.utils 
﻿package com.adobe.crypto {
    import flash.utils.*;
    import mx.utils.*;
    import com.adobe.utils.*;

    public class SHA1 {

        private static function hashBlocks(blocks:Array):ByteArray{
            var _local2:int;
            var _local3:int;
            var _local4:int;
            var _local5:int;
            var _local6:int;
            var _local7:int;
            var _local8:Array;
            var _local9:int;
            var _local10:ByteArray;
            var _local11:int;
            var _local12:int;
            var _local13:int;
            var _local14:int;
            var _local15:int;
            var _local16:int;
            var _local17:int;
            _local2 = 1732584193;
            _local3 = 4023233417;
            _local4 = 2562383102;
            _local5 = 271733878;
            _local6 = 3285377520;
            _local7 = blocks.length;
            _local8 = new Array(80);
            _local9 = 0;
            while (_local9 < _local7) {
                _local11 = _local2;
                _local12 = _local3;
                _local13 = _local4;
                _local14 = _local5;
                _local15 = _local6;
                _local16 = 0;
                while (_local16 < 80) {
                    if (_local16 < 16){
                        _local8[_local16] = blocks[(_local9 + _local16)];
                    } else {
                        _local8[_local16] = IntUtil.rol((((_local8[(_local16 - 3)] ^ _local8[(_local16 - 8)]) ^ _local8[(_local16 - 14)]) ^ _local8[(_local16 - 16)]), 1);
                    };
                    _local17 = ((((IntUtil.rol(_local11, 5) + f(_local16, _local12, _local13, _local14)) + _local15) + int(_local8[_local16])) + k(_local16));
                    _local15 = _local14;
                    _local14 = _local13;
                    _local13 = IntUtil.rol(_local12, 30);
                    _local12 = _local11;
                    _local11 = _local17;
                    _local16++;
                };
                _local2 = (_local2 + _local11);
                _local3 = (_local3 + _local12);
                _local4 = (_local4 + _local13);
                _local5 = (_local5 + _local14);
                _local6 = (_local6 + _local15);
                _local9 = (_local9 + 16);
            };
            _local10 = new ByteArray();
            _local10.writeInt(_local2);
            _local10.writeInt(_local3);
            _local10.writeInt(_local4);
            _local10.writeInt(_local5);
            _local10.writeInt(_local6);
            _local10.position = 0;
            return (_local10);
        }
        private static function createBlocksFromByteArray(data:ByteArray):Array{
            var _local2:int;
            var _local3:Array;
            var _local4:int;
            var _local5:int;
            var _local6:int;
            _local2 = data.position;
            data.position = 0;
            _local3 = new Array();
            _local4 = (data.length * 8);
            _local5 = 0xFF;
            _local6 = 0;
            while (_local6 < _local4) {
                _local3[(_local6 >> 5)] = (_local3[(_local6 >> 5)] | ((data.readByte() & _local5) << (24 - (_local6 % 32))));
                _local6 = (_local6 + 8);
            };
            _local3[(_local4 >> 5)] = (_local3[(_local4 >> 5)] | (128 << (24 - (_local4 % 32))));
            _local3[((((_local4 + 64) >> 9) << 4) + 15)] = _local4;
            data.position = _local2;
            return (_local3);
        }
        private static function f(t:int, b:int, c:int, d:int):int{
            if (t < 20){
                return (((b & c) | (~(b) & d)));
            };
            if (t < 40){
                return (((b ^ c) ^ d));
            };
            if (t < 60){
                return ((((b & c) | (b & d)) | (c & d)));
            };
            return (((b ^ c) ^ d));
        }
        public static function hashToBase64(s:String):String{
            var _local2:Array;
            var _local3:ByteArray;
            var _local4:String;
            var _local5:int;
            var _local6:Base64Encoder;
            var _local7:uint;
            _local2 = SHA1.createBlocksFromString(s);
            _local3 = hashBlocks(_local2);
            _local4 = "";
            _local3.position = 0;
            _local5 = 0;
            while (_local5 < _local3.length) {
                _local7 = _local3.readUnsignedByte();
                _local4 = (_local4 + String.fromCharCode(_local7));
                _local5++;
            };
            _local6 = new Base64Encoder();
            _local6.encode(_local4);
            return (_local6.flush());
        }
        private static function k(t:int):int{
            if (t < 20){
                return (1518500249);
            };
            if (t < 40){
                return (1859775393);
            };
            if (t < 60){
                return (2400959708);
            };
            return (3395469782);
        }
        private static function createBlocksFromString(s:String):Array{
            var _local2:Array;
            var _local3:int;
            var _local4:int;
            var _local5:int;
            _local2 = new Array();
            _local3 = (s.length * 8);
            _local4 = 0xFF;
            _local5 = 0;
            while (_local5 < _local3) {
                _local2[(_local5 >> 5)] = (_local2[(_local5 >> 5)] | ((s.charCodeAt((_local5 / 8)) & _local4) << (24 - (_local5 % 32))));
                _local5 = (_local5 + 8);
            };
            _local2[(_local3 >> 5)] = (_local2[(_local3 >> 5)] | (128 << (24 - (_local3 % 32))));
            _local2[((((_local3 + 64) >> 9) << 4) + 15)] = _local3;
            return (_local2);
        }
        public static function hashBytes(data:ByteArray):String{
            var _local2:Array;
            var _local3:ByteArray;
            _local2 = SHA1.createBlocksFromByteArray(data);
            _local3 = hashBlocks(_local2);
            return (((((IntUtil.toHex(_local3.readInt(), true) + IntUtil.toHex(_local3.readInt(), true)) + IntUtil.toHex(_local3.readInt(), true)) + IntUtil.toHex(_local3.readInt(), true)) + IntUtil.toHex(_local3.readInt(), true)));
        }
        public static function hash(s:String):String{
            var _local2:Array;
            var _local3:ByteArray;
            _local2 = createBlocksFromString(s);
            _local3 = hashBlocks(_local2);
            return (((((IntUtil.toHex(_local3.readInt(), true) + IntUtil.toHex(_local3.readInt(), true)) + IntUtil.toHex(_local3.readInt(), true)) + IntUtil.toHex(_local3.readInt(), true)) + IntUtil.toHex(_local3.readInt(), true)));
        }

    }
}//package com.adobe.crypto 
﻿package com.adobe.cc {

    public class CCType {

        public static const CEA708:String = "CEA708";

    }
}//package com.adobe.cc 
﻿package com.adobe.cc {
    import flash.display.*;
    import flash.geom.*;
    import com.adobe.cc.cea608.*;

    public class CCDecoderImpl {

        private var _type:String;
        private var _608Renderer:DisplayObjectCaptionRenderer;
        private var _608Decoder:Decoder;
        private var _enabled:Boolean;
        private var _font:String;
        private var _defaultFont:String;

        public function CCDecoderImpl(){
            this._608Decoder = new Decoder();
            this._608Renderer = new DisplayObjectCaptionRenderer(this._608Decoder);
            this._defaultFont = this._608Renderer.font;
            this._enabled = true;
            this._608Decoder.addEventListener(DecoderActiveServiceEvent.NEW_CC_SERVICE_ACTIVE, this.onServiceActive);
        }
        public function get type():String{
            return (this._type);
        }
        public function set type(value:String):void{
            if (((!((value == null))) && (!((value == CCType.CEA708))))){
                throw (new ArgumentError("Unsupported caption type."));
            };
            if (this._type == value){
                return;
            };
            this.reset();
            this._type = value;
            this.reset();
        }
        public function get enabled():Boolean{
            return (this._enabled);
        }
        public function set enabled(value:Boolean):void{
            if (this._enabled == value){
                return;
            };
            this._enabled = value;
            this.reset();
        }
        public function get service():String{
            if (this._type == null){
                return (null);
            };
            return (this._608Decoder.service);
        }
        public function set service(value:String):void{
            if (this._type == null){
                if (value != null){
                    throw (new ArgumentError());
                };
            } else {
                this._608Decoder.service = value;
            };
        }
        public function get defaultFont():String{
            return (this._defaultFont);
        }
        public function set defaultFont(value:String):void{
            if (!value){
                throw (new ArgumentError());
            };
            this._defaultFont = value;
        }
        public function get font():String{
            return (this._font);
        }
        public function set font(value:String):void{
            this._font = value;
            this._608Renderer.font = ((this._font) ? this._font : this._defaultFont);
        }
        public function get textColor():int{
            return (this._608Renderer.textColor);
        }
        public function set textColor(value:int):void{
            this._608Renderer.textColor = value;
        }
        public function get backgroundColor():int{
            return (this._608Renderer.backgroundColor);
        }
        public function set backgroundColor(value:int):void{
            this._608Renderer.backgroundColor = value;
        }
        public function get textOpacity():Number{
            return (this._608Renderer.textOpacity);
        }
        public function set textOpacity(value:Number):void{
            this._608Renderer.textOpacity = value;
        }
        public function get backgroundOpacity():Number{
            return (this._608Renderer.backgroundOpacity);
        }
        public function set backgroundOpacity(value:Number):void{
            this._608Renderer.backgroundOpacity = value;
        }
        public function get edgeType():String{
            return (this._608Renderer.edgeType);
        }
        public function set edgeType(value:String):void{
            this._608Renderer.edgeType = value;
        }
        public function get edgeColor():int{
            return (this._608Renderer.edgeColor);
        }
        public function set edgeColor(value:int):void{
            this._608Renderer.edgeColor = value;
        }
        public function reset():void{
            if (this._type == CCType.CEA708){
                this._608Decoder.reset();
            };
        }
        public function isServiceActive(service:String):Boolean{
            return (this._608Decoder.isServiceActive(service));
        }
        protected function clearActiveServiceList():void{
            this._608Decoder.clearActiveServiceList();
        }
        protected function getDisplayObjectImpl():DisplayObject{
            return (this._608Renderer.displayObject);
        }
        protected function getVideoBoundsImpl():Rectangle{
            return (this._608Renderer.videoBounds);
        }
        protected function setVideoBoundsImpl(value:Rectangle):void{
            if (!value){
                throw (new ArgumentError());
            };
            this._608Renderer.videoBounds = value;
        }
        protected function onCaptionInfoImpl(o):void{
            if (((!(this._enabled)) || (!((this._type == CCType.CEA708))))){
                return;
            };
            if (!o){
                return;
            };
            var _local2:String = (o["type"] as String);
            var _local3:String = (o["data"] as String);
            if (((!(_local2)) || (!(_local3)))){
                return;
            };
            if (((!(_local2)) || (!((_local2 == "708"))))){
                return;
            };
            if (!_local3){
                return;
            };
            this._608Decoder.decodeOnCaptionInfoData(_local3);
        }
        public function get enableRollUpAnimations():Boolean{
            return (this._608Renderer.enableRollUpAnimations);
        }
        public function set enableRollUpAnimations(value:Boolean):void{
            this._608Renderer.enableRollUpAnimations = value;
        }
        public function get safeAreaHeightPercent():Number{
            return (this._608Renderer.safeAreaHeightPercent);
        }
        public function set safeAreaHeightPercent(value:Number):void{
            this._608Renderer.safeAreaHeightPercent = value;
        }
        public function get fontSize():Number{
            return (this._608Renderer.overrideFontSize);
        }
        public function set fontSize(value:Number):void{
            this._608Renderer.overrideFontSize = value;
        }
        private function onServiceActive(event:DecoderActiveServiceEvent):void{
            this.activateService(event.activeService);
        }
        protected function activateService(activeService:String):void{
        }

    }
}//package com.adobe.cc 
﻿package com.adobe.cc {

    public final class CEA708Service {

        public static const CC1:String = "CC1";
        public static const CC2:String = "CC2";
        public static const CC3:String = "CC3";
        public static const CC4:String = "CC4";

    }
}//package com.adobe.cc 
﻿package com.adobe.cc.cea608 {
    import flash.display.*;
    import flash.geom.*;
    import flash.text.*;

    public class DisplayCell {

        private var _renderer:DisplayObjectCaptionRenderer;
        private var _isEnhancedLegibility:Boolean;
        private var _drawnEnhancedLegibility:Boolean;
        private var _drawnGridCell:Cell;
        private var _gridCell:Cell;
        private var _foregroundSprite:Sprite;
        private var _backgroundSprite:Sprite;
        private var _textSprite:Sprite;
        private var _textField:TextField;

        public function DisplayCell(renderer:DisplayObjectCaptionRenderer){
            this._renderer = renderer;
            this._foregroundSprite = new Sprite();
            this._backgroundSprite = new Sprite();
            this._textSprite = new Sprite();
            this._textField = new TextField();
            this._textSprite.addChild(this._textField);
            this._foregroundSprite.visible = false;
            this._backgroundSprite.visible = false;
            this._textField.visible = false;
        }
        public function get foregroundSprite():Sprite{
            return (this._foregroundSprite);
        }
        public function get backgroundSprite():Sprite{
            return (this._backgroundSprite);
        }
        public function get textSprite():Sprite{
            return (this._textSprite);
        }
        public function get isEnhancedLegibility():Boolean{
            return (this._isEnhancedLegibility);
        }
        public function set isEnhancedLegibility(value:Boolean):void{
            this._isEnhancedLegibility = value;
        }
        public function get gridCell():Cell{
            return (this._gridCell);
        }
        public function set gridCell(value:Cell):void{
            this._gridCell = value;
        }
        public function get changed():Boolean{
            if (this._isEnhancedLegibility != this._drawnEnhancedLegibility){
                return (true);
            };
            if (this._gridCell == this._drawnGridCell){
                return (false);
            };
            if (((!(this._gridCell)) || (!(this._drawnGridCell)))){
                return (true);
            };
            return (((((((((((!((this._gridCell.character == this._drawnGridCell.character))) || (!((this._gridCell.color == this._drawnGridCell.color))))) || (!((this._gridCell.backgroundColor == this._drawnGridCell.backgroundColor))))) || (!((this._gridCell.backgroundOpacity == this._drawnGridCell.backgroundOpacity))))) || (!((this._gridCell.italicized == this._drawnGridCell.italicized))))) || (!((this._gridCell.underlined == this._drawnGridCell.underlined)))));
        }
        public function get isTransparent():Boolean{
            return (((!(this._gridCell)) || ((this._gridCell.character == Line21Character.TRANSPARENT_SPACE))));
        }
        public function redraw():void{
            var _local1:RendererCustomizations;
            var _local2:RendererMetrics;
            var _local3:Point;
            var _local4:int;
            var _local5:Number;
            var _local6:Number;
            var _local7:TextFormat;
            var _local8:int;
            var _local9:TextLineMetrics;
            var _local10:String;
            if (this.isTransparent){
                this._foregroundSprite.visible = false;
                this._backgroundSprite.visible = false;
                this._textField.visible = false;
            } else {
                this._backgroundSprite.visible = true;
                _local1 = this._renderer.customizations;
                _local2 = this._renderer.metrics;
                _local3 = _local2.cellSize;
                _local4 = ((_local1.backgroundColor)!=-1) ? _local1.backgroundColor : this._gridCell.backgroundColor;
                _local5 = ((_local1.backgroundOpacity)!=-1) ? _local1.backgroundOpacity : this._gridCell.backgroundOpacity;
                this._backgroundSprite.graphics.clear();
                this._backgroundSprite.graphics.lineStyle();
                this._backgroundSprite.graphics.beginFill(_local4, _local5);
                this._backgroundSprite.graphics.drawRect(0, 0, _local3.x, _local3.y);
                this._backgroundSprite.graphics.endFill();
                if (this._isEnhancedLegibility){
                    this._textField.visible = false;
                    this._foregroundSprite.visible = false;
                } else {
                    this._textField.visible = true;
                    this._foregroundSprite.visible = true;
                    this._textField.wordWrap = false;
                    this._textField.selectable = false;
                    this._textField.antiAliasType = AntiAliasType.ADVANCED;
                    this._textField.autoSize = TextFieldAutoSize.NONE;
                    _local6 = ((_local1.textOpacity)!=-1) ? _local1.textOpacity : 1;
                    this._textField.alpha = _local6;
                    _local7 = new TextFormat();
                    _local7.font = _local1.font;
                    _local7.size = _local2.fontSize;
                    _local7.italic = this._gridCell.italicized;
                    _local8 = ((_local1.textColor)!=-1) ? _local1.textColor : this._gridCell.color;
                    _local7.color = _local8;
                    _local7.align = TextFormatAlign.LEFT;
                    this._textField.antiAliasType = AntiAliasType.ADVANCED;
                    this._textField.defaultTextFormat = _local7;
                    this._textField.gridFitType = GridFitType.NONE;
                    if (_local7.italic){
                        _local10 = "    ";
                        this._textField.text = ((_local10 + this._gridCell.character) + _local10);
                    } else {
                        this._textField.text = this._gridCell.character;
                    };
                    _local9 = this._textField.getLineMetrics(0);
                    this._textField.x = (((-(_local9.width) / 2) + (_local3.x / 2)) - 2);
                    this._textField.y = _local2.centeringOffset;
                    this._textField.height = (_local9.height * 2);
                    this._foregroundSprite.graphics.clear();
                    if (this._gridCell.underlined){
                        this._foregroundSprite.graphics.lineStyle(0.5, _local8, _local6);
                        this._foregroundSprite.graphics.beginFill(_local8);
                        this._foregroundSprite.graphics.moveTo(0, _local2.underlineOffset);
                        this._foregroundSprite.graphics.lineTo((_local3.x + 0.5), _local2.underlineOffset);
                        this._foregroundSprite.graphics.endFill();
                    };
                };
            };
            this._drawnEnhancedLegibility = this._isEnhancedLegibility;
            this._drawnGridCell = this._gridCell;
        }

    }
}//package com.adobe.cc.cea608 
﻿package com.adobe.cc.cea608 {
    import com.adobe.cc.cea608.*;

    final class PreambleAddressCode {

        protected var _row:int;
        protected var _indent:int;
        protected var _color:int;
        protected var _underlined:Boolean;
        protected var _italicized:Boolean;

        public function PreambleAddressCode(row:int, indent:int, color:int, underlined:Boolean, italicized:Boolean){
            this._row = row;
            this._indent = indent;
            this._color = color;
            this._underlined = underlined;
            this._italicized = italicized;
        }
        public static function fromCode(bytePair:BytePair):Array{
            var _local4:int;
            var _local9:Boolean;
            var _local10:int;
            var _local2:uint = bytePair.one;
            var _local3:uint = bytePair.two;
            if ((((16 <= _local2)) && ((_local2 <= 23)))){
                _local4 = 1;
            } else {
                if ((((24 <= _local2)) && ((_local2 <= 31)))){
                    _local4 = 2;
                } else {
                    return (null);
                };
            };
            var _local5 = -1;
            var _local6:Boolean;
            var _local7:Boolean;
            var _local8:int;
            switch (_local3){
                case 64:
                case 96:
                case 80:
                case 112:
                    _local5 = ForegroundColor.WHITE;
                    break;
                case 65:
                case 97:
                case 81:
                case 113:
                    _local5 = ForegroundColor.WHITE;
                    _local6 = true;
                    break;
                case 66:
                case 98:
                    _local5 = ForegroundColor.GREEN;
                    break;
                case 67:
                case 99:
                    _local5 = ForegroundColor.GREEN;
                    _local6 = true;
                    break;
                case 68:
                case 100:
                    _local5 = ForegroundColor.BLUE;
                    break;
                case 69:
                case 101:
                    _local5 = ForegroundColor.BLUE;
                    _local6 = true;
                    break;
                case 70:
                case 102:
                    _local5 = ForegroundColor.CYAN;
                    break;
                case 71:
                case 103:
                    _local5 = ForegroundColor.CYAN;
                    _local6 = true;
                    break;
                case 72:
                case 104:
                    _local5 = ForegroundColor.RED;
                    break;
                case 73:
                case 105:
                    _local5 = ForegroundColor.RED;
                    _local6 = true;
                    break;
                case 74:
                case 106:
                    _local5 = ForegroundColor.YELLOW;
                    break;
                case 75:
                case 107:
                    _local5 = ForegroundColor.YELLOW;
                    _local6 = true;
                    break;
                case 76:
                case 108:
                    _local5 = ForegroundColor.MAGENTA;
                    break;
                case 77:
                case 109:
                    _local5 = ForegroundColor.MAGENTA;
                    _local6 = true;
                    break;
                case 78:
                case 110:
                    _local5 = ForegroundColor.WHITE;
                    _local7 = true;
                    break;
                case 79:
                case 111:
                    _local5 = ForegroundColor.WHITE;
                    _local7 = true;
                    _local6 = true;
                    break;
                case 82:
                case 114:
                    _local5 = ForegroundColor.WHITE;
                    _local8 = 4;
                    break;
                case 83:
                case 115:
                    _local5 = ForegroundColor.WHITE;
                    _local8 = 4;
                    _local6 = true;
                    break;
                case 84:
                case 116:
                    _local5 = ForegroundColor.WHITE;
                    _local8 = 8;
                    break;
                case 85:
                case 117:
                    _local5 = ForegroundColor.WHITE;
                    _local8 = 8;
                    _local6 = true;
                    break;
                case 86:
                case 118:
                    _local5 = ForegroundColor.WHITE;
                    _local8 = 12;
                    break;
                case 87:
                case 119:
                    _local5 = ForegroundColor.WHITE;
                    _local8 = 12;
                    _local6 = true;
                    break;
                case 88:
                case 120:
                    _local5 = ForegroundColor.WHITE;
                    _local8 = 16;
                    break;
                case 89:
                case 121:
                    _local5 = ForegroundColor.WHITE;
                    _local8 = 16;
                    _local6 = true;
                    break;
                case 90:
                case 122:
                    _local5 = ForegroundColor.WHITE;
                    _local8 = 20;
                    break;
                case 91:
                case 123:
                    _local5 = ForegroundColor.WHITE;
                    _local8 = 20;
                    _local6 = true;
                    break;
                case 92:
                case 124:
                    _local5 = ForegroundColor.WHITE;
                    _local8 = 24;
                    break;
                case 93:
                case 125:
                    _local5 = ForegroundColor.WHITE;
                    _local8 = 24;
                    _local6 = true;
                    break;
                case 94:
                case 126:
                    _local5 = ForegroundColor.WHITE;
                    _local8 = 28;
                    break;
                case 95:
                case 127:
                    _local5 = ForegroundColor.WHITE;
                    _local8 = 28;
                    _local6 = true;
                    break;
            };
            if (_local5 != -1){
                _local9 = (_local3 < 96);
                _local10 = -1;
                switch (_local2){
                    case 17:
                    case 25:
                        _local10 = ((_local9) ? 1 : 2);
                        break;
                    case 18:
                    case 26:
                        _local10 = ((_local9) ? 3 : 4);
                        break;
                    case 21:
                    case 29:
                        _local10 = ((_local9) ? 5 : 6);
                        break;
                    case 22:
                    case 30:
                        _local10 = ((_local9) ? 7 : 8);
                        break;
                    case 23:
                    case 31:
                        _local10 = ((_local9) ? 9 : 10);
                        break;
                    case 16:
                    case 24:
                        _local10 = 11;
                        break;
                    case 19:
                    case 27:
                        _local10 = ((_local9) ? 12 : 13);
                        break;
                    case 20:
                    case 28:
                        _local10 = ((_local9) ? 14 : 15);
                        break;
                };
                return ([_local4, new PreambleAddressCode(_local10, _local8, _local5, _local6, _local7)]);
            };
            return (null);
        }

        public function get row():int{
            return (this._row);
        }
        public function get indent():int{
            return (this._indent);
        }
        public function get color():int{
            return (this._color);
        }
        public function get underlined():Boolean{
            return (this._underlined);
        }
        public function get italicized():Boolean{
            return (this._italicized);
        }
        public function toString():String{
            return ((((((((((("[PreambleAddressCode row:" + this._row) + ", indent:") + this._indent) + ", color:") + this._color.toString(16)) + ", underlined:") + this._underlined) + ", italicized:") + this._italicized) + "]"));
        }

    }
}//package com.adobe.cc.cea608 
﻿package com.adobe.cc.cea608 {
    import com.adobe.cc.cea608.*;

    final class BackgroundAttributeCode {

        public static const WHITE_OPAQUE:BackgroundAttributeCode = new BackgroundAttributeCode(ForegroundColor.WHITE, 1);
;
        public static const WHITE_SEMI_TRANSPARENT:BackgroundAttributeCode = new BackgroundAttributeCode(ForegroundColor.WHITE, SEMI_TRANSPARENT_ALPHA);
;
        public static const GREEN_OPAQUE:BackgroundAttributeCode = new BackgroundAttributeCode(ForegroundColor.GREEN, 1);
;
        public static const GREEN_SEMI_TRANSPARENT:BackgroundAttributeCode = new BackgroundAttributeCode(ForegroundColor.GREEN, SEMI_TRANSPARENT_ALPHA);
;
        public static const BLUE_OPAQUE:BackgroundAttributeCode = new BackgroundAttributeCode(ForegroundColor.BLUE, 1);
;
        public static const BLUE_SEMI_TRANSPARENT:BackgroundAttributeCode = new BackgroundAttributeCode(ForegroundColor.BLUE, SEMI_TRANSPARENT_ALPHA);
;
        public static const CYAN_OPAQUE:BackgroundAttributeCode = new BackgroundAttributeCode(ForegroundColor.CYAN, 1);
;
        public static const CYAN_SEMI_TRANSPARENT:BackgroundAttributeCode = new BackgroundAttributeCode(ForegroundColor.CYAN, SEMI_TRANSPARENT_ALPHA);
;
        public static const RED_OPAQUE:BackgroundAttributeCode = new BackgroundAttributeCode(ForegroundColor.RED, 1);
;
        public static const RED_SEMI_TRANSPARENT:BackgroundAttributeCode = new BackgroundAttributeCode(ForegroundColor.RED, SEMI_TRANSPARENT_ALPHA);
;
        public static const YELLOW_OPAQUE:BackgroundAttributeCode = new BackgroundAttributeCode(ForegroundColor.YELLOW, 1);
;
        public static const YELLOW_SEMI_TRANSPARENT:BackgroundAttributeCode = new BackgroundAttributeCode(ForegroundColor.YELLOW, SEMI_TRANSPARENT_ALPHA);
;
        public static const MAGENTA_OPAQUE:BackgroundAttributeCode = new BackgroundAttributeCode(ForegroundColor.MAGENTA, 1);
;
        public static const MAGENTA_SEMI_TRANSPARENT:BackgroundAttributeCode = new BackgroundAttributeCode(ForegroundColor.MAGENTA, SEMI_TRANSPARENT_ALPHA);
;
        public static const BLACK_OPAQUE:BackgroundAttributeCode = new BackgroundAttributeCode(ForegroundColor.BLACK, 1);
;
        public static const BLACK_SEMI_TRANSPARENT:BackgroundAttributeCode = new BackgroundAttributeCode(ForegroundColor.BLACK, SEMI_TRANSPARENT_ALPHA);
;
        public static const TRANSPARENT:BackgroundAttributeCode = new BackgroundAttributeCode(ForegroundColor.BLACK, 0);
;
        private static const SEMI_TRANSPARENT_ALPHA:Number = 0.5;

        private var _color:int;
        private var _opacity:Number;

        public function BackgroundAttributeCode(color:int, opacity:Number){
            this._color = color;
            this._opacity = opacity;
        }
        public static function fromCode(bytePair:BytePair):Array{
            var _local4:int;
            var _local2:uint = bytePair.one;
            var _local3:uint = bytePair.two;
            switch (_local2){
                case 16:
                case 23:
                    _local4 = 1;
                    break;
                case 24:
                case 31:
                    _local4 = 2;
                    break;
                    return (null);
            };
            if ((((_local2 == 16)) || ((_local2 == 24)))){
                switch (_local3){
                    case 32:
                        return ([_local4, WHITE_OPAQUE]);
                    case 33:
                        return ([_local4, WHITE_SEMI_TRANSPARENT]);
                    case 34:
                        return ([_local4, GREEN_OPAQUE]);
                    case 35:
                        return ([_local4, GREEN_SEMI_TRANSPARENT]);
                    case 36:
                        return ([_local4, BLUE_OPAQUE]);
                    case 37:
                        return ([_local4, BLUE_SEMI_TRANSPARENT]);
                    case 38:
                        return ([_local4, CYAN_OPAQUE]);
                    case 39:
                        return ([_local4, CYAN_SEMI_TRANSPARENT]);
                    case 40:
                        return ([_local4, RED_OPAQUE]);
                    case 41:
                        return ([_local4, RED_SEMI_TRANSPARENT]);
                    case 42:
                        return ([_local4, YELLOW_OPAQUE]);
                    case 43:
                        return ([_local4, YELLOW_SEMI_TRANSPARENT]);
                    case 44:
                        return ([_local4, MAGENTA_OPAQUE]);
                    case 45:
                        return ([_local4, MAGENTA_SEMI_TRANSPARENT]);
                    case 46:
                        return ([_local4, BLACK_OPAQUE]);
                    case 47:
                        return ([_local4, BLACK_SEMI_TRANSPARENT]);
                        return (null);
                };
            };
            if (_local3 == 45){
                return ([_local4, TRANSPARENT]);
            };
            return (null);
        }

        public function get color():int{
            return (this._color);
        }
        public function get opacity():Number{
            return (this._opacity);
        }
        public function toString():String{
            return ((((("[BackgroundAttributeCode color:" + this._color.toString(16)) + ", opacity:") + this._opacity) + "]"));
        }

    }
}//package com.adobe.cc.cea608 
﻿package com.adobe.cc.cea608 {
    import flash.events.*;
    import flash.geom.*;
    import flash.text.*;

    public class RendererMetrics extends EventDispatcher {

        private var _changeNumber:uint;
        private var _videoBounds:Rectangle;
        private var _cellSize:Point;
        private var _topLeftCellPosition:Point;
        private var _underlineOffset:Number;
        private var _centeringOffset:Number;
        private var _fontSize:Number;
        private var _lastVideoBounds:Rectangle;
        private var _lastFont:String;
        private var _lastSafeAreaHeightPercent:Number;
        private var _lastOverrideFontSize:Number;
        private var _customizations:RendererCustomizations;
        private var _safeAreaHeightPercent:Number;
        private var _overrideFontSize:Number;

        public function RendererMetrics(){
            this._videoBounds = new Rectangle();
            this._lastVideoBounds = new Rectangle(Number.NaN, Number.NaN, Number.NaN, Number.NaN);
            this._cellSize = new Point();
            this._topLeftCellPosition = new Point();
            this._safeAreaHeightPercent = -1;
            this._lastSafeAreaHeightPercent = -1;
            this._overrideFontSize = -1;
            this.recompute();
        }
        private static function isReasonableNumber(value:Number):Boolean{
            return (((((((!(isNaN(value))) && (isFinite(value)))) && ((-1000000 <= value)))) && ((value <= 1000000))));
        }
        private static function isReasonablePoint(value:Point):Boolean{
            return (((isReasonableNumber(value.x)) && (isReasonableNumber(value.y))));
        }
        private static function isReasonableRectangle(value:Rectangle):Boolean{
            var value:* = value;
            return ([value.topLeft, value.bottomRight, value.size].every(function (p:Point, ... _args):Boolean{
                return (isReasonablePoint(p));
            }));
        }

        public function get videoBounds():Rectangle{
            return (this._videoBounds.clone());
        }
        public function set videoBounds(value:Rectangle):void{
            if (!value){
                throw (new ArgumentError());
            };
            this._videoBounds = value.clone();
            this.recompute();
        }
        public function get safeAreaHeightPercent():Number{
            return (this._safeAreaHeightPercent);
        }
        public function set safeAreaHeightPercent(value:Number):void{
            if (((((!((value == -1))) && ((value < 0)))) || (!(isReasonableNumber(value))))){
                throw (new ArgumentError(("Invalid safe area height percent value: " + value)));
            };
            if (value == this._safeAreaHeightPercent){
                return;
            };
            this._safeAreaHeightPercent = value;
            this.recompute();
        }
        public function get overrideFontSize():Number{
            return (this._overrideFontSize);
        }
        public function set overrideFontSize(value:Number):void{
            if (((((!((value == -1))) && ((value <= 0)))) || (!(isReasonableNumber(value))))){
                throw (new ArgumentError(("Invalid font size value: " + value)));
            };
            if (value == this._overrideFontSize){
                return;
            };
            this._overrideFontSize = value;
            this.recompute();
        }
        public function get customizations():RendererCustomizations{
            return (this._customizations);
        }
        public function set customizations(value:RendererCustomizations):void{
            if (this._customizations){
                this._customizations.removeEventListener(Event.CHANGE, this.onCustomizationsChanged);
            };
            this._customizations = value;
            if (this._customizations){
                this._customizations.addEventListener(Event.CHANGE, this.onCustomizationsChanged);
            };
            this.recompute();
        }
        public function get cellSize():Point{
            return (this._cellSize.clone());
        }
        public function get underlineOffset():Number{
            return (this._underlineOffset);
        }
        public function get centeringOffset():Number{
            return (this._centeringOffset);
        }
        public function get fontSize():Number{
            return (this._fontSize);
        }
        public function get changeNumber():uint{
            return (this._changeNumber);
        }
        public function getCellX(col:int):Number{
            return ((((col - 1) * this._cellSize.x) + this._topLeftCellPosition.x));
        }
        public function getCellY(row:int):Number{
            return ((((row - 1) * this._cellSize.y) + this._topLeftCellPosition.y));
        }
        public function getCellPosition(col:int, row:int):Point{
            return (new Point(this.getCellX(col), this.getCellY(row)));
        }
        public function getCellBounds(col:int, row:int):Rectangle{
            return (new Rectangle(this.getCellX(col), this.getCellY(row), this._cellSize.x, this._cellSize.y));
        }
        public function getCellRegionBounds(col1:int, row1:int, col2:int, row2:int):Rectangle{
            var _local5:Rectangle = this.getCellBounds(col1, row1);
            var _local6:Rectangle = this.getCellBounds(col2, row2);
            var _local7:Number = Math.min(_local5.left, _local6.left);
            var _local8:Number = Math.min(_local5.top, _local6.top);
            var _local9:Number = Math.max(_local5.right, _local6.right);
            var _local10:Number = Math.max(_local5.bottom, _local6.bottom);
            return (new Rectangle(_local7, _local8, (_local9 - _local7), (_local10 - _local8)));
        }
        private function onCustomizationsChanged(event:Event):void{
            this.recompute();
        }
        private function recompute():void{
            if (((((((((this._videoBounds.equals(this._lastVideoBounds)) && (this._customizations))) && ((this._customizations.font == this._lastFont)))) && ((this._safeAreaHeightPercent == this._lastSafeAreaHeightPercent)))) && ((this._overrideFontSize == this._lastOverrideFontSize)))){
                return;
            };
            this._lastVideoBounds = this._videoBounds.clone();
            this._lastFont = ((this._customizations) ? this._customizations.font : null);
            this._lastSafeAreaHeightPercent = this._safeAreaHeightPercent;
            this._lastOverrideFontSize = this._overrideFontSize;
            this._changeNumber++;
            this.recomputeCellMetrics();
            this.recomputeFontSize();
            this.sanitize();
            dispatchEvent(new Event(Event.CHANGE));
        }
        private function recomputeCellMetrics():void{
            var _local1:Number = (4 / 3);
            var _local2 = 0.8;
            if (this._safeAreaHeightPercent != -1){
                _local2 = this._safeAreaHeightPercent;
            };
            if (_local2 > 1){
                _local2 = 1;
            };
            if (this._overrideFontSize != -1){
                _local2 = (this._overrideFontSize * _local2);
                if (_local2 > 1){
                    _local2 = 1;
                };
            };
            var _local3:Number = (this._videoBounds.height * _local2);
            var _local4:Number = (_local3 * _local1);
            var _local5:int = Decoder.ROW_COUNT;
            var _local6:int = Decoder.COL_COUNT;
            this._cellSize.y = Math.floor((_local3 / _local5));
            this._cellSize.x = Math.floor((_local4 / _local6));
            this._topLeftCellPosition.x = Math.round(((this._videoBounds.x + (this._videoBounds.width / 2)) - ((this._cellSize.x * _local6) / 2)));
            this._topLeftCellPosition.y = Math.round(((this._videoBounds.y + (this._videoBounds.height / 2)) - ((this._cellSize.y * _local5) / 2)));
        }
        private function recomputeFontSize():void{
            var _local6:TextLineMetrics;
            this._fontSize = 1;
            this._underlineOffset = 0;
            this._centeringOffset = 0;
            if (!this._customizations){
                return;
            };
            var _local1:TextField = new TextField();
            _local1.text = "M";
            _local1.wordWrap = false;
            _local1.antiAliasType = AntiAliasType.ADVANCED;
            _local1.gridFitType = GridFitType.NONE;
            var _local2:TextFormat = new TextFormat();
            _local2.font = this._customizations.font;
            _local2.align = TextFormatAlign.LEFT;
            var _local3:Number = Math.max(this._cellSize.x, this._cellSize.y);
            var _local4 = 0.8;
            var _local5 = 32;
            while (_local5 > 0) {
                if (!isReasonableNumber(_local3)){
                    return;
                };
                _local2.size = _local3;
                _local1.setTextFormat(_local2);
                _local6 = _local1.getLineMetrics(0);
                this._underlineOffset = ((_local6.height - _local6.descent) + 3);
                this._fontSize = _local3;
                this._centeringOffset = (((this._cellSize.y / 2) - (((_local6.ascent + _local6.descent) + _local6.leading) / 2)) - 2);
                if (_local4 < 1){
                    if (((((_local6.height + 2) < this._cellSize.y)) && (((_local6.width + 2) < this._cellSize.x)))){
                        _local4 = (1 + ((1 - _local4) / 2));
                    };
                } else {
                    if (_local4 > 1){
                        if (((((_local6.height + 2) > this._cellSize.y)) && (((_local6.width + 2) > this._cellSize.x)))){
                            _local4 = (1 - ((_local4 - 1) / 2));
                        };
                    };
                };
                _local3 = (this._fontSize * _local4);
                if (_local4 < 1){
                    //unresolved if
                } else {
                    if (_local4 > 1){
                        //unresolved if
                    };
                };
                _local5--;
            };
        }
        private function sanitize():void{
            if (((((((((!(isReasonableRectangle(this._videoBounds))) || (!(isReasonableNumber(this._underlineOffset))))) || (!(isReasonableNumber(this._centeringOffset))))) || (!(isReasonablePoint(this._topLeftCellPosition))))) || (!(isReasonablePoint(this._cellSize))))){
                this._cellSize = new Point(0, 0);
                this._topLeftCellPosition = new Point(0, 0);
                this._underlineOffset = 0;
                this._fontSize = 1;
                this._centeringOffset = 0;
            };
        }

    }
}//package com.adobe.cc.cea608 
﻿package com.adobe.cc.cea608 {

    final class MiscCommandCode {

        public static const RCL:String = "ResumeCaptionLoading";
        public static const BS:String = "BackSpace";
        public static const AOF:String = "Reserved (formerly Alarm Off)";
        public static const AON:String = "Reserved (formerly Alarm On)";
        public static const DER:String = "DeleteToEndOfRow";
        public static const RU2:String = "RollUp2";
        public static const RU3:String = "RollUp3";
        public static const RU4:String = "RollUp4";
        public static const FON:String = "FlashOn";
        public static const RDC:String = "ResumeDirectCaptioning";
        public static const TR:String = "TextRestart";
        public static const RTD:String = "ResumeTextDisplay";
        public static const EDM:String = "EraseDisplayedMemory";
        public static const CR:String = "CarraigeReturn";
        public static const ENM:String = "EraseNondisplayedMemory";
        public static const EOC:String = "EndOfCaption";
        public static const TO1:String = "TabOffset1Col";
        public static const TO2:String = "TabOffset2Col";
        public static const TO3:String = "TabOffset3Col";

        public static function fromCode(bytePair:BytePair):Array{
            var _local5:int;
            var _local2:uint = bytePair.one;
            var _local3:uint = bytePair.two;
            var _local4:int = bytePair.field;
            var _local6:int = ((_local4)==1) ? 20 : 21;
            var _local7:int = ((_local4)==1) ? 28 : 29;
            switch (_local2){
                case _local6:
                case 23:
                    _local5 = 1;
                    break;
                case _local7:
                case 31:
                    _local5 = 2;
                    break;
                    return (null);
            };
            switch (_local2){
                case _local6:
                case _local7:
                    switch (_local3){
                        case 32:
                            return ([_local5, RCL]);
                        case 33:
                            return ([_local5, BS]);
                        case 34:
                            return ([_local5, AOF]);
                        case 35:
                            return ([_local5, AON]);
                        case 36:
                            return ([_local5, DER]);
                        case 37:
                            return ([_local5, RU2]);
                        case 38:
                            return ([_local5, RU3]);
                        case 39:
                            return ([_local5, RU4]);
                        case 40:
                            return ([_local5, FON]);
                        case 41:
                            return ([_local5, RDC]);
                        case 42:
                            return ([_local5, TR]);
                        case 43:
                            return ([_local5, RTD]);
                        case 44:
                            return ([_local5, EDM]);
                        case 45:
                            return ([_local5, CR]);
                        case 46:
                            return ([_local5, ENM]);
                        case 47:
                            return ([_local5, EOC]);
                    };
                    break;
                case 23:
                case 31:
                    switch (_local3){
                        case 33:
                            return ([_local5, TO1]);
                        case 34:
                            return ([_local5, TO2]);
                        case 35:
                            return ([_local5, TO3]);
                    };
                    break;
            };
            return (null);
        }

    }
}//package com.adobe.cc.cea608 
﻿package com.adobe.cc.cea608 {

    public class DecoderMovedRowEvent extends DecoderRowEvent {

        public static const MOVED_ROW:String = "MOVED_ROW";

        private var _oldRowNumber:int;

        public function DecoderMovedRowEvent(type:String, decoder:Decoder, oldRowNumber:int, newRowNumber:int){
            super(type, decoder, newRowNumber);
            this._oldRowNumber = oldRowNumber;
        }
        public function get oldRowNumber():int{
            return (this._oldRowNumber);
        }

    }
}//package com.adobe.cc.cea608 
﻿package com.adobe.cc.cea608 {
    import com.adobe.cc.cea608.*;

    final class MidRowTextAttribute {

        private static const WHITE:MidRowTextAttribute = new MidRowTextAttribute(ForegroundColor.WHITE, false, false);
;
        private static const WHITE_UNDERLINED:MidRowTextAttribute = new MidRowTextAttribute(ForegroundColor.WHITE, true, false);
;
        private static const GREEN:MidRowTextAttribute = new MidRowTextAttribute(ForegroundColor.GREEN, false, false);
;
        private static const GREEN_UNDERLINED:MidRowTextAttribute = new MidRowTextAttribute(ForegroundColor.GREEN, true, false);
;
        private static const BLUE:MidRowTextAttribute = new MidRowTextAttribute(ForegroundColor.BLUE, false, false);
;
        private static const BLUE_UNDERLINED:MidRowTextAttribute = new MidRowTextAttribute(ForegroundColor.BLUE, true, false);
;
        private static const CYAN:MidRowTextAttribute = new MidRowTextAttribute(ForegroundColor.CYAN, false, false);
;
        private static const CYAN_UNDERLINED:MidRowTextAttribute = new MidRowTextAttribute(ForegroundColor.CYAN, true, false);
;
        private static const RED:MidRowTextAttribute = new MidRowTextAttribute(ForegroundColor.RED, false, false);
;
        private static const RED_UNDERLINED:MidRowTextAttribute = new MidRowTextAttribute(ForegroundColor.RED, true, false);
;
        private static const YELLOW:MidRowTextAttribute = new MidRowTextAttribute(ForegroundColor.YELLOW, false, false);
;
        private static const YELLOW_UNDERLINED:MidRowTextAttribute = new MidRowTextAttribute(ForegroundColor.YELLOW, true, false);
;
        private static const MAGENTA:MidRowTextAttribute = new MidRowTextAttribute(ForegroundColor.MAGENTA, false, false);
;
        private static const MAGENTA_UNDERLINED:MidRowTextAttribute = new MidRowTextAttribute(ForegroundColor.MAGENTA, true, false);
;
        private static const ITALIC:MidRowTextAttribute = new MidRowTextAttribute(ForegroundColor.WHITE, false, true);
;
        private static const ITALIC_UNDERLINED:MidRowTextAttribute = new MidRowTextAttribute(ForegroundColor.WHITE, true, true);
;
        private static const BLACK:MidRowTextAttribute = new MidRowTextAttribute(ForegroundColor.BLACK, false, false, true);
;
        private static const BLACK_UNDERLINED:MidRowTextAttribute = new MidRowTextAttribute(ForegroundColor.BLACK, true, false, true);
;

        private var _color:int;
        private var _underlined:Boolean;
        private var _italicized:Boolean;
        private var _foregroundAttribute:Boolean;

        public function MidRowTextAttribute(color:int, underlined:Boolean, italicized:Boolean, foregroundAttribute:Boolean=false){
            this._color = color;
            this._underlined = underlined;
            this._italicized = italicized;
            this._foregroundAttribute = foregroundAttribute;
        }
        public static function fromCode(bytePair:BytePair):Array{
            var _local4:int;
            var _local2:uint = bytePair.one;
            var _local3:uint = bytePair.two;
            switch (_local2){
                case 17:
                case 23:
                    _local4 = 1;
                    break;
                case 25:
                case 31:
                    _local4 = 2;
                    break;
                    return (null);
            };
            if ((((_local2 == 17)) || ((_local2 == 25)))){
                switch (_local3){
                    case 32:
                        return ([_local4, WHITE]);
                    case 33:
                        return ([_local4, WHITE_UNDERLINED]);
                    case 34:
                        return ([_local4, GREEN]);
                    case 35:
                        return ([_local4, GREEN_UNDERLINED]);
                    case 36:
                        return ([_local4, BLUE]);
                    case 37:
                        return ([_local4, BLUE_UNDERLINED]);
                    case 38:
                        return ([_local4, CYAN]);
                    case 39:
                        return ([_local4, CYAN_UNDERLINED]);
                    case 40:
                        return ([_local4, RED]);
                    case 41:
                        return ([_local4, RED_UNDERLINED]);
                    case 42:
                        return ([_local4, YELLOW]);
                    case 43:
                        return ([_local4, YELLOW_UNDERLINED]);
                    case 44:
                        return ([_local4, MAGENTA]);
                    case 45:
                        return ([_local4, MAGENTA_UNDERLINED]);
                    case 46:
                        return ([_local4, ITALIC]);
                    case 47:
                        return ([_local4, ITALIC_UNDERLINED]);
                        return (null);
                };
            };
            switch (_local3){
                case 46:
                    return ([_local4, BLACK]);
                case 47:
                    return ([_local4, BLACK_UNDERLINED]);
                    return (null);
            };
        }

        public function get character():String{
            return (Line21Character.SPACE);
        }
        public function get color():int{
            return (this._color);
        }
        public function get underlined():Boolean{
            return (this._underlined);
        }
        public function get italicized():Boolean{
            return (this._italicized);
        }
        public function get foregroundAttribute():Boolean{
            return (this._foregroundAttribute);
        }
        public function toString():String{
            return ((((((((("[MidRowTextAttribute color:" + this._color.toString(16)) + ", underlined:") + this._underlined) + ", italicized:") + this._italicized) + ", foregroundAttribute=") + this._foregroundAttribute) + "]"));
        }
        public function clone():MidRowTextAttribute{
            return (new MidRowTextAttribute(this._color, this._underlined, this._italicized, this._foregroundAttribute));
        }

    }
}//package com.adobe.cc.cea608 
﻿package com.adobe.cc.cea608 {

    public class DecoderRowEvent extends DecoderEvent {

        public static const ERASED_ROW:String = "ERASED_ROW";
        public static const ADDED_ROW:String = "ADDED_ROW";
        public static const CHANGED_ROW:String = "CHANGED_ROW";

        private var _rowNumber:int;

        public function DecoderRowEvent(type:String, decoder:Decoder, rowNumber:int){
            super(type, decoder);
            this._rowNumber = rowNumber;
        }
        public function get rowNumber():int{
            return (this._rowNumber);
        }

    }
}//package com.adobe.cc.cea608 
﻿package com.adobe.cc.cea608 {
    import flash.display.*;
    import flash.events.*;
    import flash.utils.*;
    import flash.geom.*;
    import com.adobe.cc.debug.*;

    public class DisplayDebug {

        private var _renderer:DisplayObjectCaptionRenderer;
        private var _sprite:Sprite;
        private var _timer:Timer;
        private var _drawnDebug:Boolean;

        public function DisplayDebug(renderer:DisplayObjectCaptionRenderer){
            this._renderer = renderer;
            this._sprite = new Sprite();
            this._timer = new Timer(3000, 0);
            this._timer.addEventListener(TimerEvent.TIMER, this.onTimer, false, 0, true);
            this._timer.start();
        }
        public function get sprite():Sprite{
            return (this._sprite);
        }
        public function redraw():void{
            var _local3:int;
            var _local4:int;
            var _local5:Rectangle;
            var _local1:RendererMetrics = this._renderer.metrics;
            var _local2:Graphics = this._sprite.graphics;
            _local2.clear();
            if (DebugSettings.drawDebug){
                _local3 = 1;
                while (_local3 <= Decoder.ROW_COUNT) {
                    _local4 = 0;
                    while (_local4 <= (Decoder.COL_COUNT + 1)) {
                        _local5 = _local1.getCellBounds(_local4, _local3);
                        if ((((_local4 == 0)) || ((_local4 == (Decoder.COL_COUNT + 1))))){
                            _local2.lineStyle(1, 0xFF0000, 0.5);
                        } else {
                            _local2.lineStyle(1, 0xFF00, 0.5);
                        };
                        _local2.drawRect(_local5.left, _local5.top, _local5.width, _local5.height);
                        _local4++;
                    };
                    _local3++;
                };
                _local2.lineStyle(3, 0xFF00FF, 0.5);
                _local2.drawRect(_local1.videoBounds.x, _local1.videoBounds.y, _local1.videoBounds.width, _local1.videoBounds.height);
            };
            this._drawnDebug = DebugSettings.drawDebug;
        }
        public function onTimer(event:TimerEvent):void{
            if (!this._sprite.root){
                return;
            };
            if (this._drawnDebug == DebugSettings.drawDebug){
                return;
            };
            this.redraw();
        }

    }
}//package com.adobe.cc.cea608 
﻿package com.adobe.cc.cea608 {
    import flash.events.*;

    public class DecoderEvent extends Event {

        public static const RESET:String = "RESET";
        public static const RENDER:String = "RENDER";
        public static const START_ROLLUP_ANIMATION:String = "START_ROLLUP_ANIMATION";
        public static const STOP_ROLLUP_ANIMATION:String = "STOP_ROLLUP_ANIMATION";
        public static const SWAPPED:String = "SWAPPED";
        public static const CLEARED:String = "CLEARED";

        private var _decoder:Decoder;

        public function DecoderEvent(type:String, decoder:Decoder){
            super(type);
            this._decoder = decoder;
        }
        public function get decoder():Decoder{
            return (this._decoder);
        }

    }
}//package com.adobe.cc.cea608 
﻿package com.adobe.cc.cea608 {

    class MemoryRowEvent extends MemoryEvent {

        public static const ERASED_ROW:String = "ERASED_ROW";
        public static const ADDED_ROW:String = "ADDED_ROW";
        public static const CHANGED_ROW:String = "CHANGED_ROW";

        private var _row:MemoryRow;

        public function MemoryRowEvent(type:String, row:MemoryRow){
            super(type, row.memory);
            this._row = row;
        }
        public function get row():MemoryRow{
            return (this._row);
        }

    }
}//package com.adobe.cc.cea608 
﻿package com.adobe.cc.cea608 {
    import flash.events.*;

    class MemoryEvent extends Event {

        public static const CLEARED:String = "CLEARED";

        private var _memory:Memory;

        public function MemoryEvent(type:String, memory:Memory){
            super(type);
            this._memory = memory;
        }
        public function get memory():Memory{
            return (this._memory);
        }

    }
}//package com.adobe.cc.cea608 
﻿package com.adobe.cc.cea608 {
    import __AS3__.vec.*;

    public final class Grid {

        private var _rows:Vector.<GridRow>;

        public function Grid(){
            this._rows = new Vector.<GridRow>(Decoder.ROW_COUNT, true);
            var _local1:int;
            while (_local1 < Decoder.ROW_COUNT) {
                this._rows[_local1] = new GridRow();
                _local1++;
            };
        }
        public function clear():void{
            var _local1:GridRow;
            for each (_local1 in this._rows) {
                _local1.clear();
            };
        }
        public function getRow(row:int):GridRow{
            if (!Decoder.isRowInBounds(row)){
                return (null);
            };
            return (this._rows[(row - 1)]);
        }
        public function getCell(rowNumber:int, col:int):Cell{
            var _local3:GridRow = this.getRow(rowNumber);
            if (!_local3){
                return (null);
            };
            return (_local3.getCell(col));
        }
        public function setCell(rowNumber:int, col:int, value:Cell):void{
            var _local4:GridRow = this.getRow(rowNumber);
            if (!_local4){
                return;
            };
            return (_local4.setCell(col, value));
        }

    }
}//package com.adobe.cc.cea608 
﻿package com.adobe.cc.cea608 {
    import __AS3__.vec.*;

    public class GridRow {

        private var _cells:Vector.<Cell>;

        public function GridRow(){
            this._cells = new Vector.<Cell>(Decoder.COL_COUNT, true);
        }
        public function clear():void{
            var _local1 = 1;
            while (_local1 <= Decoder.COL_COUNT) {
                this.setCell(_local1, null);
                _local1++;
            };
        }
        public function getCell(col:int):Cell{
            if (!Decoder.isColInBounds(col)){
                return (null);
            };
            return (this._cells[(col - 1)]);
        }
        public function setCell(col:int, value:Cell):void{
            if (!Decoder.isColInBounds(col)){
                return;
            };
            this._cells[(col - 1)] = value;
        }

    }
}//package com.adobe.cc.cea608 
﻿package com.adobe.cc.cea608 {

    class MemoryMovedRowEvent extends MemoryRowEvent {

        public static const MOVED_ROW:String = "MOVED_ROW";

        private var _oldRowNumber:int;

        public function MemoryMovedRowEvent(type:String, row:MemoryRow, oldRowNumber:int){
            super(type, row);
            this._oldRowNumber = oldRowNumber;
        }
        public function get oldRowNumber():int{
            return (this._oldRowNumber);
        }

    }
}//package com.adobe.cc.cea608 
﻿package com.adobe.cc.cea608 {
    import flash.utils.*;
    import __AS3__.vec.*;

    public class Base64Decoder {

        private static const _decodeChars:Vector.<int> = InitDecodeChar();

        public static function decode(str:String):ByteArray{
            var _local2:int;
            var _local3:int;
            var _local4:int;
            var _local5:int;
            var _local6:int;
            var _local7:int = str.length;
            var _local8:ByteArray = new ByteArray();
            _local8.writeUTFBytes(str);
            var _local9:int;
            while (_local6 < _local7) {
                var _temp1 = _local6;
                _local6 = (_local6 + 1);
                _local2 = _decodeChars[int(_local8[_temp1])];
                //unresolved if
                var _temp2 = _local6;
                _local6 = (_local6 + 1);
                _local3 = _decodeChars[int(_local8[_temp2])];
                //unresolved if
                var _temp3 = _local9;
                _local9 = (_local9 + 1);
                _local8[int(_temp3)] = ((_local2 << 2) | ((_local3 & 48) >> 4));
                var _temp4 = _local6;
                _local6 = (_local6 + 1);
                _local4 = _local8[int(_temp4)];
                if (_local4 == 61){
                    _local8.length = _local9;
                    _local8.position = 0;
                    return (_local8);
                };
                _local4 = _decodeChars[int(_local4)];
                //unresolved if
                var _temp5 = _local9;
                _local9 = (_local9 + 1);
                _local8[int(_temp5)] = (((_local3 & 15) << 4) | ((_local4 & 60) >> 2));
                var _temp6 = _local6;
                _local6 = (_local6 + 1);
                _local5 = _local8[int(_temp6)];
                if (_local5 == 61){
                    _local8.length = _local9;
                    _local8.position = 0;
                    return (_local8);
                };
                _local5 = _decodeChars[int(_local5)];
                //unresolved if
                var _temp7 = _local9;
                _local9 = (_local9 + 1);
                _local8[int(_temp7)] = (((_local4 & 3) << 6) | _local5);
            };
            _local8.length = _local9;
            _local8.position = 0;
            return (_local8);
        }
        public static function InitDecodeChar():Vector.<int>{
            var _local1:Vector.<int> = new <int>[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1];
            return (_local1);
        }

    }
}//package com.adobe.cc.cea608 
﻿package com.adobe.cc.cea608 {
    import flash.events.*;
    import flash.system.*;
    import com.adobe.cc.*;

    public class RendererCustomizations extends EventDispatcher {

        private var _font:String;
        private var _textColor:int;
        private var _backgroundColor:int;
        private var _textOpacity:Number;
        private var _backgroundOpacity:Number;
        private var _edgeType:String;
        private var _edgeColor:int;
        private var _enableRollUpAnimations:Boolean;

        public function RendererCustomizations(){
            if (((Capabilities.os) && ((Capabilities.os.indexOf("Windows") == 0)))){
                this._font = "Tahoma";
            } else {
                if (((Capabilities.os) && ((Capabilities.os.indexOf("MacOS") == 0)))){
                    this._font = "Helvetica";
                } else {
                    this._font = "Sans Serif";
                };
            };
            this._textColor = -1;
            this._backgroundColor = -1;
            this._textOpacity = -1;
            this._backgroundOpacity = -1;
            this._enableRollUpAnimations = true;
        }
        private static function isRGB(value:int):Boolean{
            return ((((value >= 0)) && ((value <= 0xFFFFFF))));
        }

        public function get font():String{
            return (this._font);
        }
        public function set font(value:String):void{
            if (value == this._font){
                return;
            };
            this._font = value;
            this.onChanged();
        }
        public function get textColor():int{
            return (this._textColor);
        }
        public function set textColor(value:int):void{
            if (((!((value == -1))) && (!(isRGB(value))))){
                throw (new ArgumentError((((("Invalid text color value: " + value) + " (0x") + value.toString(16)) + ")")));
            };
            if (value == this._textColor){
                return;
            };
            this._textColor = value;
            this.onChanged();
        }
        public function get backgroundColor():int{
            return (this._backgroundColor);
        }
        public function set backgroundColor(value:int):void{
            if (((!((value == -1))) && (!(isRGB(value))))){
                throw (new ArgumentError((((("Invalid background color value: " + value) + " (0x") + value.toString(16)) + ")")));
            };
            if (value == this._backgroundColor){
                return;
            };
            this._backgroundColor = value;
            this.onChanged();
        }
        public function get textOpacity():Number{
            return (this._textOpacity);
        }
        public function set textOpacity(value:Number):void{
            if ((((((value < 0)) && (!((value == -1))))) || ((value > 1)))){
                throw (new ArgumentError(("Invalid text opacity value: " + value)));
            };
            if (value == this._textOpacity){
                return;
            };
            this._textOpacity = value;
            this.onChanged();
        }
        public function get backgroundOpacity():Number{
            return (this._backgroundOpacity);
        }
        public function set backgroundOpacity(value:Number):void{
            if ((((((value < 0)) && (!((value == -1))))) || ((value > 1)))){
                throw (new ArgumentError(("Invalid background opacity value: " + value)));
            };
            if (value == this._backgroundOpacity){
                return;
            };
            this._backgroundOpacity = value;
            this.onChanged();
        }
        public function get edgeType():String{
            return (this._edgeType);
        }
        public function set edgeType(value:String):void{
            var _local2:Array = [null, EdgeType.NONE, EdgeType.RAISED, EdgeType.DEPRESSED, EdgeType.UNIFORM, EdgeType.LEFT_DROP_SHADOW, EdgeType.RIGHT_DROP_SHADOW];
            if (_local2.indexOf(value) == -1){
                throw (new ArgumentError(("Invalid edge type value: " + value)));
            };
            if (value == this._edgeType){
                return;
            };
            this._edgeType = value;
            this.onChanged();
        }
        public function get edgeColor():int{
            return (this._edgeColor);
        }
        public function set edgeColor(value:int):void{
            if (((!((value == -1))) && (!(isRGB(value))))){
                throw (new ArgumentError((((("Invalid edge color value: " + value) + " (0x") + value.toString(16)) + ")")));
            };
            if (value == this._edgeColor){
                return;
            };
            this._edgeColor = value;
            this.onChanged();
        }
        private function onChanged():void{
            dispatchEvent(new Event(Event.CHANGE));
        }
        public function get enableRollUpAnimations():Boolean{
            return (this._enableRollUpAnimations);
        }
        public function set enableRollUpAnimations(value:Boolean):void{
            this._enableRollUpAnimations = value;
            this.onChanged();
        }

    }
}//package com.adobe.cc.cea608 
﻿package com.adobe.cc.cea608 {

    public class DecoderActiveServiceEvent extends DecoderEvent {

        public static const NEW_CC_SERVICE_ACTIVE:String = "NEW_CC_SERVICE_ACTIVE";

        private var _activeService:String;

        public function DecoderActiveServiceEvent(type:String, decoder:Decoder, activeService:String=null){
            super(type, decoder);
            this._activeService = activeService;
        }
        public function get activeService():String{
            return (this._activeService);
        }

    }
}//package com.adobe.cc.cea608 
﻿package com.adobe.cc.cea608 {
    import flash.events.*;
    import __AS3__.vec.*;
    import com.adobe.cc.cea608.*;
    import com.adobe.cc.debug.*;

    final class Memory extends EventDispatcher {

        private var _rows:Vector.<MemoryRow>;
        private var _pendingEvents:Vector.<Event>;
        private var _queuing:int = 0;

        public function Memory(){
            this._pendingEvents = new Vector.<Event>();
            this.clear();
        }
        public function clear():void{
            this._rows = new Vector.<MemoryRow>();
            var _local1:MemoryRow = new MemoryRow();
            _local1.number = 15;
            _local1.memory = this;
            this._rows.push(_local1);
            this.validate();
            this.dispatchEvent(new MemoryEvent(MemoryEvent.CLEARED, this));
        }
        public function get current():MemoryRow{
            return (this._rows[this.indexOfCurrent]);
        }
        private function get indexOfCurrent():int{
            return ((this._rows.length - 1));
        }
        public function find(rowNumber:int):MemoryRow{
            var _local2:int = this.indexOfRowNumber(rowNumber);
            if (_local2 == -1){
                return (null);
            };
            return (this._rows[_local2]);
        }
        private function indexOfRowNumber(rowNumber:int):int{
            var _local2:int = (this._rows.length - 1);
            while (_local2 >= 0) {
                if (this._rows[_local2].number == rowNumber){
                    return (_local2);
                };
                _local2--;
            };
            return (_local2);
        }
        public function promoteOrCreate(rowNumber:int):MemoryRow{
            var i:* = 0;
            var row:* = null;
            var rowNumber:* = rowNumber;
            this.validate();
            this.startQueuingEvents();
            try {
                i = this.indexOfRowNumber(rowNumber);
                if (i >= 0){
                    row = this._rows[i];
                    this._rows.splice(i, 1);
                } else {
                    row = new MemoryRow();
                    row.number = rowNumber;
                    row.memory = this;
                    this.dispatchEvent(new MemoryRowEvent(MemoryRowEvent.ADDED_ROW, row));
                };
                if (this._rows.length > 0){
                    if (this.current.isEmpty){
                        this.deleteRowAtIndex(this.indexOfCurrent);
                    };
                };
                this._rows.push(row);
            } finally {
                this.stopQueuingEvents();
            };
            this.validate();
            return (row);
        }
        public function shift(amount:int):void{
            var i:* = 0;
            var row:* = null;
            var oldRowNumber:* = 0;
            var newRowNumber:* = 0;
            var amount:* = amount;
            this.validate();
            this.startQueuingEvents();
            try {
                i = 0;
                while (i < this._rows.length) {
                    row = this._rows[i];
                    oldRowNumber = row.number;
                    newRowNumber = (row.number + amount);
                    if (Decoder.isRowInBounds(newRowNumber)){
                        row.number = newRowNumber;
                        i = (i + 1);
                        this.dispatchEvent(new MemoryMovedRowEvent(MemoryMovedRowEvent.MOVED_ROW, row, oldRowNumber));
                    } else {
                        this.deleteRowAtIndex(i);
                    };
                };
                this.addDefaultRowIfNeeded();
            } finally {
                this.stopQueuingEvents();
            };
            this.validate();
        }
        public function erase(rowNumber:int):void{
            var i:* = 0;
            var rowNumber:* = rowNumber;
            this.validate();
            this.startQueuingEvents();
            try {
                i = this.indexOfRowNumber(rowNumber);
                if (i == -1){
                    return;
                };
                this.deleteRowAtIndex(i);
                this.addDefaultRowIfNeeded();
            } finally {
                this.stopQueuingEvents();
            };
            this.validate();
        }
        private function addDefaultRowIfNeeded():void{
            if (this._rows.length != 0){
                return;
            };
            var _local1:MemoryRow = new MemoryRow();
            _local1.number = 15;
            _local1.memory = this;
            this._rows.push(_local1);
            this.dispatchEvent(new MemoryRowEvent(MemoryRowEvent.ADDED_ROW, _local1));
        }
        private function deleteRowAtIndex(i:int, count:int=1):void{
            var _local4:MemoryRow;
            var _local3:Vector.<MemoryRow> = this._rows.splice(i, count);
            for each (_local4 in _local3) {
                this.dispatchEvent(new MemoryRowEvent(MemoryRowEvent.ERASED_ROW, _local4));
                _local4.memory = null;
            };
        }
        public function gcRows():void{
            var maxRowCount:* = 0;
            this.validate();
            this.startQueuingEvents();
            try {
                maxRowCount = ((this.current.isEmpty) ? 5 : 4);
                while (this._rows.length > maxRowCount) {
                    this.deleteRowAtIndex(0);
                };
            } finally {
                this.stopQueuingEvents();
            };
            this.validate();
        }
        public function forEach(f:Function, thisObject=null):void{
            this.validate();
            this._rows.forEach(f, thisObject);
            this.validate();
        }
        public function validate():void{
            var existingRowNumbers:* = null;
            if (!DebugSettings.verify){
                return;
            };
            if (this._rows.length == 0){
                throw (new Error());
            };
            if (this._rows.length > 5){
                throw (new Error());
            };
            existingRowNumbers = [];
            this._rows.forEach(function (row:MemoryRow, index:int, ... _args):void{
                if (row == null){
                    throw (new Error());
                };
                if (row.number <= 0){
                    throw (new Error());
                };
                if (row.number > Decoder.ROW_COUNT){
                    throw (new Error());
                };
                if (((!((index == (_rows.length - 1)))) && (row.isEmpty))){
                    throw (new Error());
                };
                if (existingRowNumbers.indexOf(row.number) != -1){
                    throw (new Error());
                };
                existingRowNumbers.push(row.number);
            });
        }
        private function startQueuingEvents():void{
            this._queuing++;
        }
        private function stopQueuingEvents():void{
            var _local1:Event;
            this._queuing--;
            if (this._queuing == 0){
                for each (_local1 in this._pendingEvents) {
                    this.dispatchEvent(_local1);
                };
                this._pendingEvents.splice(0, this._pendingEvents.length);
            };
        }
        override public function dispatchEvent(event:Event):Boolean{
            if (this._queuing == 0){
                return (super.dispatchEvent(event));
            };
            this._pendingEvents.push(event);
            return (true);
        }

    }
}//package com.adobe.cc.cea608 
﻿package com.adobe.cc.cea608 {

    final class BytePair {

        private var _field:uint;
        private var _oneWithParity:uint;
        private var _twoWithParity:uint;

        public function BytePair(field:int, oneWithParity:uint, twoWithParity:uint){
            this._field = field;
            this._oneWithParity = oneWithParity;
            this._twoWithParity = twoWithParity;
        }
        static function byteIsOddParity(b:uint):Boolean{
            var _local2:int;
            while (b) {
                if ((b & 1)){
                    _local2++;
                };
                b = (b >> 1);
            };
            return (((_local2 % 2) == 1));
        }

        public function get field():int{
            return (this._field);
        }
        public function get oneWithParity():uint{
            return (this._oneWithParity);
        }
        public function get twoWithParity():uint{
            return (this._twoWithParity);
        }
        public function get one():uint{
            return ((127 & this._oneWithParity));
        }
        public function get two():uint{
            return ((127 & this._twoWithParity));
        }
        public function get oneIsOddParity():Boolean{
            return (byteIsOddParity(this._oneWithParity));
        }
        public function get twoIsOddParity():Boolean{
            return (byteIsOddParity(this._twoWithParity));
        }
        public function toString():String{
            var _local1:String = (((this._oneWithParity / 16).toString(16) + "") + (this._oneWithParity % 16).toString(16));
            var _local2:String = (((this._twoWithParity / 16).toString(16) + "") + (this._twoWithParity % 16).toString(16));
            return ((((((("<" + _local1) + ",") + _local2) + ",") + this.field) + ">"));
        }

    }
}//package com.adobe.cc.cea608 
﻿package com.adobe.cc.cea608 {

    public final class ForegroundColor {

        public static const WHITE:int = 0xFFFFFF;
        public static const CYAN:int = 0xFFFF;
        public static const MAGENTA:int = 0xFF00FF;
        public static const YELLOW:int = 0xFFFF00;
        public static const RED:int = 0xFF0000;
        public static const BLUE:int = 0xFF;
        public static const GREEN:int = 0xFF00;
        public static const BLACK:int = 0;

    }
}//package com.adobe.cc.cea608 
﻿package com.adobe.cc.cea608 {
    import flash.display.*;
    import __AS3__.vec.*;
    import com.adobe.cc.*;
    import flash.filters.*;

    public class DisplayRow {

        private var _gridRow:GridRow;
        private var _renderer:DisplayObjectCaptionRenderer;
        private var _mainSprite:Sprite;
        private var _rowSprite:Sprite;
        private var _backgroundSprite:Sprite;
        private var _foregroundSprite:Sprite;
        private var _textSprite:Sprite;
        private var _foregroundAndTextParentSprite:Sprite;
        private var _cells:Vector.<DisplayCell>;
        private var _active:Boolean;
        private var _rowNumber:int;
        private var _needsFullRender:Boolean;

        public function DisplayRow(renderer:DisplayObjectCaptionRenderer){
            this._gridRow = new GridRow();
            this._renderer = renderer;
            this._mainSprite = new Sprite();
            this._rowSprite = new Sprite();
            this._mainSprite.addChild(this._rowSprite);
            this._backgroundSprite = new Sprite();
            this._rowSprite.addChild(this._backgroundSprite);
            this._foregroundAndTextParentSprite = new Sprite();
            this._rowSprite.addChild(this._foregroundAndTextParentSprite);
            this._foregroundSprite = new Sprite();
            this._foregroundAndTextParentSprite.addChild(this._foregroundSprite);
            this._textSprite = new Sprite();
            this._foregroundAndTextParentSprite.addChild(this._textSprite);
            this._cells = new Vector.<DisplayCell>((Decoder.COL_COUNT + 2), true);
            var _local2:int;
            while (_local2 < this._cells.length) {
                this._cells[_local2] = this.createCell();
                _local2++;
            };
            this._rowNumber = 0;
        }
        private function createCell():DisplayCell{
            var _local1:DisplayCell = new DisplayCell(this._renderer);
            this._backgroundSprite.addChild(_local1.backgroundSprite);
            this._foregroundSprite.addChild(_local1.foregroundSprite);
            this._textSprite.addChild(_local1.textSprite);
            return (_local1);
        }
        public function get active():Boolean{
            return (this._active);
        }
        public function get rowNumber():int{
            return (this._rowNumber);
        }
        public function get sprite():Sprite{
            return (this._mainSprite);
        }
        private function updateRowSpriteY():void{
            this._rowSprite.y = this._renderer.metrics.getCellY(this._rowNumber);
        }
        public function move(newRowNumber:int):void{
            if (this._rowNumber == newRowNumber){
                return;
            };
            this._rowNumber = newRowNumber;
            this.updateRowSpriteY();
        }
        public function activate(newRowNumber:int):void{
            this.deactivate();
            this._active = true;
            this._rowNumber = newRowNumber;
            this.updateRowSpriteY();
            this.sync();
            this.redraw();
        }
        public function deactivate():void{
            var _local1:DisplayCell;
            if (!this._active){
                return;
            };
            this._active = false;
            for each (_local1 in this._cells) {
                _local1.isEnhancedLegibility = false;
                _local1.gridCell = null;
            };
            this.redraw();
        }
        public function redraw():void{
            var _local1:DisplayCell;
            var _local2:RendererMetrics;
            var _local3:int;
            var _local4:Number;
            this.updateRowSpriteY();
            this._rowSprite.removeChild(this._foregroundAndTextParentSprite);
            this._foregroundAndTextParentSprite.removeChild(this._foregroundSprite);
            this._foregroundAndTextParentSprite.removeChild(this._textSprite);
            this._foregroundAndTextParentSprite = new Sprite();
            this._rowSprite.addChild(this._foregroundAndTextParentSprite);
            this._foregroundAndTextParentSprite.addChild(this._foregroundSprite);
            this._foregroundAndTextParentSprite.addChild(this._textSprite);
            this._foregroundAndTextParentSprite.filters = this.createEdgeTypeFilters();
            if (this._active){
                _local2 = this._renderer.metrics;
                _local3 = 0;
                while (_local3 <= (Decoder.COL_COUNT + 1)) {
                    _local4 = _local2.getCellX(_local3);
                    this._cells[_local3].backgroundSprite.x = _local4;
                    this._cells[_local3].foregroundSprite.x = _local4;
                    this._cells[_local3].textSprite.x = _local4;
                    _local3++;
                };
            };
            for each (_local1 in this._cells) {
                _local1.redraw();
            };
        }
        public function change():void{
            var _local1:DisplayCell;
            this.sync();
            for each (_local1 in this._cells) {
                if (_local1.changed){
                    _local1.redraw();
                };
            };
        }
        private function sync():void{
            var _local1:int;
            if (!this._active){
                return;
            };
            this._renderer.decoder.renderRowNumber(this._rowNumber, this._gridRow);
            _local1 = 0;
            while (_local1 <= (Decoder.COL_COUNT + 1)) {
                this._cells[_local1].isEnhancedLegibility = false;
                this._cells[_local1].gridCell = this._gridRow.getCell(_local1);
                _local1++;
            };
            _local1 = 1;
            while (_local1 <= (Decoder.COL_COUNT + 1)) {
                if (this._cells[_local1].gridCell){
                    this._cells[(_local1 - 1)].isEnhancedLegibility = true;
                    this._cells[(_local1 - 1)].gridCell = this._cells[_local1].gridCell;
                    break;
                };
                _local1++;
            };
            _local1 = Decoder.COL_COUNT;
            while (_local1 >= 0) {
                if (this._cells[_local1].gridCell){
                    this._cells[(_local1 + 1)].isEnhancedLegibility = true;
                    this._cells[(_local1 + 1)].gridCell = this._cells[_local1].gridCell;
                    break;
                };
                _local1--;
            };
        }
        private function createEdgeTypeFilters():Array{
            switch (this._renderer.customizations.edgeType){
                case EdgeType.DEPRESSED:
                    return (this.createDepressedFilters());
                case EdgeType.LEFT_DROP_SHADOW:
                    return (this.createLeftDropShadowFilters());
                case EdgeType.RIGHT_DROP_SHADOW:
                    return (this.createRightDropShadowFilters());
                case EdgeType.RAISED:
                    return (this.createRaisedFilters());
                case EdgeType.UNIFORM:
                    return (this.createUniformFilters());
                    return (null);
            };
        }
        private function createLeftDropShadowFilters():Array{
            var _local1:DropShadowFilter = new DropShadowFilter();
            _local1.blurX = (_local1.blurY = 1.5);
            _local1.distance = 3;
            _local1.alpha = 0.8;
            _local1.angle = (_local1.angle + 90);
            _local1.quality = BitmapFilterQuality.HIGH;
            _local1.color = ((this._renderer.customizations.edgeColor)==-1) ? ForegroundColor.BLACK : this._renderer.customizations.edgeColor;
            return ([_local1]);
        }
        private function createRightDropShadowFilters():Array{
            var _local1:DropShadowFilter = new DropShadowFilter();
            _local1.blurX = (_local1.blurY = 1.5);
            _local1.distance = 3;
            _local1.alpha = 0.8;
            _local1.quality = BitmapFilterQuality.HIGH;
            _local1.color = ((this._renderer.customizations.edgeColor)==-1) ? ForegroundColor.BLACK : this._renderer.customizations.edgeColor;
            return ([_local1]);
        }
        private function createUniformFilters():Array{
            var _local1:GlowFilter = new GlowFilter();
            _local1.alpha = 1;
            _local1.blurX = (_local1.blurY = 1.5);
            _local1.color = ((this._renderer.customizations.edgeColor)==-1) ? ForegroundColor.BLACK : this._renderer.customizations.edgeColor;
            _local1.strength = 5;
            _local1.quality = BitmapFilterQuality.HIGH;
            return ([_local1]);
        }
        private function createDepressedFilters():Array{
            var _local1:DropShadowFilter = new DropShadowFilter();
            _local1.inner = true;
            _local1.alpha = 0.3;
            _local1.strength = 0xFF;
            _local1.angle = 45;
            _local1.distance = 1.5;
            _local1.quality = BitmapFilterQuality.HIGH;
            _local1.blurX = (_local1.blurY = 2);
            var _local2:BevelFilter = new BevelFilter();
            _local2.angle = 225;
            _local2.strength = 3;
            _local2.distance = 0.5;
            _local2.blurX = (_local2.blurY = 1.5);
            _local2.type = "outer";
            _local2.quality = BitmapFilterQuality.HIGH;
            _local2.highlightColor = ((this._renderer.customizations.edgeColor)==-1) ? ForegroundColor.WHITE : this._renderer.customizations.edgeColor;
            return ([_local1, _local2]);
        }
        private function createRaisedFilters():Array{
            var _local1:BevelFilter = new BevelFilter();
            _local1.angle = 45;
            _local1.strength = 3;
            _local1.distance = 0.5;
            _local1.blurX = (_local1.blurY = 1.5);
            _local1.type = "outer";
            _local1.quality = BitmapFilterQuality.LOW;
            _local1.highlightColor = ((this._renderer.customizations.edgeColor)==-1) ? ForegroundColor.WHITE : this._renderer.customizations.edgeColor;
            return ([_local1]);
        }

    }
}//package com.adobe.cc.cea608 
﻿package com.adobe.cc.cea608 {

    class Line21Character {

        public static const TRANSPARENT_SPACE:String = "TRANSPARENT_SPACE";
        public static const SPACE:String = String.fromCharCode(32);
        public static const SOLID_BLOCK_CODE:uint = 127;

        public static function fromStandardCharCode(byte:uint):String{
            if ((((byte >= 32)) && ((byte <= 127)))){
                switch (byte){
                    case 42:
                        byte = 225;
                        break;
                    case 92:
                        byte = 233;
                        break;
                    case 94:
                        byte = 237;
                        break;
                    case 95:
                        byte = 243;
                        break;
                    case 96:
                        byte = 250;
                        break;
                    case 123:
                        byte = 231;
                        break;
                    case 124:
                        byte = 247;
                        break;
                    case 125:
                        byte = 209;
                        break;
                    case 126:
                        byte = 241;
                        break;
                    case 127:
                        byte = 9608;
                        break;
                };
                return (String.fromCharCode(byte));
            };
            return (null);
        }
        public static function fromSpecialCharCode(bytePair:BytePair):Array{
            var _local4:int;
            var _local5:uint;
            var _local2:uint = bytePair.one;
            var _local3:uint = bytePair.two;
            switch (_local2){
                case 17:
                    _local4 = 1;
                    break;
                case 25:
                    _local4 = 2;
                    break;
                    return (null);
            };
            if ((((_local3 >= 48)) && ((_local3 <= 63)))){
                switch (_local3){
                    case 48:
                        _local5 = 174;
                        break;
                    case 49:
                        _local5 = 176;
                        break;
                    case 50:
                        _local5 = 189;
                        break;
                    case 51:
                        _local5 = 191;
                        break;
                    case 52:
                        _local5 = 8482;
                        break;
                    case 53:
                        _local5 = 162;
                        break;
                    case 54:
                        _local5 = 163;
                        break;
                    case 55:
                        _local5 = 9834;
                        break;
                    case 56:
                        _local5 = 224;
                        break;
                    case 57:
                        return ([_local4, Line21Character.TRANSPARENT_SPACE]);
                    case 58:
                        _local5 = 232;
                        break;
                    case 59:
                        _local5 = 226;
                        break;
                    case 60:
                        _local5 = 234;
                        break;
                    case 61:
                        _local5 = 238;
                        break;
                    case 62:
                        _local5 = 244;
                        break;
                    case 63:
                        _local5 = 251;
                        break;
                };
                return ([_local4, String.fromCharCode(_local5)]);
            };
            return (null);
        }
        public static function fromExtendedCharCode(bytePair:BytePair):Array{
            var _local4:int;
            var _local7:uint;
            var _local2:uint = bytePair.one;
            var _local3:uint = bytePair.two;
            switch (_local2){
                case 18:
                case 19:
                    _local4 = 1;
                    break;
                case 26:
                case 27:
                    _local4 = 2;
                    break;
                    return (null);
            };
            var _local5:Boolean = (((_local2 == 18)) || ((_local2 == 26)));
            var _local6:Boolean = (((_local2 == 19)) || ((_local2 == 27)));
            if ((((_local3 >= 32)) && ((_local3 <= 63)))){
                if (_local5){
                    switch (_local3){
                        case 32:
                            _local7 = 193;
                            break;
                        case 33:
                            _local7 = 201;
                            break;
                        case 34:
                            _local7 = 211;
                            break;
                        case 35:
                            _local7 = 218;
                            break;
                        case 36:
                            _local7 = 220;
                            break;
                        case 37:
                            _local7 = 252;
                            break;
                        case 38:
                            _local7 = 8216;
                            break;
                        case 39:
                            _local7 = 161;
                            break;
                        case 40:
                            _local7 = 42;
                            break;
                        case 41:
                            _local7 = 39;
                            break;
                        case 42:
                            _local7 = 9473;
                            break;
                        case 43:
                            _local7 = 169;
                            break;
                        case 44:
                            _local7 = 8480;
                            break;
                        case 45:
                            _local7 = 8226;
                            break;
                        case 46:
                            _local7 = 8220;
                            break;
                        case 47:
                            _local7 = 8221;
                            break;
                        case 48:
                            _local7 = 192;
                            break;
                        case 49:
                            _local7 = 194;
                            break;
                        case 50:
                            _local7 = 199;
                            break;
                        case 51:
                            _local7 = 200;
                            break;
                        case 52:
                            _local7 = 202;
                            break;
                        case 53:
                            _local7 = 203;
                            break;
                        case 54:
                            _local7 = 235;
                            break;
                        case 55:
                            _local7 = 206;
                            break;
                        case 56:
                            _local7 = 207;
                            break;
                        case 57:
                            _local7 = 239;
                            break;
                        case 58:
                            _local7 = 212;
                            break;
                        case 59:
                            _local7 = 217;
                            break;
                        case 60:
                            _local7 = 249;
                            break;
                        case 61:
                            _local7 = 219;
                            break;
                        case 62:
                            _local7 = 171;
                            break;
                        case 63:
                            _local7 = 187;
                            break;
                    };
                } else {
                    switch (_local3){
                        case 32:
                            _local7 = 195;
                            break;
                        case 33:
                            _local7 = 227;
                            break;
                        case 34:
                            _local7 = 205;
                            break;
                        case 35:
                            _local7 = 204;
                            break;
                        case 36:
                            _local7 = 236;
                            break;
                        case 37:
                            _local7 = 210;
                            break;
                        case 38:
                            _local7 = 242;
                            break;
                        case 39:
                            _local7 = 213;
                            break;
                        case 40:
                            _local7 = 245;
                            break;
                        case 41:
                            _local7 = 123;
                            break;
                        case 42:
                            _local7 = 125;
                            break;
                        case 43:
                            _local7 = 92;
                            break;
                        case 44:
                            _local7 = 652;
                            break;
                        case 45:
                            _local7 = 95;
                            break;
                        case 46:
                            _local7 = 124;
                            break;
                        case 47:
                            _local7 = 126;
                            break;
                        case 48:
                            _local7 = 196;
                            break;
                        case 49:
                            _local7 = 228;
                            break;
                        case 50:
                            _local7 = 214;
                            break;
                        case 51:
                            _local7 = 246;
                            break;
                        case 52:
                            _local7 = 223;
                            break;
                        case 53:
                            _local7 = 165;
                            break;
                        case 54:
                            _local7 = 164;
                            break;
                        case 55:
                            _local7 = 9475;
                            break;
                        case 56:
                            _local7 = 197;
                            break;
                        case 57:
                            _local7 = 229;
                            break;
                        case 58:
                            _local7 = 216;
                            break;
                        case 59:
                            _local7 = 248;
                            break;
                        case 60:
                            _local7 = 9487;
                            break;
                        case 61:
                            _local7 = 9491;
                            break;
                        case 62:
                            _local7 = 9495;
                            break;
                        case 63:
                            _local7 = 9499;
                            break;
                    };
                };
                return ([_local4, String.fromCharCode(_local7)]);
            };
            return (null);
        }

    }
}//package com.adobe.cc.cea608 
﻿package com.adobe.cc.cea608 {
    import flash.events.*;
    import flash.utils.*;
    import __AS3__.vec.*;
    import flash.errors.*;
    import com.adobe.cc.*;
    import com.adobe.cc.debug.*;

    public final class Decoder extends EventDispatcher {

        public static const CLASS_LOG_CATEGORY:String = "cea608.decoder";
        public static const ERROR_LOG_CATEGORY:String = "cea608.decoder";
        public static const DECODE_LOG_CATEGORY:String = (CLASS_LOG_CATEGORY + ".decode");
        public static const ON_CAPTION_INFO_LOG_CATEGORY:String = (CLASS_LOG_CATEGORY + ".on_caption_info");
        public static const ON_CAPTION_INFO_BYTES_LOG_CATEGORY:String = (ON_CAPTION_INFO_LOG_CATEGORY + ".bytes");
        public static const ON_CAPTION_INFO_BASE64_LOG_CATEGORY:String = (ON_CAPTION_INFO_LOG_CATEGORY + ".base64");
        public static const CC_DATA_LOG_CATEGORY:String = (CLASS_LOG_CATEGORY + ".cc_data");
        private static const MODE_OFF:int = 1;
        private static const MODE_TEXT:int = 2;
        private static const MODE_CAPTION:int = 3;
        private static const MODE_XDS:int = 4;
        private static const STYLE_ROLL_UP:int = 1;
        private static const STYLE_POP_ON:int = 2;
        private static const STYLE_PAINT_ON:int = 3;
        private static const SET_MODE_EXIT_XDS:int = -1;
        public static const ROW_COUNT:int = 15;
        public static const COL_COUNT:int = 32;

        private var _service:String;
        private var _activeServices:Vector.<String>;
        private var _mode:int;
        private var _captionStyle:int;
        private var _displayedMemory:Memory;
        private var _nondisplayedMemory:Memory;
        private var _activeChannel:int;
        private var _lastBytePair:BytePair;
        private var _currentIsRetransmit:Boolean;
        private var _lastWasRetransmit:Boolean;
        private var _interruptedMode:int;
        private var _interruptedCaptionStyle:int;
        private var _interruptedWindowSize:int;
        private var _windowSize:int;
        private var _cursorCol:int = 1;
        private var _startedRollupAnimation:Boolean;
        private var _rollupAnimationBaseRow:int;
        private var _rollupAnimationWindowSize:int;
        private var _isTemporarilyDisabled:Boolean;
        private var _goodBytesSinceLastValidityCheck:int;
        private var _totalBytesSinceLastValidityCheck:int;
        private var _currentIsNullBytePair:Boolean;

        public function Decoder(){
            this._service = CEA708Service.CC1;
            this._displayedMemory = this.createMemory();
            this._nondisplayedMemory = this.createMemory();
            this._activeServices = new Vector.<String>();
            this.reset();
        }
        static function inControlCodeRange(bytePair:BytePair):Boolean{
            return ((((((bytePair.one >= 16)) && ((bytePair.one <= 31)))) && ((((bytePair.two >= 32)) && ((bytePair.two <= 127))))));
        }
        public static function rollupTopRowNumber(baseRow:int, windowSize:int):int{
            return (((baseRow - windowSize) + 1));
        }
        public static function isRowInBounds(row:int):Boolean{
            return ((((1 <= row)) && ((row <= ROW_COUNT))));
        }
        public static function isColInBounds(col:int):Boolean{
            return ((((1 <= col)) && ((col <= COL_COUNT))));
        }

        private function dispatchRenderEvent():void{
            dispatchEvent(new DecoderEvent(DecoderEvent.RENDER, this));
        }
        private function createMemory():Memory{
            var _local1:Memory = new Memory();
            _local1.addEventListener(MemoryRowEvent.ADDED_ROW, this.onMemoryChangedEvent);
            _local1.addEventListener(MemoryEvent.CLEARED, this.onMemoryChangedEvent);
            _local1.addEventListener(MemoryRowEvent.ERASED_ROW, this.onMemoryChangedEvent);
            _local1.addEventListener(MemoryRowEvent.CHANGED_ROW, this.onMemoryChangedEvent);
            _local1.addEventListener(MemoryMovedRowEvent.MOVED_ROW, this.onMemoryChangedEvent);
            return (_local1);
        }
        private function onMemoryChangedEvent(event:MemoryEvent):void{
            if (event.memory != this._displayedMemory){
                return;
            };
            if (this.doesEventAbortRollUpAnimation(event)){
                this.abortRollupAnimation();
            };
            this.redispatchMemoryChangedEvent(event);
        }
        private function abortRollupAnimation():void{
            if (!this._startedRollupAnimation){
                return;
            };
            dispatchEvent(new DecoderEvent(DecoderEvent.STOP_ROLLUP_ANIMATION, this));
            this._startedRollupAnimation = false;
        }
        private function doesEventAbortRollUpAnimation(event:MemoryEvent):Boolean{
            var _local2:MemoryRowEvent = (((event is MemoryRowEvent)) ? (event as MemoryRowEvent) : null);
            var _local3:MemoryMovedRowEvent = (((event is MemoryMovedRowEvent)) ? (event as MemoryMovedRowEvent) : null);
            if (!this._startedRollupAnimation){
                return (false);
            };
            switch (event.type){
                case MemoryEvent.CLEARED:
                    return (true);
                case MemoryRowEvent.ERASED_ROW:
                case MemoryRowEvent.ADDED_ROW:
                case MemoryRowEvent.CHANGED_ROW:
                    return (this.isRollupAnimationRow(_local2.row.number));
                case MemoryMovedRowEvent.MOVED_ROW:
                    return (((this.isRollupAnimationRow(_local3.row.number)) || (this.isRollupAnimationRow(_local3.oldRowNumber))));
                    Log.warn(ERROR_LOG_CATEGORY, "shouldAbortRollupAnimation: unhandled event type {0}", event.type);
                    return (false);
            };
        }
        private function isRollupAnimationRow(rowNumber:int):Boolean{
            if (!this._startedRollupAnimation){
                return (false);
            };
            var _local2:int = rollupTopRowNumber(this._rollupAnimationBaseRow, this._rollupAnimationWindowSize);
            return ((((_local2 <= rowNumber)) && ((rowNumber < this._rollupAnimationBaseRow))));
        }
        private function redispatchMemoryChangedEvent(event:MemoryEvent):void{
            var _local2:MemoryRowEvent = (((event is MemoryRowEvent)) ? (event as MemoryRowEvent) : null);
            var _local3:MemoryMovedRowEvent = (((event is MemoryMovedRowEvent)) ? (event as MemoryMovedRowEvent) : null);
            switch (event.type){
                case MemoryEvent.CLEARED:
                    dispatchEvent(new DecoderEvent(DecoderEvent.CLEARED, this));
                    break;
                case MemoryRowEvent.ERASED_ROW:
                    dispatchEvent(new DecoderRowEvent(DecoderRowEvent.ERASED_ROW, this, _local2.row.number));
                    break;
                case MemoryRowEvent.ADDED_ROW:
                    dispatchEvent(new DecoderRowEvent(DecoderRowEvent.ADDED_ROW, this, _local2.row.number));
                    break;
                case MemoryRowEvent.CHANGED_ROW:
                    dispatchEvent(new DecoderRowEvent(DecoderRowEvent.CHANGED_ROW, this, _local2.row.number));
                    break;
                case MemoryMovedRowEvent.MOVED_ROW:
                    dispatchEvent(new DecoderMovedRowEvent(DecoderMovedRowEvent.MOVED_ROW, this, _local3.oldRowNumber, _local2.row.number));
                    break;
                    Log.warn(ERROR_LOG_CATEGORY, "redispatchMemoryChangedEvent: unhandled event type {0}", event.type);
            };
        }
        public function get service():String{
            return (this._service);
        }
        public function set service(value:String):void{
            if (((((((!((value == CEA708Service.CC1))) && (!((value == CEA708Service.CC2))))) && (!((value == CEA708Service.CC3))))) && (!((value == CEA708Service.CC4))))){
                throw (new ArgumentError());
            };
            this._service = value;
            this.reset();
        }
        public function isServiceActive(service:String):Boolean{
            return (!((this._activeServices.indexOf(service) == -1)));
        }
        public function clearActiveServiceList():void{
            this._activeServices = new Vector.<String>();
        }
        function get selectedDataChannel():int{
            switch (this._service){
                case CEA708Service.CC1:
                case CEA708Service.CC3:
                    return (1);
                case CEA708Service.CC2:
                case CEA708Service.CC4:
                    return (2);
                    Log.error(ERROR_LOG_CATEGORY, "selectedDataChannel unexpected value of selectedDataChannel");
                    return (0);
            };
        }
        function get selectedField():int{
            switch (this._service){
                case CEA708Service.CC1:
                case CEA708Service.CC2:
                    return (1);
                case CEA708Service.CC3:
                case CEA708Service.CC4:
                    return (2);
                    Log.error(ERROR_LOG_CATEGORY, "selectedDataChannel unexpected value of selectedDataChannel");
                    return (0);
            };
        }
        public function decodeOnCaptionInfoData(captionDataBase64:String):void{
            const LOG_CATEGORY:* = null;
            var actualCaptionDataBytes:* = null;
            var i:* = 0;
            var ccDatas:* = null;
            var ccData:* = null;
            var len:* = 0;
            var captionDataBase64:* = captionDataBase64;
            LOG_CATEGORY = ON_CAPTION_INFO_LOG_CATEGORY;
            Log.debug2(LOG_CATEGORY, "begin onCaptionInfo");
            captionDataBase64 = captionDataBase64.replace(" ", "");
            captionDataBase64 = captionDataBase64.replace("\n", "");
            captionDataBase64 = captionDataBase64.replace("\r", "");
            Log.debug3(ON_CAPTION_INFO_BASE64_LOG_CATEGORY, "base64: {0}", captionDataBase64);
            var result:* = new Vector.<ByteArray>();
            try {
                actualCaptionDataBytes = Base64Decoder.decode(captionDataBase64);
            } catch(e:Error) {
                Log.warn(LOG_CATEGORY, "base64 decode error: {0}", e);
            };
            actualCaptionDataBytes.position = 0;
            Log.debug3(ON_CAPTION_INFO_BYTES_LOG_CATEGORY, "bytes: {0}", actualCaptionDataBytes);
            var captionDataBytes:* = LoggedDataInput.create(actualCaptionDataBytes, LOG_CATEGORY, Log.DEBUG3);
            try {
                i = 0;
                ccDatas = [];
                while (captionDataBytes.bytesAvailable > 0) {
                    i = (i + 1);
                    Log.debug3(LOG_CATEGORY, "reading length-prefixed-cc_data #{0}", i);
                    len = captionDataBytes.readUnsignedInt();
                    i = (i + 1);
                    Log.debug3(LOG_CATEGORY, "length is #{0}", i);
                    ccData = new ByteArray();
                    captionDataBytes.readBytes(ccData, 0, len);
                    ccDatas.push(ccData);
                };
                if (DebugSettings.doReverseBytes){
                    ccDatas.reverse();
                };
                for each (ccData in ccDatas) {
                    this.decode608Over708CCData(ccData);
                };
            } catch(e:EOFError) {
                Log.warn(LOG_CATEGORY, "insufficient bytes: {0}", e);
            };
            Log.debug2(LOG_CATEGORY, "end onCaptionInfo");
        }
        public function decode608Over708CCData(ccDataActualBytes:ByteArray):void{
            const LOG_CATEGORY:* = null;
            var byte:* = 0;
            var processCCDataFlag:* = false;
            var ccCount:* = 0;
            var i:* = 0;
            var ccValid:* = false;
            var ccType:* = 0;
            var ccData1:* = 0;
            var ccData2:* = 0;
            var field:* = 0;
            var extraBytes:* = null;
            var ccDataActualBytes:* = ccDataActualBytes;
            LOG_CATEGORY = CC_DATA_LOG_CATEGORY;
            Log.debug3(LOG_CATEGORY, "bytes: {0}", ccDataActualBytes);
            var ccData:* = ccDataActualBytes;
            try {
                Log.debug2(LOG_CATEGORY, "begin cc_data");
                byte = ccData.readUnsignedByte();
                processCCDataFlag = !(((64 & byte) == 0));
                if (!processCCDataFlag){
                    Log.debug2(LOG_CATEGORY, "skipping rest because !processCCDataFlag");
                } else {
                    ccCount = (31 & byte);
                    ccData.readByte();
                    if (ccData.bytesAvailable < (ccCount * 3)){
                        Log.warn(LOG_CATEGORY, "skipping rest because ccData.bytesAvailable < ccCount * 3");
                    } else {
                        i = 0;
                        while (i < ccCount) {
                            Log.debug3(LOG_CATEGORY, "tuple #{0}", i);
                            byte = ccData.readUnsignedByte();
                            ccValid = !(((4 & byte) == 0));
                            ccType = (3 & byte);
                            ccData1 = ccData.readUnsignedByte();
                            ccData2 = ccData.readUnsignedByte();
                            Log.debug3(LOG_CATEGORY, "ccValid = {0}, ccType = {1b}, ccData1 = {2x}, ccData2 = {3x}", ccValid, ccType, ccData1, ccData2);
                            if (!ccValid){
                                Log.debug3(LOG_CATEGORY, "skipping this byte pair because !ccValid");
                            } else {
                                if (ccType == 0){
                                    field = 1;
                                } else {
                                    if (ccType == 1){
                                        field = 2;
                                    } else {
                                        Log.debug3(LOG_CATEGORY, "skipping remaining tuples because ccType was not 00 or 01");
                                        break;
                                    };
                                };
                                this.decodeBytePairFirstTime(new BytePair(field, ccData1, ccData2));
                            };
                            i = (i + 1);
                        };
                    };
                };
                if (ccData.bytesAvailable){
                    Log.debug2(LOG_CATEGORY, "skipping extra bytes");
                    extraBytes = new ByteArray();
                    ccData.readBytes(extraBytes, 0, 0);
                    Log.debug3(LOG_CATEGORY, "extra bytes: {0}", extraBytes);
                };
            } catch(e:EOFError) {
                Log.warn(LOG_CATEGORY, "insufficient bytes");
            };
            Log.debug2(LOG_CATEGORY, "end cc_data");
        }
        public function decode(bytes:ByteArray):void{
            var _local3:uint;
            var _local4:uint;
            var _local5:BytePair;
            var _local2:String = DECODE_LOG_CATEGORY;
            while (bytes.bytesAvailable >= 2) {
                _local3 = (bytes.readUnsignedByte() & 0xFF);
                _local4 = (bytes.readUnsignedByte() & 0xFF);
                _local5 = new BytePair(this.selectedField, _local3, _local4);
                this.decodeBytePairFirstTime(_local5);
            };
        }
        private function decodeBytePairFirstTime(bytePair:BytePair):void{
            var _local3:uint;
            var _local4:uint;
            var _local2:String = DECODE_LOG_CATEGORY;
            if (!isNaN(DebugSettings.artificialErrorRate)){
                _local3 = ((Math.random())<DebugSettings.artificialErrorRate) ? ((Math.random())>0.5) ? 128 : 0 : bytePair.oneWithParity;
                _local4 = ((Math.random())<DebugSettings.artificialErrorRate) ? ((Math.random())>0.5) ? 128 : 0 : bytePair.twoWithParity;
                bytePair = new BytePair(bytePair.field, (bytePair.one | _local3), (bytePair.two | _local4));
            };
            this.performEnableDisableAccounting(bytePair);
            if (this._isTemporarilyDisabled){
                Log.debug2(_local2, "temporarily disabled, drop {0}", bytePair);
                return;
            };
            this.decodeBytePair(bytePair);
        }
        private function performEnableDisableAccounting(bytePair:BytePair):void{
            var _local2:String = DECODE_LOG_CATEGORY;
            var _local3 = 400;
            var _local4 = 0.9;
            var _local5 = 0.975;
            if (bytePair.oneIsOddParity){
                this._goodBytesSinceLastValidityCheck++;
            };
            if (bytePair.twoIsOddParity){
                this._goodBytesSinceLastValidityCheck++;
            };
            this._totalBytesSinceLastValidityCheck = (this._totalBytesSinceLastValidityCheck + 2);
            if (this._totalBytesSinceLastValidityCheck < _local3){
                return;
            };
            Log.debug3(_local2, "{0} of {1} bytes were valid", this._goodBytesSinceLastValidityCheck, this._totalBytesSinceLastValidityCheck);
            var _local6:Number = ((this._goodBytesSinceLastValidityCheck as Number) / (this._totalBytesSinceLastValidityCheck as Number));
            if (((!(this._isTemporarilyDisabled)) && ((_local6 <= _local4)))){
                Log.debug1(_local2, "disabled");
                this.reset();
                this._isTemporarilyDisabled = true;
            } else {
                if (((this._isTemporarilyDisabled) && ((_local6 >= _local5)))){
                    Log.debug1(_local2, "re-enabled");
                    this._isTemporarilyDisabled = false;
                };
            };
            this._goodBytesSinceLastValidityCheck = 0;
            this._totalBytesSinceLastValidityCheck = 0;
        }
        private function decodeBytePair(bytePair:BytePair):void{
            var _local2:String = DECODE_LOG_CATEGORY;
            this.validate();
            this.tryToRegisterActiveService(bytePair);
            if (bytePair.field != this.selectedField){
                Log.debug3(_local2, "ignore {0}", bytePair);
                return;
            };
            Log.debug3(_local2, "decode {0}", bytePair);
            this._currentIsRetransmit = false;
            this._currentIsNullBytePair = false;
            switch (this._mode){
                case MODE_XDS:
                    this.decodeForXdsMode(bytePair);
                    break;
                case MODE_OFF:
                case MODE_CAPTION:
                case MODE_TEXT:
                    this.decodeForOtherModes(bytePair);
                    break;
                    Log.error(_local2, "invalid value for mode {0}", this._mode);
            };
            if (!this._currentIsNullBytePair){
                this._lastWasRetransmit = this._currentIsRetransmit;
                this._lastBytePair = bytePair;
            };
            this.validate();
        }
        private function decodeForOtherModes(bytePair:BytePair):void{
            var _local2:String = DECODE_LOG_CATEGORY;
            if (this.decodeEnterXDS(bytePair)){
                return;
            };
            if (this.decodeStandardParityBehavior(bytePair)){
                return;
            };
            if (this.decodeControlCodeRetransmission(bytePair)){
                return;
            };
            if (this.decodeControlCode(bytePair)){
                return;
            };
            this.decodePrintableCharacter(bytePair);
        }
        private function decodeEnterXDS(bytePair:BytePair):Boolean{
            var _local2:String = DECODE_LOG_CATEGORY;
            if (this.selectedField != 2){
                return (false);
            };
            if (((!(bytePair.oneIsOddParity)) || (!(bytePair.twoIsOddParity)))){
                return (false);
            };
            if ((((1 <= bytePair.one)) && ((bytePair.one <= 15)))){
                Log.debug1(_local2, "enter xds");
                this.setMode(MODE_XDS, 0, 0);
                Log.debug2(_local2, "retrying byte pair after switching mode");
                this.decodeForXdsMode(bytePair);
                return (true);
            };
            return (false);
        }
        private function decodeStandardParityBehavior(bytePair:BytePair):Boolean{
            var _local2:String = DECODE_LOG_CATEGORY;
            if (!bytePair.twoIsOddParity){
                Log.debug1(_local2, "byte 2 failed parity");
                return (true);
            };
            if (!bytePair.oneIsOddParity){
                if (((this._lastBytePair) && ((this._lastBytePair.twoWithParity == bytePair.twoWithParity)))){
                    return (true);
                };
                Log.debug1(_local2, "byte 1 failed parity");
                this.decodeBytePair(new BytePair(bytePair.field, Line21Character.SOLID_BLOCK_CODE, bytePair.twoWithParity));
                return (true);
            };
            return (false);
        }
        private function decodeControlCodeRetransmission(bytePair:BytePair):Boolean{
            var _local2:String = DECODE_LOG_CATEGORY;
            if (!inControlCodeRange(bytePair)){
                return (false);
            };
            if (!this._lastBytePair){
                return (false);
            };
            if (((!((this._lastBytePair.oneWithParity == bytePair.oneWithParity))) || (!((this._lastBytePair.twoWithParity == bytePair.twoWithParity))))){
                return (false);
            };
            if (this._lastWasRetransmit){
                return (false);
            };
            Log.debug1(_local2, "ignoring retransmission");
            this._currentIsRetransmit = true;
            return (true);
        }
        private function decodeControlCode(bytePair:BytePair):Boolean{
            var _local2:String = DECODE_LOG_CATEGORY;
            if (!Decoder.inControlCodeRange(bytePair)){
                return (false);
            };
            if (this.decodeSpecialCharControlCode(bytePair)){
                return (true);
            };
            if (this.decodeExtendedCharControlCode(bytePair)){
                return (true);
            };
            if (this.decodePreambleAddressControlCode(bytePair)){
                return (true);
            };
            if (this.decodeMidRowAttributeControlCode(bytePair)){
                return (true);
            };
            if (this.decodeBackgroundAttributeControlCode(bytePair)){
                return (true);
            };
            if (this.decodeMiscCommandControlCode(bytePair)){
                return (true);
            };
            Log.debug1(_local2, "ignoring unknown control code");
            return (true);
        }
        private function decodeForXdsMode(bytePair:BytePair):Boolean{
            var _local2:String = DECODE_LOG_CATEGORY;
            if (((!(bytePair.oneIsOddParity)) || (!(bytePair.twoIsOddParity)))){
                Log.debug2(_local2, "xds parity failed");
                return (true);
            };
            if ((((16 <= bytePair.one)) && ((bytePair.one <= 31)))){
                Log.debug1(_local2, "exiting xds");
                this.setMode(SET_MODE_EXIT_XDS, 0, 0);
                this.decodeBytePair(bytePair);
                return (true);
            };
            return (true);
        }
        private function decodeSpecialCharControlCode(bytePair:BytePair):Boolean{
            var _local2:String = DECODE_LOG_CATEGORY;
            var _local3:Array = Line21Character.fromSpecialCharCode(bytePair);
            if (!_local3){
                return (false);
            };
            var _local4:int = _local3[0];
            var _local5:String = (_local3[1] as String);
            if (_local4 != this.selectedDataChannel){
                Log.debug3(_local2, "ignore special character: {0} data channel: {1}", _local5, _local4);
                return (true);
            };
            Log.debug1(_local2, "special character: {0} data channel: {1}", _local5, _local4);
            this.processCharacter(_local5);
            return (true);
        }
        private function decodeExtendedCharControlCode(bytePair:BytePair):Boolean{
            var _local2:String = DECODE_LOG_CATEGORY;
            var _local3:Array = Line21Character.fromExtendedCharCode(bytePair);
            if (!_local3){
                return (false);
            };
            var _local4:int = _local3[0];
            var _local5:String = (_local3[1] as String);
            if (_local4 != this.selectedDataChannel){
                Log.debug3(_local2, "ignore extended character: {0} data channel: {1}", _local5, _local4);
                return (true);
            };
            Log.debug1(_local2, "extended character: {0} data channel: {1}", _local5, _local4);
            this.processBS();
            this.processCharacter(_local5);
            return (true);
        }
        private function decodePreambleAddressControlCode(bytePair:BytePair):Boolean{
            var _local2:String = DECODE_LOG_CATEGORY;
            var _local3:Array = PreambleAddressCode.fromCode(bytePair);
            if (!_local3){
                return (false);
            };
            var _local4:int = _local3[0];
            var _local5:PreambleAddressCode = (_local3[1] as PreambleAddressCode);
            this._activeChannel = _local4;
            if (this._activeChannel != this.selectedDataChannel){
                Log.debug3(_local2, "ignore pac: {0} data channel: {1}", _local5, _local4);
                return (true);
            };
            Log.debug1(_local2, "pac: {0} data channel: {1}", _local5, _local4);
            this.processPAC(_local5);
            return (true);
        }
        private function decodeMidRowAttributeControlCode(bytePair:BytePair):Boolean{
            var _local2:String = DECODE_LOG_CATEGORY;
            var _local3:Array = MidRowTextAttribute.fromCode(bytePair);
            if (!_local3){
                return (false);
            };
            var _local4:int = _local3[0];
            var _local5:MidRowTextAttribute = (_local3[1] as MidRowTextAttribute);
            this._activeChannel = _local4;
            if (this._activeChannel != this.selectedDataChannel){
                Log.debug3(_local2, "ignore mid-row text attribute: {0} data channel: {1}", _local5, _local4);
                return (true);
            };
            if (this._mode != MODE_CAPTION){
                Log.debug3(_local2, "ignore mid-row text attribute: {0} data channel: {1}", _local5, _local4);
                return (true);
            };
            Log.debug1(_local2, "mid-row text attribute: {0} data channel: {1}", _local5, _local4);
            if (_local5.foregroundAttribute){
                this.processBS();
            };
            this.processMidRowAttributeControlCode(_local5);
            return (true);
        }
        private function decodeBackgroundAttributeControlCode(bytePair:BytePair):Boolean{
            var _local2:String = DECODE_LOG_CATEGORY;
            var _local3:Array = BackgroundAttributeCode.fromCode(bytePair);
            if (!_local3){
                return (false);
            };
            var _local4:int = _local3[0];
            var _local5:BackgroundAttributeCode = (_local3[1] as BackgroundAttributeCode);
            this._activeChannel = _local4;
            if (this._activeChannel != this.selectedDataChannel){
                Log.debug3(_local2, "ignore background attribute: {0} data channel: {1}", _local5, _local4);
                return (true);
            };
            if (this._mode != MODE_CAPTION){
                Log.debug3(_local2, "ignore background attribute: {0} data channel: {1}", _local5, _local4);
                return (true);
            };
            Log.debug1(_local2, "background attribute: {0} data channel: {1}", _local5, _local4);
            this.processBS();
            this.processBackgroundAttributeControlCode(_local5);
            return (true);
        }
        private function decodeMiscCommandControlCode(bytePair:BytePair):Boolean{
            var _local2:String = DECODE_LOG_CATEGORY;
            var _local3:Array = MiscCommandCode.fromCode(bytePair);
            if (!_local3){
                return (false);
            };
            var _local4:int = _local3[0];
            var _local5:String = (_local3[1] as String);
            this._activeChannel = _local4;
            if (this._activeChannel != this.selectedDataChannel){
                Log.debug3(_local2, "ignore misc command: {0} data channel: {1}", _local5, _local4);
                return (true);
            };
            Log.debug1(_local2, "misc command: {0} data channel: {1}", _local5, _local4);
            this.processCommandCode(_local5);
            return (true);
        }
        private function decodePrintableCharacter(bytePair:BytePair):void{
            var _local2:String = DECODE_LOG_CATEGORY;
            if ((((0 <= bytePair.one)) && ((bytePair.one <= 15)))){
                Log.debug2(_local2, "0x00-0x0f byte 1");
                if (!this.decodeStandardCharacter(bytePair.two)){
                    Log.debug2(_local2, "unable to decode byte 2 as printable char");
                    this._currentIsNullBytePair = true;
                };
                return;
            };
            if (!this.decodeStandardCharacter(bytePair.one)){
                Log.debug2(_local2, "unable to decode byte 1 as printable char");
            };
            if (!this.decodeStandardCharacter(bytePair.two)){
                Log.debug2(_local2, "unable to decode byte 2 as printable char");
            };
        }
        public function reset():void{
            this._mode = MODE_OFF;
            this._captionStyle = 0;
            this._interruptedMode = 0;
            this._interruptedWindowSize = 0;
            this._interruptedCaptionStyle = 0;
            this._activeChannel = 1;
            this._lastBytePair = null;
            this._currentIsRetransmit = false;
            this._lastWasRetransmit = false;
            this._windowSize = 0;
            this._displayedMemory.clear();
            this._nondisplayedMemory.clear();
            this._startedRollupAnimation = false;
            this._rollupAnimationBaseRow = 0;
            this._isTemporarilyDisabled = false;
            this._goodBytesSinceLastValidityCheck = 0;
            this._totalBytesSinceLastValidityCheck = 0;
            this._currentIsNullBytePair = false;
            this.cursorCol = 1;
            dispatchEvent(new DecoderEvent(DecoderEvent.RESET, this));
            this.dispatchRenderEvent();
        }
        private function isCaptionStyleCommand(cmd:String):Boolean{
            switch (cmd){
                case MiscCommandCode.RCL:
                case MiscCommandCode.RDC:
                case MiscCommandCode.EOC:
                case MiscCommandCode.RU2:
                case MiscCommandCode.RU3:
                case MiscCommandCode.RU4:
                    return (true);
                    return (false);
            };
        }
        private function decodeStandardCharacter(byte:uint):Boolean{
            var _local2:String = DECODE_LOG_CATEGORY;
            var _local3:String = Line21Character.fromStandardCharCode(byte);
            if (!_local3){
                return (false);
            };
            if (this._activeChannel != this.selectedDataChannel){
                Log.debug3(_local2, "ignore standard char: {0} dataChannel: {1}", _local3, this._activeChannel);
                return (true);
            };
            Log.debug1(_local2, "standard char: {0} dataChannel: {1}", _local3, this._activeChannel);
            this.processCharacter(_local3);
            return (true);
        }
        private function get mutableMemory():Memory{
            return (((this._captionStyle)==STYLE_POP_ON) ? this._nondisplayedMemory : this._displayedMemory);
        }
        private function processCommandCode(cmd:String):void{
            switch (cmd){
                case MiscCommandCode.RCL:
                    this.processRCL();
                    break;
                case MiscCommandCode.RU2:
                    this.processRU(2);
                    break;
                case MiscCommandCode.RU3:
                    this.processRU(3);
                    break;
                case MiscCommandCode.RU4:
                    this.processRU(4);
                    break;
                case MiscCommandCode.TR:
                    this.processTR();
                    break;
                case MiscCommandCode.RTD:
                    this.processRTD();
                    break;
                case MiscCommandCode.RDC:
                    this.processRDC();
                    break;
                case MiscCommandCode.EOC:
                    this.processEOC();
                    break;
                case MiscCommandCode.BS:
                    this.processBS();
                    break;
                case MiscCommandCode.AOF:
                    break;
                case MiscCommandCode.AON:
                    break;
                case MiscCommandCode.DER:
                    this.processDER();
                    break;
                case MiscCommandCode.FON:
                    this.processCharacter(Line21Character.SPACE);
                    break;
                case MiscCommandCode.EDM:
                    this.processEDM();
                    break;
                case MiscCommandCode.CR:
                    this.processCR();
                    break;
                case MiscCommandCode.ENM:
                    this.processENM();
                    break;
                case MiscCommandCode.TO1:
                    this.processTO(1);
                    break;
                case MiscCommandCode.TO2:
                    this.processTO(2);
                    break;
                case MiscCommandCode.TO3:
                    this.processTO(3);
                    break;
            };
        }
        private function processRCL():void{
            this.setMode(MODE_CAPTION, STYLE_POP_ON, 0);
        }
        private function processRU(n:int):void{
            this.setMode(MODE_CAPTION, STYLE_ROLL_UP, n);
        }
        private function processTR():void{
            this.setMode(MODE_TEXT, 0, 0);
        }
        private function processRTD():void{
            this.setMode(MODE_TEXT, 0, 0);
        }
        private function processRDC():void{
            this.setMode(MODE_CAPTION, STYLE_PAINT_ON, 0);
        }
        private function processEOC():void{
            var _local1:Memory = this._displayedMemory;
            this._displayedMemory = this._nondisplayedMemory;
            this._nondisplayedMemory = _local1;
            this.abortRollupAnimation();
            dispatchEvent(new DecoderEvent(DecoderEvent.SWAPPED, this));
            this.dispatchRenderEvent();
            this.setMode(MODE_CAPTION, STYLE_POP_ON, 0);
        }
        private function processMidRowAttributeControlCode(value:MidRowTextAttribute):void{
            if (this._mode != MODE_CAPTION){
                return;
            };
            this.mutableMemory.current.setCellToMidrowCode(this.cursorCol, value);
            this.mutableMemory.gcRows();
            this.cursorCol = (this.cursorCol + 1);
            if (this.mutableMemory == this._displayedMemory){
                this.dispatchRenderEvent();
            };
        }
        private function processBackgroundAttributeControlCode(value:BackgroundAttributeCode):void{
            if (this._mode != MODE_CAPTION){
                return;
            };
            this.mutableMemory.current.setCellToBackgroundCode(this.cursorCol, value);
            this.mutableMemory.gcRows();
            this.cursorCol = (this.cursorCol + 1);
            if (this.mutableMemory == this._displayedMemory){
                this.dispatchRenderEvent();
            };
        }
        private function processDER():void{
            if (this._mode != MODE_CAPTION){
                return;
            };
            var _local1:int = this.cursorCol;
            while (_local1 <= COL_COUNT) {
                this.mutableMemory.current.eraseCell(_local1);
                _local1++;
            };
            if (this.mutableMemory == this._displayedMemory){
                this.dispatchRenderEvent();
            };
        }
        private function processPAC(pac:PreambleAddressCode):void{
            var _local2:int;
            var _local3:int;
            var _local4:int;
            var _local5:int;
            if (this._mode != MODE_CAPTION){
                return;
            };
            if (this._captionStyle == STYLE_ROLL_UP){
                if (pac.row != this.cursorRowNumber){
                    this.abortRollupAnimation();
                    _local2 = this.cursorRowNumber;
                    _local3 = pac.row;
                    _local4 = rollupTopRowNumber(_local3, this._windowSize);
                    if (!isRowInBounds(_local4)){
                        _local3 = this._windowSize;
                        _local4 = rollupTopRowNumber(_local3, this._windowSize);
                    };
                    _local5 = rollupTopRowNumber(_local2, this._windowSize);
                    this._displayedMemory.shift((_local4 - _local5));
                };
            } else {
                this.mutableMemory.promoteOrCreate(pac.row);
            };
            this.cursorCol = (1 + pac.indent);
            if (this.cursorRow.isEmpty){
                this.cursorRow.color = pac.color;
                this.cursorRow.italicized = pac.italicized;
                this.cursorRow.underlined = pac.underlined;
            };
            if (this.mutableMemory == this._displayedMemory){
                this.dispatchRenderEvent();
            };
        }
        private function processBS():void{
            if (this._mode != MODE_CAPTION){
                return;
            };
            if (this.cursorCol == 1){
                return;
            };
            if (this.cursorCol == COL_COUNT){
                this.mutableMemory.current.eraseCell(32);
                this.mutableMemory.current.eraseCell(31);
                this.cursorCol = 31;
            } else {
                this.cursorCol = (this.cursorCol - 1);
                this.mutableMemory.current.eraseCell(this.cursorCol);
            };
            if (this.mutableMemory == this._displayedMemory){
                this.dispatchRenderEvent();
            };
        }
        private function processEDM():void{
            if (this._mode != MODE_CAPTION){
                return;
            };
            this._displayedMemory.clear();
            this.dispatchRenderEvent();
        }
        private function processENM():void{
            if (this._mode != MODE_CAPTION){
                return;
            };
            this._nondisplayedMemory.clear();
        }
        private function processCR():void{
            if (this._mode != MODE_CAPTION){
                return;
            };
            var _local1:Boolean = (((this._mode == MODE_CAPTION)) && ((this._captionStyle == STYLE_ROLL_UP)));
            if (!_local1){
                return;
            };
            this.abortRollupAnimation();
            this._rollupAnimationBaseRow = this.cursorRowNumber;
            this._rollupAnimationWindowSize = this._windowSize;
            dispatchEvent(new DecoderEvent(DecoderEvent.START_ROLLUP_ANIMATION, this));
            this._displayedMemory.erase(rollupTopRowNumber(this._rollupAnimationBaseRow, this._windowSize));
            this._displayedMemory.shift(-1);
            this._displayedMemory.promoteOrCreate(this._rollupAnimationBaseRow);
            this._startedRollupAnimation = true;
            this.cursorCol = 1;
            this.dispatchRenderEvent();
        }
        private function processCharacter(value:String):void{
            if (this._mode != MODE_CAPTION){
                return;
            };
            this.mutableMemory.current.setCellToChar(this.cursorCol, value);
            this.mutableMemory.gcRows();
            this.cursorCol = (this.cursorCol + 1);
            if (this.mutableMemory == this._displayedMemory){
                this.dispatchRenderEvent();
            };
        }
        private function processTO(n:int):void{
            if (this._mode != MODE_CAPTION){
                return;
            };
            this.cursorCol = (this.cursorCol + n);
        }
        private function setMode(newMode:int, newCaptionStyle:int, newWindowSize:int):void{
            var _local4:String = DECODE_LOG_CATEGORY;
            var _local5:int = this._mode;
            var _local6:int = this._captionStyle;
            var _local7:int = this._windowSize;
            Log.debug2(_local4, "mode change {0} -> {1}", _local5, this._mode);
            this._mode = newMode;
            switch (newMode){
                case SET_MODE_EXIT_XDS:
                    this.onSpecialExitXdsMode(_local5, _local6, _local7);
                    break;
                case MODE_XDS:
                case MODE_TEXT:
                    this.onEnterTextOrXdsMode(_local5, _local6, _local7);
                    break;
                case MODE_CAPTION:
                    this.onEnterCaptionMode(_local5, _local6, _local7, newCaptionStyle, newWindowSize);
                    break;
                    Log.error(CLASS_LOG_CATEGORY, "ignoring setMode to unknown mode ({0}).", newMode);
            };
        }
        private function onSpecialExitXdsMode(oldMode:int, oldCaptionStyle:int, oldWindowSize:int):void{
            if (this._interruptedMode == 0){
                Log.error(CLASS_LOG_CATEGORY, "onSpecialExitXdsMode called when _interruptedMode was 0");
                return;
            };
            this._mode = this._interruptedMode;
            this._captionStyle = this._interruptedCaptionStyle;
            this._windowSize = this._interruptedWindowSize;
            this._interruptedMode = 0;
            this._interruptedCaptionStyle = 0;
            this._interruptedWindowSize = 0;
        }
        private function onEnterTextOrXdsMode(oldMode:int, oldCaptionStyle:int, oldWindowSize:int):void{
            switch (oldMode){
                case MODE_XDS:
                case MODE_TEXT:
                    break;
                case MODE_OFF:
                case MODE_CAPTION:
                    this._interruptedMode = oldMode;
                    this._interruptedCaptionStyle = oldCaptionStyle;
                    this._interruptedWindowSize = oldWindowSize;
                    break;
                    Log.error(CLASS_LOG_CATEGORY, "ignoring onEnterTextOrXdsMode from unknown mode ({0}).", oldMode);
            };
        }
        private function onEnterCaptionMode(oldMode:int, oldCaptionStyle:int, oldWindowSize:int, newCaptionStyle:int, newWindowSize:int):void{
            var _local6:int;
            var _local7:int;
            var _local8:int;
            var _local9:int;
            if (!newCaptionStyle){
                Log.error(CLASS_LOG_CATEGORY, "onEnterCaptionMode called with invalid newCaptionStyle");
                return;
            };
            if ((((newCaptionStyle == STYLE_ROLL_UP)) && (!(newWindowSize)))){
                Log.error(CLASS_LOG_CATEGORY, "onEnterCaptionMode called with invalid newWindowSize");
                return;
            };
            if ((((this._mode == MODE_XDS)) || ((this._mode == MODE_TEXT)))){
                if (!this._interruptedMode){
                    Log.error(CLASS_LOG_CATEGORY, "onEnterCaptionMode called from xds or text mode, but _interruptedMode was 0");
                    return;
                };
                this._mode = this._interruptedMode;
                this._captionStyle = this._interruptedCaptionStyle;
                this._windowSize = this._interruptedWindowSize;
                oldMode = this._mode;
                oldCaptionStyle = this._captionStyle;
                oldWindowSize = this._windowSize;
                this._interruptedMode = 0;
                this._interruptedCaptionStyle = 0;
                this._interruptedWindowSize = 0;
            };
            this._captionStyle = newCaptionStyle;
            this._windowSize = newWindowSize;
            if (newCaptionStyle == STYLE_ROLL_UP){
                if (oldCaptionStyle == STYLE_ROLL_UP){
                    _local6 = rollupTopRowNumber(this.cursorRowNumber, oldWindowSize);
                    _local7 = rollupTopRowNumber(this.cursorRowNumber, newWindowSize);
                    _local8 = this.cursorRow.number;
                    if (oldWindowSize > newWindowSize){
                        _local9 = _local6;
                        while (_local9 < _local7) {
                            this._displayedMemory.erase(_local9);
                            _local9++;
                        };
                    };
                    if (_local7 < 1){
                        this._displayedMemory.shift((1 - _local7));
                    };
                    this.cursorCol = 1;
                } else {
                    this._displayedMemory.clear();
                    this._nondisplayedMemory.clear();
                    this._displayedMemory.promoteOrCreate(15);
                    this.cursorCol = 1;
                };
                this.dispatchRenderEvent();
            };
        }
        private function get cursorCol():int{
            return (this._cursorCol);
        }
        private function set cursorCol(value:int):void{
            this._cursorCol = value;
            if (this._cursorCol < 1){
                this._cursorCol = 1;
            };
            if (this._cursorCol > COL_COUNT){
                this._cursorCol = COL_COUNT;
            };
        }
        private function get cursorRow():MemoryRow{
            return (this.mutableMemory.current);
        }
        private function get cursorRowNumber():int{
            return (this.cursorRow.number);
        }
        private function tryToRegisterActiveService(bytePair:BytePair):void{
            var _local3:int;
            var _local5:String;
            var _local2:Array = MiscCommandCode.fromCode(bytePair);
            if (!_local2){
                return;
            };
            _local3 = _local2[0];
            var _local4:String = (_local2[1] as String);
            switch (_local4){
                case MiscCommandCode.RCL:
                case MiscCommandCode.RU2:
                case MiscCommandCode.RU3:
                case MiscCommandCode.RU4:
                case MiscCommandCode.RDC:
                case MiscCommandCode.EOC:
                    _local5 = this.getServiceForFieldAndChannel(bytePair.field, _local3);
                    if (_local5 != null){
                        this.registerActiveService(_local5);
                    };
                    break;
            };
        }
        private function registerActiveService(activeService:String):void{
            if (this._activeServices.indexOf(activeService) == -1){
                this._activeServices.push(activeService);
                dispatchEvent(new DecoderActiveServiceEvent(DecoderActiveServiceEvent.NEW_CC_SERVICE_ACTIVE, this, activeService));
                Log.info(CLASS_LOG_CATEGORY, (("The service '" + activeService) + "' is active !"));
            };
        }
        private function getServiceForFieldAndChannel(field:int, dataChannel:int):String{
            if (dataChannel == 1){
                switch (field){
                    case 1:
                        return (CEA708Service.CC1);
                    case 2:
                        return (CEA708Service.CC3);
                        return (null);
                };
            };
            if (dataChannel == 2){
                switch (field){
                    case 1:
                        return (CEA708Service.CC2);
                    case 2:
                        return (CEA708Service.CC4);
                        return (null);
                };
            };
            return (null);
        }
        public function renderRowNumber(rowNumber:int, displayRow:GridRow):void{
            this.renderRow(this._displayedMemory.find(rowNumber), displayRow);
        }
        private function renderRow(memoryRow:MemoryRow, displayRow:GridRow):void{
            var _local9:Object;
            var _local10:String;
            var _local11:Cell;
            var _local12:MidRowTextAttribute;
            var _local13:BackgroundAttributeCode;
            if (!memoryRow){
                displayRow.clear();
                return;
            };
            var _local3:int = memoryRow.color;
            var _local4:Boolean = memoryRow.italicized;
            var _local5:Boolean = memoryRow.underlined;
            var _local6:int = ForegroundColor.BLACK;
            var _local7 = 1;
            var _local8 = 1;
            while (_local8 <= COL_COUNT) {
                _local9 = memoryRow.getCell(_local8);
                if (!_local9){
                    displayRow.setCell(_local8, null);
                } else {
                    if ((_local9 is MidRowTextAttribute)){
                        _local12 = (_local9 as MidRowTextAttribute);
                        if (_local12.italicized){
                            _local4 = true;
                        } else {
                            _local3 = _local12.color;
                            _local4 = false;
                        };
                        _local5 = _local12.underlined;
                        _local10 = Line21Character.SPACE;
                    } else {
                        if ((_local9 is BackgroundAttributeCode)){
                            _local13 = (_local9 as BackgroundAttributeCode);
                            _local6 = _local13.color;
                            _local7 = _local13.opacity;
                            _local10 = Line21Character.SPACE;
                        } else {
                            if ((_local9 is String)){
                                _local10 = (_local9 as String);
                            } else {
                                Log.error(CLASS_LOG_CATEGORY, "computeDisplayGrid found an unknown cell type");
                            };
                        };
                    };
                    _local11 = new Cell();
                    _local11.character = _local10;
                    _local11.backgroundColor = _local6;
                    _local11.italicized = _local4;
                    _local11.backgroundOpacity = _local7;
                    _local11.color = _local3;
                    _local11.underlined = _local5;
                    displayRow.setCell(_local8, _local11);
                };
                _local8++;
            };
        }
        public function renderGrid(grid:Grid):void{
            var grid:* = grid;
            grid.clear();
            this._displayedMemory.forEach(function (memoryRow:MemoryRow, ... _args):void{
                var _local3:GridRow = grid.getRow(memoryRow.number);
                renderRow(memoryRow, _local3);
            }, this);
        }
        private function validate():void{
            if (!DebugSettings.verify){
                return;
            };
            this._displayedMemory.validate();
            this._nondisplayedMemory.validate();
        }
        public function get rollupAnimationBaseRow():int{
            return (this._rollupAnimationBaseRow);
        }
        public function get rollupAnimationWindowSize():int{
            return (this._rollupAnimationWindowSize);
        }
        public function get rollupAnimationTopRowNumber():int{
            return (rollupTopRowNumber(this._rollupAnimationBaseRow, this._rollupAnimationWindowSize));
        }
        public function getDisplayedRowNumbers():Vector.<int>{
            var result:* = null;
            result = new Vector.<int>();
            this._displayedMemory.forEach(function (row:MemoryRow, ... _args):void{
                result.push(row.number);
            });
            return (result);
        }

    }
}//package com.adobe.cc.cea608 
﻿package com.adobe.cc.cea608 {
    import flash.display.*;
    import flash.events.*;
    import flash.utils.*;
    import flash.geom.*;
    import __AS3__.vec.*;
    import com.adobe.cc.debug.*;

    public final class DisplayObjectCaptionRenderer {

        public static const LOG_CATEGORY:String = "com.adobe.cc.DisplayObjectCaptionRenderer";
        private static const ANIMATION_RESOLUTION_MS:Number = 20;
        private static const ANIMATION_DURATION_MS:Number = 433;
        private static const MAX_ROW_SPRITE_COUNT:int = 5;

        private var _decoder:Decoder;
        private var _metrics:RendererMetrics;
        private var _customizations:RendererCustomizations;
        private var _mainSprite:Sprite;
        private var _captionsSprite:Sprite;
        private var _debug:DisplayDebug;
        private var _rows:Vector.<DisplayRow>;
        private var _rollupTopRow:DisplayRow;
        private var _rollupMask:DisplayRollupMask;
        private var _rollup:Boolean;
        private var _rollupTimer:Timer;
        private var _rollupStartTimeMs:Number;

        public function DisplayObjectCaptionRenderer(decoder:Decoder){
            var _local3:DisplayRow;
            super();
            if (!decoder){
                throw (new ArgumentError());
            };
            this._decoder = decoder;
            this._decoder.addEventListener(DecoderEvent.RESET, this.onDecoderReset, false, 0, true);
            this._decoder.addEventListener(DecoderEvent.RENDER, this.onDecoderRender, false, 0, true);
            this._decoder.addEventListener(DecoderEvent.SWAPPED, this.onDecoderSwapped, false, 0, true);
            this._decoder.addEventListener(DecoderEvent.CLEARED, this.onDecoderCleared, false, 0, true);
            this._decoder.addEventListener(DecoderEvent.START_ROLLUP_ANIMATION, this.onDecoderStartRollupAnimation, false, 0, true);
            this._decoder.addEventListener(DecoderEvent.STOP_ROLLUP_ANIMATION, this.onDecoderStopRollupAnimation, false, 0, true);
            this._decoder.addEventListener(DecoderRowEvent.ADDED_ROW, this.onDecoderAddedRow, false, 0, true);
            this._decoder.addEventListener(DecoderRowEvent.ERASED_ROW, this.onDecoderErasedRow, false, 0, true);
            this._decoder.addEventListener(DecoderRowEvent.CHANGED_ROW, this.onDecoderChangedRow, false, 0, true);
            this._decoder.addEventListener(DecoderMovedRowEvent.MOVED_ROW, this.onDecoderMovedRow, false, 0, true);
            this._customizations = new RendererCustomizations();
            this._customizations.addEventListener(Event.CHANGE, this.onCustomizationsChanged);
            this._metrics = new RendererMetrics();
            this._metrics.customizations = this._customizations;
            this._metrics.addEventListener(Event.CHANGE, this.onMetricsChanged);
            this._mainSprite = new Sprite();
            this._captionsSprite = new Sprite();
            this._mainSprite.addChild(this._captionsSprite);
            this._debug = new DisplayDebug(this);
            this._mainSprite.addChild(this._debug.sprite);
            this._rows = new Vector.<DisplayRow>();
            var _local2:int;
            while (_local2 < MAX_ROW_SPRITE_COUNT) {
                _local3 = new DisplayRow(this);
                this._captionsSprite.addChild(_local3.sprite);
                this._rows.push(_local3);
                _local2++;
            };
            this._rollupMask = new DisplayRollupMask(this);
            this._captionsSprite.parent.addChild(this._rollupMask.sprite);
            this._rollupTopRow = new DisplayRow(this);
            this._captionsSprite.addChild(this._rollupTopRow.sprite);
            this._rollupTimer = new Timer(ANIMATION_RESOLUTION_MS);
            this._rollupTimer.addEventListener(TimerEvent.TIMER, this.onTimer);
        }
        public function get displayObject():DisplayObject{
            return (this._mainSprite);
        }
        function get decoder():Decoder{
            return (this._decoder);
        }
        function get metrics():RendererMetrics{
            return (this._metrics);
        }
        function get customizations():RendererCustomizations{
            return (this._customizations);
        }
        public function get videoBounds():Rectangle{
            return (this._metrics.videoBounds);
        }
        public function set videoBounds(value:Rectangle):void{
            if (!value){
                throw (new ArgumentError());
            };
            this._metrics.videoBounds = value;
        }
        private function onMetricsChanged(event:Event):void{
            Log.debug2(LOG_CATEGORY, "metrics changed");
            this.redraw();
        }
        private function onCustomizationsChanged(event:Event):void{
            Log.debug2(LOG_CATEGORY, "customizations changed");
            this.abortRollUpAnimation();
            this.redraw();
        }
        private function onDecoderReset(event:DecoderEvent):void{
            Log.debug2(LOG_CATEGORY, "decoder reset");
            this.rebuildRows();
        }
        private function rebuildRows():void{
            var _local1:DisplayRow;
            var _local2:int;
            Log.debug3(LOG_CATEGORY, "rebuildRows");
            this.abortRollUpAnimation();
            for each (_local1 in this._rows) {
                _local1.deactivate();
            };
            for each (_local2 in this._decoder.getDisplayedRowNumbers()) {
                this.addRow(_local2);
            };
        }
        private function addRow(rowNumber:int):void{
            Log.debug2(LOG_CATEGORY, "add {0}", rowNumber);
            var _local2:DisplayRow = this.findInactiveRow();
            if (_local2 == null){
                Log.warn(LOG_CATEGORY, "tried to add row but there are no inactive rows!");
                return;
            };
            _local2.activate(rowNumber);
        }
        private function removeRow(rowNumber:int):void{
            Log.debug2(LOG_CATEGORY, "remove {0}", rowNumber);
            var _local2:DisplayRow = this.findRow(rowNumber);
            if (_local2 == null){
                return;
            };
            _local2.deactivate();
        }
        private function findInactiveRow():DisplayRow{
            var _local1:DisplayRow;
            for each (_local1 in this._rows) {
                if (!_local1.active){
                    return (_local1);
                };
            };
            return (null);
        }
        private function findRow(rowNumber:int):DisplayRow{
            var _local2:int = this.indexOfRow(rowNumber);
            if (_local2 == -1){
                return (null);
            };
            return (this._rows[_local2]);
        }
        private function indexOfRow(rowNumber:int):int{
            var _local3:DisplayRow;
            var _local2:int;
            while (_local2 < this._rows.length) {
                _local3 = this._rows[_local2];
                if (((_local3.active) && ((_local3.rowNumber == rowNumber)))){
                    return (_local2);
                };
                _local2++;
            };
            return (-1);
        }
        private function onDecoderSwapped(event:DecoderEvent):void{
            Log.debug2(LOG_CATEGORY, "decoder swapped");
            this.rebuildRows();
        }
        private function onDecoderCleared(event:DecoderEvent):void{
            Log.debug2(LOG_CATEGORY, "decoder cleared");
            this.rebuildRows();
        }
        private function onDecoderAddedRow(event:DecoderRowEvent):void{
            Log.debug2(LOG_CATEGORY, "decoder add row {0}", event.rowNumber);
            this.addRow(event.rowNumber);
        }
        private function onDecoderErasedRow(event:DecoderRowEvent):void{
            Log.debug2(LOG_CATEGORY, "decoder erase row {0}", event.rowNumber);
            this.removeRow(event.rowNumber);
        }
        private function onDecoderChangedRow(event:DecoderRowEvent):void{
            Log.debug3(LOG_CATEGORY, "decoder change row {0}", event.rowNumber);
            var _local2:DisplayRow = this.findRow(event.rowNumber);
            if (!_local2){
                return;
            };
            _local2.change();
        }
        private function onDecoderMovedRow(event:DecoderMovedRowEvent):void{
            Log.debug2(LOG_CATEGORY, "decoder moved row {0} {1}", event.oldRowNumber, event.rowNumber);
            var _local2:DisplayRow = this.findRow(event.oldRowNumber);
            if (!_local2){
                return;
            };
            _local2.move(event.rowNumber);
        }
        public function get font():String{
            return (this._customizations.font);
        }
        public function set font(value:String):void{
            this._customizations.font = value;
        }
        public function get textColor():int{
            return (this._customizations.textColor);
        }
        public function set textColor(value:int):void{
            this._customizations.textColor = value;
        }
        public function get backgroundColor():int{
            return (this._customizations.backgroundColor);
        }
        public function set backgroundColor(value:int):void{
            this._customizations.backgroundColor = value;
        }
        public function get textOpacity():Number{
            return (this._customizations.textOpacity);
        }
        public function set textOpacity(value:Number):void{
            this._customizations.textOpacity = value;
        }
        public function get backgroundOpacity():Number{
            return (this._customizations.backgroundOpacity);
        }
        public function set backgroundOpacity(value:Number):void{
            this._customizations.backgroundOpacity = value;
        }
        public function get edgeType():String{
            return (this._customizations.edgeType);
        }
        public function set edgeType(value:String):void{
            this._customizations.edgeType = value;
        }
        public function get edgeColor():int{
            return (this._customizations.edgeColor);
        }
        public function set edgeColor(value:int):void{
            this._customizations.edgeColor = value;
        }
        private function redraw():void{
            var _local1:DisplayRow;
            Log.debug3(LOG_CATEGORY, "render");
            for each (_local1 in this._rows) {
                _local1.redraw();
            };
            if (this._rollup){
                this.updateRollupSpritePositions();
                this._rollupTopRow.redraw();
                this._rollupMask.redraw();
            };
            this._debug.redraw();
        }
        private function onDecoderRender(event:DecoderEvent):void{
        }
        private function onDecoderStartRollupAnimation(event:DecoderEvent):void{
            var _local3:DisplayRow;
            Log.debug3(LOG_CATEGORY, "decoder start rollup");
            if (!this._customizations.enableRollUpAnimations){
                return;
            };
            if (this._rollup){
                this.abortRollUpAnimation();
            };
            Log.debug1(LOG_CATEGORY, "start rollup");
            this._rollup = true;
            var _local2:int = this.indexOfRow(this.decoder.rollupAnimationTopRowNumber);
            if (_local2 != -1){
                this._rollupTopRow.deactivate();
                _local3 = this._rollupTopRow;
                this._rollupTopRow = this._rows[_local2];
                this._rows[_local2] = _local3;
                this._rollupTopRow.move((this._rollupTopRow.rowNumber - 1));
            };
            this._rollupMask.activate(this._captionsSprite);
            this._rollupStartTimeMs = getTimer();
            this.updateRollupSpritePositions();
            this._rollupTimer.start();
        }
        private function onDecoderStopRollupAnimation(event:DecoderEvent):void{
            Log.debug3(LOG_CATEGORY, "decoder stop rollup");
            this.abortRollUpAnimation();
        }
        private function abortRollUpAnimation():void{
            if (!this._rollup){
                return;
            };
            Log.debug2(LOG_CATEGORY, "stop rollup");
            this._rollup = false;
            this._rollupTimer.stop();
            this._rollupMask.deactivate();
            this._rollupTopRow.deactivate();
            this._captionsSprite.x = 0;
            this._captionsSprite.y = 0;
        }
        private function get rollupStopTimeMs():Number{
            return ((this._rollupStartTimeMs + ANIMATION_DURATION_MS));
        }
        private function onTimer(event:TimerEvent):void{
            var _local2:Number = getTimer();
            Log.debug3(LOG_CATEGORY, "timer {0}", _local2);
            if (!this._rollup){
                return;
            };
            if (_local2 >= this.rollupStopTimeMs){
                Log.debug3(LOG_CATEGORY, "expired");
                this.abortRollUpAnimation();
                return;
            };
            this.updateRollupSpritePositions();
        }
        private function updateRollupSpritePositions():void{
            if (!this._rollup){
                return;
            };
            var _local1:Number = this._metrics.cellSize.y;
            var _local2:Number = getTimer();
            var _local3:int = (this._rollupStartTimeMs + ANIMATION_DURATION_MS);
            var _local4:Number = (_local2 - this._rollupStartTimeMs);
            var _local5:Number = (Math.min((_local4 / ANIMATION_DURATION_MS), 1) * -(_local1));
            if (_local5 < -(_local1)){
                _local5 = -(_local1);
            };
            Log.debug3(LOG_CATEGORY, "moving sprite {0}", _local5);
            this._captionsSprite.y = (_local1 + _local5);
        }
        public function get captionsSprite():Sprite{
            return (this._captionsSprite);
        }
        public function get enableRollUpAnimations():Boolean{
            return (this._customizations.enableRollUpAnimations);
        }
        public function set enableRollUpAnimations(value:Boolean):void{
            this._customizations.enableRollUpAnimations = value;
        }
        public function get safeAreaHeightPercent():Number{
            return (this._metrics.safeAreaHeightPercent);
        }
        public function set safeAreaHeightPercent(value:Number):void{
            this._metrics.safeAreaHeightPercent = value;
        }
        public function get overrideFontSize():Number{
            return (this._metrics.overrideFontSize);
        }
        public function set overrideFontSize(value:Number):void{
            this._metrics.overrideFontSize = value;
        }

    }
}//package com.adobe.cc.cea608 
﻿package com.adobe.cc.cea608 {
    import __AS3__.vec.*;
    import com.adobe.cc.cea608.*;

    final class MemoryRow {

        private var _number:int;
        private var _color:int;
        private var _underlined:Boolean;
        private var _italicized:Boolean;
        private var _contents:Vector.<Object>;
        private var _memory:Memory;

        public function MemoryRow(){
            this._number = 0;
            this._color = ForegroundColor.WHITE;
            this._underlined = false;
            this._italicized = false;
            this._contents = new Vector.<Object>(Decoder.COL_COUNT, true);
        }
        public function get memory():Memory{
            return (this._memory);
        }
        public function set memory(value:Memory):void{
            this._memory = value;
        }
        public function get isEmpty():Boolean{
            return (this._contents.every(function (o:Object, ... _args):Boolean{
                return ((o == null));
            }));
        }
        public function eraseCell(col:int):void{
            this.setCell(col, null);
        }
        public function setCellToMidrowCode(col:int, value:MidRowTextAttribute):void{
            if (!value){
                throw (new ArgumentError());
            };
            this.setCell(col, value);
        }
        public function setCellToBackgroundCode(col:int, value:BackgroundAttributeCode):void{
            if (!value){
                throw (new ArgumentError());
            };
            this.setCell(col, value);
        }
        public function setCellToChar(col:int, value:String):void{
            if (!value){
                throw (new ArgumentError());
            };
            this.setCell(col, value);
        }
        private function setCell(col:int, value:Object):void{
            if ((((col < 1)) || ((col > Decoder.COL_COUNT)))){
                return;
            };
            this._contents[(col - 1)] = value;
            this.onChanged();
        }
        public function getCell(col:int):Object{
            if ((((col < 1)) || ((col > Decoder.COL_COUNT)))){
                return (null);
            };
            return (this._contents[(col - 1)]);
        }
        public function set number(value:int):void{
            if (this._number == value){
                return;
            };
            this._number = value;
        }
        public function get number():int{
            return (this._number);
        }
        public function set color(value:int):void{
            if (this._color == value){
                return;
            };
            this._color = value;
            this.onChanged();
        }
        public function get color():int{
            return (this._color);
        }
        public function set underlined(value:Boolean):void{
            if (this._underlined == value){
                return;
            };
            this._underlined = value;
            this.onChanged();
        }
        public function get underlined():Boolean{
            return (this._underlined);
        }
        public function set italicized(value:Boolean):void{
            if (this._italicized == value){
                return;
            };
            this._italicized = value;
            this.onChanged();
        }
        public function get italicized():Boolean{
            return (this._italicized);
        }
        private function onChanged():void{
            if (this._memory){
                this._memory.dispatchEvent(new MemoryRowEvent(MemoryRowEvent.CHANGED_ROW, this));
            };
        }

    }
}//package com.adobe.cc.cea608 
﻿package com.adobe.cc.cea608 {
    import flash.display.*;
    import flash.geom.*;

    public class DisplayRollupMask {

        private var _renderer:DisplayObjectCaptionRenderer;
        private var _sprite:Sprite;
        private var _active:Boolean;
        private var _target:Sprite;

        public function DisplayRollupMask(renderer:DisplayObjectCaptionRenderer){
            this._renderer = renderer;
            this._sprite = new Sprite();
        }
        public function get sprite():Sprite{
            return (this._sprite);
        }
        public function activate(target:Sprite):void{
            this.deactivate();
            this._target = target;
            this._active = true;
            this.redraw();
            this._target.mask = this._sprite;
        }
        public function deactivate():void{
            if (!this._active){
                return;
            };
            this._target.mask = null;
            this._sprite.graphics.clear();
            this._active = false;
        }
        public function redraw():void{
            if (!this._active){
                return;
            };
            this._sprite.graphics.clear();
            var _local1:Rectangle = this._renderer.metrics.getCellRegionBounds(0, this._renderer.decoder.rollupAnimationTopRowNumber, (Decoder.COL_COUNT + 1), this._renderer.decoder.rollupAnimationBaseRow);
            this._sprite.graphics.beginFill(0);
            this._sprite.graphics.drawRect(_local1.left, _local1.top, _local1.width, _local1.height);
            this._sprite.graphics.endFill();
        }

    }
}//package com.adobe.cc.cea608 
﻿package com.adobe.cc.cea608 {

    public final class Cell {

        public var character:String;
        public var color:int;
        public var backgroundColor:int;
        public var backgroundOpacity:Number;
        public var italicized:Boolean;
        public var underlined:Boolean;

        public function Cell(character:String=" ", color:int=0xFFFFFF, backgroundColor:int=0, backgroundOpacity:Number=1, italicized:Boolean=false, underlined:Boolean=false){
            this.character = character;
            this.color = color;
            this.backgroundColor = backgroundColor;
            this.backgroundOpacity = backgroundOpacity;
            this.italicized = italicized;
            this.underlined = underlined;
        }
    }
}//package com.adobe.cc.cea608 
﻿package com.adobe.cc {

    public final class EdgeType {

        public static const NONE:String = "NONE";
        public static const RAISED:String = "RAISED";
        public static const DEPRESSED:String = "DEPRESSED";
        public static const UNIFORM:String = "UNIFORM";
        public static const LEFT_DROP_SHADOW:String = "LEFT_DROP_SHADOW";
        public static const RIGHT_DROP_SHADOW:String = "RIGHT_DROP_SHADOW";

    }
}//package com.adobe.cc 
﻿package com.adobe.cc {
    import flash.display.*;
    import flash.geom.*;

    public class SimpleCCDecoder extends CCDecoderImpl {

        public function get displayObject():DisplayObject{
            return (getDisplayObjectImpl());
        }
        public function get videoBounds():Rectangle{
            return (getVideoBoundsImpl());
        }
        public function set videoBounds(value:Rectangle):void{
            setVideoBoundsImpl(value);
        }
        public function onCaptionInfo(o):void{
            super.onCaptionInfoImpl(o);
        }

    }
}//package com.adobe.cc 
﻿package com.adobe.cc.debug {

    public final class LogEventLevel {

        private var _verbosity:int;
        private var _name:String;

        public function LogEventLevel(verbosity:int, name:String){
            if (!name){
                throw (new ArgumentError());
            };
            this._verbosity = verbosity;
            this._name = name;
        }
        public function get verbosity():int{
            return (this._verbosity);
        }
        public function get name():String{
            return (this._name);
        }

    }
}//package com.adobe.cc.debug 
﻿package com.adobe.cc.debug {

    public final class DebugSettings {

        private static var _log:LogSettings = new LogSettings();
        public static var drawDebug:Boolean = false;
        public static var verify:Boolean = false;
        public static var artificialErrorRate:Number = NaN;
        public static var doReverseBytes:Boolean = true;

        public static function get log():LogSettings{
            return (_log);
        }

    }
}//package com.adobe.cc.debug 
﻿package com.adobe.cc.debug {

    public final class LogSettings {

        private var _version:int = 0;
        private var _level:LogEventLevel;
        private var _includes:Array;
        private var _includeRegexs:Array;

        public function LogSettings(){
            this._level = Log.NONE;
            this._includes = ["*"];
            this._includeRegexs = [new RegExp("^.*$")];
            super();
        }
        function get version():int{
            return (this._version);
        }
        public function get level():LogEventLevel{
            return (this._level);
        }
        public function set level(value:LogEventLevel):void{
            if (!value){
                throw (new ArgumentError());
            };
            this._level = value;
            this._version++;
        }
        public function get includes():Array{
            return (this._includes.concat());
        }
        public function set includes(value:Array):void{
            var _local3:*;
            var _local4:String;
            var _local5:String;
            if (!value){
                throw (new ArgumentError());
            };
            var _local2:Array = [];
            for each (_local3 in value) {
                if (!(_local3 is String)){
                    throw (new ArgumentError());
                };
                _local4 = (_local3 as String);
                if (!_local4.match(/^[a-zA-Z0-9_.*]+$/)){
                    throw (new ArgumentError());
                };
                _local5 = _local4;
                _local5 = _local5.replace(".", "\\.");
                _local5 = _local5.replace("*", ".*");
                _local5 = (("^" + _local5) + "(\\..*)?$");
                _local2.push(new RegExp(_local5));
            };
            this._includeRegexs = _local2;
            this._version++;
        }
        function get includeRegexs():Array{
            return (this._includeRegexs.concat());
        }

    }
}//package com.adobe.cc.debug 
﻿package com.adobe.cc.debug {
    import flash.utils.*;

    public final class Log {

        public static const NONE:LogEventLevel = new LogEventLevel(int.MIN_VALUE, "none");
        public static const FATAL:LogEventLevel = new LogEventLevel(0, "fatal");
        public static const ERROR:LogEventLevel = new LogEventLevel(1, "error");
        public static const WARN:LogEventLevel = new LogEventLevel(2, "warn");
        public static const INFO:LogEventLevel = new LogEventLevel(3, "info");
        public static const DEBUG1:LogEventLevel = new LogEventLevel(4, "debug1");
        public static const DEBUG2:LogEventLevel = new LogEventLevel(5, "debug2");
        public static const DEBUG3:LogEventLevel = new LogEventLevel(6, "debug3");
        public static const ALL:LogEventLevel = new LogEventLevel(int.MAX_VALUE, "all");

        private static var _lastSettingsVersion:int = -1;
        private static var _enabled:Dictionary = new Dictionary();

        public static function isDebug1():Boolean{
            return (isEnabled(null, DEBUG1));
        }
        public static function isDebug2():Boolean{
            return (isEnabled(null, DEBUG2));
        }
        public static function isDebug3():Boolean{
            return (isEnabled(null, DEBUG3));
        }
        public static function isEnabled(category:String, level:LogEventLevel):Boolean{
            var _local3:Boolean;
            var _local4:RegExp;
            if (!level){
                return (false);
            };
            if (DebugSettings.log.level.verbosity < level.verbosity){
                return (false);
            };
            if (!category){
                return (true);
            };
            if (_lastSettingsVersion < DebugSettings.log.version){
                _lastSettingsVersion = DebugSettings.log.version;
                _enabled = new Dictionary();
            };
            if (_enabled[category] == null){
                _local3 = false;
                for each (_local4 in DebugSettings.log.includeRegexs) {
                    if (category.match(_local4)){
                        _local3 = true;
                        break;
                    };
                };
                _enabled[category] = _local3;
            };
            return (_enabled[category]);
        }
        public static function debug3(category:String, message:String, ... _args):void{
            logWithParams(category, DEBUG3, message, _args);
        }
        public static function debug2(category:String, message:String, ... _args):void{
            logWithParams(category, DEBUG2, message, _args);
        }
        public static function debug1(category:String, message:String, ... _args):void{
            logWithParams(category, DEBUG1, message, _args);
        }
        public static function info(category:String, message:String, ... _args):void{
            logWithParams(category, INFO, message, _args);
        }
        public static function warn(category:String, message:String, ... _args):void{
            logWithParams(category, WARN, message, _args);
        }
        public static function error(category:String, message:String, ... _args):void{
            logWithParams(category, ERROR, message, _args);
        }
        public static function fatal(category:String, message:String, ... _args):void{
            logWithParams(category, FATAL, message, _args);
        }
        public static function log(category:String, level:LogEventLevel, message:String, ... _args):void{
            logWithParams(category, level, message, _args);
        }
        public static function logWithParams(category:String, level:LogEventLevel, message:String, params:Array):void{
            var category:* = category;
            var level:* = level;
            var message:* = message;
            var params:* = params;
            if (!isEnabled(category, level)){
                return;
            };
            if (((((((!(category)) || (!(level)))) || (!(message)))) || (!(params)))){
                return;
            };
            var formattedMessage:* = message.replace(new RegExp("\\{[0-9]+[xbo]?\\}", "g"), function (s:String, a2, a3):String{
                s = s.substring(1, (s.length - 1));
                var _local4:* = s.substring((s.length - 1));
                var _local5:* = "";
                if ((((((_local4 == "b")) || ((_local4 == "x")))) || ((_local4 == "o")))){
                    _local5 = _local4;
                    s = s.substring(0, (s.length - 1));
                };
                var _local6:* = s;
                var _local7:* = parseInt(_local6);
                if (((((((((isNaN(_local7)) || ((_local7 > int.MAX_VALUE)))) || ((_local7 < int.MIN_VALUE)))) || ((_local7 < 0)))) || ((_local7 >= params.length)))){
                    return (s);
                };
                var _local8:* = params[_local7];
                if (_local5 != "o"){
                    if ((_local8 is ByteArray)){
                        return (bytesToHex((_local8 as ByteArray), category, level));
                    };
                    if ((((_local5 == "b")) || ((_local5 == "x")))){
                        if ((_local8 is int)){
                            _local8 = ((_local8 as int) as uint);
                        };
                        if ((_local8 is uint)){
                            if (_local5 == "b"){
                                return (byteToBinary((_local8 as uint)));
                            };
                            if (_local5 == "x"){
                                return (byteToHex((_local8 as uint)));
                            };
                        };
                    };
                };
                return (("" + _local8));
            });
            trace(category, "(", level.name, "):", formattedMessage);
        }
        private static function bytesToHex(bytes:ByteArray, category:String, level:LogEventLevel):String{
            if (!isEnabled(category, level)){
                return ("");
            };
            var _local4:uint = bytes.position;
            var _local5:String = "";
            while (bytes.bytesAvailable) {
                _local5 = (_local5 + byteToHex(bytes.readUnsignedByte()));
                if (bytes.bytesAvailable){
                    _local5 = (_local5 + " ");
                };
            };
            bytes.position = _local4;
            return (_local5);
        }
        private static function byteToHex(b:uint):String{
            if (!isEnabled(null, FATAL)){
                return ("");
            };
            return ((((b / 16).toString(16) + "") + (b % 16).toString(16)));
        }
        private static function byteToBinary(b:uint):String{
            if (!isEnabled(null, FATAL)){
                return ("");
            };
            var _local2:String = b.toString(2);
            while (_local2.length < 8) {
                _local2 = ("0" + _local2);
            };
            return (_local2);
        }

    }
}//package com.adobe.cc.debug 
﻿package com.adobe.cc.debug {
    import flash.utils.*;

    public class LoggedDataInput implements IDataInput {

        private var _inner:ByteArray;
        private var _category:String;
        private var _level:LogEventLevel;
        private var _didFirstRead:Boolean = false;

        public static function create(inner:ByteArray, category:String, level:LogEventLevel):IDataInput{
            if (((((!(inner)) || (!(category)))) || (!(level)))){
                return (inner);
            };
            if (!Log.isEnabled(category, level)){
                return (inner);
            };
            var _local4:LoggedDataInput = new (LoggedDataInput)();
            _local4._inner = inner;
            _local4._category = category;
            _local4._level = level;
            return (_local4);
        }
        private static function byteToHexString(b:uint):String{
            return (((b / 16).toString(16) + (b % 16).toString(16)));
        }

        private function log(message:String, ... _args):void{
            Log.logWithParams(this._category, this._level, message, _args);
        }
        private function loggedRead(f:Function, returnValueLabel:String=null){
            var f:* = f;
            var returnValueLabel = returnValueLabel;
            if (!this._didFirstRead){
                this.log("first read");
                this.log("objectEncoding = {0}", this._inner.objectEncoding);
                this.log("endian = {0}", this._inner.endian);
                this.log("position = {0}", this._inner.position);
                this.log("bytesAvailable = {0}", this._inner.bytesAvailable);
                this._didFirstRead = true;
            };
            var oldPosition:* = this._inner.position;
            var error:* = null;
            var returnValue:* = null;
            try {
                returnValue = f();
            } catch(theError:Error) {
                error = theError;
            };
            var newPosition:* = this._inner.position;
            var s:* = "";
            this._inner.position = oldPosition;
            var oldBytesAvailable:* = this._inner.bytesAvailable;
            while (this._inner.position != newPosition) {
                s = (s + (byteToHexString(this._inner.readUnsignedByte()) + " "));
            };
            this.log("read: {0}", s);
            if (error){
                this.log("error: {0}", error.toString());
                this.log("prior to error, bytesAvailable = {0}", oldBytesAvailable);
                throw (error);
            };
            if (returnValueLabel != null){
                this.log("{0}: {1}", returnValueLabel, returnValue);
            };
            return (returnValue);
        }
        public function readBytes(bytes:ByteArray, offset:uint=0, length:uint=0):void{
            var bytes:* = bytes;
            var offset:int = offset;
            var length:int = length;
            this.loggedRead(function ():String{
                _inner.readBytes(bytes, offset, length);
                return ("");
            }, (("bytes(" + length) + ")"));
        }
        public function readBoolean():Boolean{
            return (this.loggedRead(this._inner.readBoolean, "boolean"));
        }
        public function readByte():int{
            return (this.loggedRead(this._inner.readByte, "byte"));
        }
        public function readUnsignedByte():uint{
            return (this.loggedRead(this._inner.readUnsignedByte, "unsigned byte"));
        }
        public function readShort():int{
            return (this.loggedRead(this._inner.readShort, "short"));
        }
        public function readUnsignedShort():uint{
            return (this.loggedRead(this._inner.readUnsignedShort, "unsigned short"));
        }
        public function readInt():int{
            return (this.loggedRead(this._inner.readInt, "int"));
        }
        public function readUnsignedInt():uint{
            return (this.loggedRead(this._inner.readUnsignedInt, "unsigned int"));
        }
        public function readFloat():Number{
            return (this.loggedRead(this._inner.readFloat, "float"));
        }
        public function readDouble():Number{
            return (this.loggedRead(this._inner.readDouble, "double"));
        }
        public function readMultiByte(length:uint, charSet:String):String{
            var length:* = length;
            var charSet:* = charSet;
            return (this.loggedRead(function ():String{
                return (_inner.readMultiByte(length, charSet));
            }, (((("multibyte(" + length) + ", ") + charSet) + ")")));
        }
        public function readUTF():String{
            return (this.loggedRead(this._inner.readUTF, "utf"));
        }
        public function readUTFBytes(length:uint):String{
            return (this.loggedRead(this._inner.readUTFBytes, (("utf bytes(" + length) + ")")));
        }
        public function get bytesAvailable():uint{
            return (this._inner.bytesAvailable);
        }
        public function readObject(){
            return (this.loggedRead(function (){
                return (_inner.readObject());
            }, "object"));
        }
        public function get objectEncoding():uint{
            return (this._inner.objectEncoding);
        }
        public function set objectEncoding(version:uint):void{
            this.log("objectEncoding = {0}", version);
            this._inner.objectEncoding = version;
        }
        public function get endian():String{
            return (this._inner.endian);
        }
        public function set endian(type:String):void{
            this.log("endian = {0}", type);
            this._inner.endian = type;
        }

    }
}//package com.adobe.cc.debug 
﻿package com.adobe.serialization.json {

    public class JSONToken {

        private var _value:Object;
        private var _type:int;

        public function JSONToken(type:int=-1, value:Object=null){
            _type = type;
            _value = value;
        }
        public function set value(v:Object):void{
            _value = v;
        }
        public function get value():Object{
            return (_value);
        }
        public function set type(value:int):void{
            _type = value;
        }
        public function get type():int{
            return (_type);
        }

    }
}//package com.adobe.serialization.json 
﻿package com.adobe.serialization.json {
    import flash.utils.*;

    public class JSONEncoder {

        private var jsonString:String;

        public function JSONEncoder(value){
            jsonString = convertToString(value);
        }
        private function arrayToString(a:Array):String{
            var _local2:String;
            var _local3:int;
            _local2 = "";
            _local3 = 0;
            while (_local3 < a.length) {
                if (_local2.length > 0){
                    _local2 = (_local2 + ",");
                };
                _local2 = (_local2 + convertToString(a[_local3]));
                _local3++;
            };
            return ((("[" + _local2) + "]"));
        }
        private function convertToString(value):String{
            if ((value is String)){
                return (escapeString((value as String)));
            };
            if ((value is Number)){
                return (((isFinite((value as Number))) ? value.toString() : "null"));
            };
            if ((value is Boolean)){
                return (((value) ? "true" : "false"));
            };
            if ((value is Array)){
                return (arrayToString((value as Array)));
            };
            if ((((value is Object)) && (!((value == null))))){
                return (objectToString(value));
            };
            return ("null");
        }
        private function escapeString(str:String):String{
            var _local2:String;
            var _local3:String;
            var _local4:Number;
            var _local5:int;
            var _local6:String;
            var _local7:String;
            _local2 = "";
            _local4 = str.length;
            _local5 = 0;
            while (_local5 < _local4) {
                _local3 = str.charAt(_local5);
                switch (_local3){
                    case "\"":
                        _local2 = (_local2 + "\\\"");
                        break;
                    case "\\":
                        _local2 = (_local2 + "\\\\");
                        break;
                    case "\b":
                        _local2 = (_local2 + "\\b");
                        break;
                    case "\f":
                        _local2 = (_local2 + "\\f");
                        break;
                    case "\n":
                        _local2 = (_local2 + "\\n");
                        break;
                    case "\r":
                        _local2 = (_local2 + "\\r");
                        break;
                    case "\t":
                        _local2 = (_local2 + "\\t");
                        break;
                        if (_local3 < " "){
                            _local6 = _local3.charCodeAt(0).toString(16);
                            _local7 = ((_local6.length)==2) ? "00" : "000";
                            _local2 = (_local2 + (("\\u" + _local7) + _local6));
                        } else {
                            _local2 = (_local2 + _local3);
                        };
                };
                _local5++;
            };
            return ((("\"" + _local2) + "\""));
        }
        private function objectToString(o:Object):String{
            var s:* = null;
            var classInfo:* = null;
            var value:* = null;
            var key:* = null;
            var v:* = null;
            var o:* = o;
            s = "";
            classInfo = describeType(o);
            if (classInfo.@name.toString() == "Object"){
                for (key in o) {
                    value = o[key];
                    if (!(value is Function)){
                        if (s.length > 0){
                            s = (s + ",");
                        };
                        s = (s + ((escapeString(key) + ":") + convertToString(value)));
                    };
                };
            } else {
                for each (v in classInfo..*.(((name() == "variable")) || ((name() == "accessor")))) {
                    if (s.length > 0){
                        s = (s + ",");
                    };
                    s = (s + ((escapeString(v.@name.toString()) + ":") + convertToString(o[v.@name])));
                };
            };
            return ((("{" + s) + "}"));
        }
        public function getString():String{
            return (jsonString);
        }

    }
}//package com.adobe.serialization.json 
﻿package com.adobe.serialization.json {

    public class JSONParseError extends Error {

        private var _text:String;
        private var _location:int;

        public function JSONParseError(message:String="", location:int=0, text:String=""){
            super(message);
            _location = location;
            _text = text;
        }
        public function get text():String{
            return (_text);
        }
        public function get location():int{
            return (_location);
        }

    }
}//package com.adobe.serialization.json 
﻿package com.adobe.serialization.json {

    public class JSONTokenizer {

        private var loc:int;
        private var ch:String;
        private var obj:Object;
        private var jsonString:String;

        public function JSONTokenizer(s:String){
            jsonString = s;
            loc = 0;
            nextChar();
        }
        private function skipComments():void{
            if (ch == "/"){
                nextChar();
                switch (ch){
                    case "/":
                        do  {
                            nextChar();
                        } while (((!((ch == "\n"))) && (!((ch == "")))));
                        nextChar();
                        break;
                    case "*":
                        nextChar();
                        while (true) {
                            if (ch == "*"){
                                nextChar();
                                if (ch == "/"){
                                    nextChar();
                                    break;
                                };
                            } else {
                                nextChar();
                            };
                            if (ch == ""){
                                parseError("Multi-line comment not closed");
                            };
                        };
                        break;
                        parseError((("Unexpected " + ch) + " encountered (expecting '/' or '*' )"));
                };
            };
        }
        private function isDigit(ch:String):Boolean{
            return ((((ch >= "0")) && ((ch <= "9"))));
        }
        private function readNumber():JSONToken{
            var _local1:JSONToken;
            var _local2:String;
            var _local3:Number;
            _local1 = new JSONToken();
            _local1.type = JSONTokenType.NUMBER;
            _local2 = "";
            if (ch == "-"){
                _local2 = (_local2 + "-");
                nextChar();
            };
            if (!isDigit(ch)){
                parseError("Expecting a digit");
            };
            if (ch == "0"){
                _local2 = (_local2 + ch);
                nextChar();
                if (isDigit(ch)){
                    parseError("A digit cannot immediately follow 0");
                };
            } else {
                while (isDigit(ch)) {
                    _local2 = (_local2 + ch);
                    nextChar();
                };
            };
            if (ch == "."){
                _local2 = (_local2 + ".");
                nextChar();
                if (!isDigit(ch)){
                    parseError("Expecting a digit");
                };
                while (isDigit(ch)) {
                    _local2 = (_local2 + ch);
                    nextChar();
                };
            };
            if ((((ch == "e")) || ((ch == "E")))){
                _local2 = (_local2 + "e");
                nextChar();
                if ((((ch == "+")) || ((ch == "-")))){
                    _local2 = (_local2 + ch);
                    nextChar();
                };
                if (!isDigit(ch)){
                    parseError("Scientific notation number needs exponent value");
                };
                while (isDigit(ch)) {
                    _local2 = (_local2 + ch);
                    nextChar();
                };
            };
            _local3 = Number(_local2);
            if (((isFinite(_local3)) && (!(isNaN(_local3))))){
                _local1.value = _local3;
                return (_local1);
            };
            parseError((("Number " + _local3) + " is not valid!"));
            return (null);
        }
        private function nextChar():String{
            return ((ch = jsonString.charAt(loc++)));
        }
        public function getNextToken():JSONToken{
            var _local1:JSONToken;
            var _local2:String;
            var _local3:String;
            var _local4:String;
            _local1 = new JSONToken();
            skipIgnored();
            switch (ch){
                case "{":
                    _local1.type = JSONTokenType.LEFT_BRACE;
                    _local1.value = "{";
                    nextChar();
                    break;
                case "}":
                    _local1.type = JSONTokenType.RIGHT_BRACE;
                    _local1.value = "}";
                    nextChar();
                    break;
                case "[":
                    _local1.type = JSONTokenType.LEFT_BRACKET;
                    _local1.value = "[";
                    nextChar();
                    break;
                case "]":
                    _local1.type = JSONTokenType.RIGHT_BRACKET;
                    _local1.value = "]";
                    nextChar();
                    break;
                case ",":
                    _local1.type = JSONTokenType.COMMA;
                    _local1.value = ",";
                    nextChar();
                    break;
                case ":":
                    _local1.type = JSONTokenType.COLON;
                    _local1.value = ":";
                    nextChar();
                    break;
                case "t":
                    _local2 = ((("t" + nextChar()) + nextChar()) + nextChar());
                    if (_local2 == "true"){
                        _local1.type = JSONTokenType.TRUE;
                        _local1.value = true;
                        nextChar();
                    } else {
                        parseError(("Expecting 'true' but found " + _local2));
                    };
                    break;
                case "f":
                    _local3 = (((("f" + nextChar()) + nextChar()) + nextChar()) + nextChar());
                    if (_local3 == "false"){
                        _local1.type = JSONTokenType.FALSE;
                        _local1.value = false;
                        nextChar();
                    } else {
                        parseError(("Expecting 'false' but found " + _local3));
                    };
                    break;
                case "n":
                    _local4 = ((("n" + nextChar()) + nextChar()) + nextChar());
                    if (_local4 == "null"){
                        _local1.type = JSONTokenType.NULL;
                        _local1.value = null;
                        nextChar();
                    } else {
                        parseError(("Expecting 'null' but found " + _local4));
                    };
                    break;
                case "\"":
                    _local1 = readString();
                    break;
                    if (((isDigit(ch)) || ((ch == "-")))){
                        _local1 = readNumber();
                    } else {
                        if (ch == ""){
                            return (null);
                        };
                        parseError((("Unexpected " + ch) + " encountered"));
                    };
            };
            return (_local1);
        }
        private function skipWhite():void{
            while (isWhiteSpace(ch)) {
                nextChar();
            };
        }
        private function isWhiteSpace(ch:String):Boolean{
            return ((((((ch == " ")) || ((ch == "\t")))) || ((ch == "\n"))));
        }
        public function parseError(message:String):void{
            throw (new JSONParseError(message, loc, jsonString));
        }
        private function skipIgnored():void{
            skipWhite();
            skipComments();
            skipWhite();
        }
        private function isHexDigit(ch:String):Boolean{
            var _local2:String;
            _local2 = ch.toUpperCase();
            return (((isDigit(ch)) || ((((_local2 >= "A")) && ((_local2 <= "F"))))));
        }
        private function readString():JSONToken{
            var _local1:JSONToken;
            var _local2:String;
            var _local3:String;
            var _local4:int;
            _local1 = new JSONToken();
            _local1.type = JSONTokenType.STRING;
            _local2 = "";
            nextChar();
            while (((!((ch == "\""))) && (!((ch == ""))))) {
                if (ch == "\\"){
                    nextChar();
                    switch (ch){
                        case "\"":
                            _local2 = (_local2 + "\"");
                            break;
                        case "/":
                            _local2 = (_local2 + "/");
                            break;
                        case "\\":
                            _local2 = (_local2 + "\\");
                            break;
                        case "b":
                            _local2 = (_local2 + "\b");
                            break;
                        case "f":
                            _local2 = (_local2 + "\f");
                            break;
                        case "n":
                            _local2 = (_local2 + "\n");
                            break;
                        case "r":
                            _local2 = (_local2 + "\r");
                            break;
                        case "t":
                            _local2 = (_local2 + "\t");
                            break;
                        case "u":
                            _local3 = "";
                            _local4 = 0;
                            while (_local4 < 4) {
                                if (!isHexDigit(nextChar())){
                                    parseError((" Excepted a hex digit, but found: " + ch));
                                };
                                _local3 = (_local3 + ch);
                                _local4++;
                            };
                            _local2 = (_local2 + String.fromCharCode(parseInt(_local3, 16)));
                            break;
                            _local2 = (_local2 + ("\\" + ch));
                    };
                } else {
                    _local2 = (_local2 + ch);
                };
                nextChar();
            };
            if (ch == ""){
                parseError("Unterminated string literal");
            };
            nextChar();
            _local1.value = _local2;
            return (_local1);
        }

    }
}//package com.adobe.serialization.json 
﻿package com.adobe.serialization.json {

    public class JSONTokenType {

        public static const NUMBER:int = 11;
        public static const FALSE:int = 8;
        public static const RIGHT_BRACKET:int = 4;
        public static const NULL:int = 9;
        public static const TRUE:int = 7;
        public static const RIGHT_BRACE:int = 2;
        public static const UNKNOWN:int = -1;
        public static const COMMA:int = 0;
        public static const LEFT_BRACKET:int = 3;
        public static const STRING:int = 10;
        public static const LEFT_BRACE:int = 1;
        public static const COLON:int = 6;

    }
}//package com.adobe.serialization.json 
﻿package com.adobe.serialization.json {

    public class JSONDecoder {

        private var value;
        private var tokenizer:JSONTokenizer;
        private var token:JSONToken;

        public function JSONDecoder(s:String){
            tokenizer = new JSONTokenizer(s);
            nextToken();
            value = parseValue();
        }
        private function nextToken():JSONToken{
            return ((token = tokenizer.getNextToken()));
        }
        private function parseObject():Object{
            var _local1:Object;
            var _local2:String;
            _local1 = new Object();
            nextToken();
            if (token.type == JSONTokenType.RIGHT_BRACE){
                return (_local1);
            };
            if (token.type == JSONTokenType.STRING){
                _local2 = String(token.value);
                nextToken();
                if (token.type == JSONTokenType.COLON){
                    nextToken();
                    _local1[_local2] = parseValue();
                    nextToken();
                    if (token.type == JSONTokenType.RIGHT_BRACE){
                        return (_local1);
                    };
                    if (token.type == JSONTokenType.COMMA){
                        nextToken();
                    } else {
                        tokenizer.parseError(("Expecting } or , but found " + token.value));
                    };
                } else {
                    tokenizer.parseError(("Expecting : but found " + token.value));
                };
            } else {
                tokenizer.parseError(("Expecting string but found " + token.value));
            };
            //unresolved jump
        }
        private function parseArray():Array{
            var _local1:Array;
            _local1 = new Array();
            nextToken();
            if (token.type == JSONTokenType.RIGHT_BRACKET){
                return (_local1);
            };
            _local1.push(parseValue());
            nextToken();
            if (token.type == JSONTokenType.RIGHT_BRACKET){
                return (_local1);
            };
            if (token.type == JSONTokenType.COMMA){
                nextToken();
            } else {
                tokenizer.parseError(("Expecting ] or , but found " + token.value));
            };
            //unresolved jump
        }
        public function getValue(){
            return (value);
        }
        private function parseValue():Object{
            switch (token.type){
                case JSONTokenType.LEFT_BRACE:
                    return (parseObject());
                case JSONTokenType.LEFT_BRACKET:
                    return (parseArray());
                case JSONTokenType.STRING:
                case JSONTokenType.NUMBER:
                case JSONTokenType.TRUE:
                case JSONTokenType.FALSE:
                case JSONTokenType.NULL:
                    return (token.value);
                    tokenizer.parseError(("Unexpected " + token.value));
            };
            return (null);
        }

    }
}//package com.adobe.serialization.json 
﻿package com.adobe.serialization.json {

    public class JSON {

        public static function decode(s:String){
            var _local2:JSONDecoder;
            _local2 = new JSONDecoder(s);
            return (_local2.getValue());
        }
        public static function encode(o:Object):String{
            var _local2:JSONEncoder;
            _local2 = new JSONEncoder(o);
            return (_local2.getString());
        }

    }
}//package com.adobe.serialization.json 
﻿package com.adobe.utils {

    public class StringUtil {

        public static function beginsWith(input:String, prefix:String):Boolean{
            return ((prefix == input.substring(0, prefix.length)));
        }
        public static function trim(input:String):String{
            return (StringUtil.ltrim(StringUtil.rtrim(input)));
        }
        public static function stringsAreEqual(s1:String, s2:String, caseSensitive:Boolean):Boolean{
            if (caseSensitive){
                return ((s1 == s2));
            };
            return ((s1.toUpperCase() == s2.toUpperCase()));
        }
        public static function replace(input:String, replace:String, replaceWith:String):String{
            var _local4:String;
            var _local5:Boolean;
            var _local6:Number;
            var _local7:Number;
            var _local8:Number;
            var _local9:Number;
            _local4 = new String();
            _local5 = false;
            _local6 = input.length;
            _local7 = replace.length;
            _local8 = 0;
            for (;_local8 < _local6;_local8++) {
                if (input.charAt(_local8) == replace.charAt(0)){
                    _local5 = true;
                    _local9 = 0;
                    while (_local9 < _local7) {
                        if (input.charAt((_local8 + _local9)) != replace.charAt(_local9)){
                            _local5 = false;
                            break;
                        };
                        _local9++;
                    };
                    if (_local5){
                        _local4 = (_local4 + replaceWith);
                        _local8 = (_local8 + (_local7 - 1));
                        continue;
                    };
                };
                _local4 = (_local4 + input.charAt(_local8));
            };
            return (_local4);
        }
        public static function rtrim(input:String):String{
            var _local2:Number;
            var _local3:Number;
            _local2 = input.length;
            _local3 = _local2;
            while (_local3 > 0) {
                if (input.charCodeAt((_local3 - 1)) > 32){
                    return (input.substring(0, _local3));
                };
                _local3--;
            };
            return ("");
        }
        public static function endsWith(input:String, suffix:String):Boolean{
            return ((suffix == input.substring((input.length - suffix.length))));
        }
        public static function remove(input:String, remove:String):String{
            return (StringUtil.replace(input, remove, ""));
        }
        public static function ltrim(input:String):String{
            var _local2:Number;
            var _local3:Number;
            _local2 = input.length;
            _local3 = 0;
            while (_local3 < _local2) {
                if (input.charCodeAt(_local3) > 32){
                    return (input.substring(_local3));
                };
                _local3++;
            };
            return ("");
        }

    }
}//package com.adobe.utils 
﻿package com.adobe.utils {
    import mx.formatters.*;

    public class DateUtil {

        public static function compareDates(d1:Date, d2:Date):int{
            var _local3:Number;
            var _local4:Number;
            _local3 = d1.getTime();
            _local4 = d2.getTime();
            if (_local3 > _local4){
                return (-1);
            };
            if (_local3 < _local4){
                return (1);
            };
            return (0);
        }
        public static function getShortDayName(d:Date):String{
            return (DateBase.dayNamesShort[d.getDay()]);
        }
        public static function getShortYear(d:Date):String{
            var _local2:String;
            _local2 = String(d.getFullYear());
            if (_local2.length < 3){
                return (_local2);
            };
            return (_local2.substr((_local2.length - 2)));
        }
        public static function toRFC822(d:Date):String{
            var _local2:Number;
            var _local3:Number;
            var _local4:Number;
            var _local5:Number;
            var _local6:String;
            _local2 = d.getUTCDate();
            _local3 = d.getUTCHours();
            _local4 = d.getUTCMinutes();
            _local5 = d.getUTCSeconds();
            _local6 = new String();
            _local6 = (_local6 + DateBase.dayNamesShort[d.getUTCDay()]);
            _local6 = (_local6 + ", ");
            if (_local2 < 10){
                _local6 = (_local6 + "0");
            };
            _local6 = (_local6 + _local2);
            _local6 = (_local6 + " ");
            _local6 = (_local6 + DateBase.monthNamesShort[d.getUTCMonth()]);
            _local6 = (_local6 + " ");
            _local6 = (_local6 + d.getUTCFullYear());
            _local6 = (_local6 + " ");
            if (_local3 < 10){
                _local6 = (_local6 + "0");
            };
            _local6 = (_local6 + _local3);
            _local6 = (_local6 + ":");
            if (_local4 < 10){
                _local6 = (_local6 + "0");
            };
            _local6 = (_local6 + _local4);
            _local6 = (_local6 + ":");
            if (_local5 < 10){
                _local6 = (_local6 + "0");
            };
            _local6 = (_local6 + _local5);
            _local6 = (_local6 + " GMT");
            return (_local6);
        }
        public static function getShortMonthName(d:Date):String{
            return (DateBase.monthNamesShort[d.getMonth()]);
        }
        public static function getFullMonthName(d:Date):String{
            return (DateBase.monthNamesLong[d.getMonth()]);
        }
        public static function getFullDayName(d:Date):String{
            return (DateBase.dayNamesLong[d.getDay()]);
        }
        public static function getShortHour(d:Date):int{
            var _local2:int;
            _local2 = d.hours;
            if ((((_local2 == 0)) || ((_local2 == 12)))){
                return (12);
            };
            if (_local2 > 12){
                return ((_local2 - 12));
            };
            return (_local2);
        }
        public static function parseRFC822(str:String):Date{
            var finalDate:* = null;
            var dateParts:* = null;
            var day:* = null;
            var date:* = NaN;
            var month:* = NaN;
            var year:* = NaN;
            var timeParts:* = null;
            var hour:* = NaN;
            var minute:* = NaN;
            var second:* = NaN;
            var milliseconds:* = NaN;
            var timezone:* = null;
            var offset:* = NaN;
            var multiplier:* = NaN;
            var oHours:* = NaN;
            var oMinutes:* = NaN;
            var eStr:* = null;
            var str:* = str;
            try {
                dateParts = str.split(" ");
                day = null;
                if (dateParts[0].search(/\d/) == -1){
                    day = dateParts.shift().replace(/\W/, "");
                };
                date = Number(dateParts.shift());
                month = Number(DateUtil.getShortMonthIndex(dateParts.shift()));
                year = Number(dateParts.shift());
                timeParts = dateParts.shift().split(":");
                hour = int(timeParts.shift());
                minute = int(timeParts.shift());
                second = ((timeParts.length)>0) ? int(timeParts.shift()) : 0;
                milliseconds = Date.UTC(year, month, date, hour, minute, second, 0);
                timezone = dateParts.shift();
                offset = 0;
                if (timezone.search(/\d/) == -1){
                    switch (timezone){
                        case "UT":
                            offset = 0;
                            break;
                        case "UTC":
                            offset = 0;
                            break;
                        case "GMT":
                            offset = 0;
                            break;
                        case "EST":
                            offset = (-5 * 3600000);
                            break;
                        case "EDT":
                            offset = (-4 * 3600000);
                            break;
                        case "CST":
                            offset = (-6 * 3600000);
                            break;
                        case "CDT":
                            offset = (-5 * 3600000);
                            break;
                        case "MST":
                            offset = (-7 * 3600000);
                            break;
                        case "MDT":
                            offset = (-6 * 3600000);
                            break;
                        case "PST":
                            offset = (-8 * 3600000);
                            break;
                        case "PDT":
                            offset = (-7 * 3600000);
                            break;
                        case "Z":
                            offset = 0;
                            break;
                        case "A":
                            offset = (-1 * 3600000);
                            break;
                        case "M":
                            offset = (-12 * 3600000);
                            break;
                        case "N":
                            offset = (1 * 3600000);
                            break;
                        case "Y":
                            offset = (12 * 3600000);
                            break;
                            offset = 0;
                    };
                } else {
                    multiplier = 1;
                    oHours = 0;
                    oMinutes = 0;
                    if (timezone.length != 4){
                        if (timezone.charAt(0) == "-"){
                            multiplier = -1;
                        };
                        timezone = timezone.substr(1, 4);
                    };
                    oHours = Number(timezone.substr(0, 2));
                    oMinutes = Number(timezone.substr(2, 2));
                    offset = (((oHours * 3600000) + (oMinutes * 60000)) * multiplier);
                };
                finalDate = new Date((milliseconds - offset));
                if (finalDate.toString() == "Invalid Date"){
                    throw (new Error("This date does not conform to RFC822."));
                };
            } catch(e:Error) {
                eStr = (("Unable to parse the string [" + str) + "] into a date. ");
                eStr = (eStr + ("The internal error was: " + e.toString()));
                throw (new Error(eStr));
            };
            return (finalDate);
        }
        public static function parseW3CDTF(str:String):Date{
            var finalDate:* = null;
            var dateStr:* = null;
            var timeStr:* = null;
            var dateArr:* = null;
            var year:* = NaN;
            var month:* = NaN;
            var date:* = NaN;
            var multiplier:* = NaN;
            var offsetHours:* = NaN;
            var offsetMinutes:* = NaN;
            var offsetStr:* = null;
            var timeArr:* = null;
            var hour:* = NaN;
            var minutes:* = NaN;
            var secondsArr:* = null;
            var seconds:* = NaN;
            var milliseconds:* = NaN;
            var utc:* = NaN;
            var offset:* = NaN;
            var eStr:* = null;
            var str:* = str;
            try {
                dateStr = str.substring(0, str.indexOf("T"));
                timeStr = str.substring((str.indexOf("T") + 1), str.length);
                dateArr = dateStr.split("-");
                year = Number(dateArr.shift());
                month = Number(dateArr.shift());
                date = Number(dateArr.shift());
                if (timeStr.indexOf("Z") != -1){
                    multiplier = 1;
                    offsetHours = 0;
                    offsetMinutes = 0;
                    timeStr = timeStr.replace("Z", "");
                } else {
                    if (timeStr.indexOf("+") != -1){
                        multiplier = 1;
                        offsetStr = timeStr.substring((timeStr.indexOf("+") + 1), timeStr.length);
                        offsetHours = Number(offsetStr.substring(0, offsetStr.indexOf(":")));
                        offsetMinutes = Number(offsetStr.substring((offsetStr.indexOf(":") + 1), offsetStr.length));
                        timeStr = timeStr.substring(0, timeStr.indexOf("+"));
                    } else {
                        multiplier = -1;
                        offsetStr = timeStr.substring((timeStr.indexOf("-") + 1), timeStr.length);
                        offsetHours = Number(offsetStr.substring(0, offsetStr.indexOf(":")));
                        offsetMinutes = Number(offsetStr.substring((offsetStr.indexOf(":") + 1), offsetStr.length));
                        timeStr = timeStr.substring(0, timeStr.indexOf("-"));
                    };
                };
                timeArr = timeStr.split(":");
                hour = Number(timeArr.shift());
                minutes = Number(timeArr.shift());
                secondsArr = ((timeArr.length)>0) ? String(timeArr.shift()).split(".") : null;
                seconds = ((((!((secondsArr == null))) && ((secondsArr.length > 0)))) ? Number(secondsArr.shift()) : 0);
                milliseconds = ((((!((secondsArr == null))) && ((secondsArr.length > 0)))) ? Number(secondsArr.shift()) : 0);
                utc = Date.UTC(year, (month - 1), date, hour, minutes, seconds, milliseconds);
                offset = (((offsetHours * 3600000) + (offsetMinutes * 60000)) * multiplier);
                finalDate = new Date((utc - offset));
                if (finalDate.toString() == "Invalid Date"){
                    throw (new Error("This date does not conform to W3CDTF."));
                };
            } catch(e:Error) {
                eStr = (("Unable to parse the string [" + str) + "] into a date. ");
                eStr = (eStr + ("The internal error was: " + e.toString()));
                throw (new Error(eStr));
            };
            return (finalDate);
        }
        public static function getFullMonthIndex(m:String):int{
            return (DateBase.monthNamesLong.indexOf(m));
        }
        public static function getShortMonthIndex(m:String):int{
            return (DateBase.monthNamesShort.indexOf(m));
        }
        public static function toW3CDTF(d:Date, includeMilliseconds:Boolean=false):String{
            var _local3:Number;
            var _local4:Number;
            var _local5:Number;
            var _local6:Number;
            var _local7:Number;
            var _local8:Number;
            var _local9:String;
            _local3 = d.getUTCDate();
            _local4 = d.getUTCMonth();
            _local5 = d.getUTCHours();
            _local6 = d.getUTCMinutes();
            _local7 = d.getUTCSeconds();
            _local8 = d.getUTCMilliseconds();
            _local9 = new String();
            _local9 = (_local9 + d.getUTCFullYear());
            _local9 = (_local9 + "-");
            if ((_local4 + 1) < 10){
                _local9 = (_local9 + "0");
            };
            _local9 = (_local9 + (_local4 + 1));
            _local9 = (_local9 + "-");
            if (_local3 < 10){
                _local9 = (_local9 + "0");
            };
            _local9 = (_local9 + _local3);
            _local9 = (_local9 + "T");
            if (_local5 < 10){
                _local9 = (_local9 + "0");
            };
            _local9 = (_local9 + _local5);
            _local9 = (_local9 + ":");
            if (_local6 < 10){
                _local9 = (_local9 + "0");
            };
            _local9 = (_local9 + _local6);
            _local9 = (_local9 + ":");
            if (_local7 < 10){
                _local9 = (_local9 + "0");
            };
            _local9 = (_local9 + _local7);
            if (((includeMilliseconds) && ((_local8 > 0)))){
                _local9 = (_local9 + ".");
                _local9 = (_local9 + _local8);
            };
            _local9 = (_local9 + "-00:00");
            return (_local9);
        }
        public static function getFullDayIndex(d:String):int{
            return (DateBase.dayNamesLong.indexOf(d));
        }
        public static function getShortDayIndex(d:String):int{
            return (DateBase.dayNamesShort.indexOf(d));
        }
        public static function getAMPM(d:Date):String{
            return (((d.hours)>11) ? "PM" : "AM");
        }

    }
}//package com.adobe.utils 
﻿package com.adobe.utils {

    public class IntUtil {

        private static var hexChars:String = "0123456789abcdef";

        public static function toHex(n:int, bigEndian:Boolean=false):String{
            var _local3:String;
            var _local4:int;
            var _local5:int;
            _local3 = "";
            if (bigEndian){
                _local4 = 0;
                while (_local4 < 4) {
                    _local3 = (_local3 + (hexChars.charAt(((n >> (((3 - _local4) * 8) + 4)) & 15)) + hexChars.charAt(((n >> ((3 - _local4) * 8)) & 15))));
                    _local4++;
                };
            } else {
                _local5 = 0;
                while (_local5 < 4) {
                    _local3 = (_local3 + (hexChars.charAt(((n >> ((_local5 * 8) + 4)) & 15)) + hexChars.charAt(((n >> (_local5 * 8)) & 15))));
                    _local5++;
                };
            };
            return (_local3);
        }
        public static function ror(x:int, n:int):uint{
            var _local3:int;
            _local3 = (32 - n);
            return (((x << _local3) | (x >>> (32 - _local3))));
        }
        public static function rol(x:int, n:int):int{
            return (((x << n) | (x >>> (32 - n))));
        }

    }
}//package com.adobe.utils 
﻿package com.gdcsoft.utils {
    import flash.utils.*;

    public class StackTrace {

        public function StackTrace(){
            throw (new Error("Please use static function to get stack trace."));
        }
        public static function getStack(prefix:String=null):String{
            var _local2 = null;
            try {
                throw (new Error((("Stack trace at " + getTimer()) + ".")));
            } catch(e:Error) {
                _local2 = e.getStackTrace();
                if (_local2){
                    _local2 = _local2.substr("Error: ".length);
                };
            };
            if (prefix){
                return (((prefix + "\n") + _local2));
            };
            return (_local2);
        }

    }
}//package com.gdcsoft.utils 
﻿package com.gdcsoft.utils {
    import flash.events.*;
    import __AS3__.vec.*;

    public class ListenerManager {

        private var taskList:Vector.<ListenerHandler>;

        public function ListenerManager(){
            taskList = new Vector.<ListenerHandler>();
            super();
        }
        public function addTask(type:String, listener:Function, useCapture:Boolean=false, priority:int=0, useWeakReference:Boolean=false):void{
            var _local6:ListenerHandler = new ListenerHandler(type, listener, useCapture, priority, useWeakReference);
            taskList.push(_local6);
        }
        public function apply(object:IEventDispatcher, listening:Boolean):void{
            var _local3:int;
            _local3 = 0;
            while (_local3 < taskList.length) {
                taskList[_local3].apply(object, listening);
                _local3++;
            };
        }
        public function dispose():void{
            var _local1 = null;
            while (taskList.length) {
                _local1 = taskList.pop();
                _local1.dispose();
            };
        }

    }
}//package com.gdcsoft.utils 

import flash.events.*;

class ListenerHandler {

    public var type:String;
    public var listener:Function;
    public var useCapture:Boolean = false;
    public var priority:int = 0;
    public var useWeakReference:Boolean = false;

    public function ListenerHandler(type:String, listener:Function, useCapture:Boolean=false, priority:int=0, useWeakReference:Boolean=false){
        this.type = type;
        this.listener = listener;
        this.useCapture = useCapture;
        this.priority = priority;
        this.useWeakReference = useWeakReference;
    }
    public function apply(object:IEventDispatcher, listening:Boolean):void{
        if (listening){
            if (object){
            };
            object.addEventListener(type, listener, useCapture, priority, useWeakReference);
        } else {
            object.removeEventListener(type, listener, useCapture);
        };
    }
    public function dispose():void{
        listener = null;
    }

}